(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, copyDefault, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toESM = (module, isNodeMode) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", !isNodeMode && module && module.__esModule ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // node_modules/pdfjs-dist/legacy/build/pdf.worker.js
  var require_pdf_worker = __commonJS({
    "node_modules/pdfjs-dist/legacy/build/pdf.worker.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define("pdfjs-dist/build/pdf.worker", [], factory);
        else if (typeof exports === "object")
          exports["pdfjs-dist/build/pdf.worker"] = factory();
        else
          root["pdfjs-dist/build/pdf.worker"] = root.pdfjsWorker = factory();
      })(exports, function() {
        return (() => {
          var __webpack_modules__ = [
            ,
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.WorkerTask = exports2.WorkerMessageHandler = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _pdf_manager = __w_pdfjs_require__2(137);
              var _writer = __w_pdfjs_require__2(201);
              var _is_node = __w_pdfjs_require__2(6);
              var _message_handler = __w_pdfjs_require__2(229);
              var _worker_stream = __w_pdfjs_require__2(230);
              var _core_utils = __w_pdfjs_require__2(139);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _toArray(arr) {
                return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
              }
              function _iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                  return Array.from(iter);
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var WorkerTask = /* @__PURE__ */ function() {
                function WorkerTask2(name) {
                  _classCallCheck(this, WorkerTask2);
                  this.name = name;
                  this.terminated = false;
                  this._capability = (0, _util.createPromiseCapability)();
                }
                _createClass(WorkerTask2, [{
                  key: "finished",
                  get: function get() {
                    return this._capability.promise;
                  }
                }, {
                  key: "finish",
                  value: function finish() {
                    this._capability.resolve();
                  }
                }, {
                  key: "terminate",
                  value: function terminate() {
                    this.terminated = true;
                  }
                }, {
                  key: "ensureNotTerminated",
                  value: function ensureNotTerminated() {
                    if (this.terminated) {
                      throw new Error("Worker task was terminated");
                    }
                  }
                }]);
                return WorkerTask2;
              }();
              exports2.WorkerTask = WorkerTask;
              var WorkerMessageHandler = /* @__PURE__ */ function() {
                function WorkerMessageHandler2() {
                  _classCallCheck(this, WorkerMessageHandler2);
                }
                _createClass(WorkerMessageHandler2, null, [{
                  key: "setup",
                  value: function setup(handler, port) {
                    var testMessageProcessed = false;
                    handler.on("test", function wphSetupTest(data) {
                      if (testMessageProcessed) {
                        return;
                      }
                      testMessageProcessed = true;
                      handler.send("test", data instanceof Uint8Array && data[0] === 255);
                    });
                    handler.on("configure", function wphConfigure(data) {
                      (0, _util.setVerbosityLevel)(data.verbosity);
                    });
                    handler.on("GetDocRequest", function wphSetupDoc(data) {
                      return WorkerMessageHandler2.createDocumentHandler(data, port);
                    });
                  }
                }, {
                  key: "createDocumentHandler",
                  value: function createDocumentHandler(docParams, port) {
                    var pdfManager;
                    var terminated = false;
                    var cancelXHRs = null;
                    var WorkerTasks = [];
                    var verbosity = (0, _util.getVerbosityLevel)();
                    var apiVersion = docParams.apiVersion;
                    var workerVersion = "2.12.313";
                    if (apiVersion !== workerVersion) {
                      throw new Error('The API version "'.concat(apiVersion, '" does not match ') + 'the Worker version "'.concat(workerVersion, '".'));
                    }
                    var enumerableProperties = [];
                    for (var property in []) {
                      enumerableProperties.push(property);
                    }
                    if (enumerableProperties.length) {
                      throw new Error("The `Array.prototype` contains unexpected enumerable properties: " + enumerableProperties.join(", ") + "; thus breaking e.g. `for...in` iteration of `Array`s.");
                    }
                    var docId = docParams.docId;
                    var docBaseUrl = docParams.docBaseUrl;
                    var workerHandlerName = docParams.docId + "_worker";
                    var handler = new _message_handler.MessageHandler(workerHandlerName, docId, port);
                    function ensureNotTerminated() {
                      if (terminated) {
                        throw new Error("Worker was terminated");
                      }
                    }
                    function startWorkerTask(task) {
                      WorkerTasks.push(task);
                    }
                    function finishWorkerTask(task) {
                      task.finish();
                      var i = WorkerTasks.indexOf(task);
                      WorkerTasks.splice(i, 1);
                    }
                    function loadDocument(_x) {
                      return _loadDocument.apply(this, arguments);
                    }
                    function _loadDocument() {
                      _loadDocument = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(recoveryMode) {
                        var isPureXfa, task, _yield$Promise$all, _yield$Promise$all2, numPages, fingerprints, htmlForXfa;
                        return _regenerator["default"].wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                _context.next = 2;
                                return pdfManager.ensureDoc("checkHeader");
                              case 2:
                                _context.next = 4;
                                return pdfManager.ensureDoc("parseStartXRef");
                              case 4:
                                _context.next = 6;
                                return pdfManager.ensureDoc("parse", [recoveryMode]);
                              case 6:
                                _context.next = 8;
                                return pdfManager.ensureDoc("checkFirstPage", [recoveryMode]);
                              case 8:
                                _context.next = 10;
                                return pdfManager.ensureDoc("checkLastPage", [recoveryMode]);
                              case 10:
                                _context.next = 12;
                                return pdfManager.ensureDoc("isPureXfa");
                              case 12:
                                isPureXfa = _context.sent;
                                if (!isPureXfa) {
                                  _context.next = 18;
                                  break;
                                }
                                task = new WorkerTask("loadXfaFonts");
                                startWorkerTask(task);
                                _context.next = 18;
                                return Promise.all([pdfManager.loadXfaFonts(handler, task)["catch"](function(reason) {
                                }).then(function() {
                                  return finishWorkerTask(task);
                                }), pdfManager.loadXfaImages()]);
                              case 18:
                                _context.next = 20;
                                return Promise.all([pdfManager.ensureDoc("numPages"), pdfManager.ensureDoc("fingerprints")]);
                              case 20:
                                _yield$Promise$all = _context.sent;
                                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
                                numPages = _yield$Promise$all2[0];
                                fingerprints = _yield$Promise$all2[1];
                                if (!isPureXfa) {
                                  _context.next = 30;
                                  break;
                                }
                                _context.next = 27;
                                return pdfManager.ensureDoc("htmlForXfa");
                              case 27:
                                _context.t0 = _context.sent;
                                _context.next = 31;
                                break;
                              case 30:
                                _context.t0 = null;
                              case 31:
                                htmlForXfa = _context.t0;
                                return _context.abrupt("return", {
                                  numPages,
                                  fingerprints,
                                  htmlForXfa
                                });
                              case 33:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _callee);
                      }));
                      return _loadDocument.apply(this, arguments);
                    }
                    function getPdfManager(data, evaluatorOptions, enableXfa) {
                      var pdfManagerCapability = (0, _util.createPromiseCapability)();
                      var newPdfManager;
                      var source = data.source;
                      if (source.data) {
                        try {
                          newPdfManager = new _pdf_manager.LocalPdfManager(docId, source.data, source.password, handler, evaluatorOptions, enableXfa, docBaseUrl);
                          pdfManagerCapability.resolve(newPdfManager);
                        } catch (ex) {
                          pdfManagerCapability.reject(ex);
                        }
                        return pdfManagerCapability.promise;
                      }
                      var pdfStream, cachedChunks = [];
                      try {
                        pdfStream = new _worker_stream.PDFWorkerStream(handler);
                      } catch (ex) {
                        pdfManagerCapability.reject(ex);
                        return pdfManagerCapability.promise;
                      }
                      var fullRequest = pdfStream.getFullReader();
                      fullRequest.headersReady.then(function() {
                        if (!fullRequest.isRangeSupported) {
                          return;
                        }
                        var disableAutoFetch = source.disableAutoFetch || fullRequest.isStreamingSupported;
                        newPdfManager = new _pdf_manager.NetworkPdfManager(docId, pdfStream, {
                          msgHandler: handler,
                          password: source.password,
                          length: fullRequest.contentLength,
                          disableAutoFetch,
                          rangeChunkSize: source.rangeChunkSize
                        }, evaluatorOptions, enableXfa, docBaseUrl);
                        for (var i = 0; i < cachedChunks.length; i++) {
                          newPdfManager.sendProgressiveData(cachedChunks[i]);
                        }
                        cachedChunks = [];
                        pdfManagerCapability.resolve(newPdfManager);
                        cancelXHRs = null;
                      })["catch"](function(reason) {
                        pdfManagerCapability.reject(reason);
                        cancelXHRs = null;
                      });
                      var loaded = 0;
                      var flushChunks = function flushChunks2() {
                        var pdfFile = (0, _util.arraysToBytes)(cachedChunks);
                        if (source.length && pdfFile.length !== source.length) {
                          (0, _util.warn)("reported HTTP length is different from actual");
                        }
                        try {
                          newPdfManager = new _pdf_manager.LocalPdfManager(docId, pdfFile, source.password, handler, evaluatorOptions, enableXfa, docBaseUrl);
                          pdfManagerCapability.resolve(newPdfManager);
                        } catch (ex) {
                          pdfManagerCapability.reject(ex);
                        }
                        cachedChunks = [];
                      };
                      var readPromise = new Promise(function(resolve, reject) {
                        var readChunk = function readChunk2(_ref) {
                          var value = _ref.value, done = _ref.done;
                          try {
                            ensureNotTerminated();
                            if (done) {
                              if (!newPdfManager) {
                                flushChunks();
                              }
                              cancelXHRs = null;
                              return;
                            }
                            loaded += (0, _util.arrayByteLength)(value);
                            if (!fullRequest.isStreamingSupported) {
                              handler.send("DocProgress", {
                                loaded,
                                total: Math.max(loaded, fullRequest.contentLength || 0)
                              });
                            }
                            if (newPdfManager) {
                              newPdfManager.sendProgressiveData(value);
                            } else {
                              cachedChunks.push(value);
                            }
                            fullRequest.read().then(readChunk2, reject);
                          } catch (e) {
                            reject(e);
                          }
                        };
                        fullRequest.read().then(readChunk, reject);
                      });
                      readPromise["catch"](function(e) {
                        pdfManagerCapability.reject(e);
                        cancelXHRs = null;
                      });
                      cancelXHRs = function cancelXHRs2(reason) {
                        pdfStream.cancelAllRequests(reason);
                      };
                      return pdfManagerCapability.promise;
                    }
                    function setupDoc(data) {
                      function onSuccess(doc) {
                        ensureNotTerminated();
                        handler.send("GetDoc", {
                          pdfInfo: doc
                        });
                      }
                      function onFailure(ex) {
                        ensureNotTerminated();
                        if (ex instanceof _util.PasswordException) {
                          var task = new WorkerTask("PasswordException: response ".concat(ex.code));
                          startWorkerTask(task);
                          handler.sendWithPromise("PasswordRequest", ex).then(function(_ref2) {
                            var password = _ref2.password;
                            finishWorkerTask(task);
                            pdfManager.updatePassword(password);
                            pdfManagerReady();
                          })["catch"](function() {
                            finishWorkerTask(task);
                            handler.send("DocException", ex);
                          });
                        } else if (ex instanceof _util.InvalidPDFException || ex instanceof _util.MissingPDFException || ex instanceof _util.UnexpectedResponseException || ex instanceof _util.UnknownErrorException) {
                          handler.send("DocException", ex);
                        } else {
                          handler.send("DocException", new _util.UnknownErrorException(ex.message, ex.toString()));
                        }
                      }
                      function pdfManagerReady() {
                        ensureNotTerminated();
                        loadDocument(false).then(onSuccess, function(reason) {
                          ensureNotTerminated();
                          if (!(reason instanceof _core_utils.XRefParseException)) {
                            onFailure(reason);
                            return;
                          }
                          pdfManager.requestLoadedStream();
                          pdfManager.onLoadedStream().then(function() {
                            ensureNotTerminated();
                            loadDocument(true).then(onSuccess, onFailure);
                          });
                        });
                      }
                      ensureNotTerminated();
                      var evaluatorOptions = {
                        maxImageSize: data.maxImageSize,
                        disableFontFace: data.disableFontFace,
                        ignoreErrors: data.ignoreErrors,
                        isEvalSupported: data.isEvalSupported,
                        fontExtraProperties: data.fontExtraProperties,
                        useSystemFonts: data.useSystemFonts,
                        cMapUrl: data.cMapUrl,
                        standardFontDataUrl: data.standardFontDataUrl
                      };
                      getPdfManager(data, evaluatorOptions, data.enableXfa).then(function(newPdfManager) {
                        if (terminated) {
                          newPdfManager.terminate(new _util.AbortException("Worker was terminated."));
                          throw new Error("Worker was terminated");
                        }
                        pdfManager = newPdfManager;
                        pdfManager.onLoadedStream().then(function(stream) {
                          handler.send("DataLoaded", {
                            length: stream.bytes.byteLength
                          });
                        });
                      }).then(pdfManagerReady, onFailure);
                    }
                    handler.on("GetPage", function wphSetupGetPage(data) {
                      return pdfManager.getPage(data.pageIndex).then(function(page) {
                        return Promise.all([pdfManager.ensure(page, "rotate"), pdfManager.ensure(page, "ref"), pdfManager.ensure(page, "userUnit"), pdfManager.ensure(page, "view")]).then(function(_ref3) {
                          var _ref4 = _slicedToArray(_ref3, 4), rotate = _ref4[0], ref = _ref4[1], userUnit = _ref4[2], view = _ref4[3];
                          return {
                            rotate,
                            ref,
                            userUnit,
                            view
                          };
                        });
                      });
                    });
                    handler.on("GetPageIndex", function wphSetupGetPageIndex(_ref5) {
                      var ref = _ref5.ref;
                      var pageRef = _primitives.Ref.get(ref.num, ref.gen);
                      return pdfManager.ensureCatalog("getPageIndex", [pageRef]);
                    });
                    handler.on("GetDestinations", function wphSetupGetDestinations(data) {
                      return pdfManager.ensureCatalog("destinations");
                    });
                    handler.on("GetDestination", function wphSetupGetDestination(data) {
                      return pdfManager.ensureCatalog("getDestination", [data.id]);
                    });
                    handler.on("GetPageLabels", function wphSetupGetPageLabels(data) {
                      return pdfManager.ensureCatalog("pageLabels");
                    });
                    handler.on("GetPageLayout", function wphSetupGetPageLayout(data) {
                      return pdfManager.ensureCatalog("pageLayout");
                    });
                    handler.on("GetPageMode", function wphSetupGetPageMode(data) {
                      return pdfManager.ensureCatalog("pageMode");
                    });
                    handler.on("GetViewerPreferences", function(data) {
                      return pdfManager.ensureCatalog("viewerPreferences");
                    });
                    handler.on("GetOpenAction", function(data) {
                      return pdfManager.ensureCatalog("openAction");
                    });
                    handler.on("GetAttachments", function wphSetupGetAttachments(data) {
                      return pdfManager.ensureCatalog("attachments");
                    });
                    handler.on("GetJavaScript", function wphSetupGetJavaScript(data) {
                      return pdfManager.ensureCatalog("javaScript");
                    });
                    handler.on("GetDocJSActions", function wphSetupGetDocJSActions(data) {
                      return pdfManager.ensureCatalog("jsActions");
                    });
                    handler.on("GetPageJSActions", function(_ref6) {
                      var pageIndex = _ref6.pageIndex;
                      return pdfManager.getPage(pageIndex).then(function(page) {
                        return pdfManager.ensure(page, "jsActions");
                      });
                    });
                    handler.on("GetOutline", function wphSetupGetOutline(data) {
                      return pdfManager.ensureCatalog("documentOutline");
                    });
                    handler.on("GetOptionalContentConfig", function(data) {
                      return pdfManager.ensureCatalog("optionalContentConfig");
                    });
                    handler.on("GetPermissions", function(data) {
                      return pdfManager.ensureCatalog("permissions");
                    });
                    handler.on("GetMetadata", function wphSetupGetMetadata(data) {
                      return Promise.all([pdfManager.ensureDoc("documentInfo"), pdfManager.ensureCatalog("metadata")]);
                    });
                    handler.on("GetMarkInfo", function wphSetupGetMarkInfo(data) {
                      return pdfManager.ensureCatalog("markInfo");
                    });
                    handler.on("GetData", function wphSetupGetData(data) {
                      pdfManager.requestLoadedStream();
                      return pdfManager.onLoadedStream().then(function(stream) {
                        return stream.bytes;
                      });
                    });
                    handler.on("GetAnnotations", function(_ref7) {
                      var pageIndex = _ref7.pageIndex, intent = _ref7.intent;
                      return pdfManager.getPage(pageIndex).then(function(page) {
                        return page.getAnnotationsData(intent);
                      });
                    });
                    handler.on("GetFieldObjects", function(data) {
                      return pdfManager.ensureDoc("fieldObjects");
                    });
                    handler.on("HasJSActions", function(data) {
                      return pdfManager.ensureDoc("hasJSActions");
                    });
                    handler.on("GetCalculationOrderIds", function(data) {
                      return pdfManager.ensureDoc("calculationOrderIds");
                    });
                    handler.on("SaveDocument", function(_ref8) {
                      var isPureXfa = _ref8.isPureXfa, numPages = _ref8.numPages, annotationStorage = _ref8.annotationStorage, filename = _ref8.filename;
                      pdfManager.requestLoadedStream();
                      var promises = [pdfManager.onLoadedStream(), pdfManager.ensureCatalog("acroForm"), pdfManager.ensureCatalog("acroFormRef"), pdfManager.ensureDoc("xref"), pdfManager.ensureDoc("startXRef")];
                      if (isPureXfa) {
                        promises.push(pdfManager.serializeXfaData(annotationStorage));
                      } else {
                        var _loop = function _loop2(pageIndex2) {
                          promises.push(pdfManager.getPage(pageIndex2).then(function(page) {
                            var task = new WorkerTask("Save: page ".concat(pageIndex2));
                            return page.save(handler, task, annotationStorage)["finally"](function() {
                              finishWorkerTask(task);
                            });
                          }));
                        };
                        for (var pageIndex = 0; pageIndex < numPages; pageIndex++) {
                          _loop(pageIndex);
                        }
                      }
                      return Promise.all(promises).then(function(_ref9) {
                        var _ref10 = _toArray(_ref9), stream = _ref10[0], acroForm = _ref10[1], acroFormRef = _ref10[2], xref = _ref10[3], startXRef = _ref10[4], refs = _ref10.slice(5);
                        var newRefs = [];
                        var xfaData = null;
                        if (isPureXfa) {
                          xfaData = refs[0];
                          if (!xfaData) {
                            return stream.bytes;
                          }
                        } else {
                          var _iterator = _createForOfIteratorHelper(refs), _step;
                          try {
                            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                              var ref = _step.value;
                              newRefs = ref.filter(function(x) {
                                return x !== null;
                              }).reduce(function(a, b) {
                                return a.concat(b);
                              }, newRefs);
                            }
                          } catch (err) {
                            _iterator.e(err);
                          } finally {
                            _iterator.f();
                          }
                          if (newRefs.length === 0) {
                            return stream.bytes;
                          }
                        }
                        var xfa = acroForm instanceof _primitives.Dict && acroForm.get("XFA") || null;
                        var xfaDatasetsRef = null;
                        var hasXfaDatasetsEntry = false;
                        if (Array.isArray(xfa)) {
                          for (var i = 0, ii = xfa.length; i < ii; i += 2) {
                            if (xfa[i] === "datasets") {
                              xfaDatasetsRef = xfa[i + 1];
                              acroFormRef = null;
                              hasXfaDatasetsEntry = true;
                            }
                          }
                          if (xfaDatasetsRef === null) {
                            xfaDatasetsRef = xref.getNewRef();
                          }
                        } else if (xfa) {
                          acroFormRef = null;
                          (0, _util.warn)("Unsupported XFA type.");
                        }
                        var newXrefInfo = /* @__PURE__ */ Object.create(null);
                        if (xref.trailer) {
                          var infoObj = /* @__PURE__ */ Object.create(null);
                          var xrefInfo = xref.trailer.get("Info") || null;
                          if (xrefInfo instanceof _primitives.Dict) {
                            xrefInfo.forEach(function(key, value) {
                              if ((0, _util.isString)(key) && (0, _util.isString)(value)) {
                                infoObj[key] = (0, _util.stringToPDFString)(value);
                              }
                            });
                          }
                          newXrefInfo = {
                            rootRef: xref.trailer.getRaw("Root") || null,
                            encryptRef: xref.trailer.getRaw("Encrypt") || null,
                            newRef: xref.getNewRef(),
                            infoRef: xref.trailer.getRaw("Info") || null,
                            info: infoObj,
                            fileIds: xref.trailer.get("ID") || null,
                            startXRef,
                            filename
                          };
                        }
                        xref.resetNewRef();
                        return (0, _writer.incrementalUpdate)({
                          originalData: stream.bytes,
                          xrefInfo: newXrefInfo,
                          newRefs,
                          xref,
                          hasXfa: !!xfa,
                          xfaDatasetsRef,
                          hasXfaDatasetsEntry,
                          acroFormRef,
                          acroForm,
                          xfaData
                        });
                      });
                    });
                    handler.on("GetOperatorList", function wphSetupRenderPage(data, sink) {
                      var pageIndex = data.pageIndex;
                      pdfManager.getPage(pageIndex).then(function(page) {
                        var task = new WorkerTask("GetOperatorList: page ".concat(pageIndex));
                        startWorkerTask(task);
                        var start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;
                        page.getOperatorList({
                          handler,
                          sink,
                          task,
                          intent: data.intent,
                          cacheKey: data.cacheKey,
                          annotationStorage: data.annotationStorage
                        }).then(function(operatorListInfo) {
                          finishWorkerTask(task);
                          if (start) {
                            (0, _util.info)("page=".concat(pageIndex + 1, " - getOperatorList: time=") + "".concat(Date.now() - start, "ms, len=").concat(operatorListInfo.length));
                          }
                          sink.close();
                        }, function(reason) {
                          finishWorkerTask(task);
                          if (task.terminated) {
                            return;
                          }
                          handler.send("UnsupportedFeature", {
                            featureId: _util.UNSUPPORTED_FEATURES.errorOperatorList
                          });
                          sink.error(reason);
                        });
                      });
                    });
                    handler.on("GetTextContent", function wphExtractText(data, sink) {
                      var pageIndex = data.pageIndex;
                      pdfManager.getPage(pageIndex).then(function(page) {
                        var task = new WorkerTask("GetTextContent: page " + pageIndex);
                        startWorkerTask(task);
                        var start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;
                        page.extractTextContent({
                          handler,
                          task,
                          sink,
                          normalizeWhitespace: data.normalizeWhitespace,
                          includeMarkedContent: data.includeMarkedContent,
                          combineTextItems: data.combineTextItems
                        }).then(function() {
                          finishWorkerTask(task);
                          if (start) {
                            (0, _util.info)("page=".concat(pageIndex + 1, " - getTextContent: time=") + "".concat(Date.now() - start, "ms"));
                          }
                          sink.close();
                        }, function(reason) {
                          finishWorkerTask(task);
                          if (task.terminated) {
                            return;
                          }
                          sink.error(reason);
                        });
                      });
                    });
                    handler.on("GetStructTree", function wphGetStructTree(data) {
                      return pdfManager.getPage(data.pageIndex).then(function(page) {
                        return pdfManager.ensure(page, "getStructTree");
                      });
                    });
                    handler.on("FontFallback", function(data) {
                      return pdfManager.fontFallback(data.id, handler);
                    });
                    handler.on("Cleanup", function wphCleanup(data) {
                      return pdfManager.cleanup(true);
                    });
                    handler.on("Terminate", function wphTerminate(data) {
                      terminated = true;
                      var waitOn = [];
                      if (pdfManager) {
                        pdfManager.terminate(new _util.AbortException("Worker was terminated."));
                        var cleanupPromise = pdfManager.cleanup();
                        waitOn.push(cleanupPromise);
                        pdfManager = null;
                      } else {
                        (0, _primitives.clearPrimitiveCaches)();
                      }
                      if (cancelXHRs) {
                        cancelXHRs(new _util.AbortException("Worker was terminated."));
                      }
                      var _iterator2 = _createForOfIteratorHelper(WorkerTasks), _step2;
                      try {
                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                          var task = _step2.value;
                          waitOn.push(task.finished);
                          task.terminate();
                        }
                      } catch (err) {
                        _iterator2.e(err);
                      } finally {
                        _iterator2.f();
                      }
                      return Promise.all(waitOn).then(function() {
                        handler.destroy();
                        handler = null;
                      });
                    });
                    handler.on("Ready", function wphReady(data) {
                      setupDoc(docParams);
                      docParams = null;
                    });
                    return workerHandlerName;
                  }
                }, {
                  key: "initializeFromPort",
                  value: function initializeFromPort(port) {
                    var handler = new _message_handler.MessageHandler("worker", "main", port);
                    WorkerMessageHandler2.setup(handler, port);
                    handler.send("ready", null);
                  }
                }]);
                return WorkerMessageHandler2;
              }();
              exports2.WorkerMessageHandler = WorkerMessageHandler;
              function isMessagePort(maybePort) {
                return typeof maybePort.postMessage === "function" && "onmessage" in maybePort;
              }
              if (typeof window === "undefined" && !_is_node.isNodeJS && typeof self !== "undefined" && isMessagePort(self)) {
                WorkerMessageHandler.initializeFromPort(self);
              }
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              module2.exports = __w_pdfjs_require__2(3);
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              module2 = __w_pdfjs_require__2.nmd(module2);
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              var runtime = function(exports2) {
                "use strict";
                var Op = Object.prototype;
                var hasOwn = Op.hasOwnProperty;
                var undefined2;
                var $Symbol = typeof Symbol === "function" ? Symbol : {};
                var iteratorSymbol = $Symbol.iterator || "@@iterator";
                var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
                function define2(obj, key, value) {
                  Object.defineProperty(obj, key, {
                    value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                  });
                  return obj[key];
                }
                try {
                  define2({}, "");
                } catch (err) {
                  define2 = function define3(obj, key, value) {
                    return obj[key] = value;
                  };
                }
                function wrap(innerFn, outerFn, self2, tryLocsList) {
                  var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                  var generator = Object.create(protoGenerator.prototype);
                  var context = new Context(tryLocsList || []);
                  generator._invoke = makeInvokeMethod(innerFn, self2, context);
                  return generator;
                }
                exports2.wrap = wrap;
                function tryCatch(fn, obj, arg) {
                  try {
                    return {
                      type: "normal",
                      arg: fn.call(obj, arg)
                    };
                  } catch (err) {
                    return {
                      type: "throw",
                      arg: err
                    };
                  }
                }
                var GenStateSuspendedStart = "suspendedStart";
                var GenStateSuspendedYield = "suspendedYield";
                var GenStateExecuting = "executing";
                var GenStateCompleted = "completed";
                var ContinueSentinel = {};
                function Generator() {
                }
                function GeneratorFunction() {
                }
                function GeneratorFunctionPrototype() {
                }
                var IteratorPrototype = {};
                define2(IteratorPrototype, iteratorSymbol, function() {
                  return this;
                });
                var getProto = Object.getPrototypeOf;
                var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
                if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                  IteratorPrototype = NativeIteratorPrototype;
                }
                var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
                GeneratorFunction.prototype = GeneratorFunctionPrototype;
                define2(Gp, "constructor", GeneratorFunctionPrototype);
                define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
                GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
                function defineIteratorMethods(prototype) {
                  ["next", "throw", "return"].forEach(function(method) {
                    define2(prototype, method, function(arg) {
                      return this._invoke(method, arg);
                    });
                  });
                }
                exports2.isGeneratorFunction = function(genFun) {
                  var ctor = typeof genFun === "function" && genFun.constructor;
                  return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
                };
                exports2.mark = function(genFun) {
                  if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                  } else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    define2(genFun, toStringTagSymbol, "GeneratorFunction");
                  }
                  genFun.prototype = Object.create(Gp);
                  return genFun;
                };
                exports2.awrap = function(arg) {
                  return {
                    __await: arg
                  };
                };
                function AsyncIterator(generator, PromiseImpl) {
                  function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if (record.type === "throw") {
                      reject(record.arg);
                    } else {
                      var result = record.arg;
                      var value = result.value;
                      if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
                        return PromiseImpl.resolve(value.__await).then(function(value2) {
                          invoke("next", value2, resolve, reject);
                        }, function(err) {
                          invoke("throw", err, resolve, reject);
                        });
                      }
                      return PromiseImpl.resolve(value).then(function(unwrapped) {
                        result.value = unwrapped;
                        resolve(result);
                      }, function(error) {
                        return invoke("throw", error, resolve, reject);
                      });
                    }
                  }
                  var previousPromise;
                  function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                      return new PromiseImpl(function(resolve, reject) {
                        invoke(method, arg, resolve, reject);
                      });
                    }
                    return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                  }
                  this._invoke = enqueue;
                }
                defineIteratorMethods(AsyncIterator.prototype);
                define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
                  return this;
                });
                exports2.AsyncIterator = AsyncIterator;
                exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
                  if (PromiseImpl === void 0)
                    PromiseImpl = Promise;
                  var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
                  return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                    return result.done ? result.value : iter.next();
                  });
                };
                function makeInvokeMethod(innerFn, self2, context) {
                  var state = GenStateSuspendedStart;
                  return function invoke(method, arg) {
                    if (state === GenStateExecuting) {
                      throw new Error("Generator is already running");
                    }
                    if (state === GenStateCompleted) {
                      if (method === "throw") {
                        throw arg;
                      }
                      return doneResult();
                    }
                    context.method = method;
                    context.arg = arg;
                    while (true) {
                      var delegate = context.delegate;
                      if (delegate) {
                        var delegateResult = maybeInvokeDelegate(delegate, context);
                        if (delegateResult) {
                          if (delegateResult === ContinueSentinel)
                            continue;
                          return delegateResult;
                        }
                      }
                      if (context.method === "next") {
                        context.sent = context._sent = context.arg;
                      } else if (context.method === "throw") {
                        if (state === GenStateSuspendedStart) {
                          state = GenStateCompleted;
                          throw context.arg;
                        }
                        context.dispatchException(context.arg);
                      } else if (context.method === "return") {
                        context.abrupt("return", context.arg);
                      }
                      state = GenStateExecuting;
                      var record = tryCatch(innerFn, self2, context);
                      if (record.type === "normal") {
                        state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                        if (record.arg === ContinueSentinel) {
                          continue;
                        }
                        return {
                          value: record.arg,
                          done: context.done
                        };
                      } else if (record.type === "throw") {
                        state = GenStateCompleted;
                        context.method = "throw";
                        context.arg = record.arg;
                      }
                    }
                  };
                }
                function maybeInvokeDelegate(delegate, context) {
                  var method = delegate.iterator[context.method];
                  if (method === undefined2) {
                    context.delegate = null;
                    if (context.method === "throw") {
                      if (delegate.iterator["return"]) {
                        context.method = "return";
                        context.arg = undefined2;
                        maybeInvokeDelegate(delegate, context);
                        if (context.method === "throw") {
                          return ContinueSentinel;
                        }
                      }
                      context.method = "throw";
                      context.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return ContinueSentinel;
                  }
                  var record = tryCatch(method, delegate.iterator, context.arg);
                  if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                  }
                  var info = record.arg;
                  if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                  }
                  if (info.done) {
                    context[delegate.resultName] = info.value;
                    context.next = delegate.nextLoc;
                    if (context.method !== "return") {
                      context.method = "next";
                      context.arg = undefined2;
                    }
                  } else {
                    return info;
                  }
                  context.delegate = null;
                  return ContinueSentinel;
                }
                defineIteratorMethods(Gp);
                define2(Gp, toStringTagSymbol, "Generator");
                define2(Gp, iteratorSymbol, function() {
                  return this;
                });
                define2(Gp, "toString", function() {
                  return "[object Generator]";
                });
                function pushTryEntry(locs) {
                  var entry = {
                    tryLoc: locs[0]
                  };
                  if (1 in locs) {
                    entry.catchLoc = locs[1];
                  }
                  if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                  }
                  this.tryEntries.push(entry);
                }
                function resetTryEntry(entry) {
                  var record = entry.completion || {};
                  record.type = "normal";
                  delete record.arg;
                  entry.completion = record;
                }
                function Context(tryLocsList) {
                  this.tryEntries = [{
                    tryLoc: "root"
                  }];
                  tryLocsList.forEach(pushTryEntry, this);
                  this.reset(true);
                }
                exports2.keys = function(object) {
                  var keys = [];
                  for (var key in object) {
                    keys.push(key);
                  }
                  keys.reverse();
                  return function next() {
                    while (keys.length) {
                      var key2 = keys.pop();
                      if (key2 in object) {
                        next.value = key2;
                        next.done = false;
                        return next;
                      }
                    }
                    next.done = true;
                    return next;
                  };
                };
                function values(iterable) {
                  if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];
                    if (iteratorMethod) {
                      return iteratorMethod.call(iterable);
                    }
                    if (typeof iterable.next === "function") {
                      return iterable;
                    }
                    if (!isNaN(iterable.length)) {
                      var i = -1, next = function next2() {
                        while (++i < iterable.length) {
                          if (hasOwn.call(iterable, i)) {
                            next2.value = iterable[i];
                            next2.done = false;
                            return next2;
                          }
                        }
                        next2.value = undefined2;
                        next2.done = true;
                        return next2;
                      };
                      return next.next = next;
                    }
                  }
                  return {
                    next: doneResult
                  };
                }
                exports2.values = values;
                function doneResult() {
                  return {
                    value: undefined2,
                    done: true
                  };
                }
                Context.prototype = {
                  constructor: Context,
                  reset: function reset(skipTempReset) {
                    this.prev = 0;
                    this.next = 0;
                    this.sent = this._sent = undefined2;
                    this.done = false;
                    this.delegate = null;
                    this.method = "next";
                    this.arg = undefined2;
                    this.tryEntries.forEach(resetTryEntry);
                    if (!skipTempReset) {
                      for (var name in this) {
                        if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                          this[name] = undefined2;
                        }
                      }
                    }
                  },
                  stop: function stop() {
                    this.done = true;
                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;
                    if (rootRecord.type === "throw") {
                      throw rootRecord.arg;
                    }
                    return this.rval;
                  },
                  dispatchException: function dispatchException(exception) {
                    if (this.done) {
                      throw exception;
                    }
                    var context = this;
                    function handle(loc, caught) {
                      record.type = "throw";
                      record.arg = exception;
                      context.next = loc;
                      if (caught) {
                        context.method = "next";
                        context.arg = undefined2;
                      }
                      return !!caught;
                    }
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];
                      var record = entry.completion;
                      if (entry.tryLoc === "root") {
                        return handle("end");
                      }
                      if (entry.tryLoc <= this.prev) {
                        var hasCatch = hasOwn.call(entry, "catchLoc");
                        var hasFinally = hasOwn.call(entry, "finallyLoc");
                        if (hasCatch && hasFinally) {
                          if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                          } else if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                          }
                        } else if (hasCatch) {
                          if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                          }
                        } else if (hasFinally) {
                          if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                          }
                        } else {
                          throw new Error("try statement without catch or finally");
                        }
                      }
                    }
                  },
                  abrupt: function abrupt(type, arg) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];
                      if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                        var finallyEntry = entry;
                        break;
                      }
                    }
                    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                      finallyEntry = null;
                    }
                    var record = finallyEntry ? finallyEntry.completion : {};
                    record.type = type;
                    record.arg = arg;
                    if (finallyEntry) {
                      this.method = "next";
                      this.next = finallyEntry.finallyLoc;
                      return ContinueSentinel;
                    }
                    return this.complete(record);
                  },
                  complete: function complete(record, afterLoc) {
                    if (record.type === "throw") {
                      throw record.arg;
                    }
                    if (record.type === "break" || record.type === "continue") {
                      this.next = record.arg;
                    } else if (record.type === "return") {
                      this.rval = this.arg = record.arg;
                      this.method = "return";
                      this.next = "end";
                    } else if (record.type === "normal" && afterLoc) {
                      this.next = afterLoc;
                    }
                    return ContinueSentinel;
                  },
                  finish: function finish(finallyLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];
                      if (entry.finallyLoc === finallyLoc) {
                        this.complete(entry.completion, entry.afterLoc);
                        resetTryEntry(entry);
                        return ContinueSentinel;
                      }
                    }
                  },
                  "catch": function _catch(tryLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];
                      if (entry.tryLoc === tryLoc) {
                        var record = entry.completion;
                        if (record.type === "throw") {
                          var thrown = record.arg;
                          resetTryEntry(entry);
                        }
                        return thrown;
                      }
                    }
                    throw new Error("illegal catch attempt");
                  },
                  delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                    this.delegate = {
                      iterator: values(iterable),
                      resultName,
                      nextLoc
                    };
                    if (this.method === "next") {
                      this.arg = undefined2;
                    }
                    return ContinueSentinel;
                  }
                };
                return exports2;
              }((false ? 0 : _typeof(module2)) === "object" ? module2.exports : {});
              try {
                regeneratorRuntime = runtime;
              } catch (accidentalStrictMode) {
                if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
                  globalThis.regeneratorRuntime = runtime;
                } else {
                  Function("r", "regeneratorRuntime = r")(runtime);
                }
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.VerbosityLevel = exports2.Util = exports2.UnknownErrorException = exports2.UnexpectedResponseException = exports2.UNSUPPORTED_FEATURES = exports2.TextRenderingMode = exports2.StreamType = exports2.RenderingIntentFlag = exports2.PermissionFlag = exports2.PasswordResponses = exports2.PasswordException = exports2.PageActionEventType = exports2.OPS = exports2.MissingPDFException = exports2.IsLittleEndianCached = exports2.IsEvalSupportedCached = exports2.InvalidPDFException = exports2.ImageKind = exports2.IDENTITY_MATRIX = exports2.FormatError = exports2.FontType = exports2.FONT_IDENTITY_MATRIX = exports2.DocumentActionEventType = exports2.CMapCompressionType = exports2.BaseException = exports2.AnnotationType = exports2.AnnotationStateModelType = exports2.AnnotationReviewState = exports2.AnnotationReplyType = exports2.AnnotationMode = exports2.AnnotationMarkedState = exports2.AnnotationFlag = exports2.AnnotationFieldFlag = exports2.AnnotationBorderStyleType = exports2.AnnotationActionEventType = exports2.AbortException = void 0;
              exports2.arrayByteLength = arrayByteLength;
              exports2.arraysToBytes = arraysToBytes;
              exports2.assert = assert;
              exports2.bytesToString = bytesToString;
              exports2.createObjectURL = createObjectURL;
              exports2.createPromiseCapability = createPromiseCapability;
              exports2.createValidAbsoluteUrl = createValidAbsoluteUrl;
              exports2.escapeString = escapeString;
              exports2.getModificationDate = getModificationDate;
              exports2.getVerbosityLevel = getVerbosityLevel;
              exports2.info = info;
              exports2.isArrayBuffer = isArrayBuffer;
              exports2.isArrayEqual = isArrayEqual;
              exports2.isAscii = isAscii;
              exports2.isBool = isBool;
              exports2.isNum = isNum;
              exports2.isSameOrigin = isSameOrigin;
              exports2.isString = isString;
              exports2.objectFromMap = objectFromMap;
              exports2.objectSize = objectSize;
              exports2.removeNullCharacters = removeNullCharacters;
              exports2.setVerbosityLevel = setVerbosityLevel;
              exports2.shadow = shadow;
              exports2.string32 = string32;
              exports2.stringToBytes = stringToBytes;
              exports2.stringToPDFString = stringToPDFString;
              exports2.stringToUTF16BEString = stringToUTF16BEString;
              exports2.stringToUTF8String = stringToUTF8String;
              exports2.unreachable = unreachable;
              exports2.utf8StringToString = utf8StringToString;
              exports2.warn = warn;
              __w_pdfjs_require__2(5);
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
              }
              function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                  return Array.from(iter);
              }
              function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr))
                  return _arrayLikeToArray(arr);
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
              exports2.IDENTITY_MATRIX = IDENTITY_MATRIX;
              var FONT_IDENTITY_MATRIX = [1e-3, 0, 0, 1e-3, 0, 0];
              exports2.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
              var RenderingIntentFlag = {
                ANY: 1,
                DISPLAY: 2,
                PRINT: 4,
                ANNOTATIONS_FORMS: 16,
                ANNOTATIONS_STORAGE: 32,
                ANNOTATIONS_DISABLE: 64,
                OPLIST: 256
              };
              exports2.RenderingIntentFlag = RenderingIntentFlag;
              var AnnotationMode = {
                DISABLE: 0,
                ENABLE: 1,
                ENABLE_FORMS: 2,
                ENABLE_STORAGE: 3
              };
              exports2.AnnotationMode = AnnotationMode;
              var PermissionFlag = {
                PRINT: 4,
                MODIFY_CONTENTS: 8,
                COPY: 16,
                MODIFY_ANNOTATIONS: 32,
                FILL_INTERACTIVE_FORMS: 256,
                COPY_FOR_ACCESSIBILITY: 512,
                ASSEMBLE: 1024,
                PRINT_HIGH_QUALITY: 2048
              };
              exports2.PermissionFlag = PermissionFlag;
              var TextRenderingMode = {
                FILL: 0,
                STROKE: 1,
                FILL_STROKE: 2,
                INVISIBLE: 3,
                FILL_ADD_TO_PATH: 4,
                STROKE_ADD_TO_PATH: 5,
                FILL_STROKE_ADD_TO_PATH: 6,
                ADD_TO_PATH: 7,
                FILL_STROKE_MASK: 3,
                ADD_TO_PATH_FLAG: 4
              };
              exports2.TextRenderingMode = TextRenderingMode;
              var ImageKind = {
                GRAYSCALE_1BPP: 1,
                RGB_24BPP: 2,
                RGBA_32BPP: 3
              };
              exports2.ImageKind = ImageKind;
              var AnnotationType = {
                TEXT: 1,
                LINK: 2,
                FREETEXT: 3,
                LINE: 4,
                SQUARE: 5,
                CIRCLE: 6,
                POLYGON: 7,
                POLYLINE: 8,
                HIGHLIGHT: 9,
                UNDERLINE: 10,
                SQUIGGLY: 11,
                STRIKEOUT: 12,
                STAMP: 13,
                CARET: 14,
                INK: 15,
                POPUP: 16,
                FILEATTACHMENT: 17,
                SOUND: 18,
                MOVIE: 19,
                WIDGET: 20,
                SCREEN: 21,
                PRINTERMARK: 22,
                TRAPNET: 23,
                WATERMARK: 24,
                THREED: 25,
                REDACT: 26
              };
              exports2.AnnotationType = AnnotationType;
              var AnnotationStateModelType = {
                MARKED: "Marked",
                REVIEW: "Review"
              };
              exports2.AnnotationStateModelType = AnnotationStateModelType;
              var AnnotationMarkedState = {
                MARKED: "Marked",
                UNMARKED: "Unmarked"
              };
              exports2.AnnotationMarkedState = AnnotationMarkedState;
              var AnnotationReviewState = {
                ACCEPTED: "Accepted",
                REJECTED: "Rejected",
                CANCELLED: "Cancelled",
                COMPLETED: "Completed",
                NONE: "None"
              };
              exports2.AnnotationReviewState = AnnotationReviewState;
              var AnnotationReplyType = {
                GROUP: "Group",
                REPLY: "R"
              };
              exports2.AnnotationReplyType = AnnotationReplyType;
              var AnnotationFlag = {
                INVISIBLE: 1,
                HIDDEN: 2,
                PRINT: 4,
                NOZOOM: 8,
                NOROTATE: 16,
                NOVIEW: 32,
                READONLY: 64,
                LOCKED: 128,
                TOGGLENOVIEW: 256,
                LOCKEDCONTENTS: 512
              };
              exports2.AnnotationFlag = AnnotationFlag;
              var AnnotationFieldFlag = {
                READONLY: 1,
                REQUIRED: 2,
                NOEXPORT: 4,
                MULTILINE: 4096,
                PASSWORD: 8192,
                NOTOGGLETOOFF: 16384,
                RADIO: 32768,
                PUSHBUTTON: 65536,
                COMBO: 131072,
                EDIT: 262144,
                SORT: 524288,
                FILESELECT: 1048576,
                MULTISELECT: 2097152,
                DONOTSPELLCHECK: 4194304,
                DONOTSCROLL: 8388608,
                COMB: 16777216,
                RICHTEXT: 33554432,
                RADIOSINUNISON: 33554432,
                COMMITONSELCHANGE: 67108864
              };
              exports2.AnnotationFieldFlag = AnnotationFieldFlag;
              var AnnotationBorderStyleType = {
                SOLID: 1,
                DASHED: 2,
                BEVELED: 3,
                INSET: 4,
                UNDERLINE: 5
              };
              exports2.AnnotationBorderStyleType = AnnotationBorderStyleType;
              var AnnotationActionEventType = {
                E: "Mouse Enter",
                X: "Mouse Exit",
                D: "Mouse Down",
                U: "Mouse Up",
                Fo: "Focus",
                Bl: "Blur",
                PO: "PageOpen",
                PC: "PageClose",
                PV: "PageVisible",
                PI: "PageInvisible",
                K: "Keystroke",
                F: "Format",
                V: "Validate",
                C: "Calculate"
              };
              exports2.AnnotationActionEventType = AnnotationActionEventType;
              var DocumentActionEventType = {
                WC: "WillClose",
                WS: "WillSave",
                DS: "DidSave",
                WP: "WillPrint",
                DP: "DidPrint"
              };
              exports2.DocumentActionEventType = DocumentActionEventType;
              var PageActionEventType = {
                O: "PageOpen",
                C: "PageClose"
              };
              exports2.PageActionEventType = PageActionEventType;
              var StreamType = {
                UNKNOWN: "UNKNOWN",
                FLATE: "FLATE",
                LZW: "LZW",
                DCT: "DCT",
                JPX: "JPX",
                JBIG: "JBIG",
                A85: "A85",
                AHX: "AHX",
                CCF: "CCF",
                RLX: "RLX"
              };
              exports2.StreamType = StreamType;
              var FontType = {
                UNKNOWN: "UNKNOWN",
                TYPE1: "TYPE1",
                TYPE1STANDARD: "TYPE1STANDARD",
                TYPE1C: "TYPE1C",
                CIDFONTTYPE0: "CIDFONTTYPE0",
                CIDFONTTYPE0C: "CIDFONTTYPE0C",
                TRUETYPE: "TRUETYPE",
                CIDFONTTYPE2: "CIDFONTTYPE2",
                TYPE3: "TYPE3",
                OPENTYPE: "OPENTYPE",
                TYPE0: "TYPE0",
                MMTYPE1: "MMTYPE1"
              };
              exports2.FontType = FontType;
              var VerbosityLevel = {
                ERRORS: 0,
                WARNINGS: 1,
                INFOS: 5
              };
              exports2.VerbosityLevel = VerbosityLevel;
              var CMapCompressionType = {
                NONE: 0,
                BINARY: 1,
                STREAM: 2
              };
              exports2.CMapCompressionType = CMapCompressionType;
              var OPS = {
                dependency: 1,
                setLineWidth: 2,
                setLineCap: 3,
                setLineJoin: 4,
                setMiterLimit: 5,
                setDash: 6,
                setRenderingIntent: 7,
                setFlatness: 8,
                setGState: 9,
                save: 10,
                restore: 11,
                transform: 12,
                moveTo: 13,
                lineTo: 14,
                curveTo: 15,
                curveTo2: 16,
                curveTo3: 17,
                closePath: 18,
                rectangle: 19,
                stroke: 20,
                closeStroke: 21,
                fill: 22,
                eoFill: 23,
                fillStroke: 24,
                eoFillStroke: 25,
                closeFillStroke: 26,
                closeEOFillStroke: 27,
                endPath: 28,
                clip: 29,
                eoClip: 30,
                beginText: 31,
                endText: 32,
                setCharSpacing: 33,
                setWordSpacing: 34,
                setHScale: 35,
                setLeading: 36,
                setFont: 37,
                setTextRenderingMode: 38,
                setTextRise: 39,
                moveText: 40,
                setLeadingMoveText: 41,
                setTextMatrix: 42,
                nextLine: 43,
                showText: 44,
                showSpacedText: 45,
                nextLineShowText: 46,
                nextLineSetSpacingShowText: 47,
                setCharWidth: 48,
                setCharWidthAndBounds: 49,
                setStrokeColorSpace: 50,
                setFillColorSpace: 51,
                setStrokeColor: 52,
                setStrokeColorN: 53,
                setFillColor: 54,
                setFillColorN: 55,
                setStrokeGray: 56,
                setFillGray: 57,
                setStrokeRGBColor: 58,
                setFillRGBColor: 59,
                setStrokeCMYKColor: 60,
                setFillCMYKColor: 61,
                shadingFill: 62,
                beginInlineImage: 63,
                beginImageData: 64,
                endInlineImage: 65,
                paintXObject: 66,
                markPoint: 67,
                markPointProps: 68,
                beginMarkedContent: 69,
                beginMarkedContentProps: 70,
                endMarkedContent: 71,
                beginCompat: 72,
                endCompat: 73,
                paintFormXObjectBegin: 74,
                paintFormXObjectEnd: 75,
                beginGroup: 76,
                endGroup: 77,
                beginAnnotations: 78,
                endAnnotations: 79,
                beginAnnotation: 80,
                endAnnotation: 81,
                paintJpegXObject: 82,
                paintImageMaskXObject: 83,
                paintImageMaskXObjectGroup: 84,
                paintImageXObject: 85,
                paintInlineImageXObject: 86,
                paintInlineImageXObjectGroup: 87,
                paintImageXObjectRepeat: 88,
                paintImageMaskXObjectRepeat: 89,
                paintSolidColorImageMask: 90,
                constructPath: 91
              };
              exports2.OPS = OPS;
              var UNSUPPORTED_FEATURES = {
                unknown: "unknown",
                forms: "forms",
                javaScript: "javaScript",
                signatures: "signatures",
                smask: "smask",
                shadingPattern: "shadingPattern",
                font: "font",
                errorTilingPattern: "errorTilingPattern",
                errorExtGState: "errorExtGState",
                errorXObject: "errorXObject",
                errorFontLoadType3: "errorFontLoadType3",
                errorFontState: "errorFontState",
                errorFontMissing: "errorFontMissing",
                errorFontTranslate: "errorFontTranslate",
                errorColorSpace: "errorColorSpace",
                errorOperatorList: "errorOperatorList",
                errorFontToUnicode: "errorFontToUnicode",
                errorFontLoadNative: "errorFontLoadNative",
                errorFontBuildPath: "errorFontBuildPath",
                errorFontGetPath: "errorFontGetPath",
                errorMarkedContent: "errorMarkedContent",
                errorContentSubStream: "errorContentSubStream"
              };
              exports2.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
              var PasswordResponses = {
                NEED_PASSWORD: 1,
                INCORRECT_PASSWORD: 2
              };
              exports2.PasswordResponses = PasswordResponses;
              var verbosity = VerbosityLevel.WARNINGS;
              function setVerbosityLevel(level) {
                if (Number.isInteger(level)) {
                  verbosity = level;
                }
              }
              function getVerbosityLevel() {
                return verbosity;
              }
              function info(msg) {
                if (verbosity >= VerbosityLevel.INFOS) {
                  console.log("Info: ".concat(msg));
                }
              }
              function warn(msg) {
                if (verbosity >= VerbosityLevel.WARNINGS) {
                  console.log("Warning: ".concat(msg));
                }
              }
              function unreachable(msg) {
                throw new Error(msg);
              }
              function assert(cond, msg) {
                if (!cond) {
                  unreachable(msg);
                }
              }
              function isSameOrigin(baseUrl, otherUrl) {
                var base;
                try {
                  base = new URL(baseUrl);
                  if (!base.origin || base.origin === "null") {
                    return false;
                  }
                } catch (e) {
                  return false;
                }
                var other = new URL(otherUrl, base);
                return base.origin === other.origin;
              }
              function _isValidProtocol(url) {
                if (!url) {
                  return false;
                }
                switch (url.protocol) {
                  case "http:":
                  case "https:":
                  case "ftp:":
                  case "mailto:":
                  case "tel:":
                    return true;
                  default:
                    return false;
                }
              }
              function createValidAbsoluteUrl(url) {
                var baseUrl = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                if (!url) {
                  return null;
                }
                try {
                  if (options && typeof url === "string") {
                    if (options.addDefaultProtocol && url.startsWith("www.")) {
                      var dots = url.match(/\./g);
                      if (dots && dots.length >= 2) {
                        url = "http://".concat(url);
                      }
                    }
                    if (options.tryConvertEncoding) {
                      try {
                        url = stringToUTF8String(url);
                      } catch (ex) {
                      }
                    }
                  }
                  var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
                  if (_isValidProtocol(absoluteUrl)) {
                    return absoluteUrl;
                  }
                } catch (ex) {
                }
                return null;
              }
              function shadow(obj, prop, value) {
                Object.defineProperty(obj, prop, {
                  value,
                  enumerable: true,
                  configurable: true,
                  writable: false
                });
                return value;
              }
              var BaseException = function BaseExceptionClosure() {
                function BaseException2(message, name) {
                  if (this.constructor === BaseException2) {
                    unreachable("Cannot initialize BaseException.");
                  }
                  this.message = message;
                  this.name = name;
                }
                BaseException2.prototype = new Error();
                BaseException2.constructor = BaseException2;
                return BaseException2;
              }();
              exports2.BaseException = BaseException;
              var PasswordException = /* @__PURE__ */ function(_BaseException) {
                _inherits(PasswordException2, _BaseException);
                var _super = _createSuper(PasswordException2);
                function PasswordException2(msg, code) {
                  var _this;
                  _classCallCheck(this, PasswordException2);
                  _this = _super.call(this, msg, "PasswordException");
                  _this.code = code;
                  return _this;
                }
                return PasswordException2;
              }(BaseException);
              exports2.PasswordException = PasswordException;
              var UnknownErrorException = /* @__PURE__ */ function(_BaseException2) {
                _inherits(UnknownErrorException2, _BaseException2);
                var _super2 = _createSuper(UnknownErrorException2);
                function UnknownErrorException2(msg, details) {
                  var _this2;
                  _classCallCheck(this, UnknownErrorException2);
                  _this2 = _super2.call(this, msg, "UnknownErrorException");
                  _this2.details = details;
                  return _this2;
                }
                return UnknownErrorException2;
              }(BaseException);
              exports2.UnknownErrorException = UnknownErrorException;
              var InvalidPDFException = /* @__PURE__ */ function(_BaseException3) {
                _inherits(InvalidPDFException2, _BaseException3);
                var _super3 = _createSuper(InvalidPDFException2);
                function InvalidPDFException2(msg) {
                  _classCallCheck(this, InvalidPDFException2);
                  return _super3.call(this, msg, "InvalidPDFException");
                }
                return InvalidPDFException2;
              }(BaseException);
              exports2.InvalidPDFException = InvalidPDFException;
              var MissingPDFException = /* @__PURE__ */ function(_BaseException4) {
                _inherits(MissingPDFException2, _BaseException4);
                var _super4 = _createSuper(MissingPDFException2);
                function MissingPDFException2(msg) {
                  _classCallCheck(this, MissingPDFException2);
                  return _super4.call(this, msg, "MissingPDFException");
                }
                return MissingPDFException2;
              }(BaseException);
              exports2.MissingPDFException = MissingPDFException;
              var UnexpectedResponseException = /* @__PURE__ */ function(_BaseException5) {
                _inherits(UnexpectedResponseException2, _BaseException5);
                var _super5 = _createSuper(UnexpectedResponseException2);
                function UnexpectedResponseException2(msg, status) {
                  var _this3;
                  _classCallCheck(this, UnexpectedResponseException2);
                  _this3 = _super5.call(this, msg, "UnexpectedResponseException");
                  _this3.status = status;
                  return _this3;
                }
                return UnexpectedResponseException2;
              }(BaseException);
              exports2.UnexpectedResponseException = UnexpectedResponseException;
              var FormatError = /* @__PURE__ */ function(_BaseException6) {
                _inherits(FormatError2, _BaseException6);
                var _super6 = _createSuper(FormatError2);
                function FormatError2(msg) {
                  _classCallCheck(this, FormatError2);
                  return _super6.call(this, msg, "FormatError");
                }
                return FormatError2;
              }(BaseException);
              exports2.FormatError = FormatError;
              var AbortException = /* @__PURE__ */ function(_BaseException7) {
                _inherits(AbortException2, _BaseException7);
                var _super7 = _createSuper(AbortException2);
                function AbortException2(msg) {
                  _classCallCheck(this, AbortException2);
                  return _super7.call(this, msg, "AbortException");
                }
                return AbortException2;
              }(BaseException);
              exports2.AbortException = AbortException;
              var NullCharactersRegExp = /\x00+/g;
              var InvisibleCharactersRegExp = /[\x01-\x1F]/g;
              function removeNullCharacters(str) {
                var replaceInvisible = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                if (typeof str !== "string") {
                  warn("The argument for removeNullCharacters must be a string.");
                  return str;
                }
                if (replaceInvisible) {
                  str = str.replace(InvisibleCharactersRegExp, " ");
                }
                return str.replace(NullCharactersRegExp, "");
              }
              function bytesToString(bytes) {
                assert(bytes !== null && _typeof(bytes) === "object" && bytes.length !== void 0, "Invalid argument for bytesToString");
                var length = bytes.length;
                var MAX_ARGUMENT_COUNT = 8192;
                if (length < MAX_ARGUMENT_COUNT) {
                  return String.fromCharCode.apply(null, bytes);
                }
                var strBuf = [];
                for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
                  var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
                  var chunk = bytes.subarray(i, chunkEnd);
                  strBuf.push(String.fromCharCode.apply(null, chunk));
                }
                return strBuf.join("");
              }
              function stringToBytes(str) {
                assert(typeof str === "string", "Invalid argument for stringToBytes");
                var length = str.length;
                var bytes = new Uint8Array(length);
                for (var i = 0; i < length; ++i) {
                  bytes[i] = str.charCodeAt(i) & 255;
                }
                return bytes;
              }
              function arrayByteLength(arr) {
                if (arr.length !== void 0) {
                  return arr.length;
                }
                assert(arr.byteLength !== void 0, "arrayByteLength - invalid argument.");
                return arr.byteLength;
              }
              function arraysToBytes(arr) {
                var length = arr.length;
                if (length === 1 && arr[0] instanceof Uint8Array) {
                  return arr[0];
                }
                var resultLength = 0;
                for (var i = 0; i < length; i++) {
                  resultLength += arrayByteLength(arr[i]);
                }
                var pos = 0;
                var data = new Uint8Array(resultLength);
                for (var _i = 0; _i < length; _i++) {
                  var item = arr[_i];
                  if (!(item instanceof Uint8Array)) {
                    if (typeof item === "string") {
                      item = stringToBytes(item);
                    } else {
                      item = new Uint8Array(item);
                    }
                  }
                  var itemLength = item.byteLength;
                  data.set(item, pos);
                  pos += itemLength;
                }
                return data;
              }
              function string32(value) {
                return String.fromCharCode(value >> 24 & 255, value >> 16 & 255, value >> 8 & 255, value & 255);
              }
              function objectSize(obj) {
                return Object.keys(obj).length;
              }
              function objectFromMap(map) {
                var obj = /* @__PURE__ */ Object.create(null);
                var _iterator = _createForOfIteratorHelper(map), _step;
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], value = _step$value[1];
                    obj[key] = value;
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
                return obj;
              }
              function isLittleEndian() {
                var buffer8 = new Uint8Array(4);
                buffer8[0] = 1;
                var view32 = new Uint32Array(buffer8.buffer, 0, 1);
                return view32[0] === 1;
              }
              var IsLittleEndianCached = {
                get value() {
                  return shadow(this, "value", isLittleEndian());
                }
              };
              exports2.IsLittleEndianCached = IsLittleEndianCached;
              function isEvalSupported() {
                try {
                  new Function("");
                  return true;
                } catch (e) {
                  return false;
                }
              }
              var IsEvalSupportedCached = {
                get value() {
                  return shadow(this, "value", isEvalSupported());
                }
              };
              exports2.IsEvalSupportedCached = IsEvalSupportedCached;
              var hexNumbers = _toConsumableArray(Array(256).keys()).map(function(n) {
                return n.toString(16).padStart(2, "0");
              });
              var Util = /* @__PURE__ */ function() {
                function Util2() {
                  _classCallCheck(this, Util2);
                }
                _createClass(Util2, null, [{
                  key: "makeHexColor",
                  value: function makeHexColor(r, g, b) {
                    return "#".concat(hexNumbers[r]).concat(hexNumbers[g]).concat(hexNumbers[b]);
                  }
                }, {
                  key: "transform",
                  value: function transform(m1, m2) {
                    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
                  }
                }, {
                  key: "applyTransform",
                  value: function applyTransform(p, m) {
                    var xt = p[0] * m[0] + p[1] * m[2] + m[4];
                    var yt = p[0] * m[1] + p[1] * m[3] + m[5];
                    return [xt, yt];
                  }
                }, {
                  key: "applyInverseTransform",
                  value: function applyInverseTransform(p, m) {
                    var d = m[0] * m[3] - m[1] * m[2];
                    var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
                    var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
                    return [xt, yt];
                  }
                }, {
                  key: "getAxialAlignedBoundingBox",
                  value: function getAxialAlignedBoundingBox(r, m) {
                    var p1 = Util2.applyTransform(r, m);
                    var p2 = Util2.applyTransform(r.slice(2, 4), m);
                    var p3 = Util2.applyTransform([r[0], r[3]], m);
                    var p4 = Util2.applyTransform([r[2], r[1]], m);
                    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
                  }
                }, {
                  key: "inverseTransform",
                  value: function inverseTransform(m) {
                    var d = m[0] * m[3] - m[1] * m[2];
                    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
                  }
                }, {
                  key: "apply3dTransform",
                  value: function apply3dTransform(m, v) {
                    return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];
                  }
                }, {
                  key: "singularValueDecompose2dScale",
                  value: function singularValueDecompose2dScale(m) {
                    var transpose = [m[0], m[2], m[1], m[3]];
                    var a = m[0] * transpose[0] + m[1] * transpose[2];
                    var b = m[0] * transpose[1] + m[1] * transpose[3];
                    var c = m[2] * transpose[0] + m[3] * transpose[2];
                    var d = m[2] * transpose[1] + m[3] * transpose[3];
                    var first = (a + d) / 2;
                    var second = Math.sqrt(Math.pow(a + d, 2) - 4 * (a * d - c * b)) / 2;
                    var sx = first + second || 1;
                    var sy = first - second || 1;
                    return [Math.sqrt(sx), Math.sqrt(sy)];
                  }
                }, {
                  key: "normalizeRect",
                  value: function normalizeRect(rect) {
                    var r = rect.slice(0);
                    if (rect[0] > rect[2]) {
                      r[0] = rect[2];
                      r[2] = rect[0];
                    }
                    if (rect[1] > rect[3]) {
                      r[1] = rect[3];
                      r[3] = rect[1];
                    }
                    return r;
                  }
                }, {
                  key: "intersect",
                  value: function intersect(rect1, rect2) {
                    function compare(a, b) {
                      return a - b;
                    }
                    var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);
                    var orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);
                    var result = [];
                    rect1 = Util2.normalizeRect(rect1);
                    rect2 = Util2.normalizeRect(rect2);
                    if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
                      result[0] = orderedX[1];
                      result[2] = orderedX[2];
                    } else {
                      return null;
                    }
                    if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
                      result[1] = orderedY[1];
                      result[3] = orderedY[2];
                    } else {
                      return null;
                    }
                    return result;
                  }
                }, {
                  key: "bezierBoundingBox",
                  value: function bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {
                    var tvalues = [], bounds = [[], []];
                    var a, b, c, t, t1, t2, b2ac, sqrtb2ac;
                    for (var i = 0; i < 2; ++i) {
                      if (i === 0) {
                        b = 6 * x0 - 12 * x1 + 6 * x2;
                        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
                        c = 3 * x1 - 3 * x0;
                      } else {
                        b = 6 * y0 - 12 * y1 + 6 * y2;
                        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
                        c = 3 * y1 - 3 * y0;
                      }
                      if (Math.abs(a) < 1e-12) {
                        if (Math.abs(b) < 1e-12) {
                          continue;
                        }
                        t = -c / b;
                        if (0 < t && t < 1) {
                          tvalues.push(t);
                        }
                        continue;
                      }
                      b2ac = b * b - 4 * c * a;
                      sqrtb2ac = Math.sqrt(b2ac);
                      if (b2ac < 0) {
                        continue;
                      }
                      t1 = (-b + sqrtb2ac) / (2 * a);
                      if (0 < t1 && t1 < 1) {
                        tvalues.push(t1);
                      }
                      t2 = (-b - sqrtb2ac) / (2 * a);
                      if (0 < t2 && t2 < 1) {
                        tvalues.push(t2);
                      }
                    }
                    var j = tvalues.length, mt;
                    var jlen = j;
                    while (j--) {
                      t = tvalues[j];
                      mt = 1 - t;
                      bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
                      bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
                    }
                    bounds[0][jlen] = x0;
                    bounds[1][jlen] = y0;
                    bounds[0][jlen + 1] = x3;
                    bounds[1][jlen + 1] = y3;
                    bounds[0].length = bounds[1].length = jlen + 2;
                    return [Math.min.apply(Math, _toConsumableArray(bounds[0])), Math.min.apply(Math, _toConsumableArray(bounds[1])), Math.max.apply(Math, _toConsumableArray(bounds[0])), Math.max.apply(Math, _toConsumableArray(bounds[1]))];
                  }
                }]);
                return Util2;
              }();
              exports2.Util = Util;
              var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222, 8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352, 376, 381, 305, 322, 339, 353, 382, 0, 8364];
              function stringToPDFString(str) {
                var length = str.length, strBuf = [];
                if (str[0] === "\xFE" && str[1] === "\xFF") {
                  for (var i = 2; i < length; i += 2) {
                    strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));
                  }
                } else if (str[0] === "\xFF" && str[1] === "\xFE") {
                  for (var _i2 = 2; _i2 < length; _i2 += 2) {
                    strBuf.push(String.fromCharCode(str.charCodeAt(_i2 + 1) << 8 | str.charCodeAt(_i2)));
                  }
                } else {
                  for (var _i3 = 0; _i3 < length; ++_i3) {
                    var code = PDFStringTranslateTable[str.charCodeAt(_i3)];
                    strBuf.push(code ? String.fromCharCode(code) : str.charAt(_i3));
                  }
                }
                return strBuf.join("");
              }
              function escapeString(str) {
                return str.replace(/([()\\\n\r])/g, function(match) {
                  if (match === "\n") {
                    return "\\n";
                  } else if (match === "\r") {
                    return "\\r";
                  }
                  return "\\".concat(match);
                });
              }
              function isAscii(str) {
                return /^[\x00-\x7F]*$/.test(str);
              }
              function stringToUTF16BEString(str) {
                var buf = ["\xFE\xFF"];
                for (var i = 0, ii = str.length; i < ii; i++) {
                  var _char = str.charCodeAt(i);
                  buf.push(String.fromCharCode(_char >> 8 & 255), String.fromCharCode(_char & 255));
                }
                return buf.join("");
              }
              function stringToUTF8String(str) {
                return decodeURIComponent(escape(str));
              }
              function utf8StringToString(str) {
                return unescape(encodeURIComponent(str));
              }
              function isBool(v) {
                return typeof v === "boolean";
              }
              function isNum(v) {
                return typeof v === "number";
              }
              function isString(v) {
                return typeof v === "string";
              }
              function isArrayBuffer(v) {
                return _typeof(v) === "object" && v !== null && v.byteLength !== void 0;
              }
              function isArrayEqual(arr1, arr2) {
                if (arr1.length !== arr2.length) {
                  return false;
                }
                for (var i = 0, ii = arr1.length; i < ii; i++) {
                  if (arr1[i] !== arr2[i]) {
                    return false;
                  }
                }
                return true;
              }
              function getModificationDate() {
                var date = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new Date();
                var buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
                return buffer.join("");
              }
              function createPromiseCapability() {
                var capability = /* @__PURE__ */ Object.create(null);
                var isSettled = false;
                Object.defineProperty(capability, "settled", {
                  get: function get() {
                    return isSettled;
                  }
                });
                capability.promise = new Promise(function(resolve, reject) {
                  capability.resolve = function(data) {
                    isSettled = true;
                    resolve(data);
                  };
                  capability.reject = function(reason) {
                    isSettled = true;
                    reject(reason);
                  };
                });
                return capability;
              }
              function createObjectURL(data) {
                var contentType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
                var forceDataSchema = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                if (URL.createObjectURL && typeof Blob !== "undefined" && !forceDataSchema) {
                  return URL.createObjectURL(new Blob([data], {
                    type: contentType
                  }));
                }
                var digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                var buffer = "data:".concat(contentType, ";base64,");
                for (var i = 0, ii = data.length; i < ii; i += 3) {
                  var b1 = data[i] & 255;
                  var b2 = data[i + 1] & 255;
                  var b3 = data[i + 2] & 255;
                  var d1 = b1 >> 2, d2 = (b1 & 3) << 4 | b2 >> 4;
                  var d3 = i + 1 < ii ? (b2 & 15) << 2 | b3 >> 6 : 64;
                  var d4 = i + 2 < ii ? b3 & 63 : 64;
                  buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
                }
                return buffer;
              }
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var _is_node = __w_pdfjs_require__2(6);
              if (typeof globalThis === "undefined" || !globalThis._pdfjsCompatibilityChecked) {
                if (typeof globalThis === "undefined" || globalThis.Math !== Math) {
                  globalThis = __w_pdfjs_require__2(7);
                }
                globalThis._pdfjsCompatibilityChecked = true;
                (function checkNodeBtoa() {
                  if (globalThis.btoa || !_is_node.isNodeJS) {
                    return;
                  }
                  globalThis.btoa = function(chars) {
                    return Buffer.from(chars, "binary").toString("base64");
                  };
                })();
                (function checkNodeAtob() {
                  if (globalThis.atob || !_is_node.isNodeJS) {
                    return;
                  }
                  globalThis.atob = function(input) {
                    return Buffer.from(input, "base64").toString("binary");
                  };
                })();
                (function checkDOMMatrix() {
                  if (globalThis.DOMMatrix || !_is_node.isNodeJS) {
                    return;
                  }
                  globalThis.DOMMatrix = __w_pdfjs_require__2(69);
                })();
                (function checkObjectFromEntries() {
                  if (Object.fromEntries) {
                    return;
                  }
                  __w_pdfjs_require__2(70);
                })();
                (function checkPromise() {
                  if (globalThis.Promise.allSettled) {
                    return;
                  }
                  globalThis.Promise = __w_pdfjs_require__2(97);
                })();
                (function checkReadableStream() {
                  if (globalThis.ReadableStream || !_is_node.isNodeJS) {
                    return;
                  }
                  globalThis.ReadableStream = __w_pdfjs_require__2(134).ReadableStream;
                })();
              }
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.isNodeJS = void 0;
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              var isNodeJS = (typeof process === "undefined" ? "undefined" : _typeof(process)) === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
              exports2.isNodeJS = isNodeJS;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              __w_pdfjs_require__2(8);
              module2.exports = __w_pdfjs_require__2(10);
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var $ = __w_pdfjs_require__2(9);
              var global2 = __w_pdfjs_require__2(10);
              $({ global: true }, { globalThis: global2 });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var getOwnPropertyDescriptor = __w_pdfjs_require__2(11).f;
              var createNonEnumerableProperty = __w_pdfjs_require__2(47);
              var redefine = __w_pdfjs_require__2(50);
              var setGlobal = __w_pdfjs_require__2(41);
              var copyConstructorProperties = __w_pdfjs_require__2(57);
              var isForced = __w_pdfjs_require__2(68);
              module2.exports = function(options, source) {
                var TARGET = options.target;
                var GLOBAL = options.global;
                var STATIC = options.stat;
                var FORCED, target, key, targetProperty, sourceProperty, descriptor;
                if (GLOBAL) {
                  target = global2;
                } else if (STATIC) {
                  target = global2[TARGET] || setGlobal(TARGET, {});
                } else {
                  target = (global2[TARGET] || {}).prototype;
                }
                if (target)
                  for (key in source) {
                    sourceProperty = source[key];
                    if (options.noTargetGet) {
                      descriptor = getOwnPropertyDescriptor(target, key);
                      targetProperty = descriptor && descriptor.value;
                    } else
                      targetProperty = target[key];
                    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
                    if (!FORCED && targetProperty !== void 0) {
                      if (typeof sourceProperty == typeof targetProperty)
                        continue;
                      copyConstructorProperties(sourceProperty, targetProperty);
                    }
                    if (options.sham || targetProperty && targetProperty.sham) {
                      createNonEnumerableProperty(sourceProperty, "sham", true);
                    }
                    redefine(target, key, sourceProperty, options);
                  }
              };
            },
            (module2) => {
              var check = function(it) {
                return it && it.Math == Math && it;
              };
              module2.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || function() {
                return this;
              }() || Function("return this")();
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              var DESCRIPTORS = __w_pdfjs_require__2(12);
              var call = __w_pdfjs_require__2(14);
              var propertyIsEnumerableModule = __w_pdfjs_require__2(15);
              var createPropertyDescriptor = __w_pdfjs_require__2(16);
              var toIndexedObject = __w_pdfjs_require__2(17);
              var toPropertyKey = __w_pdfjs_require__2(22);
              var hasOwn = __w_pdfjs_require__2(42);
              var IE8_DOM_DEFINE = __w_pdfjs_require__2(45);
              var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
              exports2.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
                O = toIndexedObject(O);
                P = toPropertyKey(P);
                if (IE8_DOM_DEFINE)
                  try {
                    return $getOwnPropertyDescriptor(O, P);
                  } catch (error) {
                  }
                if (hasOwn(O, P))
                  return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var fails = __w_pdfjs_require__2(13);
              module2.exports = !fails(function() {
                return Object.defineProperty({}, 1, {
                  get: function() {
                    return 7;
                  }
                })[1] != 7;
              });
            },
            (module2) => {
              module2.exports = function(exec) {
                try {
                  return !!exec();
                } catch (error) {
                  return true;
                }
              };
            },
            (module2) => {
              var call = Function.prototype.call;
              module2.exports = call.bind ? call.bind(call) : function() {
                return call.apply(call, arguments);
              };
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              var $propertyIsEnumerable = {}.propertyIsEnumerable;
              var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
              var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
              exports2.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
                var descriptor = getOwnPropertyDescriptor(this, V);
                return !!descriptor && descriptor.enumerable;
              } : $propertyIsEnumerable;
            },
            (module2) => {
              module2.exports = function(bitmap, value) {
                return {
                  enumerable: !(bitmap & 1),
                  configurable: !(bitmap & 2),
                  writable: !(bitmap & 4),
                  value
                };
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var IndexedObject = __w_pdfjs_require__2(18);
              var requireObjectCoercible = __w_pdfjs_require__2(21);
              module2.exports = function(it) {
                return IndexedObject(requireObjectCoercible(it));
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var uncurryThis = __w_pdfjs_require__2(19);
              var fails = __w_pdfjs_require__2(13);
              var classof = __w_pdfjs_require__2(20);
              var Object2 = global2.Object;
              var split = uncurryThis("".split);
              module2.exports = fails(function() {
                return !Object2("z").propertyIsEnumerable(0);
              }) ? function(it) {
                return classof(it) == "String" ? split(it, "") : Object2(it);
              } : Object2;
            },
            (module2) => {
              var FunctionPrototype = Function.prototype;
              var bind = FunctionPrototype.bind;
              var call = FunctionPrototype.call;
              var callBind = bind && bind.bind(call);
              module2.exports = bind ? function(fn) {
                return fn && callBind(call, fn);
              } : function(fn) {
                return fn && function() {
                  return call.apply(fn, arguments);
                };
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var toString = uncurryThis({}.toString);
              var stringSlice = uncurryThis("".slice);
              module2.exports = function(it) {
                return stringSlice(toString(it), 8, -1);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var TypeError2 = global2.TypeError;
              module2.exports = function(it) {
                if (it == void 0)
                  throw TypeError2("Can't call method on " + it);
                return it;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var toPrimitive = __w_pdfjs_require__2(23);
              var isSymbol = __w_pdfjs_require__2(26);
              module2.exports = function(argument) {
                var key = toPrimitive(argument, "string");
                return isSymbol(key) ? key : key + "";
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var call = __w_pdfjs_require__2(14);
              var isObject = __w_pdfjs_require__2(24);
              var isSymbol = __w_pdfjs_require__2(26);
              var getMethod = __w_pdfjs_require__2(33);
              var ordinaryToPrimitive = __w_pdfjs_require__2(36);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var TypeError2 = global2.TypeError;
              var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
              module2.exports = function(input, pref) {
                if (!isObject(input) || isSymbol(input))
                  return input;
                var exoticToPrim = getMethod(input, TO_PRIMITIVE);
                var result;
                if (exoticToPrim) {
                  if (pref === void 0)
                    pref = "default";
                  result = call(exoticToPrim, input, pref);
                  if (!isObject(result) || isSymbol(result))
                    return result;
                  throw TypeError2("Can't convert object to primitive value");
                }
                if (pref === void 0)
                  pref = "number";
                return ordinaryToPrimitive(input, pref);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var isCallable = __w_pdfjs_require__2(25);
              module2.exports = function(it) {
                return typeof it == "object" ? it !== null : isCallable(it);
              };
            },
            (module2) => {
              module2.exports = function(argument) {
                return typeof argument == "function";
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var getBuiltIn = __w_pdfjs_require__2(27);
              var isCallable = __w_pdfjs_require__2(25);
              var isPrototypeOf = __w_pdfjs_require__2(28);
              var USE_SYMBOL_AS_UID = __w_pdfjs_require__2(29);
              var Object2 = global2.Object;
              module2.exports = USE_SYMBOL_AS_UID ? function(it) {
                return typeof it == "symbol";
              } : function(it) {
                var $Symbol = getBuiltIn("Symbol");
                return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object2(it));
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var isCallable = __w_pdfjs_require__2(25);
              var aFunction = function(argument) {
                return isCallable(argument) ? argument : void 0;
              };
              module2.exports = function(namespace, method) {
                return arguments.length < 2 ? aFunction(global2[namespace]) : global2[namespace] && global2[namespace][method];
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              module2.exports = uncurryThis({}.isPrototypeOf);
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var NATIVE_SYMBOL = __w_pdfjs_require__2(30);
              module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var V8_VERSION = __w_pdfjs_require__2(31);
              var fails = __w_pdfjs_require__2(13);
              module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
                var symbol = Symbol();
                return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
              });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var userAgent = __w_pdfjs_require__2(32);
              var process2 = global2.process;
              var Deno = global2.Deno;
              var versions = process2 && process2.versions || Deno && Deno.version;
              var v8 = versions && versions.v8;
              var match, version;
              if (v8) {
                match = v8.split(".");
                version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
              }
              if (!version && userAgent) {
                match = userAgent.match(/Edge\/(\d+)/);
                if (!match || match[1] >= 74) {
                  match = userAgent.match(/Chrome\/(\d+)/);
                  if (match)
                    version = +match[1];
                }
              }
              module2.exports = version;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var getBuiltIn = __w_pdfjs_require__2(27);
              module2.exports = getBuiltIn("navigator", "userAgent") || "";
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var aCallable = __w_pdfjs_require__2(34);
              module2.exports = function(V, P) {
                var func = V[P];
                return func == null ? void 0 : aCallable(func);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var isCallable = __w_pdfjs_require__2(25);
              var tryToString = __w_pdfjs_require__2(35);
              var TypeError2 = global2.TypeError;
              module2.exports = function(argument) {
                if (isCallable(argument))
                  return argument;
                throw TypeError2(tryToString(argument) + " is not a function");
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var String2 = global2.String;
              module2.exports = function(argument) {
                try {
                  return String2(argument);
                } catch (error) {
                  return "Object";
                }
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var call = __w_pdfjs_require__2(14);
              var isCallable = __w_pdfjs_require__2(25);
              var isObject = __w_pdfjs_require__2(24);
              var TypeError2 = global2.TypeError;
              module2.exports = function(input, pref) {
                var fn, val;
                if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
                  return val;
                if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input)))
                  return val;
                if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
                  return val;
                throw TypeError2("Can't convert object to primitive value");
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var shared = __w_pdfjs_require__2(38);
              var hasOwn = __w_pdfjs_require__2(42);
              var uid = __w_pdfjs_require__2(44);
              var NATIVE_SYMBOL = __w_pdfjs_require__2(30);
              var USE_SYMBOL_AS_UID = __w_pdfjs_require__2(29);
              var WellKnownSymbolsStore = shared("wks");
              var Symbol2 = global2.Symbol;
              var symbolFor = Symbol2 && Symbol2["for"];
              var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
              module2.exports = function(name) {
                if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
                  var description = "Symbol." + name;
                  if (NATIVE_SYMBOL && hasOwn(Symbol2, name)) {
                    WellKnownSymbolsStore[name] = Symbol2[name];
                  } else if (USE_SYMBOL_AS_UID && symbolFor) {
                    WellKnownSymbolsStore[name] = symbolFor(description);
                  } else {
                    WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
                  }
                }
                return WellKnownSymbolsStore[name];
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var IS_PURE = __w_pdfjs_require__2(39);
              var store = __w_pdfjs_require__2(40);
              (module2.exports = function(key, value) {
                return store[key] || (store[key] = value !== void 0 ? value : {});
              })("versions", []).push({
                version: "3.19.3",
                mode: IS_PURE ? "pure" : "global",
                copyright: "\xA9 2021 Denis Pushkarev (zloirock.ru)"
              });
            },
            (module2) => {
              module2.exports = false;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var setGlobal = __w_pdfjs_require__2(41);
              var SHARED = "__core-js_shared__";
              var store = global2[SHARED] || setGlobal(SHARED, {});
              module2.exports = store;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var defineProperty = Object.defineProperty;
              module2.exports = function(key, value) {
                try {
                  defineProperty(global2, key, {
                    value,
                    configurable: true,
                    writable: true
                  });
                } catch (error) {
                  global2[key] = value;
                }
                return value;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var toObject = __w_pdfjs_require__2(43);
              var hasOwnProperty = uncurryThis({}.hasOwnProperty);
              module2.exports = Object.hasOwn || function hasOwn(it, key) {
                return hasOwnProperty(toObject(it), key);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var requireObjectCoercible = __w_pdfjs_require__2(21);
              var Object2 = global2.Object;
              module2.exports = function(argument) {
                return Object2(requireObjectCoercible(argument));
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var id = 0;
              var postfix = Math.random();
              var toString = uncurryThis(1 .toString);
              module2.exports = function(key) {
                return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var DESCRIPTORS = __w_pdfjs_require__2(12);
              var fails = __w_pdfjs_require__2(13);
              var createElement = __w_pdfjs_require__2(46);
              module2.exports = !DESCRIPTORS && !fails(function() {
                return Object.defineProperty(createElement("div"), "a", {
                  get: function() {
                    return 7;
                  }
                }).a != 7;
              });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var isObject = __w_pdfjs_require__2(24);
              var document2 = global2.document;
              var EXISTS = isObject(document2) && isObject(document2.createElement);
              module2.exports = function(it) {
                return EXISTS ? document2.createElement(it) : {};
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var DESCRIPTORS = __w_pdfjs_require__2(12);
              var definePropertyModule = __w_pdfjs_require__2(48);
              var createPropertyDescriptor = __w_pdfjs_require__2(16);
              module2.exports = DESCRIPTORS ? function(object, key, value) {
                return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
              } : function(object, key, value) {
                object[key] = value;
                return object;
              };
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var DESCRIPTORS = __w_pdfjs_require__2(12);
              var IE8_DOM_DEFINE = __w_pdfjs_require__2(45);
              var anObject = __w_pdfjs_require__2(49);
              var toPropertyKey = __w_pdfjs_require__2(22);
              var TypeError2 = global2.TypeError;
              var $defineProperty = Object.defineProperty;
              exports2.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
                anObject(O);
                P = toPropertyKey(P);
                anObject(Attributes);
                if (IE8_DOM_DEFINE)
                  try {
                    return $defineProperty(O, P, Attributes);
                  } catch (error) {
                  }
                if ("get" in Attributes || "set" in Attributes)
                  throw TypeError2("Accessors not supported");
                if ("value" in Attributes)
                  O[P] = Attributes.value;
                return O;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var isObject = __w_pdfjs_require__2(24);
              var String2 = global2.String;
              var TypeError2 = global2.TypeError;
              module2.exports = function(argument) {
                if (isObject(argument))
                  return argument;
                throw TypeError2(String2(argument) + " is not an object");
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var isCallable = __w_pdfjs_require__2(25);
              var hasOwn = __w_pdfjs_require__2(42);
              var createNonEnumerableProperty = __w_pdfjs_require__2(47);
              var setGlobal = __w_pdfjs_require__2(41);
              var inspectSource = __w_pdfjs_require__2(51);
              var InternalStateModule = __w_pdfjs_require__2(52);
              var CONFIGURABLE_FUNCTION_NAME = __w_pdfjs_require__2(56).CONFIGURABLE;
              var getInternalState = InternalStateModule.get;
              var enforceInternalState = InternalStateModule.enforce;
              var TEMPLATE = String(String).split("String");
              (module2.exports = function(O, key, value, options) {
                var unsafe = options ? !!options.unsafe : false;
                var simple = options ? !!options.enumerable : false;
                var noTargetGet = options ? !!options.noTargetGet : false;
                var name = options && options.name !== void 0 ? options.name : key;
                var state;
                if (isCallable(value)) {
                  if (String(name).slice(0, 7) === "Symbol(") {
                    name = "[" + String(name).replace(/^Symbol\(([^)]*)\)/, "$1") + "]";
                  }
                  if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
                    createNonEnumerableProperty(value, "name", name);
                  }
                  state = enforceInternalState(value);
                  if (!state.source) {
                    state.source = TEMPLATE.join(typeof name == "string" ? name : "");
                  }
                }
                if (O === global2) {
                  if (simple)
                    O[key] = value;
                  else
                    setGlobal(key, value);
                  return;
                } else if (!unsafe) {
                  delete O[key];
                } else if (!noTargetGet && O[key]) {
                  simple = true;
                }
                if (simple)
                  O[key] = value;
                else
                  createNonEnumerableProperty(O, key, value);
              })(Function.prototype, "toString", function toString() {
                return isCallable(this) && getInternalState(this).source || inspectSource(this);
              });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var isCallable = __w_pdfjs_require__2(25);
              var store = __w_pdfjs_require__2(40);
              var functionToString = uncurryThis(Function.toString);
              if (!isCallable(store.inspectSource)) {
                store.inspectSource = function(it) {
                  return functionToString(it);
                };
              }
              module2.exports = store.inspectSource;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var NATIVE_WEAK_MAP = __w_pdfjs_require__2(53);
              var global2 = __w_pdfjs_require__2(10);
              var uncurryThis = __w_pdfjs_require__2(19);
              var isObject = __w_pdfjs_require__2(24);
              var createNonEnumerableProperty = __w_pdfjs_require__2(47);
              var hasOwn = __w_pdfjs_require__2(42);
              var shared = __w_pdfjs_require__2(40);
              var sharedKey = __w_pdfjs_require__2(54);
              var hiddenKeys = __w_pdfjs_require__2(55);
              var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
              var TypeError2 = global2.TypeError;
              var WeakMap2 = global2.WeakMap;
              var set, get, has;
              var enforce = function(it) {
                return has(it) ? get(it) : set(it, {});
              };
              var getterFor = function(TYPE) {
                return function(it) {
                  var state;
                  if (!isObject(it) || (state = get(it)).type !== TYPE) {
                    throw TypeError2("Incompatible receiver, " + TYPE + " required");
                  }
                  return state;
                };
              };
              if (NATIVE_WEAK_MAP || shared.state) {
                var store = shared.state || (shared.state = new WeakMap2());
                var wmget = uncurryThis(store.get);
                var wmhas = uncurryThis(store.has);
                var wmset = uncurryThis(store.set);
                set = function(it, metadata) {
                  if (wmhas(store, it))
                    throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
                  metadata.facade = it;
                  wmset(store, it, metadata);
                  return metadata;
                };
                get = function(it) {
                  return wmget(store, it) || {};
                };
                has = function(it) {
                  return wmhas(store, it);
                };
              } else {
                var STATE = sharedKey("state");
                hiddenKeys[STATE] = true;
                set = function(it, metadata) {
                  if (hasOwn(it, STATE))
                    throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
                  metadata.facade = it;
                  createNonEnumerableProperty(it, STATE, metadata);
                  return metadata;
                };
                get = function(it) {
                  return hasOwn(it, STATE) ? it[STATE] : {};
                };
                has = function(it) {
                  return hasOwn(it, STATE);
                };
              }
              module2.exports = {
                set,
                get,
                has,
                enforce,
                getterFor
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var isCallable = __w_pdfjs_require__2(25);
              var inspectSource = __w_pdfjs_require__2(51);
              var WeakMap2 = global2.WeakMap;
              module2.exports = isCallable(WeakMap2) && /native code/.test(inspectSource(WeakMap2));
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var shared = __w_pdfjs_require__2(38);
              var uid = __w_pdfjs_require__2(44);
              var keys = shared("keys");
              module2.exports = function(key) {
                return keys[key] || (keys[key] = uid(key));
              };
            },
            (module2) => {
              module2.exports = {};
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var DESCRIPTORS = __w_pdfjs_require__2(12);
              var hasOwn = __w_pdfjs_require__2(42);
              var FunctionPrototype = Function.prototype;
              var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
              var EXISTS = hasOwn(FunctionPrototype, "name");
              var PROPER = EXISTS && function something() {
              }.name === "something";
              var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
              module2.exports = {
                EXISTS,
                PROPER,
                CONFIGURABLE
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var hasOwn = __w_pdfjs_require__2(42);
              var ownKeys = __w_pdfjs_require__2(58);
              var getOwnPropertyDescriptorModule = __w_pdfjs_require__2(11);
              var definePropertyModule = __w_pdfjs_require__2(48);
              module2.exports = function(target, source) {
                var keys = ownKeys(source);
                var defineProperty = definePropertyModule.f;
                var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  if (!hasOwn(target, key))
                    defineProperty(target, key, getOwnPropertyDescriptor(source, key));
                }
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var getBuiltIn = __w_pdfjs_require__2(27);
              var uncurryThis = __w_pdfjs_require__2(19);
              var getOwnPropertyNamesModule = __w_pdfjs_require__2(59);
              var getOwnPropertySymbolsModule = __w_pdfjs_require__2(67);
              var anObject = __w_pdfjs_require__2(49);
              var concat = uncurryThis([].concat);
              module2.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
                var keys = getOwnPropertyNamesModule.f(anObject(it));
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
              };
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              var internalObjectKeys = __w_pdfjs_require__2(60);
              var enumBugKeys = __w_pdfjs_require__2(66);
              var hiddenKeys = enumBugKeys.concat("length", "prototype");
              exports2.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                return internalObjectKeys(O, hiddenKeys);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var hasOwn = __w_pdfjs_require__2(42);
              var toIndexedObject = __w_pdfjs_require__2(17);
              var indexOf = __w_pdfjs_require__2(61).indexOf;
              var hiddenKeys = __w_pdfjs_require__2(55);
              var push = uncurryThis([].push);
              module2.exports = function(object, names) {
                var O = toIndexedObject(object);
                var i = 0;
                var result = [];
                var key;
                for (key in O)
                  !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
                while (names.length > i)
                  if (hasOwn(O, key = names[i++])) {
                    ~indexOf(result, key) || push(result, key);
                  }
                return result;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var toIndexedObject = __w_pdfjs_require__2(17);
              var toAbsoluteIndex = __w_pdfjs_require__2(62);
              var lengthOfArrayLike = __w_pdfjs_require__2(64);
              var createMethod = function(IS_INCLUDES) {
                return function($this, el, fromIndex) {
                  var O = toIndexedObject($this);
                  var length = lengthOfArrayLike(O);
                  var index = toAbsoluteIndex(fromIndex, length);
                  var value;
                  if (IS_INCLUDES && el != el)
                    while (length > index) {
                      value = O[index++];
                      if (value != value)
                        return true;
                    }
                  else
                    for (; length > index; index++) {
                      if ((IS_INCLUDES || index in O) && O[index] === el)
                        return IS_INCLUDES || index || 0;
                    }
                  return !IS_INCLUDES && -1;
                };
              };
              module2.exports = {
                includes: createMethod(true),
                indexOf: createMethod(false)
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var toIntegerOrInfinity = __w_pdfjs_require__2(63);
              var max = Math.max;
              var min = Math.min;
              module2.exports = function(index, length) {
                var integer = toIntegerOrInfinity(index);
                return integer < 0 ? max(integer + length, 0) : min(integer, length);
              };
            },
            (module2) => {
              var ceil = Math.ceil;
              var floor = Math.floor;
              module2.exports = function(argument) {
                var number = +argument;
                return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var toLength = __w_pdfjs_require__2(65);
              module2.exports = function(obj) {
                return toLength(obj.length);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var toIntegerOrInfinity = __w_pdfjs_require__2(63);
              var min = Math.min;
              module2.exports = function(argument) {
                return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
              };
            },
            (module2) => {
              module2.exports = [
                "constructor",
                "hasOwnProperty",
                "isPrototypeOf",
                "propertyIsEnumerable",
                "toLocaleString",
                "toString",
                "valueOf"
              ];
            },
            (__unused_webpack_module, exports2) => {
              exports2.f = Object.getOwnPropertySymbols;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var fails = __w_pdfjs_require__2(13);
              var isCallable = __w_pdfjs_require__2(25);
              var replacement = /#|\.prototype\./;
              var isForced = function(feature, detection) {
                var value = data[normalize(feature)];
                return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
              };
              var normalize = isForced.normalize = function(string) {
                return String(string).replace(replacement, ".").toLowerCase();
              };
              var data = isForced.data = {};
              var NATIVE = isForced.NATIVE = "N";
              var POLYFILL = isForced.POLYFILL = "P";
              module2.exports = isForced;
            },
            (module2, exports2, __w_pdfjs_require__2) => {
              "use strict";
              var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              (function(global2, factory) {
                (false ? 0 : _typeof(exports2)) === "object" && true ? module2.exports = factory() : true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports2, __w_pdfjs_require__2, exports2, module2) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
              })(void 0, function() {
                "use strict";
                function fromArray(array) {
                  var m = new CSSMatrix();
                  var a = Array.from(array);
                  if (!a.every(function(n) {
                    return !Number.isNaN(n);
                  })) {
                    throw TypeError('CSSMatrix: "' + array + '" must only have numbers.');
                  }
                  if (a.length === 16) {
                    var m11 = a[0];
                    var m12 = a[1];
                    var m13 = a[2];
                    var m14 = a[3];
                    var m21 = a[4];
                    var m22 = a[5];
                    var m23 = a[6];
                    var m24 = a[7];
                    var m31 = a[8];
                    var m32 = a[9];
                    var m33 = a[10];
                    var m34 = a[11];
                    var m41 = a[12];
                    var m42 = a[13];
                    var m43 = a[14];
                    var m44 = a[15];
                    m.m11 = m11;
                    m.a = m11;
                    m.m21 = m21;
                    m.c = m21;
                    m.m31 = m31;
                    m.m41 = m41;
                    m.e = m41;
                    m.m12 = m12;
                    m.b = m12;
                    m.m22 = m22;
                    m.d = m22;
                    m.m32 = m32;
                    m.m42 = m42;
                    m.f = m42;
                    m.m13 = m13;
                    m.m23 = m23;
                    m.m33 = m33;
                    m.m43 = m43;
                    m.m14 = m14;
                    m.m24 = m24;
                    m.m34 = m34;
                    m.m44 = m44;
                  } else if (a.length === 6) {
                    var M11 = a[0];
                    var M12 = a[1];
                    var M21 = a[2];
                    var M22 = a[3];
                    var M41 = a[4];
                    var M42 = a[5];
                    m.m11 = M11;
                    m.a = M11;
                    m.m12 = M12;
                    m.b = M12;
                    m.m21 = M21;
                    m.c = M21;
                    m.m22 = M22;
                    m.d = M22;
                    m.m41 = M41;
                    m.e = M41;
                    m.m42 = M42;
                    m.f = M42;
                  } else {
                    throw new TypeError("CSSMatrix: expecting an Array of 6/16 values.");
                  }
                  return m;
                }
                function fromMatrix(m) {
                  var keys = Object.keys(new CSSMatrix());
                  if (_typeof(m) === "object" && keys.every(function(k) {
                    return k in m;
                  })) {
                    return fromArray([m.m11, m.m12, m.m13, m.m14, m.m21, m.m22, m.m23, m.m24, m.m31, m.m32, m.m33, m.m34, m.m41, m.m42, m.m43, m.m44]);
                  }
                  throw TypeError('CSSMatrix: "' + m + '" is not a DOMMatrix / CSSMatrix / JSON compatible object.');
                }
                function fromString(source) {
                  if (typeof source !== "string") {
                    throw TypeError('CSSMatrix: "' + source + '" is not a string.');
                  }
                  var str = String(source).replace(/\s/g, "");
                  var m = new CSSMatrix();
                  var invalidStringError = 'CSSMatrix: invalid transform string "' + source + '"';
                  str.split(")").filter(function(f) {
                    return f;
                  }).forEach(function(tf) {
                    var ref = tf.split("(");
                    var prop = ref[0];
                    var value = ref[1];
                    if (!value) {
                      throw TypeError(invalidStringError);
                    }
                    var components = value.split(",").map(function(n) {
                      return n.includes("rad") ? parseFloat(n) * (180 / Math.PI) : parseFloat(n);
                    });
                    var x = components[0];
                    var y = components[1];
                    var z = components[2];
                    var a = components[3];
                    var xyz = [x, y, z];
                    var xyza = [x, y, z, a];
                    if (prop === "perspective" && x && [y, z].every(function(n) {
                      return n === void 0;
                    })) {
                      m.m34 = -1 / x;
                    } else if (prop.includes("matrix") && [6, 16].includes(components.length) && components.every(function(n) {
                      return !Number.isNaN(+n);
                    })) {
                      var values = components.map(function(n) {
                        return Math.abs(n) < 1e-6 ? 0 : n;
                      });
                      m = m.multiply(fromArray(values));
                    } else if (prop === "translate3d" && xyz.every(function(n) {
                      return !Number.isNaN(+n);
                    })) {
                      m = m.translate(x, y, z);
                    } else if (prop === "translate" && x && z === void 0) {
                      m = m.translate(x, y || 0, 0);
                    } else if (prop === "rotate3d" && xyza.every(function(n) {
                      return !Number.isNaN(+n);
                    }) && a) {
                      m = m.rotateAxisAngle(x, y, z, a);
                    } else if (prop === "rotate" && x && [y, z].every(function(n) {
                      return n === void 0;
                    })) {
                      m = m.rotate(0, 0, x);
                    } else if (prop === "scale3d" && xyz.every(function(n) {
                      return !Number.isNaN(+n);
                    }) && xyz.some(function(n) {
                      return n !== 1;
                    })) {
                      m = m.scale(x, y, z);
                    } else if (prop === "scale" && !Number.isNaN(x) && x !== 1 && z === void 0) {
                      var nosy = Number.isNaN(+y);
                      var sy = nosy ? x : y;
                      m = m.scale(x, sy, 1);
                    } else if (prop === "skew" && x && z === void 0) {
                      m = m.skewX(x);
                      m = y ? m.skewY(y) : m;
                    } else if (/[XYZ]/.test(prop) && x && [y, z].every(function(n) {
                      return n === void 0;
                    }) && ["translate", "rotate", "scale", "skew"].some(function(p) {
                      return prop.includes(p);
                    })) {
                      if (["skewX", "skewY"].includes(prop)) {
                        m = m[prop](x);
                      } else {
                        var fn = prop.replace(/[XYZ]/, "");
                        var axis = prop.replace(fn, "");
                        var idx = ["X", "Y", "Z"].indexOf(axis);
                        var axeValues = [idx === 0 ? x : 0, idx === 1 ? x : 0, idx === 2 ? x : 0];
                        m = m[fn].apply(m, axeValues);
                      }
                    } else {
                      throw TypeError(invalidStringError);
                    }
                  });
                  return m;
                }
                function Translate(x, y, z) {
                  var m = new CSSMatrix();
                  m.m41 = x;
                  m.e = x;
                  m.m42 = y;
                  m.f = y;
                  m.m43 = z;
                  return m;
                }
                function Rotate(rx, ry, rz) {
                  var m = new CSSMatrix();
                  var degToRad = Math.PI / 180;
                  var radX = rx * degToRad;
                  var radY = ry * degToRad;
                  var radZ = rz * degToRad;
                  var cosx = Math.cos(radX);
                  var sinx = -Math.sin(radX);
                  var cosy = Math.cos(radY);
                  var siny = -Math.sin(radY);
                  var cosz = Math.cos(radZ);
                  var sinz = -Math.sin(radZ);
                  var m11 = cosy * cosz;
                  var m12 = -cosy * sinz;
                  m.m11 = m11;
                  m.a = m11;
                  m.m12 = m12;
                  m.b = m12;
                  m.m13 = siny;
                  var m21 = sinx * siny * cosz + cosx * sinz;
                  m.m21 = m21;
                  m.c = m21;
                  var m22 = cosx * cosz - sinx * siny * sinz;
                  m.m22 = m22;
                  m.d = m22;
                  m.m23 = -sinx * cosy;
                  m.m31 = sinx * sinz - cosx * siny * cosz;
                  m.m32 = sinx * cosz + cosx * siny * sinz;
                  m.m33 = cosx * cosy;
                  return m;
                }
                function RotateAxisAngle(x, y, z, alpha) {
                  var m = new CSSMatrix();
                  var angle = alpha * (Math.PI / 360);
                  var sinA = Math.sin(angle);
                  var cosA = Math.cos(angle);
                  var sinA2 = sinA * sinA;
                  var length = Math.sqrt(x * x + y * y + z * z);
                  var X = x;
                  var Y = y;
                  var Z = z;
                  if (length === 0) {
                    X = 0;
                    Y = 0;
                    Z = 1;
                  } else {
                    X /= length;
                    Y /= length;
                    Z /= length;
                  }
                  var x2 = X * X;
                  var y2 = Y * Y;
                  var z2 = Z * Z;
                  var m11 = 1 - 2 * (y2 + z2) * sinA2;
                  m.m11 = m11;
                  m.a = m11;
                  var m12 = 2 * (X * Y * sinA2 + Z * sinA * cosA);
                  m.m12 = m12;
                  m.b = m12;
                  m.m13 = 2 * (X * Z * sinA2 - Y * sinA * cosA);
                  var m21 = 2 * (Y * X * sinA2 - Z * sinA * cosA);
                  m.m21 = m21;
                  m.c = m21;
                  var m22 = 1 - 2 * (z2 + x2) * sinA2;
                  m.m22 = m22;
                  m.d = m22;
                  m.m23 = 2 * (Y * Z * sinA2 + X * sinA * cosA);
                  m.m31 = 2 * (Z * X * sinA2 + Y * sinA * cosA);
                  m.m32 = 2 * (Z * Y * sinA2 - X * sinA * cosA);
                  m.m33 = 1 - 2 * (x2 + y2) * sinA2;
                  return m;
                }
                function Scale(x, y, z) {
                  var m = new CSSMatrix();
                  m.m11 = x;
                  m.a = x;
                  m.m22 = y;
                  m.d = y;
                  m.m33 = z;
                  return m;
                }
                function SkewX(angle) {
                  var m = new CSSMatrix();
                  var radA = angle * Math.PI / 180;
                  var t = Math.tan(radA);
                  m.m21 = t;
                  m.c = t;
                  return m;
                }
                function SkewY(angle) {
                  var m = new CSSMatrix();
                  var radA = angle * Math.PI / 180;
                  var t = Math.tan(radA);
                  m.m12 = t;
                  m.b = t;
                  return m;
                }
                function Multiply(m1, m2) {
                  var m11 = m2.m11 * m1.m11 + m2.m12 * m1.m21 + m2.m13 * m1.m31 + m2.m14 * m1.m41;
                  var m12 = m2.m11 * m1.m12 + m2.m12 * m1.m22 + m2.m13 * m1.m32 + m2.m14 * m1.m42;
                  var m13 = m2.m11 * m1.m13 + m2.m12 * m1.m23 + m2.m13 * m1.m33 + m2.m14 * m1.m43;
                  var m14 = m2.m11 * m1.m14 + m2.m12 * m1.m24 + m2.m13 * m1.m34 + m2.m14 * m1.m44;
                  var m21 = m2.m21 * m1.m11 + m2.m22 * m1.m21 + m2.m23 * m1.m31 + m2.m24 * m1.m41;
                  var m22 = m2.m21 * m1.m12 + m2.m22 * m1.m22 + m2.m23 * m1.m32 + m2.m24 * m1.m42;
                  var m23 = m2.m21 * m1.m13 + m2.m22 * m1.m23 + m2.m23 * m1.m33 + m2.m24 * m1.m43;
                  var m24 = m2.m21 * m1.m14 + m2.m22 * m1.m24 + m2.m23 * m1.m34 + m2.m24 * m1.m44;
                  var m31 = m2.m31 * m1.m11 + m2.m32 * m1.m21 + m2.m33 * m1.m31 + m2.m34 * m1.m41;
                  var m32 = m2.m31 * m1.m12 + m2.m32 * m1.m22 + m2.m33 * m1.m32 + m2.m34 * m1.m42;
                  var m33 = m2.m31 * m1.m13 + m2.m32 * m1.m23 + m2.m33 * m1.m33 + m2.m34 * m1.m43;
                  var m34 = m2.m31 * m1.m14 + m2.m32 * m1.m24 + m2.m33 * m1.m34 + m2.m34 * m1.m44;
                  var m41 = m2.m41 * m1.m11 + m2.m42 * m1.m21 + m2.m43 * m1.m31 + m2.m44 * m1.m41;
                  var m42 = m2.m41 * m1.m12 + m2.m42 * m1.m22 + m2.m43 * m1.m32 + m2.m44 * m1.m42;
                  var m43 = m2.m41 * m1.m13 + m2.m42 * m1.m23 + m2.m43 * m1.m33 + m2.m44 * m1.m43;
                  var m44 = m2.m41 * m1.m14 + m2.m42 * m1.m24 + m2.m43 * m1.m34 + m2.m44 * m1.m44;
                  return fromArray([m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44]);
                }
                var CSSMatrix = function CSSMatrix2() {
                  var args = [], len = arguments.length;
                  while (len--) {
                    args[len] = arguments[len];
                  }
                  var m = this;
                  m.a = 1;
                  m.b = 0;
                  m.c = 0;
                  m.d = 1;
                  m.e = 0;
                  m.f = 0;
                  m.m11 = 1;
                  m.m12 = 0;
                  m.m13 = 0;
                  m.m14 = 0;
                  m.m21 = 0;
                  m.m22 = 1;
                  m.m23 = 0;
                  m.m24 = 0;
                  m.m31 = 0;
                  m.m32 = 0;
                  m.m33 = 1;
                  m.m34 = 0;
                  m.m41 = 0;
                  m.m42 = 0;
                  m.m43 = 0;
                  m.m44 = 1;
                  if (args && args.length) {
                    var ARGS = [16, 6].some(function(l) {
                      return l === args.length;
                    }) ? args : args[0];
                    return m.setMatrixValue(ARGS);
                  }
                  return m;
                };
                var prototypeAccessors = {
                  isIdentity: {
                    configurable: true
                  },
                  is2D: {
                    configurable: true
                  }
                };
                prototypeAccessors.isIdentity.set = function(value) {
                  this.isIdentity = value;
                };
                prototypeAccessors.isIdentity.get = function() {
                  var m = this;
                  return m.m11 === 1 && m.m12 === 0 && m.m13 === 0 && m.m14 === 0 && m.m21 === 0 && m.m22 === 1 && m.m23 === 0 && m.m24 === 0 && m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0 && m.m41 === 0 && m.m42 === 0 && m.m43 === 0 && m.m44 === 1;
                };
                prototypeAccessors.is2D.get = function() {
                  var m = this;
                  return m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0 && m.m43 === 0 && m.m44 === 1;
                };
                prototypeAccessors.is2D.set = function(value) {
                  this.is2D = value;
                };
                CSSMatrix.prototype.setMatrixValue = function setMatrixValue(source) {
                  var m = this;
                  if ([Array, Float64Array, Float32Array].some(function(a) {
                    return source instanceof a;
                  })) {
                    return fromArray(source);
                  }
                  if (typeof source === "string" && source.length && source !== "none") {
                    return fromString(source);
                  }
                  if (_typeof(source) === "object") {
                    return fromMatrix(source);
                  }
                  return m;
                };
                CSSMatrix.prototype.toArray = function toArray() {
                  var m = this;
                  var pow = Math.pow(10, 6);
                  var result;
                  if (m.is2D) {
                    result = [m.a, m.b, m.c, m.d, m.e, m.f];
                  } else {
                    result = [m.m11, m.m12, m.m13, m.m14, m.m21, m.m22, m.m23, m.m24, m.m31, m.m32, m.m33, m.m34, m.m41, m.m42, m.m43, m.m44];
                  }
                  return result.map(function(n) {
                    return Math.abs(n) < 1e-6 ? 0 : (n * pow >> 0) / pow;
                  });
                };
                CSSMatrix.prototype.toString = function toString() {
                  var m = this;
                  var values = m.toArray();
                  var type = m.is2D ? "matrix" : "matrix3d";
                  return type + "(" + values + ")";
                };
                CSSMatrix.prototype.toJSON = function toJSON() {
                  var m = this;
                  var is2D = m.is2D;
                  var isIdentity = m.isIdentity;
                  return Object.assign({}, m, {
                    is2D,
                    isIdentity
                  });
                };
                CSSMatrix.prototype.multiply = function multiply(m2) {
                  return Multiply(this, m2);
                };
                CSSMatrix.prototype.translate = function translate(x, y, z) {
                  var X = x;
                  var Y = y;
                  var Z = z;
                  if (Z === void 0) {
                    Z = 0;
                  }
                  if (Y === void 0) {
                    Y = 0;
                  }
                  return Multiply(this, Translate(X, Y, Z));
                };
                CSSMatrix.prototype.scale = function scale(x, y, z) {
                  var X = x;
                  var Y = y;
                  var Z = z;
                  if (Y === void 0) {
                    Y = x;
                  }
                  if (Z === void 0) {
                    Z = 1;
                  }
                  return Multiply(this, Scale(X, Y, Z));
                };
                CSSMatrix.prototype.rotate = function rotate(rx, ry, rz) {
                  var RX = rx;
                  var RY = ry;
                  var RZ = rz;
                  if (RY === void 0) {
                    RY = 0;
                  }
                  if (RZ === void 0) {
                    RZ = RX;
                    RX = 0;
                  }
                  return Multiply(this, Rotate(RX, RY, RZ));
                };
                CSSMatrix.prototype.rotateAxisAngle = function rotateAxisAngle(x, y, z, angle) {
                  if ([x, y, z, angle].some(function(n) {
                    return Number.isNaN(n);
                  })) {
                    throw new TypeError("CSSMatrix: expecting 4 values");
                  }
                  return Multiply(this, RotateAxisAngle(x, y, z, angle));
                };
                CSSMatrix.prototype.skewX = function skewX(angle) {
                  return Multiply(this, SkewX(angle));
                };
                CSSMatrix.prototype.skewY = function skewY(angle) {
                  return Multiply(this, SkewY(angle));
                };
                CSSMatrix.prototype.transformPoint = function transformPoint(v) {
                  var M = this;
                  var m = Translate(v.x, v.y, v.z);
                  m.m44 = v.w || 1;
                  m = M.multiply(m);
                  return {
                    x: m.m41,
                    y: m.m42,
                    z: m.m43,
                    w: m.m44
                  };
                };
                CSSMatrix.prototype.transform = function transform(t) {
                  var m = this;
                  var x = m.m11 * t.x + m.m12 * t.y + m.m13 * t.z + m.m14 * t.w;
                  var y = m.m21 * t.x + m.m22 * t.y + m.m23 * t.z + m.m24 * t.w;
                  var z = m.m31 * t.x + m.m32 * t.y + m.m33 * t.z + m.m34 * t.w;
                  var w = m.m41 * t.x + m.m42 * t.y + m.m43 * t.z + m.m44 * t.w;
                  return {
                    x: x / w,
                    y: y / w,
                    z: z / w,
                    w
                  };
                };
                Object.defineProperties(CSSMatrix.prototype, prototypeAccessors);
                Object.assign(CSSMatrix, {
                  Translate,
                  Rotate,
                  RotateAxisAngle,
                  Scale,
                  SkewX,
                  SkewY,
                  Multiply,
                  fromArray,
                  fromMatrix,
                  fromString
                });
                var version = "0.0.24";
                var Version = version;
                Object.assign(CSSMatrix, {
                  Version
                });
                return CSSMatrix;
              });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              __w_pdfjs_require__2(71);
              __w_pdfjs_require__2(86);
              var path = __w_pdfjs_require__2(96);
              module2.exports = path.Object.fromEntries;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var toIndexedObject = __w_pdfjs_require__2(17);
              var addToUnscopables = __w_pdfjs_require__2(72);
              var Iterators = __w_pdfjs_require__2(77);
              var InternalStateModule = __w_pdfjs_require__2(52);
              var defineIterator = __w_pdfjs_require__2(78);
              var ARRAY_ITERATOR = "Array Iterator";
              var setInternalState = InternalStateModule.set;
              var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
              module2.exports = defineIterator(Array, "Array", function(iterated, kind) {
                setInternalState(this, {
                  type: ARRAY_ITERATOR,
                  target: toIndexedObject(iterated),
                  index: 0,
                  kind
                });
              }, function() {
                var state = getInternalState(this);
                var target = state.target;
                var kind = state.kind;
                var index = state.index++;
                if (!target || index >= target.length) {
                  state.target = void 0;
                  return {
                    value: void 0,
                    done: true
                  };
                }
                if (kind == "keys")
                  return {
                    value: index,
                    done: false
                  };
                if (kind == "values")
                  return {
                    value: target[index],
                    done: false
                  };
                return {
                  value: [
                    index,
                    target[index]
                  ],
                  done: false
                };
              }, "values");
              Iterators.Arguments = Iterators.Array;
              addToUnscopables("keys");
              addToUnscopables("values");
              addToUnscopables("entries");
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var create = __w_pdfjs_require__2(73);
              var definePropertyModule = __w_pdfjs_require__2(48);
              var UNSCOPABLES = wellKnownSymbol("unscopables");
              var ArrayPrototype = Array.prototype;
              if (ArrayPrototype[UNSCOPABLES] == void 0) {
                definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
                  configurable: true,
                  value: create(null)
                });
              }
              module2.exports = function(key) {
                ArrayPrototype[UNSCOPABLES][key] = true;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var anObject = __w_pdfjs_require__2(49);
              var defineProperties = __w_pdfjs_require__2(74);
              var enumBugKeys = __w_pdfjs_require__2(66);
              var hiddenKeys = __w_pdfjs_require__2(55);
              var html = __w_pdfjs_require__2(76);
              var documentCreateElement = __w_pdfjs_require__2(46);
              var sharedKey = __w_pdfjs_require__2(54);
              var GT = ">";
              var LT = "<";
              var PROTOTYPE = "prototype";
              var SCRIPT = "script";
              var IE_PROTO = sharedKey("IE_PROTO");
              var EmptyConstructor = function() {
              };
              var scriptTag = function(content) {
                return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
              };
              var NullProtoObjectViaActiveX = function(activeXDocument2) {
                activeXDocument2.write(scriptTag(""));
                activeXDocument2.close();
                var temp = activeXDocument2.parentWindow.Object;
                activeXDocument2 = null;
                return temp;
              };
              var NullProtoObjectViaIFrame = function() {
                var iframe = documentCreateElement("iframe");
                var JS = "java" + SCRIPT + ":";
                var iframeDocument;
                iframe.style.display = "none";
                html.appendChild(iframe);
                iframe.src = String(JS);
                iframeDocument = iframe.contentWindow.document;
                iframeDocument.open();
                iframeDocument.write(scriptTag("document.F=Object"));
                iframeDocument.close();
                return iframeDocument.F;
              };
              var activeXDocument;
              var NullProtoObject = function() {
                try {
                  activeXDocument = new ActiveXObject("htmlfile");
                } catch (error) {
                }
                NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
                var length = enumBugKeys.length;
                while (length--)
                  delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
                return NullProtoObject();
              };
              hiddenKeys[IE_PROTO] = true;
              module2.exports = Object.create || function create(O, Properties) {
                var result;
                if (O !== null) {
                  EmptyConstructor[PROTOTYPE] = anObject(O);
                  result = new EmptyConstructor();
                  EmptyConstructor[PROTOTYPE] = null;
                  result[IE_PROTO] = O;
                } else
                  result = NullProtoObject();
                return Properties === void 0 ? result : defineProperties(result, Properties);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var DESCRIPTORS = __w_pdfjs_require__2(12);
              var definePropertyModule = __w_pdfjs_require__2(48);
              var anObject = __w_pdfjs_require__2(49);
              var toIndexedObject = __w_pdfjs_require__2(17);
              var objectKeys = __w_pdfjs_require__2(75);
              module2.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
                anObject(O);
                var props = toIndexedObject(Properties);
                var keys = objectKeys(Properties);
                var length = keys.length;
                var index = 0;
                var key;
                while (length > index)
                  definePropertyModule.f(O, key = keys[index++], props[key]);
                return O;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var internalObjectKeys = __w_pdfjs_require__2(60);
              var enumBugKeys = __w_pdfjs_require__2(66);
              module2.exports = Object.keys || function keys(O) {
                return internalObjectKeys(O, enumBugKeys);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var getBuiltIn = __w_pdfjs_require__2(27);
              module2.exports = getBuiltIn("document", "documentElement");
            },
            (module2) => {
              module2.exports = {};
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var $ = __w_pdfjs_require__2(9);
              var call = __w_pdfjs_require__2(14);
              var IS_PURE = __w_pdfjs_require__2(39);
              var FunctionName = __w_pdfjs_require__2(56);
              var isCallable = __w_pdfjs_require__2(25);
              var createIteratorConstructor = __w_pdfjs_require__2(79);
              var getPrototypeOf = __w_pdfjs_require__2(81);
              var setPrototypeOf = __w_pdfjs_require__2(84);
              var setToStringTag = __w_pdfjs_require__2(83);
              var createNonEnumerableProperty = __w_pdfjs_require__2(47);
              var redefine = __w_pdfjs_require__2(50);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var Iterators = __w_pdfjs_require__2(77);
              var IteratorsCore = __w_pdfjs_require__2(80);
              var PROPER_FUNCTION_NAME = FunctionName.PROPER;
              var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
              var IteratorPrototype = IteratorsCore.IteratorPrototype;
              var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
              var ITERATOR = wellKnownSymbol("iterator");
              var KEYS = "keys";
              var VALUES = "values";
              var ENTRIES = "entries";
              var returnThis = function() {
                return this;
              };
              module2.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
                createIteratorConstructor(IteratorConstructor, NAME, next);
                var getIterationMethod = function(KIND) {
                  if (KIND === DEFAULT && defaultIterator)
                    return defaultIterator;
                  if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
                    return IterablePrototype[KIND];
                  switch (KIND) {
                    case KEYS:
                      return function keys() {
                        return new IteratorConstructor(this, KIND);
                      };
                    case VALUES:
                      return function values() {
                        return new IteratorConstructor(this, KIND);
                      };
                    case ENTRIES:
                      return function entries() {
                        return new IteratorConstructor(this, KIND);
                      };
                  }
                  return function() {
                    return new IteratorConstructor(this);
                  };
                };
                var TO_STRING_TAG = NAME + " Iterator";
                var INCORRECT_VALUES_NAME = false;
                var IterablePrototype = Iterable.prototype;
                var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
                var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
                var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
                var CurrentIteratorPrototype, methods, KEY;
                if (anyNativeIterator) {
                  CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
                  if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                    if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                      if (setPrototypeOf) {
                        setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                      } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                        redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
                      }
                    }
                    setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                    if (IS_PURE)
                      Iterators[TO_STRING_TAG] = returnThis;
                  }
                }
                if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
                  if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
                    createNonEnumerableProperty(IterablePrototype, "name", VALUES);
                  } else {
                    INCORRECT_VALUES_NAME = true;
                    defaultIterator = function values() {
                      return call(nativeIterator, this);
                    };
                  }
                }
                if (DEFAULT) {
                  methods = {
                    values: getIterationMethod(VALUES),
                    keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                    entries: getIterationMethod(ENTRIES)
                  };
                  if (FORCED)
                    for (KEY in methods) {
                      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                        redefine(IterablePrototype, KEY, methods[KEY]);
                      }
                    }
                  else
                    $({
                      target: NAME,
                      proto: true,
                      forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
                    }, methods);
                }
                if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
                  redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
                }
                Iterators[NAME] = defaultIterator;
                return methods;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var IteratorPrototype = __w_pdfjs_require__2(80).IteratorPrototype;
              var create = __w_pdfjs_require__2(73);
              var createPropertyDescriptor = __w_pdfjs_require__2(16);
              var setToStringTag = __w_pdfjs_require__2(83);
              var Iterators = __w_pdfjs_require__2(77);
              var returnThis = function() {
                return this;
              };
              module2.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
                var TO_STRING_TAG = NAME + " Iterator";
                IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
                setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
                Iterators[TO_STRING_TAG] = returnThis;
                return IteratorConstructor;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var fails = __w_pdfjs_require__2(13);
              var isCallable = __w_pdfjs_require__2(25);
              var create = __w_pdfjs_require__2(73);
              var getPrototypeOf = __w_pdfjs_require__2(81);
              var redefine = __w_pdfjs_require__2(50);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var IS_PURE = __w_pdfjs_require__2(39);
              var ITERATOR = wellKnownSymbol("iterator");
              var BUGGY_SAFARI_ITERATORS = false;
              var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
              if ([].keys) {
                arrayIterator = [].keys();
                if (!("next" in arrayIterator))
                  BUGGY_SAFARI_ITERATORS = true;
                else {
                  PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
                  if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
                    IteratorPrototype = PrototypeOfArrayIteratorPrototype;
                }
              }
              var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
                var test = {};
                return IteratorPrototype[ITERATOR].call(test) !== test;
              });
              if (NEW_ITERATOR_PROTOTYPE)
                IteratorPrototype = {};
              else if (IS_PURE)
                IteratorPrototype = create(IteratorPrototype);
              if (!isCallable(IteratorPrototype[ITERATOR])) {
                redefine(IteratorPrototype, ITERATOR, function() {
                  return this;
                });
              }
              module2.exports = {
                IteratorPrototype,
                BUGGY_SAFARI_ITERATORS
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var hasOwn = __w_pdfjs_require__2(42);
              var isCallable = __w_pdfjs_require__2(25);
              var toObject = __w_pdfjs_require__2(43);
              var sharedKey = __w_pdfjs_require__2(54);
              var CORRECT_PROTOTYPE_GETTER = __w_pdfjs_require__2(82);
              var IE_PROTO = sharedKey("IE_PROTO");
              var Object2 = global2.Object;
              var ObjectPrototype = Object2.prototype;
              module2.exports = CORRECT_PROTOTYPE_GETTER ? Object2.getPrototypeOf : function(O) {
                var object = toObject(O);
                if (hasOwn(object, IE_PROTO))
                  return object[IE_PROTO];
                var constructor = object.constructor;
                if (isCallable(constructor) && object instanceof constructor) {
                  return constructor.prototype;
                }
                return object instanceof Object2 ? ObjectPrototype : null;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var fails = __w_pdfjs_require__2(13);
              module2.exports = !fails(function() {
                function F() {
                }
                F.prototype.constructor = null;
                return Object.getPrototypeOf(new F()) !== F.prototype;
              });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var defineProperty = __w_pdfjs_require__2(48).f;
              var hasOwn = __w_pdfjs_require__2(42);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var TO_STRING_TAG = wellKnownSymbol("toStringTag");
              module2.exports = function(it, TAG, STATIC) {
                if (it && !hasOwn(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
                  defineProperty(it, TO_STRING_TAG, {
                    configurable: true,
                    value: TAG
                  });
                }
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var anObject = __w_pdfjs_require__2(49);
              var aPossiblePrototype = __w_pdfjs_require__2(85);
              module2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
                var CORRECT_SETTER = false;
                var test = {};
                var setter;
                try {
                  setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
                  setter(test, []);
                  CORRECT_SETTER = test instanceof Array;
                } catch (error) {
                }
                return function setPrototypeOf(O, proto) {
                  anObject(O);
                  aPossiblePrototype(proto);
                  if (CORRECT_SETTER)
                    setter(O, proto);
                  else
                    O.__proto__ = proto;
                  return O;
                };
              }() : void 0);
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var isCallable = __w_pdfjs_require__2(25);
              var String2 = global2.String;
              var TypeError2 = global2.TypeError;
              module2.exports = function(argument) {
                if (typeof argument == "object" || isCallable(argument))
                  return argument;
                throw TypeError2("Can't set " + String2(argument) + " as a prototype");
              };
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var $ = __w_pdfjs_require__2(9);
              var iterate = __w_pdfjs_require__2(87);
              var createProperty = __w_pdfjs_require__2(95);
              $({
                target: "Object",
                stat: true
              }, {
                fromEntries: function fromEntries(iterable) {
                  var obj = {};
                  iterate(iterable, function(k, v) {
                    createProperty(obj, k, v);
                  }, { AS_ENTRIES: true });
                  return obj;
                }
              });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var bind = __w_pdfjs_require__2(88);
              var call = __w_pdfjs_require__2(14);
              var anObject = __w_pdfjs_require__2(49);
              var tryToString = __w_pdfjs_require__2(35);
              var isArrayIteratorMethod = __w_pdfjs_require__2(89);
              var lengthOfArrayLike = __w_pdfjs_require__2(64);
              var isPrototypeOf = __w_pdfjs_require__2(28);
              var getIterator = __w_pdfjs_require__2(90);
              var getIteratorMethod = __w_pdfjs_require__2(91);
              var iteratorClose = __w_pdfjs_require__2(94);
              var TypeError2 = global2.TypeError;
              var Result = function(stopped, result) {
                this.stopped = stopped;
                this.result = result;
              };
              var ResultPrototype = Result.prototype;
              module2.exports = function(iterable, unboundFunction, options) {
                var that = options && options.that;
                var AS_ENTRIES = !!(options && options.AS_ENTRIES);
                var IS_ITERATOR = !!(options && options.IS_ITERATOR);
                var INTERRUPTED = !!(options && options.INTERRUPTED);
                var fn = bind(unboundFunction, that);
                var iterator, iterFn, index, length, result, next, step;
                var stop = function(condition) {
                  if (iterator)
                    iteratorClose(iterator, "normal", condition);
                  return new Result(true, condition);
                };
                var callFn = function(value) {
                  if (AS_ENTRIES) {
                    anObject(value);
                    return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
                  }
                  return INTERRUPTED ? fn(value, stop) : fn(value);
                };
                if (IS_ITERATOR) {
                  iterator = iterable;
                } else {
                  iterFn = getIteratorMethod(iterable);
                  if (!iterFn)
                    throw TypeError2(tryToString(iterable) + " is not iterable");
                  if (isArrayIteratorMethod(iterFn)) {
                    for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
                      result = callFn(iterable[index]);
                      if (result && isPrototypeOf(ResultPrototype, result))
                        return result;
                    }
                    return new Result(false);
                  }
                  iterator = getIterator(iterable, iterFn);
                }
                next = iterator.next;
                while (!(step = call(next, iterator)).done) {
                  try {
                    result = callFn(step.value);
                  } catch (error) {
                    iteratorClose(iterator, "throw", error);
                  }
                  if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
                    return result;
                }
                return new Result(false);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var aCallable = __w_pdfjs_require__2(34);
              var bind = uncurryThis(uncurryThis.bind);
              module2.exports = function(fn, that) {
                aCallable(fn);
                return that === void 0 ? fn : bind ? bind(fn, that) : function() {
                  return fn.apply(that, arguments);
                };
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var Iterators = __w_pdfjs_require__2(77);
              var ITERATOR = wellKnownSymbol("iterator");
              var ArrayPrototype = Array.prototype;
              module2.exports = function(it) {
                return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var call = __w_pdfjs_require__2(14);
              var aCallable = __w_pdfjs_require__2(34);
              var anObject = __w_pdfjs_require__2(49);
              var tryToString = __w_pdfjs_require__2(35);
              var getIteratorMethod = __w_pdfjs_require__2(91);
              var TypeError2 = global2.TypeError;
              module2.exports = function(argument, usingIterator) {
                var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
                if (aCallable(iteratorMethod))
                  return anObject(call(iteratorMethod, argument));
                throw TypeError2(tryToString(argument) + " is not iterable");
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var classof = __w_pdfjs_require__2(92);
              var getMethod = __w_pdfjs_require__2(33);
              var Iterators = __w_pdfjs_require__2(77);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var ITERATOR = wellKnownSymbol("iterator");
              module2.exports = function(it) {
                if (it != void 0)
                  return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var TO_STRING_TAG_SUPPORT = __w_pdfjs_require__2(93);
              var isCallable = __w_pdfjs_require__2(25);
              var classofRaw = __w_pdfjs_require__2(20);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var TO_STRING_TAG = wellKnownSymbol("toStringTag");
              var Object2 = global2.Object;
              var CORRECT_ARGUMENTS = classofRaw(function() {
                return arguments;
              }()) == "Arguments";
              var tryGet = function(it, key) {
                try {
                  return it[key];
                } catch (error) {
                }
              };
              module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
                var O, tag, result;
                return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = Object2(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable(O.callee) ? "Arguments" : result;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var TO_STRING_TAG = wellKnownSymbol("toStringTag");
              var test = {};
              test[TO_STRING_TAG] = "z";
              module2.exports = String(test) === "[object z]";
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var call = __w_pdfjs_require__2(14);
              var anObject = __w_pdfjs_require__2(49);
              var getMethod = __w_pdfjs_require__2(33);
              module2.exports = function(iterator, kind, value) {
                var innerResult, innerError;
                anObject(iterator);
                try {
                  innerResult = getMethod(iterator, "return");
                  if (!innerResult) {
                    if (kind === "throw")
                      throw value;
                    return value;
                  }
                  innerResult = call(innerResult, iterator);
                } catch (error) {
                  innerError = true;
                  innerResult = error;
                }
                if (kind === "throw")
                  throw value;
                if (innerError)
                  throw innerResult;
                anObject(innerResult);
                return value;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var toPropertyKey = __w_pdfjs_require__2(22);
              var definePropertyModule = __w_pdfjs_require__2(48);
              var createPropertyDescriptor = __w_pdfjs_require__2(16);
              module2.exports = function(object, key, value) {
                var propertyKey = toPropertyKey(key);
                if (propertyKey in object)
                  definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
                else
                  object[propertyKey] = value;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              module2.exports = global2;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              __w_pdfjs_require__2(98);
              __w_pdfjs_require__2(71);
              __w_pdfjs_require__2(105);
              __w_pdfjs_require__2(107);
              __w_pdfjs_require__2(129);
              __w_pdfjs_require__2(130);
              __w_pdfjs_require__2(131);
              __w_pdfjs_require__2(132);
              var path = __w_pdfjs_require__2(96);
              module2.exports = path.Promise;
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var $ = __w_pdfjs_require__2(9);
              var global2 = __w_pdfjs_require__2(10);
              var isPrototypeOf = __w_pdfjs_require__2(28);
              var getPrototypeOf = __w_pdfjs_require__2(81);
              var setPrototypeOf = __w_pdfjs_require__2(84);
              var copyConstructorProperties = __w_pdfjs_require__2(57);
              var create = __w_pdfjs_require__2(73);
              var createNonEnumerableProperty = __w_pdfjs_require__2(47);
              var createPropertyDescriptor = __w_pdfjs_require__2(16);
              var clearErrorStack = __w_pdfjs_require__2(99);
              var installErrorCause = __w_pdfjs_require__2(101);
              var iterate = __w_pdfjs_require__2(87);
              var normalizeStringArgument = __w_pdfjs_require__2(102);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var ERROR_STACK_INSTALLABLE = __w_pdfjs_require__2(104);
              var TO_STRING_TAG = wellKnownSymbol("toStringTag");
              var Error2 = global2.Error;
              var push = [].push;
              var $AggregateError = function AggregateError(errors, message) {
                var options = arguments.length > 2 ? arguments[2] : void 0;
                var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
                var that;
                if (setPrototypeOf) {
                  that = setPrototypeOf(new Error2(void 0), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
                } else {
                  that = isInstance ? this : create(AggregateErrorPrototype);
                  createNonEnumerableProperty(that, TO_STRING_TAG, "Error");
                }
                createNonEnumerableProperty(that, "message", normalizeStringArgument(message, ""));
                if (ERROR_STACK_INSTALLABLE)
                  createNonEnumerableProperty(that, "stack", clearErrorStack(that.stack, 1));
                installErrorCause(that, options);
                var errorsArray = [];
                iterate(errors, push, { that: errorsArray });
                createNonEnumerableProperty(that, "errors", errorsArray);
                return that;
              };
              if (setPrototypeOf)
                setPrototypeOf($AggregateError, Error2);
              else
                copyConstructorProperties($AggregateError, Error2);
              var AggregateErrorPrototype = $AggregateError.prototype = create(Error2.prototype, {
                constructor: createPropertyDescriptor(1, $AggregateError),
                message: createPropertyDescriptor(1, ""),
                name: createPropertyDescriptor(1, "AggregateError")
              });
              $({ global: true }, { AggregateError: $AggregateError });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var arraySlice = __w_pdfjs_require__2(100);
              var replace = uncurryThis("".replace);
              var split = uncurryThis("".split);
              var join = uncurryThis([].join);
              var TEST = function(arg) {
                return String(Error(arg).stack);
              }("zxcasd");
              var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
              var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
              var IS_FIREFOX_OR_SAFARI_STACK = /@[^\n]*\n/.test(TEST) && !/zxcasd/.test(TEST);
              module2.exports = function(stack, dropEntries) {
                if (typeof stack != "string")
                  return stack;
                if (IS_V8_OR_CHAKRA_STACK) {
                  while (dropEntries--)
                    stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
                } else if (IS_FIREFOX_OR_SAFARI_STACK) {
                  return join(arraySlice(split(stack, "\n"), dropEntries), "\n");
                }
                return stack;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var toAbsoluteIndex = __w_pdfjs_require__2(62);
              var lengthOfArrayLike = __w_pdfjs_require__2(64);
              var createProperty = __w_pdfjs_require__2(95);
              var Array2 = global2.Array;
              var max = Math.max;
              module2.exports = function(O, start, end) {
                var length = lengthOfArrayLike(O);
                var k = toAbsoluteIndex(start, length);
                var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
                var result = Array2(max(fin - k, 0));
                for (var n = 0; k < fin; k++, n++)
                  createProperty(result, n, O[k]);
                result.length = n;
                return result;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var isObject = __w_pdfjs_require__2(24);
              var createNonEnumerableProperty = __w_pdfjs_require__2(47);
              module2.exports = function(O, options) {
                if (isObject(options) && "cause" in options) {
                  createNonEnumerableProperty(O, "cause", options.cause);
                }
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var toString = __w_pdfjs_require__2(103);
              module2.exports = function(argument, $default) {
                return argument === void 0 ? arguments.length < 2 ? "" : $default : toString(argument);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var classof = __w_pdfjs_require__2(92);
              var String2 = global2.String;
              module2.exports = function(argument) {
                if (classof(argument) === "Symbol")
                  throw TypeError("Cannot convert a Symbol value to a string");
                return String2(argument);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var fails = __w_pdfjs_require__2(13);
              var createPropertyDescriptor = __w_pdfjs_require__2(16);
              module2.exports = !fails(function() {
                var error = Error("a");
                if (!("stack" in error))
                  return true;
                Object.defineProperty(error, "stack", createPropertyDescriptor(1, 7));
                return error.stack !== 7;
              });
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var TO_STRING_TAG_SUPPORT = __w_pdfjs_require__2(93);
              var redefine = __w_pdfjs_require__2(50);
              var toString = __w_pdfjs_require__2(106);
              if (!TO_STRING_TAG_SUPPORT) {
                redefine(Object.prototype, "toString", toString, { unsafe: true });
              }
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var TO_STRING_TAG_SUPPORT = __w_pdfjs_require__2(93);
              var classof = __w_pdfjs_require__2(92);
              module2.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
                return "[object " + classof(this) + "]";
              };
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var $ = __w_pdfjs_require__2(9);
              var IS_PURE = __w_pdfjs_require__2(39);
              var global2 = __w_pdfjs_require__2(10);
              var getBuiltIn = __w_pdfjs_require__2(27);
              var call = __w_pdfjs_require__2(14);
              var NativePromise = __w_pdfjs_require__2(108);
              var redefine = __w_pdfjs_require__2(50);
              var redefineAll = __w_pdfjs_require__2(109);
              var setPrototypeOf = __w_pdfjs_require__2(84);
              var setToStringTag = __w_pdfjs_require__2(83);
              var setSpecies = __w_pdfjs_require__2(110);
              var aCallable = __w_pdfjs_require__2(34);
              var isCallable = __w_pdfjs_require__2(25);
              var isObject = __w_pdfjs_require__2(24);
              var anInstance = __w_pdfjs_require__2(111);
              var inspectSource = __w_pdfjs_require__2(51);
              var iterate = __w_pdfjs_require__2(87);
              var checkCorrectnessOfIteration = __w_pdfjs_require__2(112);
              var speciesConstructor = __w_pdfjs_require__2(113);
              var task = __w_pdfjs_require__2(116).set;
              var microtask = __w_pdfjs_require__2(121);
              var promiseResolve = __w_pdfjs_require__2(124);
              var hostReportErrors = __w_pdfjs_require__2(126);
              var newPromiseCapabilityModule = __w_pdfjs_require__2(125);
              var perform = __w_pdfjs_require__2(127);
              var InternalStateModule = __w_pdfjs_require__2(52);
              var isForced = __w_pdfjs_require__2(68);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var IS_BROWSER = __w_pdfjs_require__2(128);
              var IS_NODE = __w_pdfjs_require__2(120);
              var V8_VERSION = __w_pdfjs_require__2(31);
              var SPECIES = wellKnownSymbol("species");
              var PROMISE = "Promise";
              var getInternalState = InternalStateModule.getterFor(PROMISE);
              var setInternalState = InternalStateModule.set;
              var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
              var NativePromisePrototype = NativePromise && NativePromise.prototype;
              var PromiseConstructor = NativePromise;
              var PromisePrototype = NativePromisePrototype;
              var TypeError2 = global2.TypeError;
              var document2 = global2.document;
              var process2 = global2.process;
              var newPromiseCapability = newPromiseCapabilityModule.f;
              var newGenericPromiseCapability = newPromiseCapability;
              var DISPATCH_EVENT = !!(document2 && document2.createEvent && global2.dispatchEvent);
              var NATIVE_REJECTION_EVENT = isCallable(global2.PromiseRejectionEvent);
              var UNHANDLED_REJECTION = "unhandledrejection";
              var REJECTION_HANDLED = "rejectionhandled";
              var PENDING = 0;
              var FULFILLED = 1;
              var REJECTED = 2;
              var HANDLED = 1;
              var UNHANDLED = 2;
              var SUBCLASSING = false;
              var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
              var FORCED = isForced(PROMISE, function() {
                var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
                var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
                if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
                  return true;
                if (IS_PURE && !PromisePrototype["finally"])
                  return true;
                if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE))
                  return false;
                var promise = new PromiseConstructor(function(resolve) {
                  resolve(1);
                });
                var FakePromise = function(exec) {
                  exec(function() {
                  }, function() {
                  });
                };
                var constructor = promise.constructor = {};
                constructor[SPECIES] = FakePromise;
                SUBCLASSING = promise.then(function() {
                }) instanceof FakePromise;
                if (!SUBCLASSING)
                  return true;
                return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
              });
              var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function(iterable) {
                PromiseConstructor.all(iterable)["catch"](function() {
                });
              });
              var isThenable = function(it) {
                var then;
                return isObject(it) && isCallable(then = it.then) ? then : false;
              };
              var notify = function(state, isReject) {
                if (state.notified)
                  return;
                state.notified = true;
                var chain = state.reactions;
                microtask(function() {
                  var value = state.value;
                  var ok = state.state == FULFILLED;
                  var index = 0;
                  while (chain.length > index) {
                    var reaction = chain[index++];
                    var handler = ok ? reaction.ok : reaction.fail;
                    var resolve = reaction.resolve;
                    var reject = reaction.reject;
                    var domain = reaction.domain;
                    var result, then, exited;
                    try {
                      if (handler) {
                        if (!ok) {
                          if (state.rejection === UNHANDLED)
                            onHandleUnhandled(state);
                          state.rejection = HANDLED;
                        }
                        if (handler === true)
                          result = value;
                        else {
                          if (domain)
                            domain.enter();
                          result = handler(value);
                          if (domain) {
                            domain.exit();
                            exited = true;
                          }
                        }
                        if (result === reaction.promise) {
                          reject(TypeError2("Promise-chain cycle"));
                        } else if (then = isThenable(result)) {
                          call(then, result, resolve, reject);
                        } else
                          resolve(result);
                      } else
                        reject(value);
                    } catch (error) {
                      if (domain && !exited)
                        domain.exit();
                      reject(error);
                    }
                  }
                  state.reactions = [];
                  state.notified = false;
                  if (isReject && !state.rejection)
                    onUnhandled(state);
                });
              };
              var dispatchEvent = function(name, promise, reason) {
                var event, handler;
                if (DISPATCH_EVENT) {
                  event = document2.createEvent("Event");
                  event.promise = promise;
                  event.reason = reason;
                  event.initEvent(name, false, true);
                  global2.dispatchEvent(event);
                } else
                  event = {
                    promise,
                    reason
                  };
                if (!NATIVE_REJECTION_EVENT && (handler = global2["on" + name]))
                  handler(event);
                else if (name === UNHANDLED_REJECTION)
                  hostReportErrors("Unhandled promise rejection", reason);
              };
              var onUnhandled = function(state) {
                call(task, global2, function() {
                  var promise = state.facade;
                  var value = state.value;
                  var IS_UNHANDLED = isUnhandled(state);
                  var result;
                  if (IS_UNHANDLED) {
                    result = perform(function() {
                      if (IS_NODE) {
                        process2.emit("unhandledRejection", value, promise);
                      } else
                        dispatchEvent(UNHANDLED_REJECTION, promise, value);
                    });
                    state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
                    if (result.error)
                      throw result.value;
                  }
                });
              };
              var isUnhandled = function(state) {
                return state.rejection !== HANDLED && !state.parent;
              };
              var onHandleUnhandled = function(state) {
                call(task, global2, function() {
                  var promise = state.facade;
                  if (IS_NODE) {
                    process2.emit("rejectionHandled", promise);
                  } else
                    dispatchEvent(REJECTION_HANDLED, promise, state.value);
                });
              };
              var bind = function(fn, state, unwrap) {
                return function(value) {
                  fn(state, value, unwrap);
                };
              };
              var internalReject = function(state, value, unwrap) {
                if (state.done)
                  return;
                state.done = true;
                if (unwrap)
                  state = unwrap;
                state.value = value;
                state.state = REJECTED;
                notify(state, true);
              };
              var internalResolve = function(state, value, unwrap) {
                if (state.done)
                  return;
                state.done = true;
                if (unwrap)
                  state = unwrap;
                try {
                  if (state.facade === value)
                    throw TypeError2("Promise can't be resolved itself");
                  var then = isThenable(value);
                  if (then) {
                    microtask(function() {
                      var wrapper = { done: false };
                      try {
                        call(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
                      } catch (error) {
                        internalReject(wrapper, error, state);
                      }
                    });
                  } else {
                    state.value = value;
                    state.state = FULFILLED;
                    notify(state, false);
                  }
                } catch (error) {
                  internalReject({ done: false }, error, state);
                }
              };
              if (FORCED) {
                PromiseConstructor = function Promise2(executor) {
                  anInstance(this, PromisePrototype);
                  aCallable(executor);
                  call(Internal, this);
                  var state = getInternalState(this);
                  try {
                    executor(bind(internalResolve, state), bind(internalReject, state));
                  } catch (error) {
                    internalReject(state, error);
                  }
                };
                PromisePrototype = PromiseConstructor.prototype;
                Internal = function Promise2(executor) {
                  setInternalState(this, {
                    type: PROMISE,
                    done: false,
                    notified: false,
                    parent: false,
                    reactions: [],
                    rejection: false,
                    state: PENDING,
                    value: void 0
                  });
                };
                Internal.prototype = redefineAll(PromisePrototype, {
                  then: function then(onFulfilled, onRejected) {
                    var state = getInternalPromiseState(this);
                    var reactions = state.reactions;
                    var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
                    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
                    reaction.fail = isCallable(onRejected) && onRejected;
                    reaction.domain = IS_NODE ? process2.domain : void 0;
                    state.parent = true;
                    reactions[reactions.length] = reaction;
                    if (state.state != PENDING)
                      notify(state, false);
                    return reaction.promise;
                  },
                  "catch": function(onRejected) {
                    return this.then(void 0, onRejected);
                  }
                });
                OwnPromiseCapability = function() {
                  var promise = new Internal();
                  var state = getInternalState(promise);
                  this.promise = promise;
                  this.resolve = bind(internalResolve, state);
                  this.reject = bind(internalReject, state);
                };
                newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
                  return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
                };
                if (!IS_PURE && isCallable(NativePromise) && NativePromisePrototype !== Object.prototype) {
                  nativeThen = NativePromisePrototype.then;
                  if (!SUBCLASSING) {
                    redefine(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
                      var that = this;
                      return new PromiseConstructor(function(resolve, reject) {
                        call(nativeThen, that, resolve, reject);
                      }).then(onFulfilled, onRejected);
                    }, { unsafe: true });
                    redefine(NativePromisePrototype, "catch", PromisePrototype["catch"], { unsafe: true });
                  }
                  try {
                    delete NativePromisePrototype.constructor;
                  } catch (error) {
                  }
                  if (setPrototypeOf) {
                    setPrototypeOf(NativePromisePrototype, PromisePrototype);
                  }
                }
              }
              $({
                global: true,
                wrap: true,
                forced: FORCED
              }, { Promise: PromiseConstructor });
              setToStringTag(PromiseConstructor, PROMISE, false, true);
              setSpecies(PROMISE);
              PromiseWrapper = getBuiltIn(PROMISE);
              $({
                target: PROMISE,
                stat: true,
                forced: FORCED
              }, {
                reject: function reject(r) {
                  var capability = newPromiseCapability(this);
                  call(capability.reject, void 0, r);
                  return capability.promise;
                }
              });
              $({
                target: PROMISE,
                stat: true,
                forced: IS_PURE || FORCED
              }, {
                resolve: function resolve(x) {
                  return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
                }
              });
              $({
                target: PROMISE,
                stat: true,
                forced: INCORRECT_ITERATION
              }, {
                all: function all(iterable) {
                  var C = this;
                  var capability = newPromiseCapability(C);
                  var resolve = capability.resolve;
                  var reject = capability.reject;
                  var result = perform(function() {
                    var $promiseResolve = aCallable(C.resolve);
                    var values = [];
                    var counter = 0;
                    var remaining = 1;
                    iterate(iterable, function(promise) {
                      var index = counter++;
                      var alreadyCalled = false;
                      remaining++;
                      call($promiseResolve, C, promise).then(function(value) {
                        if (alreadyCalled)
                          return;
                        alreadyCalled = true;
                        values[index] = value;
                        --remaining || resolve(values);
                      }, reject);
                    });
                    --remaining || resolve(values);
                  });
                  if (result.error)
                    reject(result.value);
                  return capability.promise;
                },
                race: function race(iterable) {
                  var C = this;
                  var capability = newPromiseCapability(C);
                  var reject = capability.reject;
                  var result = perform(function() {
                    var $promiseResolve = aCallable(C.resolve);
                    iterate(iterable, function(promise) {
                      call($promiseResolve, C, promise).then(capability.resolve, reject);
                    });
                  });
                  if (result.error)
                    reject(result.value);
                  return capability.promise;
                }
              });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              module2.exports = global2.Promise;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var redefine = __w_pdfjs_require__2(50);
              module2.exports = function(target, src, options) {
                for (var key in src)
                  redefine(target, key, src[key], options);
                return target;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var getBuiltIn = __w_pdfjs_require__2(27);
              var definePropertyModule = __w_pdfjs_require__2(48);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var DESCRIPTORS = __w_pdfjs_require__2(12);
              var SPECIES = wellKnownSymbol("species");
              module2.exports = function(CONSTRUCTOR_NAME) {
                var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
                var defineProperty = definePropertyModule.f;
                if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
                  defineProperty(Constructor, SPECIES, {
                    configurable: true,
                    get: function() {
                      return this;
                    }
                  });
                }
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var isPrototypeOf = __w_pdfjs_require__2(28);
              var TypeError2 = global2.TypeError;
              module2.exports = function(it, Prototype) {
                if (isPrototypeOf(Prototype, it))
                  return it;
                throw TypeError2("Incorrect invocation");
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var ITERATOR = wellKnownSymbol("iterator");
              var SAFE_CLOSING = false;
              try {
                var called = 0;
                var iteratorWithReturn = {
                  next: function() {
                    return { done: !!called++ };
                  },
                  "return": function() {
                    SAFE_CLOSING = true;
                  }
                };
                iteratorWithReturn[ITERATOR] = function() {
                  return this;
                };
                Array.from(iteratorWithReturn, function() {
                  throw 2;
                });
              } catch (error) {
              }
              module2.exports = function(exec, SKIP_CLOSING) {
                if (!SKIP_CLOSING && !SAFE_CLOSING)
                  return false;
                var ITERATION_SUPPORT = false;
                try {
                  var object = {};
                  object[ITERATOR] = function() {
                    return {
                      next: function() {
                        return { done: ITERATION_SUPPORT = true };
                      }
                    };
                  };
                  exec(object);
                } catch (error) {
                }
                return ITERATION_SUPPORT;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var anObject = __w_pdfjs_require__2(49);
              var aConstructor = __w_pdfjs_require__2(114);
              var wellKnownSymbol = __w_pdfjs_require__2(37);
              var SPECIES = wellKnownSymbol("species");
              module2.exports = function(O, defaultConstructor) {
                var C = anObject(O).constructor;
                var S;
                return C === void 0 || (S = anObject(C)[SPECIES]) == void 0 ? defaultConstructor : aConstructor(S);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var isConstructor = __w_pdfjs_require__2(115);
              var tryToString = __w_pdfjs_require__2(35);
              var TypeError2 = global2.TypeError;
              module2.exports = function(argument) {
                if (isConstructor(argument))
                  return argument;
                throw TypeError2(tryToString(argument) + " is not a constructor");
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var fails = __w_pdfjs_require__2(13);
              var isCallable = __w_pdfjs_require__2(25);
              var classof = __w_pdfjs_require__2(92);
              var getBuiltIn = __w_pdfjs_require__2(27);
              var inspectSource = __w_pdfjs_require__2(51);
              var noop = function() {
              };
              var empty = [];
              var construct = getBuiltIn("Reflect", "construct");
              var constructorRegExp = /^\s*(?:class|function)\b/;
              var exec = uncurryThis(constructorRegExp.exec);
              var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
              var isConstructorModern = function(argument) {
                if (!isCallable(argument))
                  return false;
                try {
                  construct(noop, empty, argument);
                  return true;
                } catch (error) {
                  return false;
                }
              };
              var isConstructorLegacy = function(argument) {
                if (!isCallable(argument))
                  return false;
                switch (classof(argument)) {
                  case "AsyncFunction":
                  case "GeneratorFunction":
                  case "AsyncGeneratorFunction":
                    return false;
                }
                return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
              };
              module2.exports = !construct || fails(function() {
                var called;
                return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
                  called = true;
                }) || called;
              }) ? isConstructorLegacy : isConstructorModern;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var apply = __w_pdfjs_require__2(117);
              var bind = __w_pdfjs_require__2(88);
              var isCallable = __w_pdfjs_require__2(25);
              var hasOwn = __w_pdfjs_require__2(42);
              var fails = __w_pdfjs_require__2(13);
              var html = __w_pdfjs_require__2(76);
              var arraySlice = __w_pdfjs_require__2(118);
              var createElement = __w_pdfjs_require__2(46);
              var IS_IOS = __w_pdfjs_require__2(119);
              var IS_NODE = __w_pdfjs_require__2(120);
              var set = global2.setImmediate;
              var clear = global2.clearImmediate;
              var process2 = global2.process;
              var Dispatch = global2.Dispatch;
              var Function2 = global2.Function;
              var MessageChannel = global2.MessageChannel;
              var String2 = global2.String;
              var counter = 0;
              var queue = {};
              var ONREADYSTATECHANGE = "onreadystatechange";
              var location, defer, channel, port;
              try {
                location = global2.location;
              } catch (error) {
              }
              var run = function(id) {
                if (hasOwn(queue, id)) {
                  var fn = queue[id];
                  delete queue[id];
                  fn();
                }
              };
              var runner = function(id) {
                return function() {
                  run(id);
                };
              };
              var listener = function(event) {
                run(event.data);
              };
              var post = function(id) {
                global2.postMessage(String2(id), location.protocol + "//" + location.host);
              };
              if (!set || !clear) {
                set = function setImmediate(fn) {
                  var args = arraySlice(arguments, 1);
                  queue[++counter] = function() {
                    apply(isCallable(fn) ? fn : Function2(fn), void 0, args);
                  };
                  defer(counter);
                  return counter;
                };
                clear = function clearImmediate(id) {
                  delete queue[id];
                };
                if (IS_NODE) {
                  defer = function(id) {
                    process2.nextTick(runner(id));
                  };
                } else if (Dispatch && Dispatch.now) {
                  defer = function(id) {
                    Dispatch.now(runner(id));
                  };
                } else if (MessageChannel && !IS_IOS) {
                  channel = new MessageChannel();
                  port = channel.port2;
                  channel.port1.onmessage = listener;
                  defer = bind(port.postMessage, port);
                } else if (global2.addEventListener && isCallable(global2.postMessage) && !global2.importScripts && location && location.protocol !== "file:" && !fails(post)) {
                  defer = post;
                  global2.addEventListener("message", listener, false);
                } else if (ONREADYSTATECHANGE in createElement("script")) {
                  defer = function(id) {
                    html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
                      html.removeChild(this);
                      run(id);
                    };
                  };
                } else {
                  defer = function(id) {
                    setTimeout(runner(id), 0);
                  };
                }
              }
              module2.exports = {
                set,
                clear
              };
            },
            (module2) => {
              var FunctionPrototype = Function.prototype;
              var apply = FunctionPrototype.apply;
              var bind = FunctionPrototype.bind;
              var call = FunctionPrototype.call;
              module2.exports = typeof Reflect == "object" && Reflect.apply || (bind ? call.bind(apply) : function() {
                return call.apply(apply, arguments);
              });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              module2.exports = uncurryThis([].slice);
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var userAgent = __w_pdfjs_require__2(32);
              module2.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var classof = __w_pdfjs_require__2(20);
              var global2 = __w_pdfjs_require__2(10);
              module2.exports = classof(global2.process) == "process";
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              var bind = __w_pdfjs_require__2(88);
              var getOwnPropertyDescriptor = __w_pdfjs_require__2(11).f;
              var macrotask = __w_pdfjs_require__2(116).set;
              var IS_IOS = __w_pdfjs_require__2(119);
              var IS_IOS_PEBBLE = __w_pdfjs_require__2(122);
              var IS_WEBOS_WEBKIT = __w_pdfjs_require__2(123);
              var IS_NODE = __w_pdfjs_require__2(120);
              var MutationObserver = global2.MutationObserver || global2.WebKitMutationObserver;
              var document2 = global2.document;
              var process2 = global2.process;
              var Promise2 = global2.Promise;
              var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global2, "queueMicrotask");
              var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
              var flush, head, last, notify, toggle, node, promise, then;
              if (!queueMicrotask) {
                flush = function() {
                  var parent, fn;
                  if (IS_NODE && (parent = process2.domain))
                    parent.exit();
                  while (head) {
                    fn = head.fn;
                    head = head.next;
                    try {
                      fn();
                    } catch (error) {
                      if (head)
                        notify();
                      else
                        last = void 0;
                      throw error;
                    }
                  }
                  last = void 0;
                  if (parent)
                    parent.enter();
                };
                if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document2) {
                  toggle = true;
                  node = document2.createTextNode("");
                  new MutationObserver(flush).observe(node, { characterData: true });
                  notify = function() {
                    node.data = toggle = !toggle;
                  };
                } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
                  promise = Promise2.resolve(void 0);
                  promise.constructor = Promise2;
                  then = bind(promise.then, promise);
                  notify = function() {
                    then(flush);
                  };
                } else if (IS_NODE) {
                  notify = function() {
                    process2.nextTick(flush);
                  };
                } else {
                  macrotask = bind(macrotask, global2);
                  notify = function() {
                    macrotask(flush);
                  };
                }
              }
              module2.exports = queueMicrotask || function(fn) {
                var task = {
                  fn,
                  next: void 0
                };
                if (last)
                  last.next = task;
                if (!head) {
                  head = task;
                  notify();
                }
                last = task;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var userAgent = __w_pdfjs_require__2(32);
              var global2 = __w_pdfjs_require__2(10);
              module2.exports = /ipad|iphone|ipod/i.test(userAgent) && global2.Pebble !== void 0;
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var userAgent = __w_pdfjs_require__2(32);
              module2.exports = /web0s(?!.*chrome)/i.test(userAgent);
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var anObject = __w_pdfjs_require__2(49);
              var isObject = __w_pdfjs_require__2(24);
              var newPromiseCapability = __w_pdfjs_require__2(125);
              module2.exports = function(C, x) {
                anObject(C);
                if (isObject(x) && x.constructor === C)
                  return x;
                var promiseCapability = newPromiseCapability.f(C);
                var resolve = promiseCapability.resolve;
                resolve(x);
                return promiseCapability.promise;
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var aCallable = __w_pdfjs_require__2(34);
              var PromiseCapability = function(C) {
                var resolve, reject;
                this.promise = new C(function($$resolve, $$reject) {
                  if (resolve !== void 0 || reject !== void 0)
                    throw TypeError("Bad Promise constructor");
                  resolve = $$resolve;
                  reject = $$reject;
                });
                this.resolve = aCallable(resolve);
                this.reject = aCallable(reject);
              };
              module2.exports.f = function(C) {
                return new PromiseCapability(C);
              };
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var global2 = __w_pdfjs_require__2(10);
              module2.exports = function(a, b) {
                var console2 = global2.console;
                if (console2 && console2.error) {
                  arguments.length == 1 ? console2.error(a) : console2.error(a, b);
                }
              };
            },
            (module2) => {
              module2.exports = function(exec) {
                try {
                  return {
                    error: false,
                    value: exec()
                  };
                } catch (error) {
                  return {
                    error: true,
                    value: error
                  };
                }
              };
            },
            (module2) => {
              module2.exports = typeof window == "object";
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var $ = __w_pdfjs_require__2(9);
              var call = __w_pdfjs_require__2(14);
              var aCallable = __w_pdfjs_require__2(34);
              var newPromiseCapabilityModule = __w_pdfjs_require__2(125);
              var perform = __w_pdfjs_require__2(127);
              var iterate = __w_pdfjs_require__2(87);
              $({
                target: "Promise",
                stat: true
              }, {
                allSettled: function allSettled(iterable) {
                  var C = this;
                  var capability = newPromiseCapabilityModule.f(C);
                  var resolve = capability.resolve;
                  var reject = capability.reject;
                  var result = perform(function() {
                    var promiseResolve = aCallable(C.resolve);
                    var values = [];
                    var counter = 0;
                    var remaining = 1;
                    iterate(iterable, function(promise) {
                      var index = counter++;
                      var alreadyCalled = false;
                      remaining++;
                      call(promiseResolve, C, promise).then(function(value) {
                        if (alreadyCalled)
                          return;
                        alreadyCalled = true;
                        values[index] = {
                          status: "fulfilled",
                          value
                        };
                        --remaining || resolve(values);
                      }, function(error) {
                        if (alreadyCalled)
                          return;
                        alreadyCalled = true;
                        values[index] = {
                          status: "rejected",
                          reason: error
                        };
                        --remaining || resolve(values);
                      });
                    });
                    --remaining || resolve(values);
                  });
                  if (result.error)
                    reject(result.value);
                  return capability.promise;
                }
              });
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var $ = __w_pdfjs_require__2(9);
              var aCallable = __w_pdfjs_require__2(34);
              var getBuiltIn = __w_pdfjs_require__2(27);
              var call = __w_pdfjs_require__2(14);
              var newPromiseCapabilityModule = __w_pdfjs_require__2(125);
              var perform = __w_pdfjs_require__2(127);
              var iterate = __w_pdfjs_require__2(87);
              var PROMISE_ANY_ERROR = "No one promise resolved";
              $({
                target: "Promise",
                stat: true
              }, {
                any: function any(iterable) {
                  var C = this;
                  var AggregateError = getBuiltIn("AggregateError");
                  var capability = newPromiseCapabilityModule.f(C);
                  var resolve = capability.resolve;
                  var reject = capability.reject;
                  var result = perform(function() {
                    var promiseResolve = aCallable(C.resolve);
                    var errors = [];
                    var counter = 0;
                    var remaining = 1;
                    var alreadyResolved = false;
                    iterate(iterable, function(promise) {
                      var index = counter++;
                      var alreadyRejected = false;
                      remaining++;
                      call(promiseResolve, C, promise).then(function(value) {
                        if (alreadyRejected || alreadyResolved)
                          return;
                        alreadyResolved = true;
                        resolve(value);
                      }, function(error) {
                        if (alreadyRejected || alreadyResolved)
                          return;
                        alreadyRejected = true;
                        errors[index] = error;
                        --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
                      });
                    });
                    --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
                  });
                  if (result.error)
                    reject(result.value);
                  return capability.promise;
                }
              });
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var $ = __w_pdfjs_require__2(9);
              var IS_PURE = __w_pdfjs_require__2(39);
              var NativePromise = __w_pdfjs_require__2(108);
              var fails = __w_pdfjs_require__2(13);
              var getBuiltIn = __w_pdfjs_require__2(27);
              var isCallable = __w_pdfjs_require__2(25);
              var speciesConstructor = __w_pdfjs_require__2(113);
              var promiseResolve = __w_pdfjs_require__2(124);
              var redefine = __w_pdfjs_require__2(50);
              var NON_GENERIC = !!NativePromise && fails(function() {
                NativePromise.prototype["finally"].call({
                  then: function() {
                  }
                }, function() {
                });
              });
              $({
                target: "Promise",
                proto: true,
                real: true,
                forced: NON_GENERIC
              }, {
                "finally": function(onFinally) {
                  var C = speciesConstructor(this, getBuiltIn("Promise"));
                  var isFunction = isCallable(onFinally);
                  return this.then(isFunction ? function(x) {
                    return promiseResolve(C, onFinally()).then(function() {
                      return x;
                    });
                  } : onFinally, isFunction ? function(e) {
                    return promiseResolve(C, onFinally()).then(function() {
                      throw e;
                    });
                  } : onFinally);
                }
              });
              if (!IS_PURE && isCallable(NativePromise)) {
                var method = getBuiltIn("Promise").prototype["finally"];
                if (NativePromise.prototype["finally"] !== method) {
                  redefine(NativePromise.prototype, "finally", method, { unsafe: true });
                }
              }
            },
            (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__2) => {
              "use strict";
              var charAt = __w_pdfjs_require__2(133).charAt;
              var toString = __w_pdfjs_require__2(103);
              var InternalStateModule = __w_pdfjs_require__2(52);
              var defineIterator = __w_pdfjs_require__2(78);
              var STRING_ITERATOR = "String Iterator";
              var setInternalState = InternalStateModule.set;
              var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
              defineIterator(String, "String", function(iterated) {
                setInternalState(this, {
                  type: STRING_ITERATOR,
                  string: toString(iterated),
                  index: 0
                });
              }, function next() {
                var state = getInternalState(this);
                var string = state.string;
                var index = state.index;
                var point;
                if (index >= string.length)
                  return {
                    value: void 0,
                    done: true
                  };
                point = charAt(string, index);
                state.index += point.length;
                return {
                  value: point,
                  done: false
                };
              });
            },
            (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
              var uncurryThis = __w_pdfjs_require__2(19);
              var toIntegerOrInfinity = __w_pdfjs_require__2(63);
              var toString = __w_pdfjs_require__2(103);
              var requireObjectCoercible = __w_pdfjs_require__2(21);
              var charAt = uncurryThis("".charAt);
              var charCodeAt = uncurryThis("".charCodeAt);
              var stringSlice = uncurryThis("".slice);
              var createMethod = function(CONVERT_TO_STRING) {
                return function($this, pos) {
                  var S = toString(requireObjectCoercible($this));
                  var position = toIntegerOrInfinity(pos);
                  var size = S.length;
                  var first, second;
                  if (position < 0 || position >= size)
                    return CONVERT_TO_STRING ? "" : void 0;
                  first = charCodeAt(S, position);
                  return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
                };
              };
              module2.exports = {
                codeAt: createMethod(false),
                charAt: createMethod(true)
              };
            },
            function(__unused_webpack_module, exports2) {
              (function(global2, factory) {
                true ? factory(exports2) : 0;
              })(this, function(exports3) {
                "use strict";
                var SymbolPolyfill = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol : function(description) {
                  return "Symbol(" + description + ")";
                };
                function noop() {
                  return void 0;
                }
                function getGlobals() {
                  if (typeof self !== "undefined") {
                    return self;
                  } else if (typeof window !== "undefined") {
                    return window;
                  } else if (typeof global !== "undefined") {
                    return global;
                  }
                  return void 0;
                }
                var globals = getGlobals();
                function typeIsObject(x) {
                  return typeof x === "object" && x !== null || typeof x === "function";
                }
                var rethrowAssertionErrorRejection = noop;
                var originalPromise = Promise;
                var originalPromiseThen = Promise.prototype.then;
                var originalPromiseResolve = Promise.resolve.bind(originalPromise);
                var originalPromiseReject = Promise.reject.bind(originalPromise);
                function newPromise(executor) {
                  return new originalPromise(executor);
                }
                function promiseResolvedWith(value) {
                  return originalPromiseResolve(value);
                }
                function promiseRejectedWith(reason) {
                  return originalPromiseReject(reason);
                }
                function PerformPromiseThen(promise, onFulfilled, onRejected) {
                  return originalPromiseThen.call(promise, onFulfilled, onRejected);
                }
                function uponPromise(promise, onFulfilled, onRejected) {
                  PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), void 0, rethrowAssertionErrorRejection);
                }
                function uponFulfillment(promise, onFulfilled) {
                  uponPromise(promise, onFulfilled);
                }
                function uponRejection(promise, onRejected) {
                  uponPromise(promise, void 0, onRejected);
                }
                function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
                  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
                }
                function setPromiseIsHandledToTrue(promise) {
                  PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);
                }
                var queueMicrotask = function() {
                  var globalQueueMicrotask = globals && globals.queueMicrotask;
                  if (typeof globalQueueMicrotask === "function") {
                    return globalQueueMicrotask;
                  }
                  var resolvedPromise = promiseResolvedWith(void 0);
                  return function(fn) {
                    return PerformPromiseThen(resolvedPromise, fn);
                  };
                }();
                function reflectCall(F, V, args) {
                  if (typeof F !== "function") {
                    throw new TypeError("Argument is not a function");
                  }
                  return Function.prototype.apply.call(F, V, args);
                }
                function promiseCall(F, V, args) {
                  try {
                    return promiseResolvedWith(reflectCall(F, V, args));
                  } catch (value) {
                    return promiseRejectedWith(value);
                  }
                }
                var QUEUE_MAX_ARRAY_SIZE = 16384;
                var SimpleQueue = function() {
                  function SimpleQueue2() {
                    this._cursor = 0;
                    this._size = 0;
                    this._front = {
                      _elements: [],
                      _next: void 0
                    };
                    this._back = this._front;
                    this._cursor = 0;
                    this._size = 0;
                  }
                  Object.defineProperty(SimpleQueue2.prototype, "length", {
                    get: function() {
                      return this._size;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  SimpleQueue2.prototype.push = function(element) {
                    var oldBack = this._back;
                    var newBack = oldBack;
                    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
                      newBack = {
                        _elements: [],
                        _next: void 0
                      };
                    }
                    oldBack._elements.push(element);
                    if (newBack !== oldBack) {
                      this._back = newBack;
                      oldBack._next = newBack;
                    }
                    ++this._size;
                  };
                  SimpleQueue2.prototype.shift = function() {
                    var oldFront = this._front;
                    var newFront = oldFront;
                    var oldCursor = this._cursor;
                    var newCursor = oldCursor + 1;
                    var elements = oldFront._elements;
                    var element = elements[oldCursor];
                    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
                      newFront = oldFront._next;
                      newCursor = 0;
                    }
                    --this._size;
                    this._cursor = newCursor;
                    if (oldFront !== newFront) {
                      this._front = newFront;
                    }
                    elements[oldCursor] = void 0;
                    return element;
                  };
                  SimpleQueue2.prototype.forEach = function(callback) {
                    var i = this._cursor;
                    var node = this._front;
                    var elements = node._elements;
                    while (i !== elements.length || node._next !== void 0) {
                      if (i === elements.length) {
                        node = node._next;
                        elements = node._elements;
                        i = 0;
                        if (elements.length === 0) {
                          break;
                        }
                      }
                      callback(elements[i]);
                      ++i;
                    }
                  };
                  SimpleQueue2.prototype.peek = function() {
                    var front = this._front;
                    var cursor = this._cursor;
                    return front._elements[cursor];
                  };
                  return SimpleQueue2;
                }();
                function ReadableStreamReaderGenericInitialize(reader, stream) {
                  reader._ownerReadableStream = stream;
                  stream._reader = reader;
                  if (stream._state === "readable") {
                    defaultReaderClosedPromiseInitialize(reader);
                  } else if (stream._state === "closed") {
                    defaultReaderClosedPromiseInitializeAsResolved(reader);
                  } else {
                    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
                  }
                }
                function ReadableStreamReaderGenericCancel(reader, reason) {
                  var stream = reader._ownerReadableStream;
                  return ReadableStreamCancel(stream, reason);
                }
                function ReadableStreamReaderGenericRelease(reader) {
                  if (reader._ownerReadableStream._state === "readable") {
                    defaultReaderClosedPromiseReject(reader, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"));
                  } else {
                    defaultReaderClosedPromiseResetToRejected(reader, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"));
                  }
                  reader._ownerReadableStream._reader = void 0;
                  reader._ownerReadableStream = void 0;
                }
                function readerLockException(name) {
                  return new TypeError("Cannot " + name + " a stream using a released reader");
                }
                function defaultReaderClosedPromiseInitialize(reader) {
                  reader._closedPromise = newPromise(function(resolve, reject) {
                    reader._closedPromise_resolve = resolve;
                    reader._closedPromise_reject = reject;
                  });
                }
                function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
                  defaultReaderClosedPromiseInitialize(reader);
                  defaultReaderClosedPromiseReject(reader, reason);
                }
                function defaultReaderClosedPromiseInitializeAsResolved(reader) {
                  defaultReaderClosedPromiseInitialize(reader);
                  defaultReaderClosedPromiseResolve(reader);
                }
                function defaultReaderClosedPromiseReject(reader, reason) {
                  if (reader._closedPromise_reject === void 0) {
                    return;
                  }
                  setPromiseIsHandledToTrue(reader._closedPromise);
                  reader._closedPromise_reject(reason);
                  reader._closedPromise_resolve = void 0;
                  reader._closedPromise_reject = void 0;
                }
                function defaultReaderClosedPromiseResetToRejected(reader, reason) {
                  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
                }
                function defaultReaderClosedPromiseResolve(reader) {
                  if (reader._closedPromise_resolve === void 0) {
                    return;
                  }
                  reader._closedPromise_resolve(void 0);
                  reader._closedPromise_resolve = void 0;
                  reader._closedPromise_reject = void 0;
                }
                var AbortSteps = SymbolPolyfill("[[AbortSteps]]");
                var ErrorSteps = SymbolPolyfill("[[ErrorSteps]]");
                var CancelSteps = SymbolPolyfill("[[CancelSteps]]");
                var PullSteps = SymbolPolyfill("[[PullSteps]]");
                var NumberIsFinite = Number.isFinite || function(x) {
                  return typeof x === "number" && isFinite(x);
                };
                var MathTrunc = Math.trunc || function(v) {
                  return v < 0 ? Math.ceil(v) : Math.floor(v);
                };
                function isDictionary(x) {
                  return typeof x === "object" || typeof x === "function";
                }
                function assertDictionary(obj, context) {
                  if (obj !== void 0 && !isDictionary(obj)) {
                    throw new TypeError(context + " is not an object.");
                  }
                }
                function assertFunction(x, context) {
                  if (typeof x !== "function") {
                    throw new TypeError(context + " is not a function.");
                  }
                }
                function isObject(x) {
                  return typeof x === "object" && x !== null || typeof x === "function";
                }
                function assertObject(x, context) {
                  if (!isObject(x)) {
                    throw new TypeError(context + " is not an object.");
                  }
                }
                function assertRequiredArgument(x, position, context) {
                  if (x === void 0) {
                    throw new TypeError("Parameter " + position + " is required in '" + context + "'.");
                  }
                }
                function assertRequiredField(x, field, context) {
                  if (x === void 0) {
                    throw new TypeError(field + " is required in '" + context + "'.");
                  }
                }
                function convertUnrestrictedDouble(value) {
                  return Number(value);
                }
                function censorNegativeZero(x) {
                  return x === 0 ? 0 : x;
                }
                function integerPart(x) {
                  return censorNegativeZero(MathTrunc(x));
                }
                function convertUnsignedLongLongWithEnforceRange(value, context) {
                  var lowerBound = 0;
                  var upperBound = Number.MAX_SAFE_INTEGER;
                  var x = Number(value);
                  x = censorNegativeZero(x);
                  if (!NumberIsFinite(x)) {
                    throw new TypeError(context + " is not a finite number");
                  }
                  x = integerPart(x);
                  if (x < lowerBound || x > upperBound) {
                    throw new TypeError(context + " is outside the accepted range of " + lowerBound + " to " + upperBound + ", inclusive");
                  }
                  if (!NumberIsFinite(x) || x === 0) {
                    return 0;
                  }
                  return x;
                }
                function assertReadableStream(x, context) {
                  if (!IsReadableStream(x)) {
                    throw new TypeError(context + " is not a ReadableStream.");
                  }
                }
                function AcquireReadableStreamDefaultReader(stream) {
                  return new ReadableStreamDefaultReader(stream);
                }
                function ReadableStreamAddReadRequest(stream, readRequest) {
                  stream._reader._readRequests.push(readRequest);
                }
                function ReadableStreamFulfillReadRequest(stream, chunk, done) {
                  var reader = stream._reader;
                  var readRequest = reader._readRequests.shift();
                  if (done) {
                    readRequest._closeSteps();
                  } else {
                    readRequest._chunkSteps(chunk);
                  }
                }
                function ReadableStreamGetNumReadRequests(stream) {
                  return stream._reader._readRequests.length;
                }
                function ReadableStreamHasDefaultReader(stream) {
                  var reader = stream._reader;
                  if (reader === void 0) {
                    return false;
                  }
                  if (!IsReadableStreamDefaultReader(reader)) {
                    return false;
                  }
                  return true;
                }
                var ReadableStreamDefaultReader = function() {
                  function ReadableStreamDefaultReader2(stream) {
                    assertRequiredArgument(stream, 1, "ReadableStreamDefaultReader");
                    assertReadableStream(stream, "First parameter");
                    if (IsReadableStreamLocked(stream)) {
                      throw new TypeError("This stream has already been locked for exclusive reading by another reader");
                    }
                    ReadableStreamReaderGenericInitialize(this, stream);
                    this._readRequests = new SimpleQueue();
                  }
                  Object.defineProperty(ReadableStreamDefaultReader2.prototype, "closed", {
                    get: function() {
                      if (!IsReadableStreamDefaultReader(this)) {
                        return promiseRejectedWith(defaultReaderBrandCheckException("closed"));
                      }
                      return this._closedPromise;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  ReadableStreamDefaultReader2.prototype.cancel = function(reason) {
                    if (reason === void 0) {
                      reason = void 0;
                    }
                    if (!IsReadableStreamDefaultReader(this)) {
                      return promiseRejectedWith(defaultReaderBrandCheckException("cancel"));
                    }
                    if (this._ownerReadableStream === void 0) {
                      return promiseRejectedWith(readerLockException("cancel"));
                    }
                    return ReadableStreamReaderGenericCancel(this, reason);
                  };
                  ReadableStreamDefaultReader2.prototype.read = function() {
                    if (!IsReadableStreamDefaultReader(this)) {
                      return promiseRejectedWith(defaultReaderBrandCheckException("read"));
                    }
                    if (this._ownerReadableStream === void 0) {
                      return promiseRejectedWith(readerLockException("read from"));
                    }
                    var resolvePromise;
                    var rejectPromise;
                    var promise = newPromise(function(resolve, reject) {
                      resolvePromise = resolve;
                      rejectPromise = reject;
                    });
                    var readRequest = {
                      _chunkSteps: function(chunk) {
                        return resolvePromise({
                          value: chunk,
                          done: false
                        });
                      },
                      _closeSteps: function() {
                        return resolvePromise({
                          value: void 0,
                          done: true
                        });
                      },
                      _errorSteps: function(e) {
                        return rejectPromise(e);
                      }
                    };
                    ReadableStreamDefaultReaderRead(this, readRequest);
                    return promise;
                  };
                  ReadableStreamDefaultReader2.prototype.releaseLock = function() {
                    if (!IsReadableStreamDefaultReader(this)) {
                      throw defaultReaderBrandCheckException("releaseLock");
                    }
                    if (this._ownerReadableStream === void 0) {
                      return;
                    }
                    if (this._readRequests.length > 0) {
                      throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
                    }
                    ReadableStreamReaderGenericRelease(this);
                  };
                  return ReadableStreamDefaultReader2;
                }();
                Object.defineProperties(ReadableStreamDefaultReader.prototype, {
                  cancel: { enumerable: true },
                  read: { enumerable: true },
                  releaseLock: { enumerable: true },
                  closed: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {
                    value: "ReadableStreamDefaultReader",
                    configurable: true
                  });
                }
                function IsReadableStreamDefaultReader(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_readRequests")) {
                    return false;
                  }
                  return x instanceof ReadableStreamDefaultReader;
                }
                function ReadableStreamDefaultReaderRead(reader, readRequest) {
                  var stream = reader._ownerReadableStream;
                  stream._disturbed = true;
                  if (stream._state === "closed") {
                    readRequest._closeSteps();
                  } else if (stream._state === "errored") {
                    readRequest._errorSteps(stream._storedError);
                  } else {
                    stream._readableStreamController[PullSteps](readRequest);
                  }
                }
                function defaultReaderBrandCheckException(name) {
                  return new TypeError("ReadableStreamDefaultReader.prototype." + name + " can only be used on a ReadableStreamDefaultReader");
                }
                var _a;
                var AsyncIteratorPrototype;
                if (typeof SymbolPolyfill.asyncIterator === "symbol") {
                  AsyncIteratorPrototype = (_a = {}, _a[SymbolPolyfill.asyncIterator] = function() {
                    return this;
                  }, _a);
                  Object.defineProperty(AsyncIteratorPrototype, SymbolPolyfill.asyncIterator, { enumerable: false });
                }
                var ReadableStreamAsyncIteratorImpl = function() {
                  function ReadableStreamAsyncIteratorImpl2(reader, preventCancel) {
                    this._ongoingPromise = void 0;
                    this._isFinished = false;
                    this._reader = reader;
                    this._preventCancel = preventCancel;
                  }
                  ReadableStreamAsyncIteratorImpl2.prototype.next = function() {
                    var _this = this;
                    var nextSteps = function() {
                      return _this._nextSteps();
                    };
                    this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();
                    return this._ongoingPromise;
                  };
                  ReadableStreamAsyncIteratorImpl2.prototype.return = function(value) {
                    var _this = this;
                    var returnSteps = function() {
                      return _this._returnSteps(value);
                    };
                    return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();
                  };
                  ReadableStreamAsyncIteratorImpl2.prototype._nextSteps = function() {
                    var _this = this;
                    if (this._isFinished) {
                      return Promise.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                    var reader = this._reader;
                    if (reader._ownerReadableStream === void 0) {
                      return promiseRejectedWith(readerLockException("iterate"));
                    }
                    var resolvePromise;
                    var rejectPromise;
                    var promise = newPromise(function(resolve, reject) {
                      resolvePromise = resolve;
                      rejectPromise = reject;
                    });
                    var readRequest = {
                      _chunkSteps: function(chunk) {
                        _this._ongoingPromise = void 0;
                        queueMicrotask(function() {
                          return resolvePromise({
                            value: chunk,
                            done: false
                          });
                        });
                      },
                      _closeSteps: function() {
                        _this._ongoingPromise = void 0;
                        _this._isFinished = true;
                        ReadableStreamReaderGenericRelease(reader);
                        resolvePromise({
                          value: void 0,
                          done: true
                        });
                      },
                      _errorSteps: function(reason) {
                        _this._ongoingPromise = void 0;
                        _this._isFinished = true;
                        ReadableStreamReaderGenericRelease(reader);
                        rejectPromise(reason);
                      }
                    };
                    ReadableStreamDefaultReaderRead(reader, readRequest);
                    return promise;
                  };
                  ReadableStreamAsyncIteratorImpl2.prototype._returnSteps = function(value) {
                    if (this._isFinished) {
                      return Promise.resolve({
                        value,
                        done: true
                      });
                    }
                    this._isFinished = true;
                    var reader = this._reader;
                    if (reader._ownerReadableStream === void 0) {
                      return promiseRejectedWith(readerLockException("finish iterating"));
                    }
                    if (!this._preventCancel) {
                      var result = ReadableStreamReaderGenericCancel(reader, value);
                      ReadableStreamReaderGenericRelease(reader);
                      return transformPromiseWith(result, function() {
                        return {
                          value,
                          done: true
                        };
                      });
                    }
                    ReadableStreamReaderGenericRelease(reader);
                    return promiseResolvedWith({
                      value,
                      done: true
                    });
                  };
                  return ReadableStreamAsyncIteratorImpl2;
                }();
                var ReadableStreamAsyncIteratorPrototype = {
                  next: function() {
                    if (!IsReadableStreamAsyncIterator(this)) {
                      return promiseRejectedWith(streamAsyncIteratorBrandCheckException("next"));
                    }
                    return this._asyncIteratorImpl.next();
                  },
                  return: function(value) {
                    if (!IsReadableStreamAsyncIterator(this)) {
                      return promiseRejectedWith(streamAsyncIteratorBrandCheckException("return"));
                    }
                    return this._asyncIteratorImpl.return(value);
                  }
                };
                if (AsyncIteratorPrototype !== void 0) {
                  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
                }
                function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
                  var reader = AcquireReadableStreamDefaultReader(stream);
                  var impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
                  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
                  iterator._asyncIteratorImpl = impl;
                  return iterator;
                }
                function IsReadableStreamAsyncIterator(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_asyncIteratorImpl")) {
                    return false;
                  }
                  try {
                    return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
                  } catch (_a2) {
                    return false;
                  }
                }
                function streamAsyncIteratorBrandCheckException(name) {
                  return new TypeError("ReadableStreamAsyncIterator." + name + " can only be used on a ReadableSteamAsyncIterator");
                }
                var NumberIsNaN = Number.isNaN || function(x) {
                  return x !== x;
                };
                function CreateArrayFromList(elements) {
                  return elements.slice();
                }
                function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
                  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
                }
                function TransferArrayBuffer(O) {
                  return O;
                }
                function IsDetachedBuffer(O) {
                  return false;
                }
                function ArrayBufferSlice(buffer, begin, end) {
                  if (buffer.slice) {
                    return buffer.slice(begin, end);
                  }
                  var length = end - begin;
                  var slice = new ArrayBuffer(length);
                  CopyDataBlockBytes(slice, 0, buffer, begin, length);
                  return slice;
                }
                function IsNonNegativeNumber(v) {
                  if (typeof v !== "number") {
                    return false;
                  }
                  if (NumberIsNaN(v)) {
                    return false;
                  }
                  if (v < 0) {
                    return false;
                  }
                  return true;
                }
                function CloneAsUint8Array(O) {
                  var buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
                  return new Uint8Array(buffer);
                }
                function DequeueValue(container) {
                  var pair = container._queue.shift();
                  container._queueTotalSize -= pair.size;
                  if (container._queueTotalSize < 0) {
                    container._queueTotalSize = 0;
                  }
                  return pair.value;
                }
                function EnqueueValueWithSize(container, value, size) {
                  if (!IsNonNegativeNumber(size) || size === Infinity) {
                    throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
                  }
                  container._queue.push({
                    value,
                    size
                  });
                  container._queueTotalSize += size;
                }
                function PeekQueueValue(container) {
                  var pair = container._queue.peek();
                  return pair.value;
                }
                function ResetQueue(container) {
                  container._queue = new SimpleQueue();
                  container._queueTotalSize = 0;
                }
                var ReadableStreamBYOBRequest = function() {
                  function ReadableStreamBYOBRequest2() {
                    throw new TypeError("Illegal constructor");
                  }
                  Object.defineProperty(ReadableStreamBYOBRequest2.prototype, "view", {
                    get: function() {
                      if (!IsReadableStreamBYOBRequest(this)) {
                        throw byobRequestBrandCheckException("view");
                      }
                      return this._view;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  ReadableStreamBYOBRequest2.prototype.respond = function(bytesWritten) {
                    if (!IsReadableStreamBYOBRequest(this)) {
                      throw byobRequestBrandCheckException("respond");
                    }
                    assertRequiredArgument(bytesWritten, 1, "respond");
                    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, "First parameter");
                    if (this._associatedReadableByteStreamController === void 0) {
                      throw new TypeError("This BYOB request has been invalidated");
                    }
                    if (IsDetachedBuffer(this._view.buffer))
                      ;
                    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
                  };
                  ReadableStreamBYOBRequest2.prototype.respondWithNewView = function(view) {
                    if (!IsReadableStreamBYOBRequest(this)) {
                      throw byobRequestBrandCheckException("respondWithNewView");
                    }
                    assertRequiredArgument(view, 1, "respondWithNewView");
                    if (!ArrayBuffer.isView(view)) {
                      throw new TypeError("You can only respond with array buffer views");
                    }
                    if (this._associatedReadableByteStreamController === void 0) {
                      throw new TypeError("This BYOB request has been invalidated");
                    }
                    if (IsDetachedBuffer(view.buffer))
                      ;
                    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
                  };
                  return ReadableStreamBYOBRequest2;
                }();
                Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
                  respond: { enumerable: true },
                  respondWithNewView: { enumerable: true },
                  view: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {
                    value: "ReadableStreamBYOBRequest",
                    configurable: true
                  });
                }
                var ReadableByteStreamController = function() {
                  function ReadableByteStreamController2() {
                    throw new TypeError("Illegal constructor");
                  }
                  Object.defineProperty(ReadableByteStreamController2.prototype, "byobRequest", {
                    get: function() {
                      if (!IsReadableByteStreamController(this)) {
                        throw byteStreamControllerBrandCheckException("byobRequest");
                      }
                      return ReadableByteStreamControllerGetBYOBRequest(this);
                    },
                    enumerable: false,
                    configurable: true
                  });
                  Object.defineProperty(ReadableByteStreamController2.prototype, "desiredSize", {
                    get: function() {
                      if (!IsReadableByteStreamController(this)) {
                        throw byteStreamControllerBrandCheckException("desiredSize");
                      }
                      return ReadableByteStreamControllerGetDesiredSize(this);
                    },
                    enumerable: false,
                    configurable: true
                  });
                  ReadableByteStreamController2.prototype.close = function() {
                    if (!IsReadableByteStreamController(this)) {
                      throw byteStreamControllerBrandCheckException("close");
                    }
                    if (this._closeRequested) {
                      throw new TypeError("The stream has already been closed; do not close it again!");
                    }
                    var state = this._controlledReadableByteStream._state;
                    if (state !== "readable") {
                      throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be closed");
                    }
                    ReadableByteStreamControllerClose(this);
                  };
                  ReadableByteStreamController2.prototype.enqueue = function(chunk) {
                    if (!IsReadableByteStreamController(this)) {
                      throw byteStreamControllerBrandCheckException("enqueue");
                    }
                    assertRequiredArgument(chunk, 1, "enqueue");
                    if (!ArrayBuffer.isView(chunk)) {
                      throw new TypeError("chunk must be an array buffer view");
                    }
                    if (chunk.byteLength === 0) {
                      throw new TypeError("chunk must have non-zero byteLength");
                    }
                    if (chunk.buffer.byteLength === 0) {
                      throw new TypeError("chunk's buffer must have non-zero byteLength");
                    }
                    if (this._closeRequested) {
                      throw new TypeError("stream is closed or draining");
                    }
                    var state = this._controlledReadableByteStream._state;
                    if (state !== "readable") {
                      throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be enqueued to");
                    }
                    ReadableByteStreamControllerEnqueue(this, chunk);
                  };
                  ReadableByteStreamController2.prototype.error = function(e) {
                    if (e === void 0) {
                      e = void 0;
                    }
                    if (!IsReadableByteStreamController(this)) {
                      throw byteStreamControllerBrandCheckException("error");
                    }
                    ReadableByteStreamControllerError(this, e);
                  };
                  ReadableByteStreamController2.prototype[CancelSteps] = function(reason) {
                    ReadableByteStreamControllerClearPendingPullIntos(this);
                    ResetQueue(this);
                    var result = this._cancelAlgorithm(reason);
                    ReadableByteStreamControllerClearAlgorithms(this);
                    return result;
                  };
                  ReadableByteStreamController2.prototype[PullSteps] = function(readRequest) {
                    var stream = this._controlledReadableByteStream;
                    if (this._queueTotalSize > 0) {
                      var entry = this._queue.shift();
                      this._queueTotalSize -= entry.byteLength;
                      ReadableByteStreamControllerHandleQueueDrain(this);
                      var view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
                      readRequest._chunkSteps(view);
                      return;
                    }
                    var autoAllocateChunkSize = this._autoAllocateChunkSize;
                    if (autoAllocateChunkSize !== void 0) {
                      var buffer = void 0;
                      try {
                        buffer = new ArrayBuffer(autoAllocateChunkSize);
                      } catch (bufferE) {
                        readRequest._errorSteps(bufferE);
                        return;
                      }
                      var pullIntoDescriptor = {
                        buffer,
                        bufferByteLength: autoAllocateChunkSize,
                        byteOffset: 0,
                        byteLength: autoAllocateChunkSize,
                        bytesFilled: 0,
                        elementSize: 1,
                        viewConstructor: Uint8Array,
                        readerType: "default"
                      };
                      this._pendingPullIntos.push(pullIntoDescriptor);
                    }
                    ReadableStreamAddReadRequest(stream, readRequest);
                    ReadableByteStreamControllerCallPullIfNeeded(this);
                  };
                  return ReadableByteStreamController2;
                }();
                Object.defineProperties(ReadableByteStreamController.prototype, {
                  close: { enumerable: true },
                  enqueue: { enumerable: true },
                  error: { enumerable: true },
                  byobRequest: { enumerable: true },
                  desiredSize: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {
                    value: "ReadableByteStreamController",
                    configurable: true
                  });
                }
                function IsReadableByteStreamController(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableByteStream")) {
                    return false;
                  }
                  return x instanceof ReadableByteStreamController;
                }
                function IsReadableStreamBYOBRequest(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_associatedReadableByteStreamController")) {
                    return false;
                  }
                  return x instanceof ReadableStreamBYOBRequest;
                }
                function ReadableByteStreamControllerCallPullIfNeeded(controller) {
                  var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
                  if (!shouldPull) {
                    return;
                  }
                  if (controller._pulling) {
                    controller._pullAgain = true;
                    return;
                  }
                  controller._pulling = true;
                  var pullPromise = controller._pullAlgorithm();
                  uponPromise(pullPromise, function() {
                    controller._pulling = false;
                    if (controller._pullAgain) {
                      controller._pullAgain = false;
                      ReadableByteStreamControllerCallPullIfNeeded(controller);
                    }
                  }, function(e) {
                    ReadableByteStreamControllerError(controller, e);
                  });
                }
                function ReadableByteStreamControllerClearPendingPullIntos(controller) {
                  ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                  controller._pendingPullIntos = new SimpleQueue();
                }
                function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
                  var done = false;
                  if (stream._state === "closed") {
                    done = true;
                  }
                  var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                  if (pullIntoDescriptor.readerType === "default") {
                    ReadableStreamFulfillReadRequest(stream, filledView, done);
                  } else {
                    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
                  }
                }
                function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
                  var bytesFilled = pullIntoDescriptor.bytesFilled;
                  var elementSize = pullIntoDescriptor.elementSize;
                  return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
                }
                function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
                  controller._queue.push({
                    buffer,
                    byteOffset,
                    byteLength
                  });
                  controller._queueTotalSize += byteLength;
                }
                function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
                  var elementSize = pullIntoDescriptor.elementSize;
                  var currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
                  var maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
                  var maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
                  var maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
                  var totalBytesToCopyRemaining = maxBytesToCopy;
                  var ready = false;
                  if (maxAlignedBytes > currentAlignedBytes) {
                    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
                    ready = true;
                  }
                  var queue = controller._queue;
                  while (totalBytesToCopyRemaining > 0) {
                    var headOfQueue = queue.peek();
                    var bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
                    var destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
                    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
                    if (headOfQueue.byteLength === bytesToCopy) {
                      queue.shift();
                    } else {
                      headOfQueue.byteOffset += bytesToCopy;
                      headOfQueue.byteLength -= bytesToCopy;
                    }
                    controller._queueTotalSize -= bytesToCopy;
                    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
                    totalBytesToCopyRemaining -= bytesToCopy;
                  }
                  return ready;
                }
                function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
                  pullIntoDescriptor.bytesFilled += size;
                }
                function ReadableByteStreamControllerHandleQueueDrain(controller) {
                  if (controller._queueTotalSize === 0 && controller._closeRequested) {
                    ReadableByteStreamControllerClearAlgorithms(controller);
                    ReadableStreamClose(controller._controlledReadableByteStream);
                  } else {
                    ReadableByteStreamControllerCallPullIfNeeded(controller);
                  }
                }
                function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
                  if (controller._byobRequest === null) {
                    return;
                  }
                  controller._byobRequest._associatedReadableByteStreamController = void 0;
                  controller._byobRequest._view = null;
                  controller._byobRequest = null;
                }
                function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
                  while (controller._pendingPullIntos.length > 0) {
                    if (controller._queueTotalSize === 0) {
                      return;
                    }
                    var pullIntoDescriptor = controller._pendingPullIntos.peek();
                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                      ReadableByteStreamControllerShiftPendingPullInto(controller);
                      ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
                    }
                  }
                }
                function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {
                  var stream = controller._controlledReadableByteStream;
                  var elementSize = 1;
                  if (view.constructor !== DataView) {
                    elementSize = view.constructor.BYTES_PER_ELEMENT;
                  }
                  var ctor = view.constructor;
                  var buffer = TransferArrayBuffer(view.buffer);
                  var pullIntoDescriptor = {
                    buffer,
                    bufferByteLength: buffer.byteLength,
                    byteOffset: view.byteOffset,
                    byteLength: view.byteLength,
                    bytesFilled: 0,
                    elementSize,
                    viewConstructor: ctor,
                    readerType: "byob"
                  };
                  if (controller._pendingPullIntos.length > 0) {
                    controller._pendingPullIntos.push(pullIntoDescriptor);
                    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
                    return;
                  }
                  if (stream._state === "closed") {
                    var emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
                    readIntoRequest._closeSteps(emptyView);
                    return;
                  }
                  if (controller._queueTotalSize > 0) {
                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                      var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                      ReadableByteStreamControllerHandleQueueDrain(controller);
                      readIntoRequest._chunkSteps(filledView);
                      return;
                    }
                    if (controller._closeRequested) {
                      var e = new TypeError("Insufficient bytes to fill elements in the given buffer");
                      ReadableByteStreamControllerError(controller, e);
                      readIntoRequest._errorSteps(e);
                      return;
                    }
                  }
                  controller._pendingPullIntos.push(pullIntoDescriptor);
                  ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
                  ReadableByteStreamControllerCallPullIfNeeded(controller);
                }
                function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
                  var stream = controller._controlledReadableByteStream;
                  if (ReadableStreamHasBYOBReader(stream)) {
                    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                      var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
                      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
                    }
                  }
                }
                function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
                  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
                  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
                    return;
                  }
                  ReadableByteStreamControllerShiftPendingPullInto(controller);
                  var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
                  if (remainderSize > 0) {
                    var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
                    var remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);
                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
                  }
                  pullIntoDescriptor.bytesFilled -= remainderSize;
                  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
                  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
                }
                function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
                  var firstDescriptor = controller._pendingPullIntos.peek();
                  ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                  var state = controller._controlledReadableByteStream._state;
                  if (state === "closed") {
                    ReadableByteStreamControllerRespondInClosedState(controller);
                  } else {
                    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
                  }
                  ReadableByteStreamControllerCallPullIfNeeded(controller);
                }
                function ReadableByteStreamControllerShiftPendingPullInto(controller) {
                  var descriptor = controller._pendingPullIntos.shift();
                  return descriptor;
                }
                function ReadableByteStreamControllerShouldCallPull(controller) {
                  var stream = controller._controlledReadableByteStream;
                  if (stream._state !== "readable") {
                    return false;
                  }
                  if (controller._closeRequested) {
                    return false;
                  }
                  if (!controller._started) {
                    return false;
                  }
                  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
                    return true;
                  }
                  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                    return true;
                  }
                  var desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
                  if (desiredSize > 0) {
                    return true;
                  }
                  return false;
                }
                function ReadableByteStreamControllerClearAlgorithms(controller) {
                  controller._pullAlgorithm = void 0;
                  controller._cancelAlgorithm = void 0;
                }
                function ReadableByteStreamControllerClose(controller) {
                  var stream = controller._controlledReadableByteStream;
                  if (controller._closeRequested || stream._state !== "readable") {
                    return;
                  }
                  if (controller._queueTotalSize > 0) {
                    controller._closeRequested = true;
                    return;
                  }
                  if (controller._pendingPullIntos.length > 0) {
                    var firstPendingPullInto = controller._pendingPullIntos.peek();
                    if (firstPendingPullInto.bytesFilled > 0) {
                      var e = new TypeError("Insufficient bytes to fill elements in the given buffer");
                      ReadableByteStreamControllerError(controller, e);
                      throw e;
                    }
                  }
                  ReadableByteStreamControllerClearAlgorithms(controller);
                  ReadableStreamClose(stream);
                }
                function ReadableByteStreamControllerEnqueue(controller, chunk) {
                  var stream = controller._controlledReadableByteStream;
                  if (controller._closeRequested || stream._state !== "readable") {
                    return;
                  }
                  var buffer = chunk.buffer;
                  var byteOffset = chunk.byteOffset;
                  var byteLength = chunk.byteLength;
                  var transferredBuffer = TransferArrayBuffer(buffer);
                  if (controller._pendingPullIntos.length > 0) {
                    var firstPendingPullInto = controller._pendingPullIntos.peek();
                    if (IsDetachedBuffer(firstPendingPullInto.buffer))
                      ;
                    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
                  }
                  ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                  if (ReadableStreamHasDefaultReader(stream)) {
                    if (ReadableStreamGetNumReadRequests(stream) === 0) {
                      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
                    } else {
                      if (controller._pendingPullIntos.length > 0) {
                        ReadableByteStreamControllerShiftPendingPullInto(controller);
                      }
                      var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
                      ReadableStreamFulfillReadRequest(stream, transferredView, false);
                    }
                  } else if (ReadableStreamHasBYOBReader(stream)) {
                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
                    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
                  } else {
                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
                  }
                  ReadableByteStreamControllerCallPullIfNeeded(controller);
                }
                function ReadableByteStreamControllerError(controller, e) {
                  var stream = controller._controlledReadableByteStream;
                  if (stream._state !== "readable") {
                    return;
                  }
                  ReadableByteStreamControllerClearPendingPullIntos(controller);
                  ResetQueue(controller);
                  ReadableByteStreamControllerClearAlgorithms(controller);
                  ReadableStreamError(stream, e);
                }
                function ReadableByteStreamControllerGetBYOBRequest(controller) {
                  if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
                    var firstDescriptor = controller._pendingPullIntos.peek();
                    var view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
                    var byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
                    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
                    controller._byobRequest = byobRequest;
                  }
                  return controller._byobRequest;
                }
                function ReadableByteStreamControllerGetDesiredSize(controller) {
                  var state = controller._controlledReadableByteStream._state;
                  if (state === "errored") {
                    return null;
                  }
                  if (state === "closed") {
                    return 0;
                  }
                  return controller._strategyHWM - controller._queueTotalSize;
                }
                function ReadableByteStreamControllerRespond(controller, bytesWritten) {
                  var firstDescriptor = controller._pendingPullIntos.peek();
                  var state = controller._controlledReadableByteStream._state;
                  if (state === "closed") {
                    if (bytesWritten !== 0) {
                      throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
                    }
                  } else {
                    if (bytesWritten === 0) {
                      throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
                    }
                    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
                      throw new RangeError("bytesWritten out of range");
                    }
                  }
                  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
                  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
                }
                function ReadableByteStreamControllerRespondWithNewView(controller, view) {
                  var firstDescriptor = controller._pendingPullIntos.peek();
                  var state = controller._controlledReadableByteStream._state;
                  if (state === "closed") {
                    if (view.byteLength !== 0) {
                      throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
                    }
                  } else {
                    if (view.byteLength === 0) {
                      throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
                    }
                  }
                  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
                    throw new RangeError("The region specified by view does not match byobRequest");
                  }
                  if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
                    throw new RangeError("The buffer of view has different capacity than byobRequest");
                  }
                  if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
                    throw new RangeError("The region specified by view is larger than byobRequest");
                  }
                  var viewByteLength = view.byteLength;
                  firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
                  ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
                }
                function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
                  controller._controlledReadableByteStream = stream;
                  controller._pullAgain = false;
                  controller._pulling = false;
                  controller._byobRequest = null;
                  controller._queue = controller._queueTotalSize = void 0;
                  ResetQueue(controller);
                  controller._closeRequested = false;
                  controller._started = false;
                  controller._strategyHWM = highWaterMark;
                  controller._pullAlgorithm = pullAlgorithm;
                  controller._cancelAlgorithm = cancelAlgorithm;
                  controller._autoAllocateChunkSize = autoAllocateChunkSize;
                  controller._pendingPullIntos = new SimpleQueue();
                  stream._readableStreamController = controller;
                  var startResult = startAlgorithm();
                  uponPromise(promiseResolvedWith(startResult), function() {
                    controller._started = true;
                    ReadableByteStreamControllerCallPullIfNeeded(controller);
                  }, function(r) {
                    ReadableByteStreamControllerError(controller, r);
                  });
                }
                function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
                  var controller = Object.create(ReadableByteStreamController.prototype);
                  var startAlgorithm = function() {
                    return void 0;
                  };
                  var pullAlgorithm = function() {
                    return promiseResolvedWith(void 0);
                  };
                  var cancelAlgorithm = function() {
                    return promiseResolvedWith(void 0);
                  };
                  if (underlyingByteSource.start !== void 0) {
                    startAlgorithm = function() {
                      return underlyingByteSource.start(controller);
                    };
                  }
                  if (underlyingByteSource.pull !== void 0) {
                    pullAlgorithm = function() {
                      return underlyingByteSource.pull(controller);
                    };
                  }
                  if (underlyingByteSource.cancel !== void 0) {
                    cancelAlgorithm = function(reason) {
                      return underlyingByteSource.cancel(reason);
                    };
                  }
                  var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
                  if (autoAllocateChunkSize === 0) {
                    throw new TypeError("autoAllocateChunkSize must be greater than 0");
                  }
                  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
                }
                function SetUpReadableStreamBYOBRequest(request, controller, view) {
                  request._associatedReadableByteStreamController = controller;
                  request._view = view;
                }
                function byobRequestBrandCheckException(name) {
                  return new TypeError("ReadableStreamBYOBRequest.prototype." + name + " can only be used on a ReadableStreamBYOBRequest");
                }
                function byteStreamControllerBrandCheckException(name) {
                  return new TypeError("ReadableByteStreamController.prototype." + name + " can only be used on a ReadableByteStreamController");
                }
                function AcquireReadableStreamBYOBReader(stream) {
                  return new ReadableStreamBYOBReader(stream);
                }
                function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
                  stream._reader._readIntoRequests.push(readIntoRequest);
                }
                function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
                  var reader = stream._reader;
                  var readIntoRequest = reader._readIntoRequests.shift();
                  if (done) {
                    readIntoRequest._closeSteps(chunk);
                  } else {
                    readIntoRequest._chunkSteps(chunk);
                  }
                }
                function ReadableStreamGetNumReadIntoRequests(stream) {
                  return stream._reader._readIntoRequests.length;
                }
                function ReadableStreamHasBYOBReader(stream) {
                  var reader = stream._reader;
                  if (reader === void 0) {
                    return false;
                  }
                  if (!IsReadableStreamBYOBReader(reader)) {
                    return false;
                  }
                  return true;
                }
                var ReadableStreamBYOBReader = function() {
                  function ReadableStreamBYOBReader2(stream) {
                    assertRequiredArgument(stream, 1, "ReadableStreamBYOBReader");
                    assertReadableStream(stream, "First parameter");
                    if (IsReadableStreamLocked(stream)) {
                      throw new TypeError("This stream has already been locked for exclusive reading by another reader");
                    }
                    if (!IsReadableByteStreamController(stream._readableStreamController)) {
                      throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
                    }
                    ReadableStreamReaderGenericInitialize(this, stream);
                    this._readIntoRequests = new SimpleQueue();
                  }
                  Object.defineProperty(ReadableStreamBYOBReader2.prototype, "closed", {
                    get: function() {
                      if (!IsReadableStreamBYOBReader(this)) {
                        return promiseRejectedWith(byobReaderBrandCheckException("closed"));
                      }
                      return this._closedPromise;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  ReadableStreamBYOBReader2.prototype.cancel = function(reason) {
                    if (reason === void 0) {
                      reason = void 0;
                    }
                    if (!IsReadableStreamBYOBReader(this)) {
                      return promiseRejectedWith(byobReaderBrandCheckException("cancel"));
                    }
                    if (this._ownerReadableStream === void 0) {
                      return promiseRejectedWith(readerLockException("cancel"));
                    }
                    return ReadableStreamReaderGenericCancel(this, reason);
                  };
                  ReadableStreamBYOBReader2.prototype.read = function(view) {
                    if (!IsReadableStreamBYOBReader(this)) {
                      return promiseRejectedWith(byobReaderBrandCheckException("read"));
                    }
                    if (!ArrayBuffer.isView(view)) {
                      return promiseRejectedWith(new TypeError("view must be an array buffer view"));
                    }
                    if (view.byteLength === 0) {
                      return promiseRejectedWith(new TypeError("view must have non-zero byteLength"));
                    }
                    if (view.buffer.byteLength === 0) {
                      return promiseRejectedWith(new TypeError("view's buffer must have non-zero byteLength"));
                    }
                    if (IsDetachedBuffer(view.buffer))
                      ;
                    if (this._ownerReadableStream === void 0) {
                      return promiseRejectedWith(readerLockException("read from"));
                    }
                    var resolvePromise;
                    var rejectPromise;
                    var promise = newPromise(function(resolve, reject) {
                      resolvePromise = resolve;
                      rejectPromise = reject;
                    });
                    var readIntoRequest = {
                      _chunkSteps: function(chunk) {
                        return resolvePromise({
                          value: chunk,
                          done: false
                        });
                      },
                      _closeSteps: function(chunk) {
                        return resolvePromise({
                          value: chunk,
                          done: true
                        });
                      },
                      _errorSteps: function(e) {
                        return rejectPromise(e);
                      }
                    };
                    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);
                    return promise;
                  };
                  ReadableStreamBYOBReader2.prototype.releaseLock = function() {
                    if (!IsReadableStreamBYOBReader(this)) {
                      throw byobReaderBrandCheckException("releaseLock");
                    }
                    if (this._ownerReadableStream === void 0) {
                      return;
                    }
                    if (this._readIntoRequests.length > 0) {
                      throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
                    }
                    ReadableStreamReaderGenericRelease(this);
                  };
                  return ReadableStreamBYOBReader2;
                }();
                Object.defineProperties(ReadableStreamBYOBReader.prototype, {
                  cancel: { enumerable: true },
                  read: { enumerable: true },
                  releaseLock: { enumerable: true },
                  closed: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {
                    value: "ReadableStreamBYOBReader",
                    configurable: true
                  });
                }
                function IsReadableStreamBYOBReader(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_readIntoRequests")) {
                    return false;
                  }
                  return x instanceof ReadableStreamBYOBReader;
                }
                function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
                  var stream = reader._ownerReadableStream;
                  stream._disturbed = true;
                  if (stream._state === "errored") {
                    readIntoRequest._errorSteps(stream._storedError);
                  } else {
                    ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);
                  }
                }
                function byobReaderBrandCheckException(name) {
                  return new TypeError("ReadableStreamBYOBReader.prototype." + name + " can only be used on a ReadableStreamBYOBReader");
                }
                function ExtractHighWaterMark(strategy, defaultHWM) {
                  var highWaterMark = strategy.highWaterMark;
                  if (highWaterMark === void 0) {
                    return defaultHWM;
                  }
                  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
                    throw new RangeError("Invalid highWaterMark");
                  }
                  return highWaterMark;
                }
                function ExtractSizeAlgorithm(strategy) {
                  var size = strategy.size;
                  if (!size) {
                    return function() {
                      return 1;
                    };
                  }
                  return size;
                }
                function convertQueuingStrategy(init, context) {
                  assertDictionary(init, context);
                  var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
                  var size = init === null || init === void 0 ? void 0 : init.size;
                  return {
                    highWaterMark: highWaterMark === void 0 ? void 0 : convertUnrestrictedDouble(highWaterMark),
                    size: size === void 0 ? void 0 : convertQueuingStrategySize(size, context + " has member 'size' that")
                  };
                }
                function convertQueuingStrategySize(fn, context) {
                  assertFunction(fn, context);
                  return function(chunk) {
                    return convertUnrestrictedDouble(fn(chunk));
                  };
                }
                function convertUnderlyingSink(original, context) {
                  assertDictionary(original, context);
                  var abort = original === null || original === void 0 ? void 0 : original.abort;
                  var close = original === null || original === void 0 ? void 0 : original.close;
                  var start = original === null || original === void 0 ? void 0 : original.start;
                  var type = original === null || original === void 0 ? void 0 : original.type;
                  var write = original === null || original === void 0 ? void 0 : original.write;
                  return {
                    abort: abort === void 0 ? void 0 : convertUnderlyingSinkAbortCallback(abort, original, context + " has member 'abort' that"),
                    close: close === void 0 ? void 0 : convertUnderlyingSinkCloseCallback(close, original, context + " has member 'close' that"),
                    start: start === void 0 ? void 0 : convertUnderlyingSinkStartCallback(start, original, context + " has member 'start' that"),
                    write: write === void 0 ? void 0 : convertUnderlyingSinkWriteCallback(write, original, context + " has member 'write' that"),
                    type
                  };
                }
                function convertUnderlyingSinkAbortCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function(reason) {
                    return promiseCall(fn, original, [reason]);
                  };
                }
                function convertUnderlyingSinkCloseCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function() {
                    return promiseCall(fn, original, []);
                  };
                }
                function convertUnderlyingSinkStartCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function(controller) {
                    return reflectCall(fn, original, [controller]);
                  };
                }
                function convertUnderlyingSinkWriteCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function(chunk, controller) {
                    return promiseCall(fn, original, [
                      chunk,
                      controller
                    ]);
                  };
                }
                function assertWritableStream(x, context) {
                  if (!IsWritableStream(x)) {
                    throw new TypeError(context + " is not a WritableStream.");
                  }
                }
                function isAbortSignal(value) {
                  if (typeof value !== "object" || value === null) {
                    return false;
                  }
                  try {
                    return typeof value.aborted === "boolean";
                  } catch (_a2) {
                    return false;
                  }
                }
                var supportsAbortController = typeof AbortController === "function";
                function createAbortController() {
                  if (supportsAbortController) {
                    return new AbortController();
                  }
                  return void 0;
                }
                var WritableStream = function() {
                  function WritableStream2(rawUnderlyingSink, rawStrategy) {
                    if (rawUnderlyingSink === void 0) {
                      rawUnderlyingSink = {};
                    }
                    if (rawStrategy === void 0) {
                      rawStrategy = {};
                    }
                    if (rawUnderlyingSink === void 0) {
                      rawUnderlyingSink = null;
                    } else {
                      assertObject(rawUnderlyingSink, "First parameter");
                    }
                    var strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
                    var underlyingSink = convertUnderlyingSink(rawUnderlyingSink, "First parameter");
                    InitializeWritableStream(this);
                    var type = underlyingSink.type;
                    if (type !== void 0) {
                      throw new RangeError("Invalid type is specified");
                    }
                    var sizeAlgorithm = ExtractSizeAlgorithm(strategy);
                    var highWaterMark = ExtractHighWaterMark(strategy, 1);
                    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
                  }
                  Object.defineProperty(WritableStream2.prototype, "locked", {
                    get: function() {
                      if (!IsWritableStream(this)) {
                        throw streamBrandCheckException$2("locked");
                      }
                      return IsWritableStreamLocked(this);
                    },
                    enumerable: false,
                    configurable: true
                  });
                  WritableStream2.prototype.abort = function(reason) {
                    if (reason === void 0) {
                      reason = void 0;
                    }
                    if (!IsWritableStream(this)) {
                      return promiseRejectedWith(streamBrandCheckException$2("abort"));
                    }
                    if (IsWritableStreamLocked(this)) {
                      return promiseRejectedWith(new TypeError("Cannot abort a stream that already has a writer"));
                    }
                    return WritableStreamAbort(this, reason);
                  };
                  WritableStream2.prototype.close = function() {
                    if (!IsWritableStream(this)) {
                      return promiseRejectedWith(streamBrandCheckException$2("close"));
                    }
                    if (IsWritableStreamLocked(this)) {
                      return promiseRejectedWith(new TypeError("Cannot close a stream that already has a writer"));
                    }
                    if (WritableStreamCloseQueuedOrInFlight(this)) {
                      return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
                    }
                    return WritableStreamClose(this);
                  };
                  WritableStream2.prototype.getWriter = function() {
                    if (!IsWritableStream(this)) {
                      throw streamBrandCheckException$2("getWriter");
                    }
                    return AcquireWritableStreamDefaultWriter(this);
                  };
                  return WritableStream2;
                }();
                Object.defineProperties(WritableStream.prototype, {
                  abort: { enumerable: true },
                  close: { enumerable: true },
                  getWriter: { enumerable: true },
                  locked: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {
                    value: "WritableStream",
                    configurable: true
                  });
                }
                function AcquireWritableStreamDefaultWriter(stream) {
                  return new WritableStreamDefaultWriter(stream);
                }
                function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
                  if (highWaterMark === void 0) {
                    highWaterMark = 1;
                  }
                  if (sizeAlgorithm === void 0) {
                    sizeAlgorithm = function() {
                      return 1;
                    };
                  }
                  var stream = Object.create(WritableStream.prototype);
                  InitializeWritableStream(stream);
                  var controller = Object.create(WritableStreamDefaultController.prototype);
                  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
                  return stream;
                }
                function InitializeWritableStream(stream) {
                  stream._state = "writable";
                  stream._storedError = void 0;
                  stream._writer = void 0;
                  stream._writableStreamController = void 0;
                  stream._writeRequests = new SimpleQueue();
                  stream._inFlightWriteRequest = void 0;
                  stream._closeRequest = void 0;
                  stream._inFlightCloseRequest = void 0;
                  stream._pendingAbortRequest = void 0;
                  stream._backpressure = false;
                }
                function IsWritableStream(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_writableStreamController")) {
                    return false;
                  }
                  return x instanceof WritableStream;
                }
                function IsWritableStreamLocked(stream) {
                  if (stream._writer === void 0) {
                    return false;
                  }
                  return true;
                }
                function WritableStreamAbort(stream, reason) {
                  var _a2;
                  if (stream._state === "closed" || stream._state === "errored") {
                    return promiseResolvedWith(void 0);
                  }
                  stream._writableStreamController._abortReason = reason;
                  (_a2 = stream._writableStreamController._abortController) === null || _a2 === void 0 ? void 0 : _a2.abort();
                  var state = stream._state;
                  if (state === "closed" || state === "errored") {
                    return promiseResolvedWith(void 0);
                  }
                  if (stream._pendingAbortRequest !== void 0) {
                    return stream._pendingAbortRequest._promise;
                  }
                  var wasAlreadyErroring = false;
                  if (state === "erroring") {
                    wasAlreadyErroring = true;
                    reason = void 0;
                  }
                  var promise = newPromise(function(resolve, reject) {
                    stream._pendingAbortRequest = {
                      _promise: void 0,
                      _resolve: resolve,
                      _reject: reject,
                      _reason: reason,
                      _wasAlreadyErroring: wasAlreadyErroring
                    };
                  });
                  stream._pendingAbortRequest._promise = promise;
                  if (!wasAlreadyErroring) {
                    WritableStreamStartErroring(stream, reason);
                  }
                  return promise;
                }
                function WritableStreamClose(stream) {
                  var state = stream._state;
                  if (state === "closed" || state === "errored") {
                    return promiseRejectedWith(new TypeError("The stream (in " + state + " state) is not in the writable state and cannot be closed"));
                  }
                  var promise = newPromise(function(resolve, reject) {
                    var closeRequest = {
                      _resolve: resolve,
                      _reject: reject
                    };
                    stream._closeRequest = closeRequest;
                  });
                  var writer = stream._writer;
                  if (writer !== void 0 && stream._backpressure && state === "writable") {
                    defaultWriterReadyPromiseResolve(writer);
                  }
                  WritableStreamDefaultControllerClose(stream._writableStreamController);
                  return promise;
                }
                function WritableStreamAddWriteRequest(stream) {
                  var promise = newPromise(function(resolve, reject) {
                    var writeRequest = {
                      _resolve: resolve,
                      _reject: reject
                    };
                    stream._writeRequests.push(writeRequest);
                  });
                  return promise;
                }
                function WritableStreamDealWithRejection(stream, error) {
                  var state = stream._state;
                  if (state === "writable") {
                    WritableStreamStartErroring(stream, error);
                    return;
                  }
                  WritableStreamFinishErroring(stream);
                }
                function WritableStreamStartErroring(stream, reason) {
                  var controller = stream._writableStreamController;
                  stream._state = "erroring";
                  stream._storedError = reason;
                  var writer = stream._writer;
                  if (writer !== void 0) {
                    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
                  }
                  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
                    WritableStreamFinishErroring(stream);
                  }
                }
                function WritableStreamFinishErroring(stream) {
                  stream._state = "errored";
                  stream._writableStreamController[ErrorSteps]();
                  var storedError = stream._storedError;
                  stream._writeRequests.forEach(function(writeRequest) {
                    writeRequest._reject(storedError);
                  });
                  stream._writeRequests = new SimpleQueue();
                  if (stream._pendingAbortRequest === void 0) {
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                    return;
                  }
                  var abortRequest = stream._pendingAbortRequest;
                  stream._pendingAbortRequest = void 0;
                  if (abortRequest._wasAlreadyErroring) {
                    abortRequest._reject(storedError);
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                    return;
                  }
                  var promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
                  uponPromise(promise, function() {
                    abortRequest._resolve();
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                  }, function(reason) {
                    abortRequest._reject(reason);
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                  });
                }
                function WritableStreamFinishInFlightWrite(stream) {
                  stream._inFlightWriteRequest._resolve(void 0);
                  stream._inFlightWriteRequest = void 0;
                }
                function WritableStreamFinishInFlightWriteWithError(stream, error) {
                  stream._inFlightWriteRequest._reject(error);
                  stream._inFlightWriteRequest = void 0;
                  WritableStreamDealWithRejection(stream, error);
                }
                function WritableStreamFinishInFlightClose(stream) {
                  stream._inFlightCloseRequest._resolve(void 0);
                  stream._inFlightCloseRequest = void 0;
                  var state = stream._state;
                  if (state === "erroring") {
                    stream._storedError = void 0;
                    if (stream._pendingAbortRequest !== void 0) {
                      stream._pendingAbortRequest._resolve();
                      stream._pendingAbortRequest = void 0;
                    }
                  }
                  stream._state = "closed";
                  var writer = stream._writer;
                  if (writer !== void 0) {
                    defaultWriterClosedPromiseResolve(writer);
                  }
                }
                function WritableStreamFinishInFlightCloseWithError(stream, error) {
                  stream._inFlightCloseRequest._reject(error);
                  stream._inFlightCloseRequest = void 0;
                  if (stream._pendingAbortRequest !== void 0) {
                    stream._pendingAbortRequest._reject(error);
                    stream._pendingAbortRequest = void 0;
                  }
                  WritableStreamDealWithRejection(stream, error);
                }
                function WritableStreamCloseQueuedOrInFlight(stream) {
                  if (stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0) {
                    return false;
                  }
                  return true;
                }
                function WritableStreamHasOperationMarkedInFlight(stream) {
                  if (stream._inFlightWriteRequest === void 0 && stream._inFlightCloseRequest === void 0) {
                    return false;
                  }
                  return true;
                }
                function WritableStreamMarkCloseRequestInFlight(stream) {
                  stream._inFlightCloseRequest = stream._closeRequest;
                  stream._closeRequest = void 0;
                }
                function WritableStreamMarkFirstWriteRequestInFlight(stream) {
                  stream._inFlightWriteRequest = stream._writeRequests.shift();
                }
                function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
                  if (stream._closeRequest !== void 0) {
                    stream._closeRequest._reject(stream._storedError);
                    stream._closeRequest = void 0;
                  }
                  var writer = stream._writer;
                  if (writer !== void 0) {
                    defaultWriterClosedPromiseReject(writer, stream._storedError);
                  }
                }
                function WritableStreamUpdateBackpressure(stream, backpressure) {
                  var writer = stream._writer;
                  if (writer !== void 0 && backpressure !== stream._backpressure) {
                    if (backpressure) {
                      defaultWriterReadyPromiseReset(writer);
                    } else {
                      defaultWriterReadyPromiseResolve(writer);
                    }
                  }
                  stream._backpressure = backpressure;
                }
                var WritableStreamDefaultWriter = function() {
                  function WritableStreamDefaultWriter2(stream) {
                    assertRequiredArgument(stream, 1, "WritableStreamDefaultWriter");
                    assertWritableStream(stream, "First parameter");
                    if (IsWritableStreamLocked(stream)) {
                      throw new TypeError("This stream has already been locked for exclusive writing by another writer");
                    }
                    this._ownerWritableStream = stream;
                    stream._writer = this;
                    var state = stream._state;
                    if (state === "writable") {
                      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
                        defaultWriterReadyPromiseInitialize(this);
                      } else {
                        defaultWriterReadyPromiseInitializeAsResolved(this);
                      }
                      defaultWriterClosedPromiseInitialize(this);
                    } else if (state === "erroring") {
                      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
                      defaultWriterClosedPromiseInitialize(this);
                    } else if (state === "closed") {
                      defaultWriterReadyPromiseInitializeAsResolved(this);
                      defaultWriterClosedPromiseInitializeAsResolved(this);
                    } else {
                      var storedError = stream._storedError;
                      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
                      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
                    }
                  }
                  Object.defineProperty(WritableStreamDefaultWriter2.prototype, "closed", {
                    get: function() {
                      if (!IsWritableStreamDefaultWriter(this)) {
                        return promiseRejectedWith(defaultWriterBrandCheckException("closed"));
                      }
                      return this._closedPromise;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  Object.defineProperty(WritableStreamDefaultWriter2.prototype, "desiredSize", {
                    get: function() {
                      if (!IsWritableStreamDefaultWriter(this)) {
                        throw defaultWriterBrandCheckException("desiredSize");
                      }
                      if (this._ownerWritableStream === void 0) {
                        throw defaultWriterLockException("desiredSize");
                      }
                      return WritableStreamDefaultWriterGetDesiredSize(this);
                    },
                    enumerable: false,
                    configurable: true
                  });
                  Object.defineProperty(WritableStreamDefaultWriter2.prototype, "ready", {
                    get: function() {
                      if (!IsWritableStreamDefaultWriter(this)) {
                        return promiseRejectedWith(defaultWriterBrandCheckException("ready"));
                      }
                      return this._readyPromise;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  WritableStreamDefaultWriter2.prototype.abort = function(reason) {
                    if (reason === void 0) {
                      reason = void 0;
                    }
                    if (!IsWritableStreamDefaultWriter(this)) {
                      return promiseRejectedWith(defaultWriterBrandCheckException("abort"));
                    }
                    if (this._ownerWritableStream === void 0) {
                      return promiseRejectedWith(defaultWriterLockException("abort"));
                    }
                    return WritableStreamDefaultWriterAbort(this, reason);
                  };
                  WritableStreamDefaultWriter2.prototype.close = function() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                      return promiseRejectedWith(defaultWriterBrandCheckException("close"));
                    }
                    var stream = this._ownerWritableStream;
                    if (stream === void 0) {
                      return promiseRejectedWith(defaultWriterLockException("close"));
                    }
                    if (WritableStreamCloseQueuedOrInFlight(stream)) {
                      return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
                    }
                    return WritableStreamDefaultWriterClose(this);
                  };
                  WritableStreamDefaultWriter2.prototype.releaseLock = function() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                      throw defaultWriterBrandCheckException("releaseLock");
                    }
                    var stream = this._ownerWritableStream;
                    if (stream === void 0) {
                      return;
                    }
                    WritableStreamDefaultWriterRelease(this);
                  };
                  WritableStreamDefaultWriter2.prototype.write = function(chunk) {
                    if (chunk === void 0) {
                      chunk = void 0;
                    }
                    if (!IsWritableStreamDefaultWriter(this)) {
                      return promiseRejectedWith(defaultWriterBrandCheckException("write"));
                    }
                    if (this._ownerWritableStream === void 0) {
                      return promiseRejectedWith(defaultWriterLockException("write to"));
                    }
                    return WritableStreamDefaultWriterWrite(this, chunk);
                  };
                  return WritableStreamDefaultWriter2;
                }();
                Object.defineProperties(WritableStreamDefaultWriter.prototype, {
                  abort: { enumerable: true },
                  close: { enumerable: true },
                  releaseLock: { enumerable: true },
                  write: { enumerable: true },
                  closed: { enumerable: true },
                  desiredSize: { enumerable: true },
                  ready: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {
                    value: "WritableStreamDefaultWriter",
                    configurable: true
                  });
                }
                function IsWritableStreamDefaultWriter(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_ownerWritableStream")) {
                    return false;
                  }
                  return x instanceof WritableStreamDefaultWriter;
                }
                function WritableStreamDefaultWriterAbort(writer, reason) {
                  var stream = writer._ownerWritableStream;
                  return WritableStreamAbort(stream, reason);
                }
                function WritableStreamDefaultWriterClose(writer) {
                  var stream = writer._ownerWritableStream;
                  return WritableStreamClose(stream);
                }
                function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
                  var stream = writer._ownerWritableStream;
                  var state = stream._state;
                  if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
                    return promiseResolvedWith(void 0);
                  }
                  if (state === "errored") {
                    return promiseRejectedWith(stream._storedError);
                  }
                  return WritableStreamDefaultWriterClose(writer);
                }
                function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
                  if (writer._closedPromiseState === "pending") {
                    defaultWriterClosedPromiseReject(writer, error);
                  } else {
                    defaultWriterClosedPromiseResetToRejected(writer, error);
                  }
                }
                function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
                  if (writer._readyPromiseState === "pending") {
                    defaultWriterReadyPromiseReject(writer, error);
                  } else {
                    defaultWriterReadyPromiseResetToRejected(writer, error);
                  }
                }
                function WritableStreamDefaultWriterGetDesiredSize(writer) {
                  var stream = writer._ownerWritableStream;
                  var state = stream._state;
                  if (state === "errored" || state === "erroring") {
                    return null;
                  }
                  if (state === "closed") {
                    return 0;
                  }
                  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
                }
                function WritableStreamDefaultWriterRelease(writer) {
                  var stream = writer._ownerWritableStream;
                  var releasedError = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
                  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
                  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
                  stream._writer = void 0;
                  writer._ownerWritableStream = void 0;
                }
                function WritableStreamDefaultWriterWrite(writer, chunk) {
                  var stream = writer._ownerWritableStream;
                  var controller = stream._writableStreamController;
                  var chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
                  if (stream !== writer._ownerWritableStream) {
                    return promiseRejectedWith(defaultWriterLockException("write to"));
                  }
                  var state = stream._state;
                  if (state === "errored") {
                    return promiseRejectedWith(stream._storedError);
                  }
                  if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
                    return promiseRejectedWith(new TypeError("The stream is closing or closed and cannot be written to"));
                  }
                  if (state === "erroring") {
                    return promiseRejectedWith(stream._storedError);
                  }
                  var promise = WritableStreamAddWriteRequest(stream);
                  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
                  return promise;
                }
                var closeSentinel = {};
                var WritableStreamDefaultController = function() {
                  function WritableStreamDefaultController2() {
                    throw new TypeError("Illegal constructor");
                  }
                  Object.defineProperty(WritableStreamDefaultController2.prototype, "abortReason", {
                    get: function() {
                      if (!IsWritableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$2("abortReason");
                      }
                      return this._abortReason;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  Object.defineProperty(WritableStreamDefaultController2.prototype, "signal", {
                    get: function() {
                      if (!IsWritableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$2("signal");
                      }
                      if (this._abortController === void 0) {
                        throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
                      }
                      return this._abortController.signal;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  WritableStreamDefaultController2.prototype.error = function(e) {
                    if (e === void 0) {
                      e = void 0;
                    }
                    if (!IsWritableStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException$2("error");
                    }
                    var state = this._controlledWritableStream._state;
                    if (state !== "writable") {
                      return;
                    }
                    WritableStreamDefaultControllerError(this, e);
                  };
                  WritableStreamDefaultController2.prototype[AbortSteps] = function(reason) {
                    var result = this._abortAlgorithm(reason);
                    WritableStreamDefaultControllerClearAlgorithms(this);
                    return result;
                  };
                  WritableStreamDefaultController2.prototype[ErrorSteps] = function() {
                    ResetQueue(this);
                  };
                  return WritableStreamDefaultController2;
                }();
                Object.defineProperties(WritableStreamDefaultController.prototype, {
                  abortReason: { enumerable: true },
                  signal: { enumerable: true },
                  error: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
                    value: "WritableStreamDefaultController",
                    configurable: true
                  });
                }
                function IsWritableStreamDefaultController(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_controlledWritableStream")) {
                    return false;
                  }
                  return x instanceof WritableStreamDefaultController;
                }
                function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
                  controller._controlledWritableStream = stream;
                  stream._writableStreamController = controller;
                  controller._queue = void 0;
                  controller._queueTotalSize = void 0;
                  ResetQueue(controller);
                  controller._abortReason = void 0;
                  controller._abortController = createAbortController();
                  controller._started = false;
                  controller._strategySizeAlgorithm = sizeAlgorithm;
                  controller._strategyHWM = highWaterMark;
                  controller._writeAlgorithm = writeAlgorithm;
                  controller._closeAlgorithm = closeAlgorithm;
                  controller._abortAlgorithm = abortAlgorithm;
                  var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                  WritableStreamUpdateBackpressure(stream, backpressure);
                  var startResult = startAlgorithm();
                  var startPromise = promiseResolvedWith(startResult);
                  uponPromise(startPromise, function() {
                    controller._started = true;
                    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
                  }, function(r) {
                    controller._started = true;
                    WritableStreamDealWithRejection(stream, r);
                  });
                }
                function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
                  var controller = Object.create(WritableStreamDefaultController.prototype);
                  var startAlgorithm = function() {
                    return void 0;
                  };
                  var writeAlgorithm = function() {
                    return promiseResolvedWith(void 0);
                  };
                  var closeAlgorithm = function() {
                    return promiseResolvedWith(void 0);
                  };
                  var abortAlgorithm = function() {
                    return promiseResolvedWith(void 0);
                  };
                  if (underlyingSink.start !== void 0) {
                    startAlgorithm = function() {
                      return underlyingSink.start(controller);
                    };
                  }
                  if (underlyingSink.write !== void 0) {
                    writeAlgorithm = function(chunk) {
                      return underlyingSink.write(chunk, controller);
                    };
                  }
                  if (underlyingSink.close !== void 0) {
                    closeAlgorithm = function() {
                      return underlyingSink.close();
                    };
                  }
                  if (underlyingSink.abort !== void 0) {
                    abortAlgorithm = function(reason) {
                      return underlyingSink.abort(reason);
                    };
                  }
                  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
                }
                function WritableStreamDefaultControllerClearAlgorithms(controller) {
                  controller._writeAlgorithm = void 0;
                  controller._closeAlgorithm = void 0;
                  controller._abortAlgorithm = void 0;
                  controller._strategySizeAlgorithm = void 0;
                }
                function WritableStreamDefaultControllerClose(controller) {
                  EnqueueValueWithSize(controller, closeSentinel, 0);
                  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
                }
                function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
                  try {
                    return controller._strategySizeAlgorithm(chunk);
                  } catch (chunkSizeE) {
                    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
                    return 1;
                  }
                }
                function WritableStreamDefaultControllerGetDesiredSize(controller) {
                  return controller._strategyHWM - controller._queueTotalSize;
                }
                function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
                  try {
                    EnqueueValueWithSize(controller, chunk, chunkSize);
                  } catch (enqueueE) {
                    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
                    return;
                  }
                  var stream = controller._controlledWritableStream;
                  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === "writable") {
                    var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                    WritableStreamUpdateBackpressure(stream, backpressure);
                  }
                  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
                }
                function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
                  var stream = controller._controlledWritableStream;
                  if (!controller._started) {
                    return;
                  }
                  if (stream._inFlightWriteRequest !== void 0) {
                    return;
                  }
                  var state = stream._state;
                  if (state === "erroring") {
                    WritableStreamFinishErroring(stream);
                    return;
                  }
                  if (controller._queue.length === 0) {
                    return;
                  }
                  var value = PeekQueueValue(controller);
                  if (value === closeSentinel) {
                    WritableStreamDefaultControllerProcessClose(controller);
                  } else {
                    WritableStreamDefaultControllerProcessWrite(controller, value);
                  }
                }
                function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
                  if (controller._controlledWritableStream._state === "writable") {
                    WritableStreamDefaultControllerError(controller, error);
                  }
                }
                function WritableStreamDefaultControllerProcessClose(controller) {
                  var stream = controller._controlledWritableStream;
                  WritableStreamMarkCloseRequestInFlight(stream);
                  DequeueValue(controller);
                  var sinkClosePromise = controller._closeAlgorithm();
                  WritableStreamDefaultControllerClearAlgorithms(controller);
                  uponPromise(sinkClosePromise, function() {
                    WritableStreamFinishInFlightClose(stream);
                  }, function(reason) {
                    WritableStreamFinishInFlightCloseWithError(stream, reason);
                  });
                }
                function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
                  var stream = controller._controlledWritableStream;
                  WritableStreamMarkFirstWriteRequestInFlight(stream);
                  var sinkWritePromise = controller._writeAlgorithm(chunk);
                  uponPromise(sinkWritePromise, function() {
                    WritableStreamFinishInFlightWrite(stream);
                    var state = stream._state;
                    DequeueValue(controller);
                    if (!WritableStreamCloseQueuedOrInFlight(stream) && state === "writable") {
                      var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                      WritableStreamUpdateBackpressure(stream, backpressure);
                    }
                    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
                  }, function(reason) {
                    if (stream._state === "writable") {
                      WritableStreamDefaultControllerClearAlgorithms(controller);
                    }
                    WritableStreamFinishInFlightWriteWithError(stream, reason);
                  });
                }
                function WritableStreamDefaultControllerGetBackpressure(controller) {
                  var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
                  return desiredSize <= 0;
                }
                function WritableStreamDefaultControllerError(controller, error) {
                  var stream = controller._controlledWritableStream;
                  WritableStreamDefaultControllerClearAlgorithms(controller);
                  WritableStreamStartErroring(stream, error);
                }
                function streamBrandCheckException$2(name) {
                  return new TypeError("WritableStream.prototype." + name + " can only be used on a WritableStream");
                }
                function defaultControllerBrandCheckException$2(name) {
                  return new TypeError("WritableStreamDefaultController.prototype." + name + " can only be used on a WritableStreamDefaultController");
                }
                function defaultWriterBrandCheckException(name) {
                  return new TypeError("WritableStreamDefaultWriter.prototype." + name + " can only be used on a WritableStreamDefaultWriter");
                }
                function defaultWriterLockException(name) {
                  return new TypeError("Cannot " + name + " a stream using a released writer");
                }
                function defaultWriterClosedPromiseInitialize(writer) {
                  writer._closedPromise = newPromise(function(resolve, reject) {
                    writer._closedPromise_resolve = resolve;
                    writer._closedPromise_reject = reject;
                    writer._closedPromiseState = "pending";
                  });
                }
                function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
                  defaultWriterClosedPromiseInitialize(writer);
                  defaultWriterClosedPromiseReject(writer, reason);
                }
                function defaultWriterClosedPromiseInitializeAsResolved(writer) {
                  defaultWriterClosedPromiseInitialize(writer);
                  defaultWriterClosedPromiseResolve(writer);
                }
                function defaultWriterClosedPromiseReject(writer, reason) {
                  if (writer._closedPromise_reject === void 0) {
                    return;
                  }
                  setPromiseIsHandledToTrue(writer._closedPromise);
                  writer._closedPromise_reject(reason);
                  writer._closedPromise_resolve = void 0;
                  writer._closedPromise_reject = void 0;
                  writer._closedPromiseState = "rejected";
                }
                function defaultWriterClosedPromiseResetToRejected(writer, reason) {
                  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
                }
                function defaultWriterClosedPromiseResolve(writer) {
                  if (writer._closedPromise_resolve === void 0) {
                    return;
                  }
                  writer._closedPromise_resolve(void 0);
                  writer._closedPromise_resolve = void 0;
                  writer._closedPromise_reject = void 0;
                  writer._closedPromiseState = "resolved";
                }
                function defaultWriterReadyPromiseInitialize(writer) {
                  writer._readyPromise = newPromise(function(resolve, reject) {
                    writer._readyPromise_resolve = resolve;
                    writer._readyPromise_reject = reject;
                  });
                  writer._readyPromiseState = "pending";
                }
                function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
                  defaultWriterReadyPromiseInitialize(writer);
                  defaultWriterReadyPromiseReject(writer, reason);
                }
                function defaultWriterReadyPromiseInitializeAsResolved(writer) {
                  defaultWriterReadyPromiseInitialize(writer);
                  defaultWriterReadyPromiseResolve(writer);
                }
                function defaultWriterReadyPromiseReject(writer, reason) {
                  if (writer._readyPromise_reject === void 0) {
                    return;
                  }
                  setPromiseIsHandledToTrue(writer._readyPromise);
                  writer._readyPromise_reject(reason);
                  writer._readyPromise_resolve = void 0;
                  writer._readyPromise_reject = void 0;
                  writer._readyPromiseState = "rejected";
                }
                function defaultWriterReadyPromiseReset(writer) {
                  defaultWriterReadyPromiseInitialize(writer);
                }
                function defaultWriterReadyPromiseResetToRejected(writer, reason) {
                  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
                }
                function defaultWriterReadyPromiseResolve(writer) {
                  if (writer._readyPromise_resolve === void 0) {
                    return;
                  }
                  writer._readyPromise_resolve(void 0);
                  writer._readyPromise_resolve = void 0;
                  writer._readyPromise_reject = void 0;
                  writer._readyPromiseState = "fulfilled";
                }
                var NativeDOMException = typeof DOMException !== "undefined" ? DOMException : void 0;
                function isDOMExceptionConstructor(ctor) {
                  if (!(typeof ctor === "function" || typeof ctor === "object")) {
                    return false;
                  }
                  try {
                    new ctor();
                    return true;
                  } catch (_a2) {
                    return false;
                  }
                }
                function createDOMExceptionPolyfill() {
                  var ctor = function DOMException2(message, name) {
                    this.message = message || "";
                    this.name = name || "Error";
                    if (Error.captureStackTrace) {
                      Error.captureStackTrace(this, this.constructor);
                    }
                  };
                  ctor.prototype = Object.create(Error.prototype);
                  Object.defineProperty(ctor.prototype, "constructor", {
                    value: ctor,
                    writable: true,
                    configurable: true
                  });
                  return ctor;
                }
                var DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();
                function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
                  var reader = AcquireReadableStreamDefaultReader(source);
                  var writer = AcquireWritableStreamDefaultWriter(dest);
                  source._disturbed = true;
                  var shuttingDown = false;
                  var currentWrite = promiseResolvedWith(void 0);
                  return newPromise(function(resolve, reject) {
                    var abortAlgorithm;
                    if (signal !== void 0) {
                      abortAlgorithm = function() {
                        var error = new DOMException$1("Aborted", "AbortError");
                        var actions = [];
                        if (!preventAbort) {
                          actions.push(function() {
                            if (dest._state === "writable") {
                              return WritableStreamAbort(dest, error);
                            }
                            return promiseResolvedWith(void 0);
                          });
                        }
                        if (!preventCancel) {
                          actions.push(function() {
                            if (source._state === "readable") {
                              return ReadableStreamCancel(source, error);
                            }
                            return promiseResolvedWith(void 0);
                          });
                        }
                        shutdownWithAction(function() {
                          return Promise.all(actions.map(function(action) {
                            return action();
                          }));
                        }, true, error);
                      };
                      if (signal.aborted) {
                        abortAlgorithm();
                        return;
                      }
                      signal.addEventListener("abort", abortAlgorithm);
                    }
                    function pipeLoop() {
                      return newPromise(function(resolveLoop, rejectLoop) {
                        function next(done) {
                          if (done) {
                            resolveLoop();
                          } else {
                            PerformPromiseThen(pipeStep(), next, rejectLoop);
                          }
                        }
                        next(false);
                      });
                    }
                    function pipeStep() {
                      if (shuttingDown) {
                        return promiseResolvedWith(true);
                      }
                      return PerformPromiseThen(writer._readyPromise, function() {
                        return newPromise(function(resolveRead, rejectRead) {
                          ReadableStreamDefaultReaderRead(reader, {
                            _chunkSteps: function(chunk) {
                              currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), void 0, noop);
                              resolveRead(false);
                            },
                            _closeSteps: function() {
                              return resolveRead(true);
                            },
                            _errorSteps: rejectRead
                          });
                        });
                      });
                    }
                    isOrBecomesErrored(source, reader._closedPromise, function(storedError) {
                      if (!preventAbort) {
                        shutdownWithAction(function() {
                          return WritableStreamAbort(dest, storedError);
                        }, true, storedError);
                      } else {
                        shutdown(true, storedError);
                      }
                    });
                    isOrBecomesErrored(dest, writer._closedPromise, function(storedError) {
                      if (!preventCancel) {
                        shutdownWithAction(function() {
                          return ReadableStreamCancel(source, storedError);
                        }, true, storedError);
                      } else {
                        shutdown(true, storedError);
                      }
                    });
                    isOrBecomesClosed(source, reader._closedPromise, function() {
                      if (!preventClose) {
                        shutdownWithAction(function() {
                          return WritableStreamDefaultWriterCloseWithErrorPropagation(writer);
                        });
                      } else {
                        shutdown();
                      }
                    });
                    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === "closed") {
                      var destClosed_1 = new TypeError("the destination writable stream closed before all data could be piped to it");
                      if (!preventCancel) {
                        shutdownWithAction(function() {
                          return ReadableStreamCancel(source, destClosed_1);
                        }, true, destClosed_1);
                      } else {
                        shutdown(true, destClosed_1);
                      }
                    }
                    setPromiseIsHandledToTrue(pipeLoop());
                    function waitForWritesToFinish() {
                      var oldCurrentWrite = currentWrite;
                      return PerformPromiseThen(currentWrite, function() {
                        return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0;
                      });
                    }
                    function isOrBecomesErrored(stream, promise, action) {
                      if (stream._state === "errored") {
                        action(stream._storedError);
                      } else {
                        uponRejection(promise, action);
                      }
                    }
                    function isOrBecomesClosed(stream, promise, action) {
                      if (stream._state === "closed") {
                        action();
                      } else {
                        uponFulfillment(promise, action);
                      }
                    }
                    function shutdownWithAction(action, originalIsError, originalError) {
                      if (shuttingDown) {
                        return;
                      }
                      shuttingDown = true;
                      if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
                        uponFulfillment(waitForWritesToFinish(), doTheRest);
                      } else {
                        doTheRest();
                      }
                      function doTheRest() {
                        uponPromise(action(), function() {
                          return finalize(originalIsError, originalError);
                        }, function(newError) {
                          return finalize(true, newError);
                        });
                      }
                    }
                    function shutdown(isError, error) {
                      if (shuttingDown) {
                        return;
                      }
                      shuttingDown = true;
                      if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
                        uponFulfillment(waitForWritesToFinish(), function() {
                          return finalize(isError, error);
                        });
                      } else {
                        finalize(isError, error);
                      }
                    }
                    function finalize(isError, error) {
                      WritableStreamDefaultWriterRelease(writer);
                      ReadableStreamReaderGenericRelease(reader);
                      if (signal !== void 0) {
                        signal.removeEventListener("abort", abortAlgorithm);
                      }
                      if (isError) {
                        reject(error);
                      } else {
                        resolve(void 0);
                      }
                    }
                  });
                }
                var ReadableStreamDefaultController = function() {
                  function ReadableStreamDefaultController2() {
                    throw new TypeError("Illegal constructor");
                  }
                  Object.defineProperty(ReadableStreamDefaultController2.prototype, "desiredSize", {
                    get: function() {
                      if (!IsReadableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$1("desiredSize");
                      }
                      return ReadableStreamDefaultControllerGetDesiredSize(this);
                    },
                    enumerable: false,
                    configurable: true
                  });
                  ReadableStreamDefaultController2.prototype.close = function() {
                    if (!IsReadableStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException$1("close");
                    }
                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                      throw new TypeError("The stream is not in a state that permits close");
                    }
                    ReadableStreamDefaultControllerClose(this);
                  };
                  ReadableStreamDefaultController2.prototype.enqueue = function(chunk) {
                    if (chunk === void 0) {
                      chunk = void 0;
                    }
                    if (!IsReadableStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException$1("enqueue");
                    }
                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                      throw new TypeError("The stream is not in a state that permits enqueue");
                    }
                    return ReadableStreamDefaultControllerEnqueue(this, chunk);
                  };
                  ReadableStreamDefaultController2.prototype.error = function(e) {
                    if (e === void 0) {
                      e = void 0;
                    }
                    if (!IsReadableStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException$1("error");
                    }
                    ReadableStreamDefaultControllerError(this, e);
                  };
                  ReadableStreamDefaultController2.prototype[CancelSteps] = function(reason) {
                    ResetQueue(this);
                    var result = this._cancelAlgorithm(reason);
                    ReadableStreamDefaultControllerClearAlgorithms(this);
                    return result;
                  };
                  ReadableStreamDefaultController2.prototype[PullSteps] = function(readRequest) {
                    var stream = this._controlledReadableStream;
                    if (this._queue.length > 0) {
                      var chunk = DequeueValue(this);
                      if (this._closeRequested && this._queue.length === 0) {
                        ReadableStreamDefaultControllerClearAlgorithms(this);
                        ReadableStreamClose(stream);
                      } else {
                        ReadableStreamDefaultControllerCallPullIfNeeded(this);
                      }
                      readRequest._chunkSteps(chunk);
                    } else {
                      ReadableStreamAddReadRequest(stream, readRequest);
                      ReadableStreamDefaultControllerCallPullIfNeeded(this);
                    }
                  };
                  return ReadableStreamDefaultController2;
                }();
                Object.defineProperties(ReadableStreamDefaultController.prototype, {
                  close: { enumerable: true },
                  enqueue: { enumerable: true },
                  error: { enumerable: true },
                  desiredSize: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
                    value: "ReadableStreamDefaultController",
                    configurable: true
                  });
                }
                function IsReadableStreamDefaultController(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableStream")) {
                    return false;
                  }
                  return x instanceof ReadableStreamDefaultController;
                }
                function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
                  var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
                  if (!shouldPull) {
                    return;
                  }
                  if (controller._pulling) {
                    controller._pullAgain = true;
                    return;
                  }
                  controller._pulling = true;
                  var pullPromise = controller._pullAlgorithm();
                  uponPromise(pullPromise, function() {
                    controller._pulling = false;
                    if (controller._pullAgain) {
                      controller._pullAgain = false;
                      ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                    }
                  }, function(e) {
                    ReadableStreamDefaultControllerError(controller, e);
                  });
                }
                function ReadableStreamDefaultControllerShouldCallPull(controller) {
                  var stream = controller._controlledReadableStream;
                  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
                    return false;
                  }
                  if (!controller._started) {
                    return false;
                  }
                  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
                    return true;
                  }
                  var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
                  if (desiredSize > 0) {
                    return true;
                  }
                  return false;
                }
                function ReadableStreamDefaultControllerClearAlgorithms(controller) {
                  controller._pullAlgorithm = void 0;
                  controller._cancelAlgorithm = void 0;
                  controller._strategySizeAlgorithm = void 0;
                }
                function ReadableStreamDefaultControllerClose(controller) {
                  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
                    return;
                  }
                  var stream = controller._controlledReadableStream;
                  controller._closeRequested = true;
                  if (controller._queue.length === 0) {
                    ReadableStreamDefaultControllerClearAlgorithms(controller);
                    ReadableStreamClose(stream);
                  }
                }
                function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
                  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
                    return;
                  }
                  var stream = controller._controlledReadableStream;
                  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
                    ReadableStreamFulfillReadRequest(stream, chunk, false);
                  } else {
                    var chunkSize = void 0;
                    try {
                      chunkSize = controller._strategySizeAlgorithm(chunk);
                    } catch (chunkSizeE) {
                      ReadableStreamDefaultControllerError(controller, chunkSizeE);
                      throw chunkSizeE;
                    }
                    try {
                      EnqueueValueWithSize(controller, chunk, chunkSize);
                    } catch (enqueueE) {
                      ReadableStreamDefaultControllerError(controller, enqueueE);
                      throw enqueueE;
                    }
                  }
                  ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                }
                function ReadableStreamDefaultControllerError(controller, e) {
                  var stream = controller._controlledReadableStream;
                  if (stream._state !== "readable") {
                    return;
                  }
                  ResetQueue(controller);
                  ReadableStreamDefaultControllerClearAlgorithms(controller);
                  ReadableStreamError(stream, e);
                }
                function ReadableStreamDefaultControllerGetDesiredSize(controller) {
                  var state = controller._controlledReadableStream._state;
                  if (state === "errored") {
                    return null;
                  }
                  if (state === "closed") {
                    return 0;
                  }
                  return controller._strategyHWM - controller._queueTotalSize;
                }
                function ReadableStreamDefaultControllerHasBackpressure(controller) {
                  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
                    return false;
                  }
                  return true;
                }
                function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
                  var state = controller._controlledReadableStream._state;
                  if (!controller._closeRequested && state === "readable") {
                    return true;
                  }
                  return false;
                }
                function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
                  controller._controlledReadableStream = stream;
                  controller._queue = void 0;
                  controller._queueTotalSize = void 0;
                  ResetQueue(controller);
                  controller._started = false;
                  controller._closeRequested = false;
                  controller._pullAgain = false;
                  controller._pulling = false;
                  controller._strategySizeAlgorithm = sizeAlgorithm;
                  controller._strategyHWM = highWaterMark;
                  controller._pullAlgorithm = pullAlgorithm;
                  controller._cancelAlgorithm = cancelAlgorithm;
                  stream._readableStreamController = controller;
                  var startResult = startAlgorithm();
                  uponPromise(promiseResolvedWith(startResult), function() {
                    controller._started = true;
                    ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                  }, function(r) {
                    ReadableStreamDefaultControllerError(controller, r);
                  });
                }
                function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
                  var controller = Object.create(ReadableStreamDefaultController.prototype);
                  var startAlgorithm = function() {
                    return void 0;
                  };
                  var pullAlgorithm = function() {
                    return promiseResolvedWith(void 0);
                  };
                  var cancelAlgorithm = function() {
                    return promiseResolvedWith(void 0);
                  };
                  if (underlyingSource.start !== void 0) {
                    startAlgorithm = function() {
                      return underlyingSource.start(controller);
                    };
                  }
                  if (underlyingSource.pull !== void 0) {
                    pullAlgorithm = function() {
                      return underlyingSource.pull(controller);
                    };
                  }
                  if (underlyingSource.cancel !== void 0) {
                    cancelAlgorithm = function(reason) {
                      return underlyingSource.cancel(reason);
                    };
                  }
                  SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
                }
                function defaultControllerBrandCheckException$1(name) {
                  return new TypeError("ReadableStreamDefaultController.prototype." + name + " can only be used on a ReadableStreamDefaultController");
                }
                function ReadableStreamTee(stream, cloneForBranch2) {
                  if (IsReadableByteStreamController(stream._readableStreamController)) {
                    return ReadableByteStreamTee(stream);
                  }
                  return ReadableStreamDefaultTee(stream);
                }
                function ReadableStreamDefaultTee(stream, cloneForBranch2) {
                  var reader = AcquireReadableStreamDefaultReader(stream);
                  var reading = false;
                  var readAgain = false;
                  var canceled1 = false;
                  var canceled2 = false;
                  var reason1;
                  var reason2;
                  var branch1;
                  var branch2;
                  var resolveCancelPromise;
                  var cancelPromise = newPromise(function(resolve) {
                    resolveCancelPromise = resolve;
                  });
                  function pullAlgorithm() {
                    if (reading) {
                      readAgain = true;
                      return promiseResolvedWith(void 0);
                    }
                    reading = true;
                    var readRequest = {
                      _chunkSteps: function(chunk) {
                        queueMicrotask(function() {
                          readAgain = false;
                          var chunk1 = chunk;
                          var chunk2 = chunk;
                          if (!canceled1) {
                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
                          }
                          if (!canceled2) {
                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
                          }
                          reading = false;
                          if (readAgain) {
                            pullAlgorithm();
                          }
                        });
                      },
                      _closeSteps: function() {
                        reading = false;
                        if (!canceled1) {
                          ReadableStreamDefaultControllerClose(branch1._readableStreamController);
                        }
                        if (!canceled2) {
                          ReadableStreamDefaultControllerClose(branch2._readableStreamController);
                        }
                        if (!canceled1 || !canceled2) {
                          resolveCancelPromise(void 0);
                        }
                      },
                      _errorSteps: function() {
                        reading = false;
                      }
                    };
                    ReadableStreamDefaultReaderRead(reader, readRequest);
                    return promiseResolvedWith(void 0);
                  }
                  function cancel1Algorithm(reason) {
                    canceled1 = true;
                    reason1 = reason;
                    if (canceled2) {
                      var compositeReason = CreateArrayFromList([
                        reason1,
                        reason2
                      ]);
                      var cancelResult = ReadableStreamCancel(stream, compositeReason);
                      resolveCancelPromise(cancelResult);
                    }
                    return cancelPromise;
                  }
                  function cancel2Algorithm(reason) {
                    canceled2 = true;
                    reason2 = reason;
                    if (canceled1) {
                      var compositeReason = CreateArrayFromList([
                        reason1,
                        reason2
                      ]);
                      var cancelResult = ReadableStreamCancel(stream, compositeReason);
                      resolveCancelPromise(cancelResult);
                    }
                    return cancelPromise;
                  }
                  function startAlgorithm() {
                  }
                  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
                  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
                  uponRejection(reader._closedPromise, function(r) {
                    ReadableStreamDefaultControllerError(branch1._readableStreamController, r);
                    ReadableStreamDefaultControllerError(branch2._readableStreamController, r);
                    if (!canceled1 || !canceled2) {
                      resolveCancelPromise(void 0);
                    }
                  });
                  return [
                    branch1,
                    branch2
                  ];
                }
                function ReadableByteStreamTee(stream) {
                  var reader = AcquireReadableStreamDefaultReader(stream);
                  var reading = false;
                  var readAgainForBranch1 = false;
                  var readAgainForBranch2 = false;
                  var canceled1 = false;
                  var canceled2 = false;
                  var reason1;
                  var reason2;
                  var branch1;
                  var branch2;
                  var resolveCancelPromise;
                  var cancelPromise = newPromise(function(resolve) {
                    resolveCancelPromise = resolve;
                  });
                  function forwardReaderError(thisReader) {
                    uponRejection(thisReader._closedPromise, function(r) {
                      if (thisReader !== reader) {
                        return;
                      }
                      ReadableByteStreamControllerError(branch1._readableStreamController, r);
                      ReadableByteStreamControllerError(branch2._readableStreamController, r);
                      if (!canceled1 || !canceled2) {
                        resolveCancelPromise(void 0);
                      }
                    });
                  }
                  function pullWithDefaultReader() {
                    if (IsReadableStreamBYOBReader(reader)) {
                      ReadableStreamReaderGenericRelease(reader);
                      reader = AcquireReadableStreamDefaultReader(stream);
                      forwardReaderError(reader);
                    }
                    var readRequest = {
                      _chunkSteps: function(chunk) {
                        queueMicrotask(function() {
                          readAgainForBranch1 = false;
                          readAgainForBranch2 = false;
                          var chunk1 = chunk;
                          var chunk2 = chunk;
                          if (!canceled1 && !canceled2) {
                            try {
                              chunk2 = CloneAsUint8Array(chunk);
                            } catch (cloneE) {
                              ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                              ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                              return;
                            }
                          }
                          if (!canceled1) {
                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
                          }
                          if (!canceled2) {
                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
                          }
                          reading = false;
                          if (readAgainForBranch1) {
                            pull1Algorithm();
                          } else if (readAgainForBranch2) {
                            pull2Algorithm();
                          }
                        });
                      },
                      _closeSteps: function() {
                        reading = false;
                        if (!canceled1) {
                          ReadableByteStreamControllerClose(branch1._readableStreamController);
                        }
                        if (!canceled2) {
                          ReadableByteStreamControllerClose(branch2._readableStreamController);
                        }
                        if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                          ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
                        }
                        if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                          ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
                        }
                        if (!canceled1 || !canceled2) {
                          resolveCancelPromise(void 0);
                        }
                      },
                      _errorSteps: function() {
                        reading = false;
                      }
                    };
                    ReadableStreamDefaultReaderRead(reader, readRequest);
                  }
                  function pullWithBYOBReader(view, forBranch2) {
                    if (IsReadableStreamDefaultReader(reader)) {
                      ReadableStreamReaderGenericRelease(reader);
                      reader = AcquireReadableStreamBYOBReader(stream);
                      forwardReaderError(reader);
                    }
                    var byobBranch = forBranch2 ? branch2 : branch1;
                    var otherBranch = forBranch2 ? branch1 : branch2;
                    var readIntoRequest = {
                      _chunkSteps: function(chunk) {
                        queueMicrotask(function() {
                          readAgainForBranch1 = false;
                          readAgainForBranch2 = false;
                          var byobCanceled = forBranch2 ? canceled2 : canceled1;
                          var otherCanceled = forBranch2 ? canceled1 : canceled2;
                          if (!otherCanceled) {
                            var clonedChunk = void 0;
                            try {
                              clonedChunk = CloneAsUint8Array(chunk);
                            } catch (cloneE) {
                              ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                              ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                              return;
                            }
                            if (!byobCanceled) {
                              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                            }
                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                          } else if (!byobCanceled) {
                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                          }
                          reading = false;
                          if (readAgainForBranch1) {
                            pull1Algorithm();
                          } else if (readAgainForBranch2) {
                            pull2Algorithm();
                          }
                        });
                      },
                      _closeSteps: function(chunk) {
                        reading = false;
                        var byobCanceled = forBranch2 ? canceled2 : canceled1;
                        var otherCanceled = forBranch2 ? canceled1 : canceled2;
                        if (!byobCanceled) {
                          ReadableByteStreamControllerClose(byobBranch._readableStreamController);
                        }
                        if (!otherCanceled) {
                          ReadableByteStreamControllerClose(otherBranch._readableStreamController);
                        }
                        if (chunk !== void 0) {
                          if (!byobCanceled) {
                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                          }
                          if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
                          }
                        }
                        if (!byobCanceled || !otherCanceled) {
                          resolveCancelPromise(void 0);
                        }
                      },
                      _errorSteps: function() {
                        reading = false;
                      }
                    };
                    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);
                  }
                  function pull1Algorithm() {
                    if (reading) {
                      readAgainForBranch1 = true;
                      return promiseResolvedWith(void 0);
                    }
                    reading = true;
                    var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
                    if (byobRequest === null) {
                      pullWithDefaultReader();
                    } else {
                      pullWithBYOBReader(byobRequest._view, false);
                    }
                    return promiseResolvedWith(void 0);
                  }
                  function pull2Algorithm() {
                    if (reading) {
                      readAgainForBranch2 = true;
                      return promiseResolvedWith(void 0);
                    }
                    reading = true;
                    var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
                    if (byobRequest === null) {
                      pullWithDefaultReader();
                    } else {
                      pullWithBYOBReader(byobRequest._view, true);
                    }
                    return promiseResolvedWith(void 0);
                  }
                  function cancel1Algorithm(reason) {
                    canceled1 = true;
                    reason1 = reason;
                    if (canceled2) {
                      var compositeReason = CreateArrayFromList([
                        reason1,
                        reason2
                      ]);
                      var cancelResult = ReadableStreamCancel(stream, compositeReason);
                      resolveCancelPromise(cancelResult);
                    }
                    return cancelPromise;
                  }
                  function cancel2Algorithm(reason) {
                    canceled2 = true;
                    reason2 = reason;
                    if (canceled1) {
                      var compositeReason = CreateArrayFromList([
                        reason1,
                        reason2
                      ]);
                      var cancelResult = ReadableStreamCancel(stream, compositeReason);
                      resolveCancelPromise(cancelResult);
                    }
                    return cancelPromise;
                  }
                  function startAlgorithm() {
                  }
                  branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
                  branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
                  forwardReaderError(reader);
                  return [
                    branch1,
                    branch2
                  ];
                }
                function convertUnderlyingDefaultOrByteSource(source, context) {
                  assertDictionary(source, context);
                  var original = source;
                  var autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
                  var cancel = original === null || original === void 0 ? void 0 : original.cancel;
                  var pull = original === null || original === void 0 ? void 0 : original.pull;
                  var start = original === null || original === void 0 ? void 0 : original.start;
                  var type = original === null || original === void 0 ? void 0 : original.type;
                  return {
                    autoAllocateChunkSize: autoAllocateChunkSize === void 0 ? void 0 : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, context + " has member 'autoAllocateChunkSize' that"),
                    cancel: cancel === void 0 ? void 0 : convertUnderlyingSourceCancelCallback(cancel, original, context + " has member 'cancel' that"),
                    pull: pull === void 0 ? void 0 : convertUnderlyingSourcePullCallback(pull, original, context + " has member 'pull' that"),
                    start: start === void 0 ? void 0 : convertUnderlyingSourceStartCallback(start, original, context + " has member 'start' that"),
                    type: type === void 0 ? void 0 : convertReadableStreamType(type, context + " has member 'type' that")
                  };
                }
                function convertUnderlyingSourceCancelCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function(reason) {
                    return promiseCall(fn, original, [reason]);
                  };
                }
                function convertUnderlyingSourcePullCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function(controller) {
                    return promiseCall(fn, original, [controller]);
                  };
                }
                function convertUnderlyingSourceStartCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function(controller) {
                    return reflectCall(fn, original, [controller]);
                  };
                }
                function convertReadableStreamType(type, context) {
                  type = "" + type;
                  if (type !== "bytes") {
                    throw new TypeError(context + " '" + type + "' is not a valid enumeration value for ReadableStreamType");
                  }
                  return type;
                }
                function convertReaderOptions(options, context) {
                  assertDictionary(options, context);
                  var mode = options === null || options === void 0 ? void 0 : options.mode;
                  return { mode: mode === void 0 ? void 0 : convertReadableStreamReaderMode(mode, context + " has member 'mode' that") };
                }
                function convertReadableStreamReaderMode(mode, context) {
                  mode = "" + mode;
                  if (mode !== "byob") {
                    throw new TypeError(context + " '" + mode + "' is not a valid enumeration value for ReadableStreamReaderMode");
                  }
                  return mode;
                }
                function convertIteratorOptions(options, context) {
                  assertDictionary(options, context);
                  var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
                  return { preventCancel: Boolean(preventCancel) };
                }
                function convertPipeOptions(options, context) {
                  assertDictionary(options, context);
                  var preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;
                  var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
                  var preventClose = options === null || options === void 0 ? void 0 : options.preventClose;
                  var signal = options === null || options === void 0 ? void 0 : options.signal;
                  if (signal !== void 0) {
                    assertAbortSignal(signal, context + " has member 'signal' that");
                  }
                  return {
                    preventAbort: Boolean(preventAbort),
                    preventCancel: Boolean(preventCancel),
                    preventClose: Boolean(preventClose),
                    signal
                  };
                }
                function assertAbortSignal(signal, context) {
                  if (!isAbortSignal(signal)) {
                    throw new TypeError(context + " is not an AbortSignal.");
                  }
                }
                function convertReadableWritablePair(pair, context) {
                  assertDictionary(pair, context);
                  var readable = pair === null || pair === void 0 ? void 0 : pair.readable;
                  assertRequiredField(readable, "readable", "ReadableWritablePair");
                  assertReadableStream(readable, context + " has member 'readable' that");
                  var writable = pair === null || pair === void 0 ? void 0 : pair.writable;
                  assertRequiredField(writable, "writable", "ReadableWritablePair");
                  assertWritableStream(writable, context + " has member 'writable' that");
                  return {
                    readable,
                    writable
                  };
                }
                var ReadableStream2 = function() {
                  function ReadableStream3(rawUnderlyingSource, rawStrategy) {
                    if (rawUnderlyingSource === void 0) {
                      rawUnderlyingSource = {};
                    }
                    if (rawStrategy === void 0) {
                      rawStrategy = {};
                    }
                    if (rawUnderlyingSource === void 0) {
                      rawUnderlyingSource = null;
                    } else {
                      assertObject(rawUnderlyingSource, "First parameter");
                    }
                    var strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
                    var underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, "First parameter");
                    InitializeReadableStream(this);
                    if (underlyingSource.type === "bytes") {
                      if (strategy.size !== void 0) {
                        throw new RangeError("The strategy for a byte stream cannot have a size function");
                      }
                      var highWaterMark = ExtractHighWaterMark(strategy, 0);
                      SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
                    } else {
                      var sizeAlgorithm = ExtractSizeAlgorithm(strategy);
                      var highWaterMark = ExtractHighWaterMark(strategy, 1);
                      SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
                    }
                  }
                  Object.defineProperty(ReadableStream3.prototype, "locked", {
                    get: function() {
                      if (!IsReadableStream(this)) {
                        throw streamBrandCheckException$1("locked");
                      }
                      return IsReadableStreamLocked(this);
                    },
                    enumerable: false,
                    configurable: true
                  });
                  ReadableStream3.prototype.cancel = function(reason) {
                    if (reason === void 0) {
                      reason = void 0;
                    }
                    if (!IsReadableStream(this)) {
                      return promiseRejectedWith(streamBrandCheckException$1("cancel"));
                    }
                    if (IsReadableStreamLocked(this)) {
                      return promiseRejectedWith(new TypeError("Cannot cancel a stream that already has a reader"));
                    }
                    return ReadableStreamCancel(this, reason);
                  };
                  ReadableStream3.prototype.getReader = function(rawOptions) {
                    if (rawOptions === void 0) {
                      rawOptions = void 0;
                    }
                    if (!IsReadableStream(this)) {
                      throw streamBrandCheckException$1("getReader");
                    }
                    var options = convertReaderOptions(rawOptions, "First parameter");
                    if (options.mode === void 0) {
                      return AcquireReadableStreamDefaultReader(this);
                    }
                    return AcquireReadableStreamBYOBReader(this);
                  };
                  ReadableStream3.prototype.pipeThrough = function(rawTransform, rawOptions) {
                    if (rawOptions === void 0) {
                      rawOptions = {};
                    }
                    if (!IsReadableStream(this)) {
                      throw streamBrandCheckException$1("pipeThrough");
                    }
                    assertRequiredArgument(rawTransform, 1, "pipeThrough");
                    var transform = convertReadableWritablePair(rawTransform, "First parameter");
                    var options = convertPipeOptions(rawOptions, "Second parameter");
                    if (IsReadableStreamLocked(this)) {
                      throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
                    }
                    if (IsWritableStreamLocked(transform.writable)) {
                      throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
                    }
                    var promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
                    setPromiseIsHandledToTrue(promise);
                    return transform.readable;
                  };
                  ReadableStream3.prototype.pipeTo = function(destination, rawOptions) {
                    if (rawOptions === void 0) {
                      rawOptions = {};
                    }
                    if (!IsReadableStream(this)) {
                      return promiseRejectedWith(streamBrandCheckException$1("pipeTo"));
                    }
                    if (destination === void 0) {
                      return promiseRejectedWith("Parameter 1 is required in 'pipeTo'.");
                    }
                    if (!IsWritableStream(destination)) {
                      return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
                    }
                    var options;
                    try {
                      options = convertPipeOptions(rawOptions, "Second parameter");
                    } catch (e) {
                      return promiseRejectedWith(e);
                    }
                    if (IsReadableStreamLocked(this)) {
                      return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
                    }
                    if (IsWritableStreamLocked(destination)) {
                      return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
                    }
                    return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
                  };
                  ReadableStream3.prototype.tee = function() {
                    if (!IsReadableStream(this)) {
                      throw streamBrandCheckException$1("tee");
                    }
                    var branches = ReadableStreamTee(this);
                    return CreateArrayFromList(branches);
                  };
                  ReadableStream3.prototype.values = function(rawOptions) {
                    if (rawOptions === void 0) {
                      rawOptions = void 0;
                    }
                    if (!IsReadableStream(this)) {
                      throw streamBrandCheckException$1("values");
                    }
                    var options = convertIteratorOptions(rawOptions, "First parameter");
                    return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
                  };
                  return ReadableStream3;
                }();
                Object.defineProperties(ReadableStream2.prototype, {
                  cancel: { enumerable: true },
                  getReader: { enumerable: true },
                  pipeThrough: { enumerable: true },
                  pipeTo: { enumerable: true },
                  tee: { enumerable: true },
                  values: { enumerable: true },
                  locked: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.toStringTag, {
                    value: "ReadableStream",
                    configurable: true
                  });
                }
                if (typeof SymbolPolyfill.asyncIterator === "symbol") {
                  Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.asyncIterator, {
                    value: ReadableStream2.prototype.values,
                    writable: true,
                    configurable: true
                  });
                }
                function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
                  if (highWaterMark === void 0) {
                    highWaterMark = 1;
                  }
                  if (sizeAlgorithm === void 0) {
                    sizeAlgorithm = function() {
                      return 1;
                    };
                  }
                  var stream = Object.create(ReadableStream2.prototype);
                  InitializeReadableStream(stream);
                  var controller = Object.create(ReadableStreamDefaultController.prototype);
                  SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
                  return stream;
                }
                function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
                  var stream = Object.create(ReadableStream2.prototype);
                  InitializeReadableStream(stream);
                  var controller = Object.create(ReadableByteStreamController.prototype);
                  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, void 0);
                  return stream;
                }
                function InitializeReadableStream(stream) {
                  stream._state = "readable";
                  stream._reader = void 0;
                  stream._storedError = void 0;
                  stream._disturbed = false;
                }
                function IsReadableStream(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_readableStreamController")) {
                    return false;
                  }
                  return x instanceof ReadableStream2;
                }
                function IsReadableStreamLocked(stream) {
                  if (stream._reader === void 0) {
                    return false;
                  }
                  return true;
                }
                function ReadableStreamCancel(stream, reason) {
                  stream._disturbed = true;
                  if (stream._state === "closed") {
                    return promiseResolvedWith(void 0);
                  }
                  if (stream._state === "errored") {
                    return promiseRejectedWith(stream._storedError);
                  }
                  ReadableStreamClose(stream);
                  var reader = stream._reader;
                  if (reader !== void 0 && IsReadableStreamBYOBReader(reader)) {
                    reader._readIntoRequests.forEach(function(readIntoRequest) {
                      readIntoRequest._closeSteps(void 0);
                    });
                    reader._readIntoRequests = new SimpleQueue();
                  }
                  var sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
                  return transformPromiseWith(sourceCancelPromise, noop);
                }
                function ReadableStreamClose(stream) {
                  stream._state = "closed";
                  var reader = stream._reader;
                  if (reader === void 0) {
                    return;
                  }
                  defaultReaderClosedPromiseResolve(reader);
                  if (IsReadableStreamDefaultReader(reader)) {
                    reader._readRequests.forEach(function(readRequest) {
                      readRequest._closeSteps();
                    });
                    reader._readRequests = new SimpleQueue();
                  }
                }
                function ReadableStreamError(stream, e) {
                  stream._state = "errored";
                  stream._storedError = e;
                  var reader = stream._reader;
                  if (reader === void 0) {
                    return;
                  }
                  defaultReaderClosedPromiseReject(reader, e);
                  if (IsReadableStreamDefaultReader(reader)) {
                    reader._readRequests.forEach(function(readRequest) {
                      readRequest._errorSteps(e);
                    });
                    reader._readRequests = new SimpleQueue();
                  } else {
                    reader._readIntoRequests.forEach(function(readIntoRequest) {
                      readIntoRequest._errorSteps(e);
                    });
                    reader._readIntoRequests = new SimpleQueue();
                  }
                }
                function streamBrandCheckException$1(name) {
                  return new TypeError("ReadableStream.prototype." + name + " can only be used on a ReadableStream");
                }
                function convertQueuingStrategyInit(init, context) {
                  assertDictionary(init, context);
                  var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
                  assertRequiredField(highWaterMark, "highWaterMark", "QueuingStrategyInit");
                  return { highWaterMark: convertUnrestrictedDouble(highWaterMark) };
                }
                var byteLengthSizeFunction = function(chunk) {
                  return chunk.byteLength;
                };
                Object.defineProperty(byteLengthSizeFunction, "name", {
                  value: "size",
                  configurable: true
                });
                var ByteLengthQueuingStrategy = function() {
                  function ByteLengthQueuingStrategy2(options) {
                    assertRequiredArgument(options, 1, "ByteLengthQueuingStrategy");
                    options = convertQueuingStrategyInit(options, "First parameter");
                    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
                  }
                  Object.defineProperty(ByteLengthQueuingStrategy2.prototype, "highWaterMark", {
                    get: function() {
                      if (!IsByteLengthQueuingStrategy(this)) {
                        throw byteLengthBrandCheckException("highWaterMark");
                      }
                      return this._byteLengthQueuingStrategyHighWaterMark;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  Object.defineProperty(ByteLengthQueuingStrategy2.prototype, "size", {
                    get: function() {
                      if (!IsByteLengthQueuingStrategy(this)) {
                        throw byteLengthBrandCheckException("size");
                      }
                      return byteLengthSizeFunction;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  return ByteLengthQueuingStrategy2;
                }();
                Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
                  highWaterMark: { enumerable: true },
                  size: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
                    value: "ByteLengthQueuingStrategy",
                    configurable: true
                  });
                }
                function byteLengthBrandCheckException(name) {
                  return new TypeError("ByteLengthQueuingStrategy.prototype." + name + " can only be used on a ByteLengthQueuingStrategy");
                }
                function IsByteLengthQueuingStrategy(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_byteLengthQueuingStrategyHighWaterMark")) {
                    return false;
                  }
                  return x instanceof ByteLengthQueuingStrategy;
                }
                var countSizeFunction = function() {
                  return 1;
                };
                Object.defineProperty(countSizeFunction, "name", {
                  value: "size",
                  configurable: true
                });
                var CountQueuingStrategy = function() {
                  function CountQueuingStrategy2(options) {
                    assertRequiredArgument(options, 1, "CountQueuingStrategy");
                    options = convertQueuingStrategyInit(options, "First parameter");
                    this._countQueuingStrategyHighWaterMark = options.highWaterMark;
                  }
                  Object.defineProperty(CountQueuingStrategy2.prototype, "highWaterMark", {
                    get: function() {
                      if (!IsCountQueuingStrategy(this)) {
                        throw countBrandCheckException("highWaterMark");
                      }
                      return this._countQueuingStrategyHighWaterMark;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  Object.defineProperty(CountQueuingStrategy2.prototype, "size", {
                    get: function() {
                      if (!IsCountQueuingStrategy(this)) {
                        throw countBrandCheckException("size");
                      }
                      return countSizeFunction;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  return CountQueuingStrategy2;
                }();
                Object.defineProperties(CountQueuingStrategy.prototype, {
                  highWaterMark: { enumerable: true },
                  size: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
                    value: "CountQueuingStrategy",
                    configurable: true
                  });
                }
                function countBrandCheckException(name) {
                  return new TypeError("CountQueuingStrategy.prototype." + name + " can only be used on a CountQueuingStrategy");
                }
                function IsCountQueuingStrategy(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_countQueuingStrategyHighWaterMark")) {
                    return false;
                  }
                  return x instanceof CountQueuingStrategy;
                }
                function convertTransformer(original, context) {
                  assertDictionary(original, context);
                  var flush = original === null || original === void 0 ? void 0 : original.flush;
                  var readableType = original === null || original === void 0 ? void 0 : original.readableType;
                  var start = original === null || original === void 0 ? void 0 : original.start;
                  var transform = original === null || original === void 0 ? void 0 : original.transform;
                  var writableType = original === null || original === void 0 ? void 0 : original.writableType;
                  return {
                    flush: flush === void 0 ? void 0 : convertTransformerFlushCallback(flush, original, context + " has member 'flush' that"),
                    readableType,
                    start: start === void 0 ? void 0 : convertTransformerStartCallback(start, original, context + " has member 'start' that"),
                    transform: transform === void 0 ? void 0 : convertTransformerTransformCallback(transform, original, context + " has member 'transform' that"),
                    writableType
                  };
                }
                function convertTransformerFlushCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function(controller) {
                    return promiseCall(fn, original, [controller]);
                  };
                }
                function convertTransformerStartCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function(controller) {
                    return reflectCall(fn, original, [controller]);
                  };
                }
                function convertTransformerTransformCallback(fn, original, context) {
                  assertFunction(fn, context);
                  return function(chunk, controller) {
                    return promiseCall(fn, original, [
                      chunk,
                      controller
                    ]);
                  };
                }
                var TransformStream = function() {
                  function TransformStream2(rawTransformer, rawWritableStrategy, rawReadableStrategy) {
                    if (rawTransformer === void 0) {
                      rawTransformer = {};
                    }
                    if (rawWritableStrategy === void 0) {
                      rawWritableStrategy = {};
                    }
                    if (rawReadableStrategy === void 0) {
                      rawReadableStrategy = {};
                    }
                    if (rawTransformer === void 0) {
                      rawTransformer = null;
                    }
                    var writableStrategy = convertQueuingStrategy(rawWritableStrategy, "Second parameter");
                    var readableStrategy = convertQueuingStrategy(rawReadableStrategy, "Third parameter");
                    var transformer = convertTransformer(rawTransformer, "First parameter");
                    if (transformer.readableType !== void 0) {
                      throw new RangeError("Invalid readableType specified");
                    }
                    if (transformer.writableType !== void 0) {
                      throw new RangeError("Invalid writableType specified");
                    }
                    var readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
                    var readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
                    var writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
                    var writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
                    var startPromise_resolve;
                    var startPromise = newPromise(function(resolve) {
                      startPromise_resolve = resolve;
                    });
                    InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
                    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
                    if (transformer.start !== void 0) {
                      startPromise_resolve(transformer.start(this._transformStreamController));
                    } else {
                      startPromise_resolve(void 0);
                    }
                  }
                  Object.defineProperty(TransformStream2.prototype, "readable", {
                    get: function() {
                      if (!IsTransformStream(this)) {
                        throw streamBrandCheckException("readable");
                      }
                      return this._readable;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  Object.defineProperty(TransformStream2.prototype, "writable", {
                    get: function() {
                      if (!IsTransformStream(this)) {
                        throw streamBrandCheckException("writable");
                      }
                      return this._writable;
                    },
                    enumerable: false,
                    configurable: true
                  });
                  return TransformStream2;
                }();
                Object.defineProperties(TransformStream.prototype, {
                  readable: { enumerable: true },
                  writable: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {
                    value: "TransformStream",
                    configurable: true
                  });
                }
                function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
                  function startAlgorithm() {
                    return startPromise;
                  }
                  function writeAlgorithm(chunk) {
                    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
                  }
                  function abortAlgorithm(reason) {
                    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
                  }
                  function closeAlgorithm() {
                    return TransformStreamDefaultSinkCloseAlgorithm(stream);
                  }
                  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
                  function pullAlgorithm() {
                    return TransformStreamDefaultSourcePullAlgorithm(stream);
                  }
                  function cancelAlgorithm(reason) {
                    TransformStreamErrorWritableAndUnblockWrite(stream, reason);
                    return promiseResolvedWith(void 0);
                  }
                  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
                  stream._backpressure = void 0;
                  stream._backpressureChangePromise = void 0;
                  stream._backpressureChangePromise_resolve = void 0;
                  TransformStreamSetBackpressure(stream, true);
                  stream._transformStreamController = void 0;
                }
                function IsTransformStream(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_transformStreamController")) {
                    return false;
                  }
                  return x instanceof TransformStream;
                }
                function TransformStreamError(stream, e) {
                  ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);
                  TransformStreamErrorWritableAndUnblockWrite(stream, e);
                }
                function TransformStreamErrorWritableAndUnblockWrite(stream, e) {
                  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
                  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);
                  if (stream._backpressure) {
                    TransformStreamSetBackpressure(stream, false);
                  }
                }
                function TransformStreamSetBackpressure(stream, backpressure) {
                  if (stream._backpressureChangePromise !== void 0) {
                    stream._backpressureChangePromise_resolve();
                  }
                  stream._backpressureChangePromise = newPromise(function(resolve) {
                    stream._backpressureChangePromise_resolve = resolve;
                  });
                  stream._backpressure = backpressure;
                }
                var TransformStreamDefaultController = function() {
                  function TransformStreamDefaultController2() {
                    throw new TypeError("Illegal constructor");
                  }
                  Object.defineProperty(TransformStreamDefaultController2.prototype, "desiredSize", {
                    get: function() {
                      if (!IsTransformStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException("desiredSize");
                      }
                      var readableController = this._controlledTransformStream._readable._readableStreamController;
                      return ReadableStreamDefaultControllerGetDesiredSize(readableController);
                    },
                    enumerable: false,
                    configurable: true
                  });
                  TransformStreamDefaultController2.prototype.enqueue = function(chunk) {
                    if (chunk === void 0) {
                      chunk = void 0;
                    }
                    if (!IsTransformStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException("enqueue");
                    }
                    TransformStreamDefaultControllerEnqueue(this, chunk);
                  };
                  TransformStreamDefaultController2.prototype.error = function(reason) {
                    if (reason === void 0) {
                      reason = void 0;
                    }
                    if (!IsTransformStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException("error");
                    }
                    TransformStreamDefaultControllerError(this, reason);
                  };
                  TransformStreamDefaultController2.prototype.terminate = function() {
                    if (!IsTransformStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException("terminate");
                    }
                    TransformStreamDefaultControllerTerminate(this);
                  };
                  return TransformStreamDefaultController2;
                }();
                Object.defineProperties(TransformStreamDefaultController.prototype, {
                  enqueue: { enumerable: true },
                  error: { enumerable: true },
                  terminate: { enumerable: true },
                  desiredSize: { enumerable: true }
                });
                if (typeof SymbolPolyfill.toStringTag === "symbol") {
                  Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
                    value: "TransformStreamDefaultController",
                    configurable: true
                  });
                }
                function IsTransformStreamDefaultController(x) {
                  if (!typeIsObject(x)) {
                    return false;
                  }
                  if (!Object.prototype.hasOwnProperty.call(x, "_controlledTransformStream")) {
                    return false;
                  }
                  return x instanceof TransformStreamDefaultController;
                }
                function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {
                  controller._controlledTransformStream = stream;
                  stream._transformStreamController = controller;
                  controller._transformAlgorithm = transformAlgorithm;
                  controller._flushAlgorithm = flushAlgorithm;
                }
                function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
                  var controller = Object.create(TransformStreamDefaultController.prototype);
                  var transformAlgorithm = function(chunk) {
                    try {
                      TransformStreamDefaultControllerEnqueue(controller, chunk);
                      return promiseResolvedWith(void 0);
                    } catch (transformResultE) {
                      return promiseRejectedWith(transformResultE);
                    }
                  };
                  var flushAlgorithm = function() {
                    return promiseResolvedWith(void 0);
                  };
                  if (transformer.transform !== void 0) {
                    transformAlgorithm = function(chunk) {
                      return transformer.transform(chunk, controller);
                    };
                  }
                  if (transformer.flush !== void 0) {
                    flushAlgorithm = function() {
                      return transformer.flush(controller);
                    };
                  }
                  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);
                }
                function TransformStreamDefaultControllerClearAlgorithms(controller) {
                  controller._transformAlgorithm = void 0;
                  controller._flushAlgorithm = void 0;
                }
                function TransformStreamDefaultControllerEnqueue(controller, chunk) {
                  var stream = controller._controlledTransformStream;
                  var readableController = stream._readable._readableStreamController;
                  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
                    throw new TypeError("Readable side is not in a state that permits enqueue");
                  }
                  try {
                    ReadableStreamDefaultControllerEnqueue(readableController, chunk);
                  } catch (e) {
                    TransformStreamErrorWritableAndUnblockWrite(stream, e);
                    throw stream._readable._storedError;
                  }
                  var backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
                  if (backpressure !== stream._backpressure) {
                    TransformStreamSetBackpressure(stream, true);
                  }
                }
                function TransformStreamDefaultControllerError(controller, e) {
                  TransformStreamError(controller._controlledTransformStream, e);
                }
                function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
                  var transformPromise = controller._transformAlgorithm(chunk);
                  return transformPromiseWith(transformPromise, void 0, function(r) {
                    TransformStreamError(controller._controlledTransformStream, r);
                    throw r;
                  });
                }
                function TransformStreamDefaultControllerTerminate(controller) {
                  var stream = controller._controlledTransformStream;
                  var readableController = stream._readable._readableStreamController;
                  ReadableStreamDefaultControllerClose(readableController);
                  var error = new TypeError("TransformStream terminated");
                  TransformStreamErrorWritableAndUnblockWrite(stream, error);
                }
                function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
                  var controller = stream._transformStreamController;
                  if (stream._backpressure) {
                    var backpressureChangePromise = stream._backpressureChangePromise;
                    return transformPromiseWith(backpressureChangePromise, function() {
                      var writable = stream._writable;
                      var state = writable._state;
                      if (state === "erroring") {
                        throw writable._storedError;
                      }
                      return TransformStreamDefaultControllerPerformTransform(controller, chunk);
                    });
                  }
                  return TransformStreamDefaultControllerPerformTransform(controller, chunk);
                }
                function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
                  TransformStreamError(stream, reason);
                  return promiseResolvedWith(void 0);
                }
                function TransformStreamDefaultSinkCloseAlgorithm(stream) {
                  var readable = stream._readable;
                  var controller = stream._transformStreamController;
                  var flushPromise = controller._flushAlgorithm();
                  TransformStreamDefaultControllerClearAlgorithms(controller);
                  return transformPromiseWith(flushPromise, function() {
                    if (readable._state === "errored") {
                      throw readable._storedError;
                    }
                    ReadableStreamDefaultControllerClose(readable._readableStreamController);
                  }, function(r) {
                    TransformStreamError(stream, r);
                    throw readable._storedError;
                  });
                }
                function TransformStreamDefaultSourcePullAlgorithm(stream) {
                  TransformStreamSetBackpressure(stream, false);
                  return stream._backpressureChangePromise;
                }
                function defaultControllerBrandCheckException(name) {
                  return new TypeError("TransformStreamDefaultController.prototype." + name + " can only be used on a TransformStreamDefaultController");
                }
                function streamBrandCheckException(name) {
                  return new TypeError("TransformStream.prototype." + name + " can only be used on a TransformStream");
                }
                exports3.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
                exports3.CountQueuingStrategy = CountQueuingStrategy;
                exports3.ReadableByteStreamController = ReadableByteStreamController;
                exports3.ReadableStream = ReadableStream2;
                exports3.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
                exports3.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
                exports3.ReadableStreamDefaultController = ReadableStreamDefaultController;
                exports3.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
                exports3.TransformStream = TransformStream;
                exports3.TransformStreamDefaultController = TransformStreamDefaultController;
                exports3.WritableStream = WritableStream;
                exports3.WritableStreamDefaultController = WritableStreamDefaultController;
                exports3.WritableStreamDefaultWriter = WritableStreamDefaultWriter;
                Object.defineProperty(exports3, "__esModule", { value: true });
              });
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.RefSetCache = exports2.RefSet = exports2.Ref = exports2.Name = exports2.EOF = exports2.Dict = exports2.Cmd = exports2.CIRCULAR_REF = void 0;
              exports2.clearPrimitiveCaches = clearPrimitiveCaches;
              exports2.isCmd = isCmd;
              exports2.isDict = isDict;
              exports2.isName = isName;
              exports2.isRef = isRef;
              exports2.isRefsEqual = isRefsEqual;
              exports2.isStream = isStream;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _base_stream = __w_pdfjs_require__2(136);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var CIRCULAR_REF = Symbol("CIRCULAR_REF");
              exports2.CIRCULAR_REF = CIRCULAR_REF;
              var EOF = Symbol("EOF");
              exports2.EOF = EOF;
              var Name = function NameClosure() {
                var nameCache = /* @__PURE__ */ Object.create(null);
                var Name2 = /* @__PURE__ */ function() {
                  function Name3(name) {
                    _classCallCheck(this, Name3);
                    this.name = name;
                  }
                  _createClass(Name3, null, [{
                    key: "get",
                    value: function get(name) {
                      var nameValue = nameCache[name];
                      return nameValue ? nameValue : nameCache[name] = new Name3(name);
                    }
                  }, {
                    key: "_clearCache",
                    value: function _clearCache() {
                      nameCache = /* @__PURE__ */ Object.create(null);
                    }
                  }]);
                  return Name3;
                }();
                return Name2;
              }();
              exports2.Name = Name;
              var Cmd = function CmdClosure() {
                var cmdCache = /* @__PURE__ */ Object.create(null);
                var Cmd2 = /* @__PURE__ */ function() {
                  function Cmd3(cmd) {
                    _classCallCheck(this, Cmd3);
                    this.cmd = cmd;
                  }
                  _createClass(Cmd3, null, [{
                    key: "get",
                    value: function get(cmd) {
                      var cmdValue = cmdCache[cmd];
                      return cmdValue ? cmdValue : cmdCache[cmd] = new Cmd3(cmd);
                    }
                  }, {
                    key: "_clearCache",
                    value: function _clearCache() {
                      cmdCache = /* @__PURE__ */ Object.create(null);
                    }
                  }]);
                  return Cmd3;
                }();
                return Cmd2;
              }();
              exports2.Cmd = Cmd;
              var nonSerializable = function nonSerializableClosure() {
                return nonSerializable;
              };
              var Dict = /* @__PURE__ */ function() {
                function Dict2() {
                  var xref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                  _classCallCheck(this, Dict2);
                  this._map = /* @__PURE__ */ Object.create(null);
                  this.xref = xref;
                  this.objId = null;
                  this.suppressEncryption = false;
                  this.__nonSerializable__ = nonSerializable;
                }
                _createClass(Dict2, [{
                  key: "assignXref",
                  value: function assignXref(newXref) {
                    this.xref = newXref;
                  }
                }, {
                  key: "size",
                  get: function get() {
                    return Object.keys(this._map).length;
                  }
                }, {
                  key: "get",
                  value: function get(key1, key2, key3) {
                    var value = this._map[key1];
                    if (value === void 0 && key2 !== void 0) {
                      value = this._map[key2];
                      if (value === void 0 && key3 !== void 0) {
                        value = this._map[key3];
                      }
                    }
                    if (value instanceof Ref && this.xref) {
                      return this.xref.fetch(value, this.suppressEncryption);
                    }
                    return value;
                  }
                }, {
                  key: "getAsync",
                  value: function() {
                    var _getAsync = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(key1, key2, key3) {
                      var value;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              value = this._map[key1];
                              if (value === void 0 && key2 !== void 0) {
                                value = this._map[key2];
                                if (value === void 0 && key3 !== void 0) {
                                  value = this._map[key3];
                                }
                              }
                              if (!(value instanceof Ref && this.xref)) {
                                _context.next = 4;
                                break;
                              }
                              return _context.abrupt("return", this.xref.fetchAsync(value, this.suppressEncryption));
                            case 4:
                              return _context.abrupt("return", value);
                            case 5:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));
                    function getAsync(_x, _x2, _x3) {
                      return _getAsync.apply(this, arguments);
                    }
                    return getAsync;
                  }()
                }, {
                  key: "getArray",
                  value: function getArray(key1, key2, key3) {
                    var value = this._map[key1];
                    if (value === void 0 && key2 !== void 0) {
                      value = this._map[key2];
                      if (value === void 0 && key3 !== void 0) {
                        value = this._map[key3];
                      }
                    }
                    if (value instanceof Ref && this.xref) {
                      value = this.xref.fetch(value, this.suppressEncryption);
                    }
                    if (Array.isArray(value)) {
                      value = value.slice();
                      for (var i = 0, ii = value.length; i < ii; i++) {
                        if (value[i] instanceof Ref && this.xref) {
                          value[i] = this.xref.fetch(value[i], this.suppressEncryption);
                        }
                      }
                    }
                    return value;
                  }
                }, {
                  key: "getRaw",
                  value: function getRaw(key) {
                    return this._map[key];
                  }
                }, {
                  key: "getKeys",
                  value: function getKeys() {
                    return Object.keys(this._map);
                  }
                }, {
                  key: "getRawValues",
                  value: function getRawValues() {
                    return Object.values(this._map);
                  }
                }, {
                  key: "set",
                  value: function set(key, value) {
                    this._map[key] = value;
                  }
                }, {
                  key: "has",
                  value: function has(key) {
                    return this._map[key] !== void 0;
                  }
                }, {
                  key: "forEach",
                  value: function forEach(callback) {
                    for (var key in this._map) {
                      callback(key, this.get(key));
                    }
                  }
                }], [{
                  key: "empty",
                  get: function get() {
                    var emptyDict = new Dict2(null);
                    emptyDict.set = function(key, value) {
                      (0, _util.unreachable)("Should not call `set` on the empty dictionary.");
                    };
                    return (0, _util.shadow)(this, "empty", emptyDict);
                  }
                }, {
                  key: "merge",
                  value: function merge(_ref) {
                    var xref = _ref.xref, dictArray = _ref.dictArray, _ref$mergeSubDicts = _ref.mergeSubDicts, mergeSubDicts = _ref$mergeSubDicts === void 0 ? false : _ref$mergeSubDicts;
                    var mergedDict = new Dict2(xref), properties = /* @__PURE__ */ new Map();
                    var _iterator = _createForOfIteratorHelper(dictArray), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var dict = _step.value;
                        if (!(dict instanceof Dict2)) {
                          continue;
                        }
                        for (var _i = 0, _Object$entries = Object.entries(dict._map); _i < _Object$entries.length; _i++) {
                          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];
                          var property = properties.get(key);
                          if (property === void 0) {
                            property = [];
                            properties.set(key, property);
                          } else if (!mergeSubDicts || !(value instanceof Dict2)) {
                            continue;
                          }
                          property.push(value);
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    var _iterator2 = _createForOfIteratorHelper(properties), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var _step2$value = _slicedToArray(_step2.value, 2), name = _step2$value[0], values = _step2$value[1];
                        if (values.length === 1 || !(values[0] instanceof Dict2)) {
                          mergedDict._map[name] = values[0];
                          continue;
                        }
                        var subDict = new Dict2(xref);
                        var _iterator3 = _createForOfIteratorHelper(values), _step3;
                        try {
                          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                            var _dict = _step3.value;
                            for (var _i2 = 0, _Object$entries2 = Object.entries(_dict._map); _i2 < _Object$entries2.length; _i2++) {
                              var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2), _key = _Object$entries2$_i[0], _value = _Object$entries2$_i[1];
                              if (subDict._map[_key] === void 0) {
                                subDict._map[_key] = _value;
                              }
                            }
                          }
                        } catch (err) {
                          _iterator3.e(err);
                        } finally {
                          _iterator3.f();
                        }
                        if (subDict.size > 0) {
                          mergedDict._map[name] = subDict;
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    properties.clear();
                    return mergedDict.size > 0 ? mergedDict : Dict2.empty;
                  }
                }]);
                return Dict2;
              }();
              exports2.Dict = Dict;
              var Ref = function RefClosure() {
                var refCache = /* @__PURE__ */ Object.create(null);
                var Ref2 = /* @__PURE__ */ function() {
                  function Ref3(num, gen) {
                    _classCallCheck(this, Ref3);
                    this.num = num;
                    this.gen = gen;
                  }
                  _createClass(Ref3, [{
                    key: "toString",
                    value: function toString() {
                      if (this.gen === 0) {
                        return "".concat(this.num, "R");
                      }
                      return "".concat(this.num, "R").concat(this.gen);
                    }
                  }], [{
                    key: "get",
                    value: function get(num, gen) {
                      var key = gen === 0 ? "".concat(num, "R") : "".concat(num, "R").concat(gen);
                      var refValue = refCache[key];
                      return refValue ? refValue : refCache[key] = new Ref3(num, gen);
                    }
                  }, {
                    key: "_clearCache",
                    value: function _clearCache() {
                      refCache = /* @__PURE__ */ Object.create(null);
                    }
                  }]);
                  return Ref3;
                }();
                return Ref2;
              }();
              exports2.Ref = Ref;
              var RefSet = /* @__PURE__ */ function() {
                function RefSet2() {
                  var parent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                  _classCallCheck(this, RefSet2);
                  this._set = new Set(parent && parent._set);
                }
                _createClass(RefSet2, [{
                  key: "has",
                  value: function has(ref) {
                    return this._set.has(ref.toString());
                  }
                }, {
                  key: "put",
                  value: function put(ref) {
                    this._set.add(ref.toString());
                  }
                }, {
                  key: "remove",
                  value: function remove(ref) {
                    this._set["delete"](ref.toString());
                  }
                }, {
                  key: "forEach",
                  value: function forEach(callback) {
                    var _iterator4 = _createForOfIteratorHelper(this._set.values()), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var ref = _step4.value;
                        callback(ref);
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                  }
                }, {
                  key: "clear",
                  value: function clear() {
                    this._set.clear();
                  }
                }]);
                return RefSet2;
              }();
              exports2.RefSet = RefSet;
              var RefSetCache = /* @__PURE__ */ function() {
                function RefSetCache2() {
                  _classCallCheck(this, RefSetCache2);
                  this._map = /* @__PURE__ */ new Map();
                }
                _createClass(RefSetCache2, [{
                  key: "size",
                  get: function get() {
                    return this._map.size;
                  }
                }, {
                  key: "get",
                  value: function get(ref) {
                    return this._map.get(ref.toString());
                  }
                }, {
                  key: "has",
                  value: function has(ref) {
                    return this._map.has(ref.toString());
                  }
                }, {
                  key: "put",
                  value: function put(ref, obj) {
                    this._map.set(ref.toString(), obj);
                  }
                }, {
                  key: "putAlias",
                  value: function putAlias(ref, aliasRef) {
                    this._map.set(ref.toString(), this.get(aliasRef));
                  }
                }, {
                  key: "forEach",
                  value: function forEach(callback) {
                    var _iterator5 = _createForOfIteratorHelper(this._map.values()), _step5;
                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                        var value = _step5.value;
                        callback(value);
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                  }
                }, {
                  key: "clear",
                  value: function clear() {
                    this._map.clear();
                  }
                }]);
                return RefSetCache2;
              }();
              exports2.RefSetCache = RefSetCache;
              function isName(v, name) {
                return v instanceof Name && (name === void 0 || v.name === name);
              }
              function isCmd(v, cmd) {
                return v instanceof Cmd && (cmd === void 0 || v.cmd === cmd);
              }
              function isDict(v, type) {
                return v instanceof Dict && (type === void 0 || isName(v.get("Type"), type));
              }
              function isRef(v) {
                return v instanceof Ref;
              }
              function isRefsEqual(v1, v2) {
                return v1.num === v2.num && v1.gen === v2.gen;
              }
              function isStream(v) {
                return v instanceof _base_stream.BaseStream;
              }
              function clearPrimitiveCaches() {
                Cmd._clearCache();
                Name._clearCache();
                Ref._clearCache();
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.BaseStream = void 0;
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var BaseStream = /* @__PURE__ */ function() {
                function BaseStream2() {
                  _classCallCheck(this, BaseStream2);
                  if (this.constructor === BaseStream2) {
                    (0, _util.unreachable)("Cannot initialize BaseStream.");
                  }
                }
                _createClass(BaseStream2, [{
                  key: "length",
                  get: function get() {
                    (0, _util.unreachable)("Abstract getter `length` accessed");
                  }
                }, {
                  key: "isEmpty",
                  get: function get() {
                    (0, _util.unreachable)("Abstract getter `isEmpty` accessed");
                  }
                }, {
                  key: "isDataLoaded",
                  get: function get() {
                    return (0, _util.shadow)(this, "isDataLoaded", true);
                  }
                }, {
                  key: "getByte",
                  value: function getByte() {
                    (0, _util.unreachable)("Abstract method `getByte` called");
                  }
                }, {
                  key: "getBytes",
                  value: function getBytes(length) {
                    var forceClamped = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    (0, _util.unreachable)("Abstract method `getBytes` called");
                  }
                }, {
                  key: "peekByte",
                  value: function peekByte() {
                    var peekedByte = this.getByte();
                    if (peekedByte !== -1) {
                      this.pos--;
                    }
                    return peekedByte;
                  }
                }, {
                  key: "peekBytes",
                  value: function peekBytes(length) {
                    var forceClamped = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    var bytes = this.getBytes(length, forceClamped);
                    this.pos -= bytes.length;
                    return bytes;
                  }
                }, {
                  key: "getUint16",
                  value: function getUint16() {
                    var b0 = this.getByte();
                    var b1 = this.getByte();
                    if (b0 === -1 || b1 === -1) {
                      return -1;
                    }
                    return (b0 << 8) + b1;
                  }
                }, {
                  key: "getInt32",
                  value: function getInt32() {
                    var b0 = this.getByte();
                    var b1 = this.getByte();
                    var b2 = this.getByte();
                    var b3 = this.getByte();
                    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
                  }
                }, {
                  key: "getByteRange",
                  value: function getByteRange(begin, end) {
                    (0, _util.unreachable)("Abstract method `getByteRange` called");
                  }
                }, {
                  key: "getString",
                  value: function getString(length) {
                    return (0, _util.bytesToString)(this.getBytes(length, false));
                  }
                }, {
                  key: "skip",
                  value: function skip(n) {
                    this.pos += n || 1;
                  }
                }, {
                  key: "reset",
                  value: function reset() {
                    (0, _util.unreachable)("Abstract method `reset` called");
                  }
                }, {
                  key: "moveStart",
                  value: function moveStart() {
                    (0, _util.unreachable)("Abstract method `moveStart` called");
                  }
                }, {
                  key: "makeSubStream",
                  value: function makeSubStream(start, length) {
                    var dict = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                    (0, _util.unreachable)("Abstract method `makeSubStream` called");
                  }
                }, {
                  key: "getBaseStreams",
                  value: function getBaseStreams() {
                    return null;
                  }
                }]);
                return BaseStream2;
              }();
              exports2.BaseStream = BaseStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.NetworkPdfManager = exports2.LocalPdfManager = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _chunked_stream = __w_pdfjs_require__2(138);
              var _core_utils = __w_pdfjs_require__2(139);
              var _document = __w_pdfjs_require__2(141);
              var _stream = __w_pdfjs_require__2(140);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function parseDocBaseUrl(url) {
                if (url) {
                  var absoluteUrl = (0, _util.createValidAbsoluteUrl)(url);
                  if (absoluteUrl) {
                    return absoluteUrl.href;
                  }
                  (0, _util.warn)('Invalid absolute docBaseUrl: "'.concat(url, '".'));
                }
                return null;
              }
              var BasePdfManager = /* @__PURE__ */ function() {
                function BasePdfManager2() {
                  _classCallCheck(this, BasePdfManager2);
                  if (this.constructor === BasePdfManager2) {
                    (0, _util.unreachable)("Cannot initialize BasePdfManager.");
                  }
                }
                _createClass(BasePdfManager2, [{
                  key: "docId",
                  get: function get() {
                    return this._docId;
                  }
                }, {
                  key: "password",
                  get: function get() {
                    return this._password;
                  }
                }, {
                  key: "docBaseUrl",
                  get: function get() {
                    return this._docBaseUrl;
                  }
                }, {
                  key: "onLoadedStream",
                  value: function onLoadedStream() {
                    (0, _util.unreachable)("Abstract method `onLoadedStream` called");
                  }
                }, {
                  key: "ensureDoc",
                  value: function ensureDoc(prop, args) {
                    return this.ensure(this.pdfDocument, prop, args);
                  }
                }, {
                  key: "ensureXRef",
                  value: function ensureXRef(prop, args) {
                    return this.ensure(this.pdfDocument.xref, prop, args);
                  }
                }, {
                  key: "ensureCatalog",
                  value: function ensureCatalog(prop, args) {
                    return this.ensure(this.pdfDocument.catalog, prop, args);
                  }
                }, {
                  key: "getPage",
                  value: function getPage(pageIndex) {
                    return this.pdfDocument.getPage(pageIndex);
                  }
                }, {
                  key: "fontFallback",
                  value: function fontFallback(id, handler) {
                    return this.pdfDocument.fontFallback(id, handler);
                  }
                }, {
                  key: "loadXfaFonts",
                  value: function loadXfaFonts(handler, task) {
                    return this.pdfDocument.loadXfaFonts(handler, task);
                  }
                }, {
                  key: "loadXfaImages",
                  value: function loadXfaImages() {
                    return this.pdfDocument.loadXfaImages();
                  }
                }, {
                  key: "serializeXfaData",
                  value: function serializeXfaData(annotationStorage) {
                    return this.pdfDocument.serializeXfaData(annotationStorage);
                  }
                }, {
                  key: "cleanup",
                  value: function cleanup() {
                    var manuallyTriggered = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    return this.pdfDocument.cleanup(manuallyTriggered);
                  }
                }, {
                  key: "ensure",
                  value: function() {
                    var _ensure = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(obj, prop, args) {
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              (0, _util.unreachable)("Abstract method `ensure` called");
                            case 1:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));
                    function ensure(_x, _x2, _x3) {
                      return _ensure.apply(this, arguments);
                    }
                    return ensure;
                  }()
                }, {
                  key: "requestRange",
                  value: function requestRange(begin, end) {
                    (0, _util.unreachable)("Abstract method `requestRange` called");
                  }
                }, {
                  key: "requestLoadedStream",
                  value: function requestLoadedStream() {
                    (0, _util.unreachable)("Abstract method `requestLoadedStream` called");
                  }
                }, {
                  key: "sendProgressiveData",
                  value: function sendProgressiveData(chunk) {
                    (0, _util.unreachable)("Abstract method `sendProgressiveData` called");
                  }
                }, {
                  key: "updatePassword",
                  value: function updatePassword(password) {
                    this._password = password;
                  }
                }, {
                  key: "terminate",
                  value: function terminate(reason) {
                    (0, _util.unreachable)("Abstract method `terminate` called");
                  }
                }]);
                return BasePdfManager2;
              }();
              var LocalPdfManager = /* @__PURE__ */ function(_BasePdfManager) {
                _inherits(LocalPdfManager2, _BasePdfManager);
                var _super = _createSuper(LocalPdfManager2);
                function LocalPdfManager2(docId, data, password, msgHandler, evaluatorOptions, enableXfa, docBaseUrl) {
                  var _this;
                  _classCallCheck(this, LocalPdfManager2);
                  _this = _super.call(this);
                  _this._docId = docId;
                  _this._password = password;
                  _this._docBaseUrl = parseDocBaseUrl(docBaseUrl);
                  _this.msgHandler = msgHandler;
                  _this.evaluatorOptions = evaluatorOptions;
                  _this.enableXfa = enableXfa;
                  var stream = new _stream.Stream(data);
                  _this.pdfDocument = new _document.PDFDocument(_assertThisInitialized(_this), stream);
                  _this._loadedStreamPromise = Promise.resolve(stream);
                  return _this;
                }
                _createClass(LocalPdfManager2, [{
                  key: "ensure",
                  value: function() {
                    var _ensure2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee2(obj, prop, args) {
                      var value;
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              value = obj[prop];
                              if (!(typeof value === "function")) {
                                _context2.next = 3;
                                break;
                              }
                              return _context2.abrupt("return", value.apply(obj, args));
                            case 3:
                              return _context2.abrupt("return", value);
                            case 4:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }));
                    function ensure(_x4, _x5, _x6) {
                      return _ensure2.apply(this, arguments);
                    }
                    return ensure;
                  }()
                }, {
                  key: "requestRange",
                  value: function requestRange(begin, end) {
                    return Promise.resolve();
                  }
                }, {
                  key: "requestLoadedStream",
                  value: function requestLoadedStream() {
                  }
                }, {
                  key: "onLoadedStream",
                  value: function onLoadedStream() {
                    return this._loadedStreamPromise;
                  }
                }, {
                  key: "terminate",
                  value: function terminate(reason) {
                  }
                }]);
                return LocalPdfManager2;
              }(BasePdfManager);
              exports2.LocalPdfManager = LocalPdfManager;
              var NetworkPdfManager = /* @__PURE__ */ function(_BasePdfManager2) {
                _inherits(NetworkPdfManager2, _BasePdfManager2);
                var _super2 = _createSuper(NetworkPdfManager2);
                function NetworkPdfManager2(docId, pdfNetworkStream, args, evaluatorOptions, enableXfa, docBaseUrl) {
                  var _this2;
                  _classCallCheck(this, NetworkPdfManager2);
                  _this2 = _super2.call(this);
                  _this2._docId = docId;
                  _this2._password = args.password;
                  _this2._docBaseUrl = parseDocBaseUrl(docBaseUrl);
                  _this2.msgHandler = args.msgHandler;
                  _this2.evaluatorOptions = evaluatorOptions;
                  _this2.enableXfa = enableXfa;
                  _this2.streamManager = new _chunked_stream.ChunkedStreamManager(pdfNetworkStream, {
                    msgHandler: args.msgHandler,
                    length: args.length,
                    disableAutoFetch: args.disableAutoFetch,
                    rangeChunkSize: args.rangeChunkSize
                  });
                  _this2.pdfDocument = new _document.PDFDocument(_assertThisInitialized(_this2), _this2.streamManager.getStream());
                  return _this2;
                }
                _createClass(NetworkPdfManager2, [{
                  key: "ensure",
                  value: function() {
                    var _ensure3 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee3(obj, prop, args) {
                      var value;
                      return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              _context3.prev = 0;
                              value = obj[prop];
                              if (!(typeof value === "function")) {
                                _context3.next = 4;
                                break;
                              }
                              return _context3.abrupt("return", value.apply(obj, args));
                            case 4:
                              return _context3.abrupt("return", value);
                            case 7:
                              _context3.prev = 7;
                              _context3.t0 = _context3["catch"](0);
                              if (_context3.t0 instanceof _core_utils.MissingDataException) {
                                _context3.next = 11;
                                break;
                              }
                              throw _context3.t0;
                            case 11:
                              _context3.next = 13;
                              return this.requestRange(_context3.t0.begin, _context3.t0.end);
                            case 13:
                              return _context3.abrupt("return", this.ensure(obj, prop, args));
                            case 14:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3, this, [[0, 7]]);
                    }));
                    function ensure(_x7, _x8, _x9) {
                      return _ensure3.apply(this, arguments);
                    }
                    return ensure;
                  }()
                }, {
                  key: "requestRange",
                  value: function requestRange(begin, end) {
                    return this.streamManager.requestRange(begin, end);
                  }
                }, {
                  key: "requestLoadedStream",
                  value: function requestLoadedStream() {
                    this.streamManager.requestAllChunks();
                  }
                }, {
                  key: "sendProgressiveData",
                  value: function sendProgressiveData(chunk) {
                    this.streamManager.onReceiveData({
                      chunk
                    });
                  }
                }, {
                  key: "onLoadedStream",
                  value: function onLoadedStream() {
                    return this.streamManager.onLoadedStream();
                  }
                }, {
                  key: "terminate",
                  value: function terminate(reason) {
                    this.streamManager.abort(reason);
                  }
                }]);
                return NetworkPdfManager2;
              }(BasePdfManager);
              exports2.NetworkPdfManager = NetworkPdfManager;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.ChunkedStreamManager = exports2.ChunkedStream = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _core_utils = __w_pdfjs_require__2(139);
              var _stream = __w_pdfjs_require__2(140);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var ChunkedStream = /* @__PURE__ */ function(_Stream) {
                _inherits(ChunkedStream2, _Stream);
                var _super = _createSuper(ChunkedStream2);
                function ChunkedStream2(length, chunkSize, manager) {
                  var _this;
                  _classCallCheck(this, ChunkedStream2);
                  _this = _super.call(this, new Uint8Array(length), 0, length, null);
                  _this.chunkSize = chunkSize;
                  _this._loadedChunks = /* @__PURE__ */ new Set();
                  _this.numChunks = Math.ceil(length / chunkSize);
                  _this.manager = manager;
                  _this.progressiveDataLength = 0;
                  _this.lastSuccessfulEnsureByteChunk = -1;
                  return _this;
                }
                _createClass(ChunkedStream2, [{
                  key: "getMissingChunks",
                  value: function getMissingChunks() {
                    var chunks = [];
                    for (var chunk = 0, n = this.numChunks; chunk < n; ++chunk) {
                      if (!this._loadedChunks.has(chunk)) {
                        chunks.push(chunk);
                      }
                    }
                    return chunks;
                  }
                }, {
                  key: "numChunksLoaded",
                  get: function get() {
                    return this._loadedChunks.size;
                  }
                }, {
                  key: "isDataLoaded",
                  get: function get() {
                    return this.numChunksLoaded === this.numChunks;
                  }
                }, {
                  key: "onReceiveData",
                  value: function onReceiveData(begin, chunk) {
                    var chunkSize = this.chunkSize;
                    if (begin % chunkSize !== 0) {
                      throw new Error("Bad begin offset: ".concat(begin));
                    }
                    var end = begin + chunk.byteLength;
                    if (end % chunkSize !== 0 && end !== this.bytes.length) {
                      throw new Error("Bad end offset: ".concat(end));
                    }
                    this.bytes.set(new Uint8Array(chunk), begin);
                    var beginChunk = Math.floor(begin / chunkSize);
                    var endChunk = Math.floor((end - 1) / chunkSize) + 1;
                    for (var curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
                      this._loadedChunks.add(curChunk);
                    }
                  }
                }, {
                  key: "onReceiveProgressiveData",
                  value: function onReceiveProgressiveData(data) {
                    var position = this.progressiveDataLength;
                    var beginChunk = Math.floor(position / this.chunkSize);
                    this.bytes.set(new Uint8Array(data), position);
                    position += data.byteLength;
                    this.progressiveDataLength = position;
                    var endChunk = position >= this.end ? this.numChunks : Math.floor(position / this.chunkSize);
                    for (var curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
                      this._loadedChunks.add(curChunk);
                    }
                  }
                }, {
                  key: "ensureByte",
                  value: function ensureByte(pos) {
                    if (pos < this.progressiveDataLength) {
                      return;
                    }
                    var chunk = Math.floor(pos / this.chunkSize);
                    if (chunk > this.numChunks) {
                      return;
                    }
                    if (chunk === this.lastSuccessfulEnsureByteChunk) {
                      return;
                    }
                    if (!this._loadedChunks.has(chunk)) {
                      throw new _core_utils.MissingDataException(pos, pos + 1);
                    }
                    this.lastSuccessfulEnsureByteChunk = chunk;
                  }
                }, {
                  key: "ensureRange",
                  value: function ensureRange(begin, end) {
                    if (begin >= end) {
                      return;
                    }
                    if (end <= this.progressiveDataLength) {
                      return;
                    }
                    var beginChunk = Math.floor(begin / this.chunkSize);
                    if (beginChunk > this.numChunks) {
                      return;
                    }
                    var endChunk = Math.min(Math.floor((end - 1) / this.chunkSize) + 1, this.numChunks);
                    for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
                      if (!this._loadedChunks.has(chunk)) {
                        throw new _core_utils.MissingDataException(begin, end);
                      }
                    }
                  }
                }, {
                  key: "nextEmptyChunk",
                  value: function nextEmptyChunk(beginChunk) {
                    var numChunks = this.numChunks;
                    for (var i = 0; i < numChunks; ++i) {
                      var chunk = (beginChunk + i) % numChunks;
                      if (!this._loadedChunks.has(chunk)) {
                        return chunk;
                      }
                    }
                    return null;
                  }
                }, {
                  key: "hasChunk",
                  value: function hasChunk(chunk) {
                    return this._loadedChunks.has(chunk);
                  }
                }, {
                  key: "getByte",
                  value: function getByte() {
                    var pos = this.pos;
                    if (pos >= this.end) {
                      return -1;
                    }
                    if (pos >= this.progressiveDataLength) {
                      this.ensureByte(pos);
                    }
                    return this.bytes[this.pos++];
                  }
                }, {
                  key: "getBytes",
                  value: function getBytes(length) {
                    var forceClamped = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    var bytes = this.bytes;
                    var pos = this.pos;
                    var strEnd = this.end;
                    if (!length) {
                      if (strEnd > this.progressiveDataLength) {
                        this.ensureRange(pos, strEnd);
                      }
                      var _subarray = bytes.subarray(pos, strEnd);
                      return forceClamped ? new Uint8ClampedArray(_subarray) : _subarray;
                    }
                    var end = pos + length;
                    if (end > strEnd) {
                      end = strEnd;
                    }
                    if (end > this.progressiveDataLength) {
                      this.ensureRange(pos, end);
                    }
                    this.pos = end;
                    var subarray = bytes.subarray(pos, end);
                    return forceClamped ? new Uint8ClampedArray(subarray) : subarray;
                  }
                }, {
                  key: "getByteRange",
                  value: function getByteRange(begin, end) {
                    if (begin < 0) {
                      begin = 0;
                    }
                    if (end > this.end) {
                      end = this.end;
                    }
                    if (end > this.progressiveDataLength) {
                      this.ensureRange(begin, end);
                    }
                    return this.bytes.subarray(begin, end);
                  }
                }, {
                  key: "makeSubStream",
                  value: function makeSubStream(start, length) {
                    var dict = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                    if (length) {
                      if (start + length > this.progressiveDataLength) {
                        this.ensureRange(start, start + length);
                      }
                    } else {
                      if (start >= this.progressiveDataLength) {
                        this.ensureByte(start);
                      }
                    }
                    function ChunkedStreamSubstream() {
                    }
                    ChunkedStreamSubstream.prototype = Object.create(this);
                    ChunkedStreamSubstream.prototype.getMissingChunks = function() {
                      var chunkSize = this.chunkSize;
                      var beginChunk = Math.floor(this.start / chunkSize);
                      var endChunk = Math.floor((this.end - 1) / chunkSize) + 1;
                      var missingChunks = [];
                      for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
                        if (!this._loadedChunks.has(chunk)) {
                          missingChunks.push(chunk);
                        }
                      }
                      return missingChunks;
                    };
                    Object.defineProperty(ChunkedStreamSubstream.prototype, "isDataLoaded", {
                      get: function get() {
                        if (this.numChunksLoaded === this.numChunks) {
                          return true;
                        }
                        return this.getMissingChunks().length === 0;
                      },
                      configurable: true
                    });
                    var subStream = new ChunkedStreamSubstream();
                    subStream.pos = subStream.start = start;
                    subStream.end = start + length || this.end;
                    subStream.dict = dict;
                    return subStream;
                  }
                }, {
                  key: "getBaseStreams",
                  value: function getBaseStreams() {
                    return [this];
                  }
                }]);
                return ChunkedStream2;
              }(_stream.Stream);
              exports2.ChunkedStream = ChunkedStream;
              var ChunkedStreamManager = /* @__PURE__ */ function() {
                function ChunkedStreamManager2(pdfNetworkStream, args) {
                  _classCallCheck(this, ChunkedStreamManager2);
                  this.length = args.length;
                  this.chunkSize = args.rangeChunkSize;
                  this.stream = new ChunkedStream(this.length, this.chunkSize, this);
                  this.pdfNetworkStream = pdfNetworkStream;
                  this.disableAutoFetch = args.disableAutoFetch;
                  this.msgHandler = args.msgHandler;
                  this.currRequestId = 0;
                  this._chunksNeededByRequest = /* @__PURE__ */ new Map();
                  this._requestsByChunk = /* @__PURE__ */ new Map();
                  this._promisesByRequest = /* @__PURE__ */ new Map();
                  this.progressiveDataLength = 0;
                  this.aborted = false;
                  this._loadedStreamCapability = (0, _util.createPromiseCapability)();
                }
                _createClass(ChunkedStreamManager2, [{
                  key: "onLoadedStream",
                  value: function onLoadedStream() {
                    return this._loadedStreamCapability.promise;
                  }
                }, {
                  key: "sendRequest",
                  value: function sendRequest(begin, end) {
                    var _this2 = this;
                    var rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);
                    if (!rangeReader.isStreamingSupported) {
                      rangeReader.onProgress = this.onProgress.bind(this);
                    }
                    var chunks = [], loaded = 0;
                    return new Promise(function(resolve, reject) {
                      var readChunk = function readChunk2(chunk) {
                        try {
                          if (!chunk.done) {
                            var data = chunk.value;
                            chunks.push(data);
                            loaded += (0, _util.arrayByteLength)(data);
                            if (rangeReader.isStreamingSupported) {
                              _this2.onProgress({
                                loaded
                              });
                            }
                            rangeReader.read().then(readChunk2, reject);
                            return;
                          }
                          var chunkData = (0, _util.arraysToBytes)(chunks);
                          chunks = null;
                          resolve(chunkData);
                        } catch (e) {
                          reject(e);
                        }
                      };
                      rangeReader.read().then(readChunk, reject);
                    }).then(function(data) {
                      if (_this2.aborted) {
                        return;
                      }
                      _this2.onReceiveData({
                        chunk: data,
                        begin
                      });
                    });
                  }
                }, {
                  key: "requestAllChunks",
                  value: function requestAllChunks() {
                    var missingChunks = this.stream.getMissingChunks();
                    this._requestChunks(missingChunks);
                    return this._loadedStreamCapability.promise;
                  }
                }, {
                  key: "_requestChunks",
                  value: function _requestChunks(chunks) {
                    var _this3 = this;
                    var requestId = this.currRequestId++;
                    var chunksNeeded = /* @__PURE__ */ new Set();
                    this._chunksNeededByRequest.set(requestId, chunksNeeded);
                    var _iterator = _createForOfIteratorHelper(chunks), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var chunk = _step.value;
                        if (!this.stream.hasChunk(chunk)) {
                          chunksNeeded.add(chunk);
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    if (chunksNeeded.size === 0) {
                      return Promise.resolve();
                    }
                    var capability = (0, _util.createPromiseCapability)();
                    this._promisesByRequest.set(requestId, capability);
                    var chunksToRequest = [];
                    var _iterator2 = _createForOfIteratorHelper(chunksNeeded), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var _chunk = _step2.value;
                        var requestIds = this._requestsByChunk.get(_chunk);
                        if (!requestIds) {
                          requestIds = [];
                          this._requestsByChunk.set(_chunk, requestIds);
                          chunksToRequest.push(_chunk);
                        }
                        requestIds.push(requestId);
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    if (chunksToRequest.length > 0) {
                      var groupedChunksToRequest = this.groupChunks(chunksToRequest);
                      var _iterator3 = _createForOfIteratorHelper(groupedChunksToRequest), _step3;
                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                          var groupedChunk = _step3.value;
                          var begin = groupedChunk.beginChunk * this.chunkSize;
                          var end = Math.min(groupedChunk.endChunk * this.chunkSize, this.length);
                          this.sendRequest(begin, end)["catch"](capability.reject);
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                    }
                    return capability.promise["catch"](function(reason) {
                      if (_this3.aborted) {
                        return;
                      }
                      throw reason;
                    });
                  }
                }, {
                  key: "getStream",
                  value: function getStream() {
                    return this.stream;
                  }
                }, {
                  key: "requestRange",
                  value: function requestRange(begin, end) {
                    end = Math.min(end, this.length);
                    var beginChunk = this.getBeginChunk(begin);
                    var endChunk = this.getEndChunk(end);
                    var chunks = [];
                    for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
                      chunks.push(chunk);
                    }
                    return this._requestChunks(chunks);
                  }
                }, {
                  key: "requestRanges",
                  value: function requestRanges() {
                    var ranges = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                    var chunksToRequest = [];
                    var _iterator4 = _createForOfIteratorHelper(ranges), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var range = _step4.value;
                        var beginChunk = this.getBeginChunk(range.begin);
                        var endChunk = this.getEndChunk(range.end);
                        for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
                          if (!chunksToRequest.includes(chunk)) {
                            chunksToRequest.push(chunk);
                          }
                        }
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                    chunksToRequest.sort(function(a, b) {
                      return a - b;
                    });
                    return this._requestChunks(chunksToRequest);
                  }
                }, {
                  key: "groupChunks",
                  value: function groupChunks(chunks) {
                    var groupedChunks = [];
                    var beginChunk = -1;
                    var prevChunk = -1;
                    for (var i = 0, ii = chunks.length; i < ii; ++i) {
                      var chunk = chunks[i];
                      if (beginChunk < 0) {
                        beginChunk = chunk;
                      }
                      if (prevChunk >= 0 && prevChunk + 1 !== chunk) {
                        groupedChunks.push({
                          beginChunk,
                          endChunk: prevChunk + 1
                        });
                        beginChunk = chunk;
                      }
                      if (i + 1 === chunks.length) {
                        groupedChunks.push({
                          beginChunk,
                          endChunk: chunk + 1
                        });
                      }
                      prevChunk = chunk;
                    }
                    return groupedChunks;
                  }
                }, {
                  key: "onProgress",
                  value: function onProgress(args) {
                    this.msgHandler.send("DocProgress", {
                      loaded: this.stream.numChunksLoaded * this.chunkSize + args.loaded,
                      total: this.length
                    });
                  }
                }, {
                  key: "onReceiveData",
                  value: function onReceiveData(args) {
                    var chunk = args.chunk;
                    var isProgressive = args.begin === void 0;
                    var begin = isProgressive ? this.progressiveDataLength : args.begin;
                    var end = begin + chunk.byteLength;
                    var beginChunk = Math.floor(begin / this.chunkSize);
                    var endChunk = end < this.length ? Math.floor(end / this.chunkSize) : Math.ceil(end / this.chunkSize);
                    if (isProgressive) {
                      this.stream.onReceiveProgressiveData(chunk);
                      this.progressiveDataLength = end;
                    } else {
                      this.stream.onReceiveData(begin, chunk);
                    }
                    if (this.stream.isDataLoaded) {
                      this._loadedStreamCapability.resolve(this.stream);
                    }
                    var loadedRequests = [];
                    for (var curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
                      var requestIds = this._requestsByChunk.get(curChunk);
                      if (!requestIds) {
                        continue;
                      }
                      this._requestsByChunk["delete"](curChunk);
                      var _iterator5 = _createForOfIteratorHelper(requestIds), _step5;
                      try {
                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                          var requestId = _step5.value;
                          var chunksNeeded = this._chunksNeededByRequest.get(requestId);
                          if (chunksNeeded.has(curChunk)) {
                            chunksNeeded["delete"](curChunk);
                          }
                          if (chunksNeeded.size > 0) {
                            continue;
                          }
                          loadedRequests.push(requestId);
                        }
                      } catch (err) {
                        _iterator5.e(err);
                      } finally {
                        _iterator5.f();
                      }
                    }
                    if (!this.disableAutoFetch && this._requestsByChunk.size === 0) {
                      var nextEmptyChunk;
                      if (this.stream.numChunksLoaded === 1) {
                        var lastChunk = this.stream.numChunks - 1;
                        if (!this.stream.hasChunk(lastChunk)) {
                          nextEmptyChunk = lastChunk;
                        }
                      } else {
                        nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);
                      }
                      if (Number.isInteger(nextEmptyChunk)) {
                        this._requestChunks([nextEmptyChunk]);
                      }
                    }
                    for (var _i = 0, _loadedRequests = loadedRequests; _i < _loadedRequests.length; _i++) {
                      var _requestId = _loadedRequests[_i];
                      var capability = this._promisesByRequest.get(_requestId);
                      this._promisesByRequest["delete"](_requestId);
                      capability.resolve();
                    }
                    this.msgHandler.send("DocProgress", {
                      loaded: this.stream.numChunksLoaded * this.chunkSize,
                      total: this.length
                    });
                  }
                }, {
                  key: "onError",
                  value: function onError(err) {
                    this._loadedStreamCapability.reject(err);
                  }
                }, {
                  key: "getBeginChunk",
                  value: function getBeginChunk(begin) {
                    return Math.floor(begin / this.chunkSize);
                  }
                }, {
                  key: "getEndChunk",
                  value: function getEndChunk(end) {
                    return Math.floor((end - 1) / this.chunkSize) + 1;
                  }
                }, {
                  key: "abort",
                  value: function abort(reason) {
                    this.aborted = true;
                    if (this.pdfNetworkStream) {
                      this.pdfNetworkStream.cancelAllRequests(reason);
                    }
                    var _iterator6 = _createForOfIteratorHelper(this._promisesByRequest.values()), _step6;
                    try {
                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                        var capability = _step6.value;
                        capability.reject(reason);
                      }
                    } catch (err) {
                      _iterator6.e(err);
                    } finally {
                      _iterator6.f();
                    }
                  }
                }]);
                return ChunkedStreamManager2;
              }();
              exports2.ChunkedStreamManager = ChunkedStreamManager;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.XRefParseException = exports2.XRefEntryException = exports2.ParserEOFException = exports2.MissingDataException = exports2.DocStats = void 0;
              exports2.collectActions = collectActions;
              exports2.encodeToXmlString = encodeToXmlString;
              exports2.escapePDFName = escapePDFName;
              exports2.getArrayLookupTableFactory = getArrayLookupTableFactory;
              exports2.getInheritableProperty = getInheritableProperty;
              exports2.getLookupTableFactory = getLookupTableFactory;
              exports2.isWhiteSpace = isWhiteSpace;
              exports2.log2 = log2;
              exports2.parseXFAPath = parseXFAPath;
              exports2.readInt8 = readInt8;
              exports2.readUint16 = readUint16;
              exports2.readUint32 = readUint32;
              exports2.recoverJsURL = recoverJsURL;
              exports2.toRomanNumerals = toRomanNumerals;
              exports2.validateCSSFont = validateCSSFont;
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function getLookupTableFactory(initializer) {
                var lookup;
                return function() {
                  if (initializer) {
                    lookup = /* @__PURE__ */ Object.create(null);
                    initializer(lookup);
                    initializer = null;
                  }
                  return lookup;
                };
              }
              function getArrayLookupTableFactory(initializer) {
                var lookup;
                return function() {
                  if (initializer) {
                    var arr = initializer();
                    initializer = null;
                    lookup = /* @__PURE__ */ Object.create(null);
                    for (var i = 0, ii = arr.length; i < ii; i += 2) {
                      lookup[arr[i]] = arr[i + 1];
                    }
                    arr = null;
                  }
                  return lookup;
                };
              }
              var MissingDataException = /* @__PURE__ */ function(_BaseException) {
                _inherits(MissingDataException2, _BaseException);
                var _super = _createSuper(MissingDataException2);
                function MissingDataException2(begin, end) {
                  var _this;
                  _classCallCheck(this, MissingDataException2);
                  _this = _super.call(this, "Missing data [".concat(begin, ", ").concat(end, ")"), "MissingDataException");
                  _this.begin = begin;
                  _this.end = end;
                  return _this;
                }
                return MissingDataException2;
              }(_util.BaseException);
              exports2.MissingDataException = MissingDataException;
              var ParserEOFException = /* @__PURE__ */ function(_BaseException2) {
                _inherits(ParserEOFException2, _BaseException2);
                var _super2 = _createSuper(ParserEOFException2);
                function ParserEOFException2(msg) {
                  _classCallCheck(this, ParserEOFException2);
                  return _super2.call(this, msg, "ParserEOFException");
                }
                return ParserEOFException2;
              }(_util.BaseException);
              exports2.ParserEOFException = ParserEOFException;
              var XRefEntryException = /* @__PURE__ */ function(_BaseException3) {
                _inherits(XRefEntryException2, _BaseException3);
                var _super3 = _createSuper(XRefEntryException2);
                function XRefEntryException2(msg) {
                  _classCallCheck(this, XRefEntryException2);
                  return _super3.call(this, msg, "XRefEntryException");
                }
                return XRefEntryException2;
              }(_util.BaseException);
              exports2.XRefEntryException = XRefEntryException;
              var XRefParseException = /* @__PURE__ */ function(_BaseException4) {
                _inherits(XRefParseException2, _BaseException4);
                var _super4 = _createSuper(XRefParseException2);
                function XRefParseException2(msg) {
                  _classCallCheck(this, XRefParseException2);
                  return _super4.call(this, msg, "XRefParseException");
                }
                return XRefParseException2;
              }(_util.BaseException);
              exports2.XRefParseException = XRefParseException;
              var DocStats = /* @__PURE__ */ function() {
                function DocStats2(handler) {
                  _classCallCheck(this, DocStats2);
                  this._handler = handler;
                  this._streamTypes = /* @__PURE__ */ new Set();
                  this._fontTypes = /* @__PURE__ */ new Set();
                }
                _createClass(DocStats2, [{
                  key: "_send",
                  value: function _send() {
                    var streamTypes = /* @__PURE__ */ Object.create(null), fontTypes = /* @__PURE__ */ Object.create(null);
                    var _iterator = _createForOfIteratorHelper(this._streamTypes), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var type = _step.value;
                        streamTypes[type] = true;
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    var _iterator2 = _createForOfIteratorHelper(this._fontTypes), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var _type = _step2.value;
                        fontTypes[_type] = true;
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    this._handler.send("DocStats", {
                      streamTypes,
                      fontTypes
                    });
                  }
                }, {
                  key: "addStreamType",
                  value: function addStreamType(type) {
                    if (this._streamTypes.has(type)) {
                      return;
                    }
                    this._streamTypes.add(type);
                    this._send();
                  }
                }, {
                  key: "addFontType",
                  value: function addFontType(type) {
                    if (this._fontTypes.has(type)) {
                      return;
                    }
                    this._fontTypes.add(type);
                    this._send();
                  }
                }]);
                return DocStats2;
              }();
              exports2.DocStats = DocStats;
              function getInheritableProperty(_ref) {
                var dict = _ref.dict, key = _ref.key, _ref$getArray = _ref.getArray, getArray = _ref$getArray === void 0 ? false : _ref$getArray, _ref$stopWhenFound = _ref.stopWhenFound, stopWhenFound = _ref$stopWhenFound === void 0 ? true : _ref$stopWhenFound;
                var values;
                var visited = new _primitives.RefSet();
                while (dict instanceof _primitives.Dict && !(dict.objId && visited.has(dict.objId))) {
                  if (dict.objId) {
                    visited.put(dict.objId);
                  }
                  var value = getArray ? dict.getArray(key) : dict.get(key);
                  if (value !== void 0) {
                    if (stopWhenFound) {
                      return value;
                    }
                    if (!values) {
                      values = [];
                    }
                    values.push(value);
                  }
                  dict = dict.get("Parent");
                }
                return values;
              }
              var ROMAN_NUMBER_MAP = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM", "", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC", "", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"];
              function toRomanNumerals(number) {
                var lowerCase = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                (0, _util.assert)(Number.isInteger(number) && number > 0, "The number should be a positive integer.");
                var romanBuf = [];
                var pos;
                while (number >= 1e3) {
                  number -= 1e3;
                  romanBuf.push("M");
                }
                pos = number / 100 | 0;
                number %= 100;
                romanBuf.push(ROMAN_NUMBER_MAP[pos]);
                pos = number / 10 | 0;
                number %= 10;
                romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);
                romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);
                var romanStr = romanBuf.join("");
                return lowerCase ? romanStr.toLowerCase() : romanStr;
              }
              function log2(x) {
                if (x <= 0) {
                  return 0;
                }
                return Math.ceil(Math.log2(x));
              }
              function readInt8(data, offset) {
                return data[offset] << 24 >> 24;
              }
              function readUint16(data, offset) {
                return data[offset] << 8 | data[offset + 1];
              }
              function readUint32(data, offset) {
                return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
              }
              function isWhiteSpace(ch) {
                return ch === 32 || ch === 9 || ch === 13 || ch === 10;
              }
              function parseXFAPath(path) {
                var positionPattern = /(.+)\[(\d+)\]$/;
                return path.split(".").map(function(component) {
                  var m = component.match(positionPattern);
                  if (m) {
                    return {
                      name: m[1],
                      pos: parseInt(m[2], 10)
                    };
                  }
                  return {
                    name: component,
                    pos: 0
                  };
                });
              }
              function escapePDFName(str) {
                var buffer = [];
                var start = 0;
                for (var i = 0, ii = str.length; i < ii; i++) {
                  var _char = str.charCodeAt(i);
                  if (_char < 33 || _char > 126 || _char === 35 || _char === 40 || _char === 41 || _char === 60 || _char === 62 || _char === 91 || _char === 93 || _char === 123 || _char === 125 || _char === 47 || _char === 37) {
                    if (start < i) {
                      buffer.push(str.substring(start, i));
                    }
                    buffer.push("#".concat(_char.toString(16)));
                    start = i + 1;
                  }
                }
                if (buffer.length === 0) {
                  return str;
                }
                if (start < str.length) {
                  buffer.push(str.substring(start, str.length));
                }
                return buffer.join("");
              }
              function _collectJS(entry, xref, list, parents) {
                if (!entry) {
                  return;
                }
                var parent = null;
                if ((0, _primitives.isRef)(entry)) {
                  if (parents.has(entry)) {
                    return;
                  }
                  parent = entry;
                  parents.put(parent);
                  entry = xref.fetch(entry);
                }
                if (Array.isArray(entry)) {
                  var _iterator3 = _createForOfIteratorHelper(entry), _step3;
                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                      var element = _step3.value;
                      _collectJS(element, xref, list, parents);
                    }
                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }
                } else if (entry instanceof _primitives.Dict) {
                  if ((0, _primitives.isName)(entry.get("S"), "JavaScript") && entry.has("JS")) {
                    var js = entry.get("JS");
                    var code;
                    if ((0, _primitives.isStream)(js)) {
                      code = js.getString();
                    } else {
                      code = js;
                    }
                    code = (0, _util.stringToPDFString)(code);
                    if (code) {
                      list.push(code);
                    }
                  }
                  _collectJS(entry.getRaw("Next"), xref, list, parents);
                }
                if (parent) {
                  parents.remove(parent);
                }
              }
              function collectActions(xref, dict, eventType) {
                var actions = /* @__PURE__ */ Object.create(null);
                var additionalActionsDicts = getInheritableProperty({
                  dict,
                  key: "AA",
                  stopWhenFound: false
                });
                if (additionalActionsDicts) {
                  for (var i = additionalActionsDicts.length - 1; i >= 0; i--) {
                    var additionalActions = additionalActionsDicts[i];
                    if (!(additionalActions instanceof _primitives.Dict)) {
                      continue;
                    }
                    var _iterator4 = _createForOfIteratorHelper(additionalActions.getKeys()), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var key = _step4.value;
                        var action = eventType[key];
                        if (!action) {
                          continue;
                        }
                        var actionDict = additionalActions.getRaw(key);
                        var parents = new _primitives.RefSet();
                        var list = [];
                        _collectJS(actionDict, xref, list, parents);
                        if (list.length > 0) {
                          actions[action] = list;
                        }
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                  }
                }
                if (dict.has("A")) {
                  var _actionDict = dict.get("A");
                  var _parents = new _primitives.RefSet();
                  var _list = [];
                  _collectJS(_actionDict, xref, _list, _parents);
                  if (_list.length > 0) {
                    actions.Action = _list;
                  }
                }
                return (0, _util.objectSize)(actions) > 0 ? actions : null;
              }
              var XMLEntities = {
                60: "&lt;",
                62: "&gt;",
                38: "&amp;",
                34: "&quot;",
                39: "&apos;"
              };
              function encodeToXmlString(str) {
                var buffer = [];
                var start = 0;
                for (var i = 0, ii = str.length; i < ii; i++) {
                  var _char2 = str.codePointAt(i);
                  if (32 <= _char2 && _char2 <= 126) {
                    var entity = XMLEntities[_char2];
                    if (entity) {
                      if (start < i) {
                        buffer.push(str.substring(start, i));
                      }
                      buffer.push(entity);
                      start = i + 1;
                    }
                  } else {
                    if (start < i) {
                      buffer.push(str.substring(start, i));
                    }
                    buffer.push("&#x".concat(_char2.toString(16).toUpperCase(), ";"));
                    if (_char2 > 55295 && (_char2 < 57344 || _char2 > 65533)) {
                      i++;
                    }
                    start = i + 1;
                  }
                }
                if (buffer.length === 0) {
                  return str;
                }
                if (start < str.length) {
                  buffer.push(str.substring(start, str.length));
                }
                return buffer.join("");
              }
              function validateCSSFont(cssFontInfo) {
                var DEFAULT_CSS_FONT_OBLIQUE = "14";
                var DEFAULT_CSS_FONT_WEIGHT = "400";
                var CSS_FONT_WEIGHT_VALUES = /* @__PURE__ */ new Set(["100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "normal", "bold", "bolder", "lighter"]);
                var fontFamily = cssFontInfo.fontFamily, fontWeight = cssFontInfo.fontWeight, italicAngle = cssFontInfo.italicAngle;
                if (/^".*"$/.test(fontFamily)) {
                  if (/[^\\]"/.test(fontFamily.slice(1, fontFamily.length - 1))) {
                    (0, _util.warn)('XFA - FontFamily contains some unescaped ": '.concat(fontFamily, "."));
                    return false;
                  }
                } else if (/^'.*'$/.test(fontFamily)) {
                  if (/[^\\]'/.test(fontFamily.slice(1, fontFamily.length - 1))) {
                    (0, _util.warn)("XFA - FontFamily contains some unescaped ': ".concat(fontFamily, "."));
                    return false;
                  }
                } else {
                  var _iterator5 = _createForOfIteratorHelper(fontFamily.split(/[ \t]+/)), _step5;
                  try {
                    for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                      var ident = _step5.value;
                      if (/^(\d|(-(\d|-)))/.test(ident) || !/^[\w-\\]+$/.test(ident)) {
                        (0, _util.warn)("XFA - FontFamily contains some invalid <custom-ident>: ".concat(fontFamily, "."));
                        return false;
                      }
                    }
                  } catch (err) {
                    _iterator5.e(err);
                  } finally {
                    _iterator5.f();
                  }
                }
                var weight = fontWeight ? fontWeight.toString() : "";
                cssFontInfo.fontWeight = CSS_FONT_WEIGHT_VALUES.has(weight) ? weight : DEFAULT_CSS_FONT_WEIGHT;
                var angle = parseFloat(italicAngle);
                cssFontInfo.italicAngle = isNaN(angle) || angle < -90 || angle > 90 ? DEFAULT_CSS_FONT_OBLIQUE : italicAngle.toString();
                return true;
              }
              function recoverJsURL(str) {
                var URL_OPEN_METHODS = ["app.launchURL", "window.open", "xfa.host.gotoURL"];
                var regex = new RegExp("^\\s*(" + URL_OPEN_METHODS.join("|").split(".").join("\\.") + `)\\((?:'|")([^'"]*)(?:'|")(?:,\\s*(\\w+)\\)|\\))`, "i");
                var jsUrl = regex.exec(str);
                if (jsUrl && jsUrl[2]) {
                  var url = jsUrl[2];
                  var newWindow = false;
                  if (jsUrl[3] === "true" && jsUrl[1] === "app.launchURL") {
                    newWindow = true;
                  }
                  return {
                    url,
                    newWindow
                  };
                }
                return null;
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.StringStream = exports2.Stream = exports2.NullStream = void 0;
              var _base_stream = __w_pdfjs_require__2(136);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var Stream = /* @__PURE__ */ function(_BaseStream) {
                _inherits(Stream2, _BaseStream);
                var _super = _createSuper(Stream2);
                function Stream2(arrayBuffer, start, length, dict) {
                  var _this;
                  _classCallCheck(this, Stream2);
                  _this = _super.call(this);
                  _this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);
                  _this.start = start || 0;
                  _this.pos = _this.start;
                  _this.end = start + length || _this.bytes.length;
                  _this.dict = dict;
                  return _this;
                }
                _createClass(Stream2, [{
                  key: "length",
                  get: function get() {
                    return this.end - this.start;
                  }
                }, {
                  key: "isEmpty",
                  get: function get() {
                    return this.length === 0;
                  }
                }, {
                  key: "getByte",
                  value: function getByte() {
                    if (this.pos >= this.end) {
                      return -1;
                    }
                    return this.bytes[this.pos++];
                  }
                }, {
                  key: "getBytes",
                  value: function getBytes(length) {
                    var forceClamped = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    var bytes = this.bytes;
                    var pos = this.pos;
                    var strEnd = this.end;
                    if (!length) {
                      var _subarray = bytes.subarray(pos, strEnd);
                      return forceClamped ? new Uint8ClampedArray(_subarray) : _subarray;
                    }
                    var end = pos + length;
                    if (end > strEnd) {
                      end = strEnd;
                    }
                    this.pos = end;
                    var subarray = bytes.subarray(pos, end);
                    return forceClamped ? new Uint8ClampedArray(subarray) : subarray;
                  }
                }, {
                  key: "getByteRange",
                  value: function getByteRange(begin, end) {
                    if (begin < 0) {
                      begin = 0;
                    }
                    if (end > this.end) {
                      end = this.end;
                    }
                    return this.bytes.subarray(begin, end);
                  }
                }, {
                  key: "reset",
                  value: function reset() {
                    this.pos = this.start;
                  }
                }, {
                  key: "moveStart",
                  value: function moveStart() {
                    this.start = this.pos;
                  }
                }, {
                  key: "makeSubStream",
                  value: function makeSubStream(start, length) {
                    var dict = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                    return new Stream2(this.bytes.buffer, start, length, dict);
                  }
                }]);
                return Stream2;
              }(_base_stream.BaseStream);
              exports2.Stream = Stream;
              var StringStream = /* @__PURE__ */ function(_Stream) {
                _inherits(StringStream2, _Stream);
                var _super2 = _createSuper(StringStream2);
                function StringStream2(str) {
                  _classCallCheck(this, StringStream2);
                  return _super2.call(this, (0, _util.stringToBytes)(str));
                }
                return StringStream2;
              }(Stream);
              exports2.StringStream = StringStream;
              var NullStream = /* @__PURE__ */ function(_Stream2) {
                _inherits(NullStream2, _Stream2);
                var _super3 = _createSuper(NullStream2);
                function NullStream2() {
                  _classCallCheck(this, NullStream2);
                  return _super3.call(this, new Uint8Array(0));
                }
                return NullStream2;
              }(Stream);
              exports2.NullStream = NullStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Page = exports2.PDFDocument = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _core_utils = __w_pdfjs_require__2(139);
              var _xfa_fonts = __w_pdfjs_require__2(142);
              var _stream = __w_pdfjs_require__2(140);
              var _annotation = __w_pdfjs_require__2(152);
              var _base_stream = __w_pdfjs_require__2(136);
              var _crypto = __w_pdfjs_require__2(202);
              var _catalog = __w_pdfjs_require__2(194);
              var _parser = __w_pdfjs_require__2(157);
              var _object_loader = __w_pdfjs_require__2(200);
              var _operator_list = __w_pdfjs_require__2(192);
              var _evaluator = __w_pdfjs_require__2(155);
              var _decode_stream = __w_pdfjs_require__2(159);
              var _struct_tree = __w_pdfjs_require__2(199);
              var _factory = __w_pdfjs_require__2(204);
              var _xref = __w_pdfjs_require__2(228);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var DEFAULT_USER_UNIT = 1;
              var LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];
              var Page = /* @__PURE__ */ function() {
                function Page2(_ref) {
                  var pdfManager = _ref.pdfManager, xref = _ref.xref, pageIndex = _ref.pageIndex, pageDict = _ref.pageDict, ref = _ref.ref, globalIdFactory = _ref.globalIdFactory, fontCache = _ref.fontCache, builtInCMapCache = _ref.builtInCMapCache, standardFontDataCache = _ref.standardFontDataCache, globalImageCache = _ref.globalImageCache, nonBlendModesSet = _ref.nonBlendModesSet, xfaFactory = _ref.xfaFactory;
                  _classCallCheck(this, Page2);
                  this.pdfManager = pdfManager;
                  this.pageIndex = pageIndex;
                  this.pageDict = pageDict;
                  this.xref = xref;
                  this.ref = ref;
                  this.fontCache = fontCache;
                  this.builtInCMapCache = builtInCMapCache;
                  this.standardFontDataCache = standardFontDataCache;
                  this.globalImageCache = globalImageCache;
                  this.nonBlendModesSet = nonBlendModesSet;
                  this.evaluatorOptions = pdfManager.evaluatorOptions;
                  this.resourcesPromise = null;
                  this.xfaFactory = xfaFactory;
                  var idCounters = {
                    obj: 0
                  };
                  this._localIdFactory = /* @__PURE__ */ function(_globalIdFactory) {
                    _inherits(_class, _globalIdFactory);
                    var _super = _createSuper(_class);
                    function _class() {
                      _classCallCheck(this, _class);
                      return _super.apply(this, arguments);
                    }
                    _createClass(_class, null, [{
                      key: "createObjId",
                      value: function createObjId() {
                        return "p".concat(pageIndex, "_").concat(++idCounters.obj);
                      }
                    }, {
                      key: "getPageObjId",
                      value: function getPageObjId() {
                        return "page".concat(ref.toString());
                      }
                    }]);
                    return _class;
                  }(globalIdFactory);
                }
                _createClass(Page2, [{
                  key: "_getInheritableProperty",
                  value: function _getInheritableProperty(key) {
                    var getArray = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    var value = (0, _core_utils.getInheritableProperty)({
                      dict: this.pageDict,
                      key,
                      getArray,
                      stopWhenFound: false
                    });
                    if (!Array.isArray(value)) {
                      return value;
                    }
                    if (value.length === 1 || !(0, _primitives.isDict)(value[0])) {
                      return value[0];
                    }
                    return _primitives.Dict.merge({
                      xref: this.xref,
                      dictArray: value
                    });
                  }
                }, {
                  key: "content",
                  get: function get() {
                    return this.pageDict.getArray("Contents");
                  }
                }, {
                  key: "resources",
                  get: function get() {
                    return (0, _util.shadow)(this, "resources", this._getInheritableProperty("Resources") || _primitives.Dict.empty);
                  }
                }, {
                  key: "_getBoundingBox",
                  value: function _getBoundingBox(name) {
                    if (this.xfaData) {
                      return this.xfaData.bbox;
                    }
                    var box = this._getInheritableProperty(name, true);
                    if (Array.isArray(box) && box.length === 4) {
                      if (box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {
                        return box;
                      }
                      (0, _util.warn)("Empty /".concat(name, " entry."));
                    }
                    return null;
                  }
                }, {
                  key: "mediaBox",
                  get: function get() {
                    return (0, _util.shadow)(this, "mediaBox", this._getBoundingBox("MediaBox") || LETTER_SIZE_MEDIABOX);
                  }
                }, {
                  key: "cropBox",
                  get: function get() {
                    return (0, _util.shadow)(this, "cropBox", this._getBoundingBox("CropBox") || this.mediaBox);
                  }
                }, {
                  key: "userUnit",
                  get: function get() {
                    var obj = this.pageDict.get("UserUnit");
                    if (!(0, _util.isNum)(obj) || obj <= 0) {
                      obj = DEFAULT_USER_UNIT;
                    }
                    return (0, _util.shadow)(this, "userUnit", obj);
                  }
                }, {
                  key: "view",
                  get: function get() {
                    var cropBox = this.cropBox, mediaBox = this.mediaBox;
                    var view;
                    if (cropBox === mediaBox || (0, _util.isArrayEqual)(cropBox, mediaBox)) {
                      view = mediaBox;
                    } else {
                      var box = _util.Util.intersect(cropBox, mediaBox);
                      if (box && box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {
                        view = box;
                      } else {
                        (0, _util.warn)("Empty /CropBox and /MediaBox intersection.");
                      }
                    }
                    return (0, _util.shadow)(this, "view", view || mediaBox);
                  }
                }, {
                  key: "rotate",
                  get: function get() {
                    var rotate = this._getInheritableProperty("Rotate") || 0;
                    if (rotate % 90 !== 0) {
                      rotate = 0;
                    } else if (rotate >= 360) {
                      rotate %= 360;
                    } else if (rotate < 0) {
                      rotate = (rotate % 360 + 360) % 360;
                    }
                    return (0, _util.shadow)(this, "rotate", rotate);
                  }
                }, {
                  key: "_onSubStreamError",
                  value: function _onSubStreamError(handler, reason, objId) {
                    if (this.evaluatorOptions.ignoreErrors) {
                      handler.send("UnsupportedFeature", {
                        featureId: _util.UNSUPPORTED_FEATURES.errorContentSubStream
                      });
                      (0, _util.warn)("getContentStream - ignoring sub-stream (".concat(objId, '): "').concat(reason, '".'));
                      return;
                    }
                    throw reason;
                  }
                }, {
                  key: "getContentStream",
                  value: function getContentStream(handler) {
                    var _this = this;
                    return this.pdfManager.ensure(this, "content").then(function(content) {
                      if (content instanceof _base_stream.BaseStream) {
                        return content;
                      }
                      if (Array.isArray(content)) {
                        return new _decode_stream.StreamsSequenceStream(content, _this._onSubStreamError.bind(_this, handler));
                      }
                      return new _stream.NullStream();
                    });
                  }
                }, {
                  key: "xfaData",
                  get: function get() {
                    return (0, _util.shadow)(this, "xfaData", this.xfaFactory ? {
                      bbox: this.xfaFactory.getBoundingBox(this.pageIndex)
                    } : null);
                  }
                }, {
                  key: "save",
                  value: function save(handler, task, annotationStorage) {
                    var partialEvaluator = new _evaluator.PartialEvaluator({
                      xref: this.xref,
                      handler,
                      pageIndex: this.pageIndex,
                      idFactory: this._localIdFactory,
                      fontCache: this.fontCache,
                      builtInCMapCache: this.builtInCMapCache,
                      standardFontDataCache: this.standardFontDataCache,
                      globalImageCache: this.globalImageCache,
                      options: this.evaluatorOptions
                    });
                    return this._parsedAnnotations.then(function(annotations) {
                      var newRefsPromises = [];
                      var _iterator = _createForOfIteratorHelper(annotations), _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                          var annotation = _step.value;
                          if (!annotation.mustBePrinted(annotationStorage)) {
                            continue;
                          }
                          newRefsPromises.push(annotation.save(partialEvaluator, task, annotationStorage)["catch"](function(reason) {
                            (0, _util.warn)("save - ignoring annotation data during " + '"'.concat(task.name, '" task: "').concat(reason, '".'));
                            return null;
                          }));
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                      return Promise.all(newRefsPromises);
                    });
                  }
                }, {
                  key: "loadResources",
                  value: function loadResources(keys) {
                    var _this2 = this;
                    if (!this.resourcesPromise) {
                      this.resourcesPromise = this.pdfManager.ensure(this, "resources");
                    }
                    return this.resourcesPromise.then(function() {
                      var objectLoader = new _object_loader.ObjectLoader(_this2.resources, keys, _this2.xref);
                      return objectLoader.load();
                    });
                  }
                }, {
                  key: "getOperatorList",
                  value: function getOperatorList(_ref2) {
                    var _this3 = this;
                    var handler = _ref2.handler, sink = _ref2.sink, task = _ref2.task, intent = _ref2.intent, cacheKey = _ref2.cacheKey, _ref2$annotationStora = _ref2.annotationStorage, annotationStorage = _ref2$annotationStora === void 0 ? null : _ref2$annotationStora;
                    var contentStreamPromise = this.getContentStream(handler);
                    var resourcesPromise = this.loadResources(["ColorSpace", "ExtGState", "Font", "Pattern", "Properties", "Shading", "XObject"]);
                    var partialEvaluator = new _evaluator.PartialEvaluator({
                      xref: this.xref,
                      handler,
                      pageIndex: this.pageIndex,
                      idFactory: this._localIdFactory,
                      fontCache: this.fontCache,
                      builtInCMapCache: this.builtInCMapCache,
                      standardFontDataCache: this.standardFontDataCache,
                      globalImageCache: this.globalImageCache,
                      options: this.evaluatorOptions
                    });
                    var dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);
                    var pageListPromise = dataPromises.then(function(_ref3) {
                      var _ref4 = _slicedToArray(_ref3, 1), contentStream = _ref4[0];
                      var opList = new _operator_list.OperatorList(intent, sink);
                      handler.send("StartRenderPage", {
                        transparency: partialEvaluator.hasBlendModes(_this3.resources, _this3.nonBlendModesSet),
                        pageIndex: _this3.pageIndex,
                        cacheKey
                      });
                      return partialEvaluator.getOperatorList({
                        stream: contentStream,
                        task,
                        resources: _this3.resources,
                        operatorList: opList
                      }).then(function() {
                        return opList;
                      });
                    });
                    return Promise.all([pageListPromise, this._parsedAnnotations]).then(function(_ref5) {
                      var _ref6 = _slicedToArray(_ref5, 2), pageOpList = _ref6[0], annotations = _ref6[1];
                      if (annotations.length === 0 || intent & _util.RenderingIntentFlag.ANNOTATIONS_DISABLE) {
                        pageOpList.flush(true);
                        return {
                          length: pageOpList.totalLength
                        };
                      }
                      var renderForms = !!(intent & _util.RenderingIntentFlag.ANNOTATIONS_FORMS), intentAny = !!(intent & _util.RenderingIntentFlag.ANY), intentDisplay = !!(intent & _util.RenderingIntentFlag.DISPLAY), intentPrint = !!(intent & _util.RenderingIntentFlag.PRINT);
                      var opListPromises = [];
                      var _iterator2 = _createForOfIteratorHelper(annotations), _step2;
                      try {
                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                          var annotation = _step2.value;
                          if (intentAny || intentDisplay && annotation.mustBeViewed(annotationStorage) || intentPrint && annotation.mustBePrinted(annotationStorage)) {
                            opListPromises.push(annotation.getOperatorList(partialEvaluator, task, intent, renderForms, annotationStorage)["catch"](function(reason) {
                              (0, _util.warn)("getOperatorList - ignoring annotation data during " + '"'.concat(task.name, '" task: "').concat(reason, '".'));
                              return null;
                            }));
                          }
                        }
                      } catch (err) {
                        _iterator2.e(err);
                      } finally {
                        _iterator2.f();
                      }
                      return Promise.all(opListPromises).then(function(opLists) {
                        pageOpList.addOp(_util.OPS.beginAnnotations, []);
                        var _iterator3 = _createForOfIteratorHelper(opLists), _step3;
                        try {
                          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                            var opList = _step3.value;
                            pageOpList.addOpList(opList);
                          }
                        } catch (err) {
                          _iterator3.e(err);
                        } finally {
                          _iterator3.f();
                        }
                        pageOpList.addOp(_util.OPS.endAnnotations, []);
                        pageOpList.flush(true);
                        return {
                          length: pageOpList.totalLength
                        };
                      });
                    });
                  }
                }, {
                  key: "extractTextContent",
                  value: function extractTextContent(_ref7) {
                    var _this4 = this;
                    var handler = _ref7.handler, task = _ref7.task, normalizeWhitespace = _ref7.normalizeWhitespace, includeMarkedContent = _ref7.includeMarkedContent, sink = _ref7.sink, combineTextItems = _ref7.combineTextItems;
                    var contentStreamPromise = this.getContentStream(handler);
                    var resourcesPromise = this.loadResources(["ExtGState", "Font", "Properties", "XObject"]);
                    var dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);
                    return dataPromises.then(function(_ref8) {
                      var _ref9 = _slicedToArray(_ref8, 1), contentStream = _ref9[0];
                      var partialEvaluator = new _evaluator.PartialEvaluator({
                        xref: _this4.xref,
                        handler,
                        pageIndex: _this4.pageIndex,
                        idFactory: _this4._localIdFactory,
                        fontCache: _this4.fontCache,
                        builtInCMapCache: _this4.builtInCMapCache,
                        standardFontDataCache: _this4.standardFontDataCache,
                        globalImageCache: _this4.globalImageCache,
                        options: _this4.evaluatorOptions
                      });
                      return partialEvaluator.getTextContent({
                        stream: contentStream,
                        task,
                        resources: _this4.resources,
                        normalizeWhitespace,
                        includeMarkedContent,
                        combineTextItems,
                        sink
                      });
                    });
                  }
                }, {
                  key: "getStructTree",
                  value: function() {
                    var _getStructTree = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee() {
                      var structTreeRoot, structTree;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.next = 2;
                              return this.pdfManager.ensureCatalog("structTreeRoot");
                            case 2:
                              structTreeRoot = _context.sent;
                              if (structTreeRoot) {
                                _context.next = 5;
                                break;
                              }
                              return _context.abrupt("return", null);
                            case 5:
                              _context.next = 7;
                              return this.pdfManager.ensure(this, "_parseStructTree", [structTreeRoot]);
                            case 7:
                              structTree = _context.sent;
                              return _context.abrupt("return", structTree.serializable);
                            case 9:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));
                    function getStructTree() {
                      return _getStructTree.apply(this, arguments);
                    }
                    return getStructTree;
                  }()
                }, {
                  key: "_parseStructTree",
                  value: function _parseStructTree(structTreeRoot) {
                    var tree = new _struct_tree.StructTreePage(structTreeRoot, this.pageDict);
                    tree.parse();
                    return tree;
                  }
                }, {
                  key: "getAnnotationsData",
                  value: function getAnnotationsData(intent) {
                    return this._parsedAnnotations.then(function(annotations) {
                      var annotationsData = [];
                      if (annotations.length === 0) {
                        return annotationsData;
                      }
                      var intentAny = !!(intent & _util.RenderingIntentFlag.ANY), intentDisplay = !!(intent & _util.RenderingIntentFlag.DISPLAY), intentPrint = !!(intent & _util.RenderingIntentFlag.PRINT);
                      var _iterator4 = _createForOfIteratorHelper(annotations), _step4;
                      try {
                        for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                          var annotation = _step4.value;
                          if (intentAny || intentDisplay && annotation.viewable || intentPrint && annotation.printable) {
                            annotationsData.push(annotation.data);
                          }
                        }
                      } catch (err) {
                        _iterator4.e(err);
                      } finally {
                        _iterator4.f();
                      }
                      return annotationsData;
                    });
                  }
                }, {
                  key: "annotations",
                  get: function get() {
                    var annots = this._getInheritableProperty("Annots");
                    return (0, _util.shadow)(this, "annotations", Array.isArray(annots) ? annots : []);
                  }
                }, {
                  key: "_parsedAnnotations",
                  get: function get() {
                    var _this5 = this;
                    var parsedAnnotations = this.pdfManager.ensure(this, "annotations").then(function() {
                      var annotationPromises = [];
                      var _iterator5 = _createForOfIteratorHelper(_this5.annotations), _step5;
                      try {
                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                          var annotationRef = _step5.value;
                          annotationPromises.push(_annotation.AnnotationFactory.create(_this5.xref, annotationRef, _this5.pdfManager, _this5._localIdFactory, false)["catch"](function(reason) {
                            (0, _util.warn)('_parsedAnnotations: "'.concat(reason, '".'));
                            return null;
                          }));
                        }
                      } catch (err) {
                        _iterator5.e(err);
                      } finally {
                        _iterator5.f();
                      }
                      return Promise.all(annotationPromises).then(function(annotations) {
                        return annotations.filter(function(annotation) {
                          return !!annotation;
                        });
                      });
                    });
                    return (0, _util.shadow)(this, "_parsedAnnotations", parsedAnnotations);
                  }
                }, {
                  key: "jsActions",
                  get: function get() {
                    var actions = (0, _core_utils.collectActions)(this.xref, this.pageDict, _util.PageActionEventType);
                    return (0, _util.shadow)(this, "jsActions", actions);
                  }
                }]);
                return Page2;
              }();
              exports2.Page = Page;
              var PDF_HEADER_SIGNATURE = new Uint8Array([37, 80, 68, 70, 45]);
              var STARTXREF_SIGNATURE = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);
              var ENDOBJ_SIGNATURE = new Uint8Array([101, 110, 100, 111, 98, 106]);
              var FINGERPRINT_FIRST_BYTES = 1024;
              var EMPTY_FINGERPRINT = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
              var PDF_HEADER_VERSION_REGEXP = /^[1-9]\.\d$/;
              function find(stream, signature) {
                var limit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1024;
                var backwards = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
                var signatureLength = signature.length;
                var scanBytes = stream.peekBytes(limit);
                var scanLength = scanBytes.length - signatureLength;
                if (scanLength <= 0) {
                  return false;
                }
                if (backwards) {
                  var signatureEnd = signatureLength - 1;
                  var pos = scanBytes.length - 1;
                  while (pos >= signatureEnd) {
                    var j = 0;
                    while (j < signatureLength && scanBytes[pos - j] === signature[signatureEnd - j]) {
                      j++;
                    }
                    if (j >= signatureLength) {
                      stream.pos += pos - signatureEnd;
                      return true;
                    }
                    pos--;
                  }
                } else {
                  var _pos = 0;
                  while (_pos <= scanLength) {
                    var _j = 0;
                    while (_j < signatureLength && scanBytes[_pos + _j] === signature[_j]) {
                      _j++;
                    }
                    if (_j >= signatureLength) {
                      stream.pos += _pos;
                      return true;
                    }
                    _pos++;
                  }
                }
                return false;
              }
              var PDFDocument = /* @__PURE__ */ function() {
                function PDFDocument2(pdfManager, arg) {
                  _classCallCheck(this, PDFDocument2);
                  var stream;
                  if ((0, _primitives.isStream)(arg)) {
                    stream = arg;
                  } else if ((0, _util.isArrayBuffer)(arg)) {
                    stream = new _stream.Stream(arg);
                  } else {
                    throw new Error("PDFDocument: Unknown argument type");
                  }
                  if (stream.length <= 0) {
                    throw new _util.InvalidPDFException("The PDF file is empty, i.e. its size is zero bytes.");
                  }
                  this.pdfManager = pdfManager;
                  this.stream = stream;
                  this.xref = new _xref.XRef(stream, pdfManager);
                  this._pagePromises = /* @__PURE__ */ new Map();
                  this._version = null;
                  var idCounters = {
                    font: 0
                  };
                  this._globalIdFactory = /* @__PURE__ */ function() {
                    function _class2() {
                      _classCallCheck(this, _class2);
                    }
                    _createClass(_class2, null, [{
                      key: "getDocId",
                      value: function getDocId() {
                        return "g_".concat(pdfManager.docId);
                      }
                    }, {
                      key: "createFontId",
                      value: function createFontId() {
                        return "f".concat(++idCounters.font);
                      }
                    }, {
                      key: "createObjId",
                      value: function createObjId() {
                        (0, _util.unreachable)("Abstract method `createObjId` called.");
                      }
                    }, {
                      key: "getPageObjId",
                      value: function getPageObjId() {
                        (0, _util.unreachable)("Abstract method `getPageObjId` called.");
                      }
                    }]);
                    return _class2;
                  }();
                }
                _createClass(PDFDocument2, [{
                  key: "parse",
                  value: function parse(recoveryMode) {
                    this.xref.parse(recoveryMode);
                    this.catalog = new _catalog.Catalog(this.pdfManager, this.xref);
                    if (this.catalog.version) {
                      this._version = this.catalog.version;
                    }
                  }
                }, {
                  key: "linearization",
                  get: function get() {
                    var linearization = null;
                    try {
                      linearization = _parser.Linearization.create(this.stream);
                    } catch (err) {
                      if (err instanceof _core_utils.MissingDataException) {
                        throw err;
                      }
                      (0, _util.info)(err);
                    }
                    return (0, _util.shadow)(this, "linearization", linearization);
                  }
                }, {
                  key: "startXRef",
                  get: function get() {
                    var stream = this.stream;
                    var startXRef = 0;
                    if (this.linearization) {
                      stream.reset();
                      if (find(stream, ENDOBJ_SIGNATURE)) {
                        startXRef = stream.pos + 6 - stream.start;
                      }
                    } else {
                      var step = 1024;
                      var startXRefLength = STARTXREF_SIGNATURE.length;
                      var found = false, pos = stream.end;
                      while (!found && pos > 0) {
                        pos -= step - startXRefLength;
                        if (pos < 0) {
                          pos = 0;
                        }
                        stream.pos = pos;
                        found = find(stream, STARTXREF_SIGNATURE, step, true);
                      }
                      if (found) {
                        stream.skip(9);
                        var ch;
                        do {
                          ch = stream.getByte();
                        } while ((0, _core_utils.isWhiteSpace)(ch));
                        var str = "";
                        while (ch >= 32 && ch <= 57) {
                          str += String.fromCharCode(ch);
                          ch = stream.getByte();
                        }
                        startXRef = parseInt(str, 10);
                        if (isNaN(startXRef)) {
                          startXRef = 0;
                        }
                      }
                    }
                    return (0, _util.shadow)(this, "startXRef", startXRef);
                  }
                }, {
                  key: "checkHeader",
                  value: function checkHeader() {
                    var stream = this.stream;
                    stream.reset();
                    if (!find(stream, PDF_HEADER_SIGNATURE)) {
                      return;
                    }
                    stream.moveStart();
                    var MAX_PDF_VERSION_LENGTH = 12;
                    var version = "", ch;
                    while ((ch = stream.getByte()) > 32) {
                      if (version.length >= MAX_PDF_VERSION_LENGTH) {
                        break;
                      }
                      version += String.fromCharCode(ch);
                    }
                    if (!this._version) {
                      this._version = version.substring(5);
                    }
                  }
                }, {
                  key: "parseStartXRef",
                  value: function parseStartXRef() {
                    this.xref.setStartXRef(this.startXRef);
                  }
                }, {
                  key: "numPages",
                  get: function get() {
                    var num = 0;
                    if (this.catalog.hasActualNumPages) {
                      num = this.catalog.numPages;
                    } else if (this.xfaFactory) {
                      num = this.xfaFactory.getNumPages();
                    } else if (this.linearization) {
                      num = this.linearization.numPages;
                    } else {
                      num = this.catalog.numPages;
                    }
                    return (0, _util.shadow)(this, "numPages", num);
                  }
                }, {
                  key: "_hasOnlyDocumentSignatures",
                  value: function _hasOnlyDocumentSignatures(fields) {
                    var _this6 = this;
                    var recursionDepth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                    var RECURSION_LIMIT = 10;
                    if (!Array.isArray(fields)) {
                      return false;
                    }
                    return fields.every(function(field) {
                      field = _this6.xref.fetchIfRef(field);
                      if (!(field instanceof _primitives.Dict)) {
                        return false;
                      }
                      if (field.has("Kids")) {
                        if (++recursionDepth > RECURSION_LIMIT) {
                          (0, _util.warn)("_hasOnlyDocumentSignatures: maximum recursion depth reached");
                          return false;
                        }
                        return _this6._hasOnlyDocumentSignatures(field.get("Kids"), recursionDepth);
                      }
                      var isSignature = (0, _primitives.isName)(field.get("FT"), "Sig");
                      var rectangle = field.get("Rect");
                      var isInvisible = Array.isArray(rectangle) && rectangle.every(function(value) {
                        return value === 0;
                      });
                      return isSignature && isInvisible;
                    });
                  }
                }, {
                  key: "xfaData",
                  get: function get() {
                    var acroForm = this.catalog.acroForm;
                    if (!acroForm) {
                      return null;
                    }
                    var xfa = acroForm.get("XFA");
                    var entries = {
                      "xdp:xdp": "",
                      template: "",
                      datasets: "",
                      config: "",
                      connectionSet: "",
                      localeSet: "",
                      stylesheet: "",
                      "/xdp:xdp": ""
                    };
                    if ((0, _primitives.isStream)(xfa) && !xfa.isEmpty) {
                      try {
                        entries["xdp:xdp"] = (0, _util.stringToUTF8String)(xfa.getString());
                        return entries;
                      } catch (_) {
                        (0, _util.warn)("XFA - Invalid utf-8 string.");
                        return null;
                      }
                    }
                    if (!Array.isArray(xfa) || xfa.length === 0) {
                      return null;
                    }
                    for (var i = 0, ii = xfa.length; i < ii; i += 2) {
                      var name = void 0;
                      if (i === 0) {
                        name = "xdp:xdp";
                      } else if (i === ii - 2) {
                        name = "/xdp:xdp";
                      } else {
                        name = xfa[i];
                      }
                      if (!entries.hasOwnProperty(name)) {
                        continue;
                      }
                      var data = this.xref.fetchIfRef(xfa[i + 1]);
                      if (!(0, _primitives.isStream)(data) || data.isEmpty) {
                        continue;
                      }
                      try {
                        entries[name] = (0, _util.stringToUTF8String)(data.getString());
                      } catch (_) {
                        (0, _util.warn)("XFA - Invalid utf-8 string.");
                        return null;
                      }
                    }
                    return entries;
                  }
                }, {
                  key: "xfaFactory",
                  get: function get() {
                    var data;
                    if (this.pdfManager.enableXfa && this.catalog.needsRendering && this.formInfo.hasXfa && !this.formInfo.hasAcroForm) {
                      data = this.xfaData;
                    }
                    return (0, _util.shadow)(this, "xfaFactory", data ? new _factory.XFAFactory(data) : null);
                  }
                }, {
                  key: "isPureXfa",
                  get: function get() {
                    return this.xfaFactory ? this.xfaFactory.isValid() : false;
                  }
                }, {
                  key: "htmlForXfa",
                  get: function get() {
                    return this.xfaFactory ? this.xfaFactory.getPages() : null;
                  }
                }, {
                  key: "loadXfaImages",
                  value: function() {
                    var _loadXfaImages = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee2() {
                      var xfaImagesDict, keys, objectLoader, xfaImages, _iterator6, _step6, key, stream;
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return this.pdfManager.ensureCatalog("xfaImages");
                            case 2:
                              xfaImagesDict = _context2.sent;
                              if (xfaImagesDict) {
                                _context2.next = 5;
                                break;
                              }
                              return _context2.abrupt("return");
                            case 5:
                              keys = xfaImagesDict.getKeys();
                              objectLoader = new _object_loader.ObjectLoader(xfaImagesDict, keys, this.xref);
                              _context2.next = 9;
                              return objectLoader.load();
                            case 9:
                              xfaImages = /* @__PURE__ */ new Map();
                              _iterator6 = _createForOfIteratorHelper(keys);
                              _context2.prev = 11;
                              _iterator6.s();
                            case 13:
                              if ((_step6 = _iterator6.n()).done) {
                                _context2.next = 21;
                                break;
                              }
                              key = _step6.value;
                              stream = xfaImagesDict.get(key);
                              if ((0, _primitives.isStream)(stream)) {
                                _context2.next = 18;
                                break;
                              }
                              return _context2.abrupt("continue", 19);
                            case 18:
                              xfaImages.set(key, stream.getBytes());
                            case 19:
                              _context2.next = 13;
                              break;
                            case 21:
                              _context2.next = 26;
                              break;
                            case 23:
                              _context2.prev = 23;
                              _context2.t0 = _context2["catch"](11);
                              _iterator6.e(_context2.t0);
                            case 26:
                              _context2.prev = 26;
                              _iterator6.f();
                              return _context2.finish(26);
                            case 29:
                              this.xfaFactory.setImages(xfaImages);
                            case 30:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2, this, [[11, 23, 26, 29]]);
                    }));
                    function loadXfaImages() {
                      return _loadXfaImages.apply(this, arguments);
                    }
                    return loadXfaImages;
                  }()
                }, {
                  key: "loadXfaFonts",
                  value: function() {
                    var _loadXfaFonts = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee3(handler, task) {
                      var acroForm, resources, objectLoader, fontRes, options, partialEvaluator, operatorList, pdfFonts, initialState, fonts, promises, _iterator7, _step7, _step7$value, fontName, font, descriptor, fontFamily, fontWeight, italicAngle, cssFontInfo, missingFonts, reallyMissingFonts, _iterator8, _step8, missing, _iterator9, _step9, _missing, _i2, _arr2, fontInfo, name, dict;
                      return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              _context3.next = 2;
                              return this.pdfManager.ensureCatalog("acroForm");
                            case 2:
                              acroForm = _context3.sent;
                              if (acroForm) {
                                _context3.next = 5;
                                break;
                              }
                              return _context3.abrupt("return");
                            case 5:
                              _context3.next = 7;
                              return acroForm.getAsync("DR");
                            case 7:
                              resources = _context3.sent;
                              if (resources instanceof _primitives.Dict) {
                                _context3.next = 10;
                                break;
                              }
                              return _context3.abrupt("return");
                            case 10:
                              objectLoader = new _object_loader.ObjectLoader(resources, ["Font"], this.xref);
                              _context3.next = 13;
                              return objectLoader.load();
                            case 13:
                              fontRes = resources.get("Font");
                              if (fontRes instanceof _primitives.Dict) {
                                _context3.next = 16;
                                break;
                              }
                              return _context3.abrupt("return");
                            case 16:
                              options = Object.assign(/* @__PURE__ */ Object.create(null), this.pdfManager.evaluatorOptions);
                              options.useSystemFonts = false;
                              partialEvaluator = new _evaluator.PartialEvaluator({
                                xref: this.xref,
                                handler,
                                pageIndex: -1,
                                idFactory: this._globalIdFactory,
                                fontCache: this.catalog.fontCache,
                                builtInCMapCache: this.catalog.builtInCMapCache,
                                standardFontDataCache: this.catalog.standardFontDataCache,
                                options
                              });
                              operatorList = new _operator_list.OperatorList();
                              pdfFonts = [];
                              _context3.t0 = function clone() {
                                return this;
                              };
                              initialState = {
                                get font() {
                                  return pdfFonts[pdfFonts.length - 1];
                                },
                                set font(font2) {
                                  pdfFonts.push(font2);
                                },
                                clone: _context3.t0
                              };
                              fonts = /* @__PURE__ */ new Map();
                              fontRes.forEach(function(fontName2, font2) {
                                fonts.set(fontName2, font2);
                              });
                              promises = [];
                              _iterator7 = _createForOfIteratorHelper(fonts);
                              _context3.prev = 27;
                              _iterator7.s();
                            case 29:
                              if ((_step7 = _iterator7.n()).done) {
                                _context3.next = 44;
                                break;
                              }
                              _step7$value = _slicedToArray(_step7.value, 2), fontName = _step7$value[0], font = _step7$value[1];
                              descriptor = font.get("FontDescriptor");
                              if (descriptor instanceof _primitives.Dict) {
                                _context3.next = 34;
                                break;
                              }
                              return _context3.abrupt("continue", 42);
                            case 34:
                              fontFamily = descriptor.get("FontFamily");
                              fontFamily = fontFamily.replace(/[ ]+(\d)/g, "$1");
                              fontWeight = descriptor.get("FontWeight");
                              italicAngle = -descriptor.get("ItalicAngle");
                              cssFontInfo = {
                                fontFamily,
                                fontWeight,
                                italicAngle
                              };
                              if ((0, _core_utils.validateCSSFont)(cssFontInfo)) {
                                _context3.next = 41;
                                break;
                              }
                              return _context3.abrupt("continue", 42);
                            case 41:
                              promises.push(partialEvaluator.handleSetFont(resources, [_primitives.Name.get(fontName), 1], null, operatorList, task, initialState, null, cssFontInfo)["catch"](function(reason) {
                                (0, _util.warn)('loadXfaFonts: "'.concat(reason, '".'));
                                return null;
                              }));
                            case 42:
                              _context3.next = 29;
                              break;
                            case 44:
                              _context3.next = 49;
                              break;
                            case 46:
                              _context3.prev = 46;
                              _context3.t1 = _context3["catch"](27);
                              _iterator7.e(_context3.t1);
                            case 49:
                              _context3.prev = 49;
                              _iterator7.f();
                              return _context3.finish(49);
                            case 52:
                              _context3.next = 54;
                              return Promise.all(promises);
                            case 54:
                              missingFonts = this.xfaFactory.setFonts(pdfFonts);
                              if (missingFonts) {
                                _context3.next = 57;
                                break;
                              }
                              return _context3.abrupt("return");
                            case 57:
                              options.ignoreErrors = true;
                              promises.length = 0;
                              pdfFonts.length = 0;
                              reallyMissingFonts = /* @__PURE__ */ new Set();
                              _iterator8 = _createForOfIteratorHelper(missingFonts);
                              try {
                                for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                                  missing = _step8.value;
                                  if (!(0, _xfa_fonts.getXfaFontName)("".concat(missing, "-Regular"))) {
                                    reallyMissingFonts.add(missing);
                                  }
                                }
                              } catch (err) {
                                _iterator8.e(err);
                              } finally {
                                _iterator8.f();
                              }
                              if (reallyMissingFonts.size) {
                                missingFonts.push("PdfJS-Fallback");
                              }
                              _iterator9 = _createForOfIteratorHelper(missingFonts);
                              _context3.prev = 65;
                              _iterator9.s();
                            case 67:
                              if ((_step9 = _iterator9.n()).done) {
                                _context3.next = 74;
                                break;
                              }
                              _missing = _step9.value;
                              if (!reallyMissingFonts.has(_missing)) {
                                _context3.next = 71;
                                break;
                              }
                              return _context3.abrupt("continue", 72);
                            case 71:
                              for (_i2 = 0, _arr2 = [{
                                name: "Regular",
                                fontWeight: 400,
                                italicAngle: 0
                              }, {
                                name: "Bold",
                                fontWeight: 700,
                                italicAngle: 0
                              }, {
                                name: "Italic",
                                fontWeight: 400,
                                italicAngle: 12
                              }, {
                                name: "BoldItalic",
                                fontWeight: 700,
                                italicAngle: 12
                              }]; _i2 < _arr2.length; _i2++) {
                                fontInfo = _arr2[_i2];
                                name = "".concat(_missing, "-").concat(fontInfo.name);
                                dict = (0, _xfa_fonts.getXfaFontDict)(name);
                                promises.push(partialEvaluator.handleSetFont(resources, [_primitives.Name.get(name), 1], null, operatorList, task, initialState, dict, {
                                  fontFamily: _missing,
                                  fontWeight: fontInfo.fontWeight,
                                  italicAngle: fontInfo.italicAngle
                                })["catch"](function(reason) {
                                  (0, _util.warn)('loadXfaFonts: "'.concat(reason, '".'));
                                  return null;
                                }));
                              }
                            case 72:
                              _context3.next = 67;
                              break;
                            case 74:
                              _context3.next = 79;
                              break;
                            case 76:
                              _context3.prev = 76;
                              _context3.t2 = _context3["catch"](65);
                              _iterator9.e(_context3.t2);
                            case 79:
                              _context3.prev = 79;
                              _iterator9.f();
                              return _context3.finish(79);
                            case 82:
                              _context3.next = 84;
                              return Promise.all(promises);
                            case 84:
                              this.xfaFactory.appendFonts(pdfFonts, reallyMissingFonts);
                            case 85:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3, this, [[27, 46, 49, 52], [65, 76, 79, 82]]);
                    }));
                    function loadXfaFonts(_x, _x2) {
                      return _loadXfaFonts.apply(this, arguments);
                    }
                    return loadXfaFonts;
                  }()
                }, {
                  key: "serializeXfaData",
                  value: function() {
                    var _serializeXfaData = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee4(annotationStorage) {
                      return _regenerator["default"].wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              return _context4.abrupt("return", this.xfaFactory ? this.xfaFactory.serializeData(annotationStorage) : null);
                            case 1:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4, this);
                    }));
                    function serializeXfaData(_x3) {
                      return _serializeXfaData.apply(this, arguments);
                    }
                    return serializeXfaData;
                  }()
                }, {
                  key: "formInfo",
                  get: function get() {
                    var formInfo = {
                      hasFields: false,
                      hasAcroForm: false,
                      hasXfa: false,
                      hasSignatures: false
                    };
                    var acroForm = this.catalog.acroForm;
                    if (!acroForm) {
                      return (0, _util.shadow)(this, "formInfo", formInfo);
                    }
                    try {
                      var fields = acroForm.get("Fields");
                      var hasFields = Array.isArray(fields) && fields.length > 0;
                      formInfo.hasFields = hasFields;
                      var xfa = acroForm.get("XFA");
                      formInfo.hasXfa = Array.isArray(xfa) && xfa.length > 0 || (0, _primitives.isStream)(xfa) && !xfa.isEmpty;
                      var sigFlags = acroForm.get("SigFlags");
                      var hasSignatures = !!(sigFlags & 1);
                      var hasOnlyDocumentSignatures = hasSignatures && this._hasOnlyDocumentSignatures(fields);
                      formInfo.hasAcroForm = hasFields && !hasOnlyDocumentSignatures;
                      formInfo.hasSignatures = hasSignatures;
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)('Cannot fetch form information: "'.concat(ex, '".'));
                    }
                    return (0, _util.shadow)(this, "formInfo", formInfo);
                  }
                }, {
                  key: "documentInfo",
                  get: function get() {
                    var DocumentInfoValidators = {
                      Title: _util.isString,
                      Author: _util.isString,
                      Subject: _util.isString,
                      Keywords: _util.isString,
                      Creator: _util.isString,
                      Producer: _util.isString,
                      CreationDate: _util.isString,
                      ModDate: _util.isString,
                      Trapped: _primitives.isName
                    };
                    var version = this._version;
                    if (typeof version !== "string" || !PDF_HEADER_VERSION_REGEXP.test(version)) {
                      (0, _util.warn)("Invalid PDF header version number: ".concat(version));
                      version = null;
                    }
                    var docInfo = {
                      PDFFormatVersion: version,
                      Language: this.catalog.lang,
                      EncryptFilterName: this.xref.encrypt ? this.xref.encrypt.filterName : null,
                      IsLinearized: !!this.linearization,
                      IsAcroFormPresent: this.formInfo.hasAcroForm,
                      IsXFAPresent: this.formInfo.hasXfa,
                      IsCollectionPresent: !!this.catalog.collection,
                      IsSignaturesPresent: this.formInfo.hasSignatures
                    };
                    var infoDict;
                    try {
                      infoDict = this.xref.trailer.get("Info");
                    } catch (err) {
                      if (err instanceof _core_utils.MissingDataException) {
                        throw err;
                      }
                      (0, _util.info)("The document information dictionary is invalid.");
                    }
                    if ((0, _primitives.isDict)(infoDict)) {
                      var _iterator10 = _createForOfIteratorHelper(infoDict.getKeys()), _step10;
                      try {
                        for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                          var key = _step10.value;
                          var value = infoDict.get(key);
                          if (DocumentInfoValidators[key]) {
                            if (DocumentInfoValidators[key](value)) {
                              docInfo[key] = typeof value !== "string" ? value : (0, _util.stringToPDFString)(value);
                            } else {
                              (0, _util.info)('Bad value in document info for "'.concat(key, '".'));
                            }
                          } else if (typeof key === "string") {
                            var customValue = void 0;
                            if ((0, _util.isString)(value)) {
                              customValue = (0, _util.stringToPDFString)(value);
                            } else if ((0, _primitives.isName)(value) || (0, _util.isNum)(value) || (0, _util.isBool)(value)) {
                              customValue = value;
                            } else {
                              (0, _util.info)('Unsupported value in document info for (custom) "'.concat(key, '".'));
                              continue;
                            }
                            if (!docInfo.Custom) {
                              docInfo.Custom = /* @__PURE__ */ Object.create(null);
                            }
                            docInfo.Custom[key] = customValue;
                          }
                        }
                      } catch (err) {
                        _iterator10.e(err);
                      } finally {
                        _iterator10.f();
                      }
                    }
                    return (0, _util.shadow)(this, "documentInfo", docInfo);
                  }
                }, {
                  key: "fingerprints",
                  get: function get() {
                    function validate(data) {
                      return typeof data === "string" && data.length > 0 && data !== EMPTY_FINGERPRINT;
                    }
                    function hexString(hash) {
                      var buf = [];
                      for (var i = 0, ii = hash.length; i < ii; i++) {
                        var hex = hash[i].toString(16);
                        buf.push(hex.padStart(2, "0"));
                      }
                      return buf.join("");
                    }
                    var idArray = this.xref.trailer.get("ID");
                    var hashOriginal, hashModified;
                    if (Array.isArray(idArray) && validate(idArray[0])) {
                      hashOriginal = (0, _util.stringToBytes)(idArray[0]);
                      if (idArray[1] !== idArray[0] && validate(idArray[1])) {
                        hashModified = (0, _util.stringToBytes)(idArray[1]);
                      }
                    } else {
                      hashOriginal = (0, _crypto.calculateMD5)(this.stream.getByteRange(0, FINGERPRINT_FIRST_BYTES), 0, FINGERPRINT_FIRST_BYTES);
                    }
                    return (0, _util.shadow)(this, "fingerprints", [hexString(hashOriginal), hashModified ? hexString(hashModified) : null]);
                  }
                }, {
                  key: "_getLinearizationPage",
                  value: function() {
                    var _getLinearizationPage2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee5(pageIndex) {
                      var catalog, linearization, ref, obj;
                      return _regenerator["default"].wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              catalog = this.catalog, linearization = this.linearization;
                              ref = _primitives.Ref.get(linearization.objectNumberFirst, 0);
                              _context5.prev = 2;
                              _context5.next = 5;
                              return this.xref.fetchAsync(ref);
                            case 5:
                              obj = _context5.sent;
                              if (!((0, _primitives.isDict)(obj, "Page") || (0, _primitives.isDict)(obj) && !obj.has("Type") && obj.has("Contents"))) {
                                _context5.next = 9;
                                break;
                              }
                              if (ref && !catalog.pageKidsCountCache.has(ref)) {
                                catalog.pageKidsCountCache.put(ref, 1);
                              }
                              return _context5.abrupt("return", [obj, ref]);
                            case 9:
                              throw new _util.FormatError("The Linearization dictionary doesn't point to a valid Page dictionary.");
                            case 12:
                              _context5.prev = 12;
                              _context5.t0 = _context5["catch"](2);
                              (0, _util.info)(_context5.t0);
                              return _context5.abrupt("return", catalog.getPageDict(pageIndex));
                            case 16:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      }, _callee5, this, [[2, 12]]);
                    }));
                    function _getLinearizationPage(_x4) {
                      return _getLinearizationPage2.apply(this, arguments);
                    }
                    return _getLinearizationPage;
                  }()
                }, {
                  key: "getPage",
                  value: function getPage(pageIndex) {
                    var _this7 = this;
                    var cachedPromise = this._pagePromises.get(pageIndex);
                    if (cachedPromise) {
                      return cachedPromise;
                    }
                    var catalog = this.catalog, linearization = this.linearization, xfaFactory = this.xfaFactory;
                    var promise;
                    if (xfaFactory) {
                      promise = Promise.resolve([_primitives.Dict.empty, null]);
                    } else if (linearization && linearization.pageFirst === pageIndex) {
                      promise = this._getLinearizationPage(pageIndex);
                    } else {
                      promise = catalog.getPageDict(pageIndex);
                    }
                    promise = promise.then(function(_ref10) {
                      var _ref11 = _slicedToArray(_ref10, 2), pageDict = _ref11[0], ref = _ref11[1];
                      return new Page({
                        pdfManager: _this7.pdfManager,
                        xref: _this7.xref,
                        pageIndex,
                        pageDict,
                        ref,
                        globalIdFactory: _this7._globalIdFactory,
                        fontCache: catalog.fontCache,
                        builtInCMapCache: catalog.builtInCMapCache,
                        standardFontDataCache: catalog.standardFontDataCache,
                        globalImageCache: catalog.globalImageCache,
                        nonBlendModesSet: catalog.nonBlendModesSet,
                        xfaFactory
                      });
                    });
                    this._pagePromises.set(pageIndex, promise);
                    return promise;
                  }
                }, {
                  key: "checkFirstPage",
                  value: function() {
                    var _checkFirstPage = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee6() {
                      var recoveryMode, _args6 = arguments;
                      return _regenerator["default"].wrap(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              recoveryMode = _args6.length > 0 && _args6[0] !== void 0 ? _args6[0] : false;
                              if (!recoveryMode) {
                                _context6.next = 3;
                                break;
                              }
                              return _context6.abrupt("return");
                            case 3:
                              _context6.prev = 3;
                              _context6.next = 6;
                              return this.getPage(0);
                            case 6:
                              _context6.next = 15;
                              break;
                            case 8:
                              _context6.prev = 8;
                              _context6.t0 = _context6["catch"](3);
                              if (!(_context6.t0 instanceof _core_utils.XRefEntryException)) {
                                _context6.next = 15;
                                break;
                              }
                              this._pagePromises["delete"](0);
                              _context6.next = 14;
                              return this.cleanup();
                            case 14:
                              throw new _core_utils.XRefParseException();
                            case 15:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      }, _callee6, this, [[3, 8]]);
                    }));
                    function checkFirstPage() {
                      return _checkFirstPage.apply(this, arguments);
                    }
                    return checkFirstPage;
                  }()
                }, {
                  key: "checkLastPage",
                  value: function() {
                    var _checkLastPage = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee7() {
                      var recoveryMode, catalog, pdfManager, numPages, pagesTree, _iterator11, _step11, _step11$value, pageIndex, _step11$value$, pageDict, ref, promise, _args7 = arguments;
                      return _regenerator["default"].wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              recoveryMode = _args7.length > 0 && _args7[0] !== void 0 ? _args7[0] : false;
                              catalog = this.catalog, pdfManager = this.pdfManager;
                              catalog.setActualNumPages();
                              _context7.prev = 3;
                              _context7.next = 6;
                              return Promise.all([pdfManager.ensureDoc("xfaFactory"), pdfManager.ensureDoc("linearization"), pdfManager.ensureCatalog("numPages")]);
                            case 6:
                              if (!this.xfaFactory) {
                                _context7.next = 10;
                                break;
                              }
                              return _context7.abrupt("return");
                            case 10:
                              if (this.linearization) {
                                numPages = this.linearization.numPages;
                              } else {
                                numPages = catalog.numPages;
                              }
                            case 11:
                              if (Number.isInteger(numPages)) {
                                _context7.next = 15;
                                break;
                              }
                              throw new _util.FormatError("Page count is not an integer.");
                            case 15:
                              if (!(numPages <= 1)) {
                                _context7.next = 17;
                                break;
                              }
                              return _context7.abrupt("return");
                            case 17:
                              _context7.next = 19;
                              return this.getPage(numPages - 1);
                            case 19:
                              _context7.next = 44;
                              break;
                            case 21:
                              _context7.prev = 21;
                              _context7.t0 = _context7["catch"](3);
                              this._pagePromises["delete"](numPages - 1);
                              _context7.next = 26;
                              return this.cleanup();
                            case 26:
                              if (!(_context7.t0 instanceof _core_utils.XRefEntryException && !recoveryMode)) {
                                _context7.next = 28;
                                break;
                              }
                              throw new _core_utils.XRefParseException();
                            case 28:
                              (0, _util.warn)("checkLastPage - invalid /Pages tree /Count: ".concat(numPages, "."));
                              _context7.prev = 29;
                              _context7.next = 32;
                              return pdfManager.ensureCatalog("getAllPageDicts", [recoveryMode]);
                            case 32:
                              pagesTree = _context7.sent;
                              _context7.next = 41;
                              break;
                            case 35:
                              _context7.prev = 35;
                              _context7.t1 = _context7["catch"](29);
                              if (!(_context7.t1 instanceof _core_utils.XRefEntryException && !recoveryMode)) {
                                _context7.next = 39;
                                break;
                              }
                              throw new _core_utils.XRefParseException();
                            case 39:
                              catalog.setActualNumPages(1);
                              return _context7.abrupt("return");
                            case 41:
                              _iterator11 = _createForOfIteratorHelper(pagesTree);
                              try {
                                for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                                  _step11$value = _slicedToArray(_step11.value, 2), pageIndex = _step11$value[0], _step11$value$ = _slicedToArray(_step11$value[1], 2), pageDict = _step11$value$[0], ref = _step11$value$[1];
                                  promise = void 0;
                                  if (pageDict instanceof Error) {
                                    promise = Promise.reject(pageDict);
                                    promise["catch"](function() {
                                    });
                                  } else {
                                    promise = Promise.resolve(new Page({
                                      pdfManager,
                                      xref: this.xref,
                                      pageIndex,
                                      pageDict,
                                      ref,
                                      globalIdFactory: this._globalIdFactory,
                                      fontCache: catalog.fontCache,
                                      builtInCMapCache: catalog.builtInCMapCache,
                                      standardFontDataCache: catalog.standardFontDataCache,
                                      globalImageCache: catalog.globalImageCache,
                                      nonBlendModesSet: catalog.nonBlendModesSet,
                                      xfaFactory: null
                                    }));
                                  }
                                  this._pagePromises.set(pageIndex, promise);
                                }
                              } catch (err) {
                                _iterator11.e(err);
                              } finally {
                                _iterator11.f();
                              }
                              catalog.setActualNumPages(pagesTree.size);
                            case 44:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7, this, [[3, 21], [29, 35]]);
                    }));
                    function checkLastPage() {
                      return _checkLastPage.apply(this, arguments);
                    }
                    return checkLastPage;
                  }()
                }, {
                  key: "fontFallback",
                  value: function fontFallback(id, handler) {
                    return this.catalog.fontFallback(id, handler);
                  }
                }, {
                  key: "cleanup",
                  value: function() {
                    var _cleanup = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee8() {
                      var manuallyTriggered, _args8 = arguments;
                      return _regenerator["default"].wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              manuallyTriggered = _args8.length > 0 && _args8[0] !== void 0 ? _args8[0] : false;
                              return _context8.abrupt("return", this.catalog ? this.catalog.cleanup(manuallyTriggered) : (0, _primitives.clearPrimitiveCaches)());
                            case 2:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8, this);
                    }));
                    function cleanup() {
                      return _cleanup.apply(this, arguments);
                    }
                    return cleanup;
                  }()
                }, {
                  key: "_collectFieldObjects",
                  value: function _collectFieldObjects(name, fieldRef, promises) {
                    var field = this.xref.fetchIfRef(fieldRef);
                    if (field.has("T")) {
                      var partName = (0, _util.stringToPDFString)(field.get("T"));
                      if (name === "") {
                        name = partName;
                      } else {
                        name = "".concat(name, ".").concat(partName);
                      }
                    }
                    if (!promises.has(name)) {
                      promises.set(name, []);
                    }
                    promises.get(name).push(_annotation.AnnotationFactory.create(this.xref, fieldRef, this.pdfManager, this._localIdFactory, true).then(function(annotation) {
                      return annotation && annotation.getFieldObject();
                    })["catch"](function(reason) {
                      (0, _util.warn)('_collectFieldObjects: "'.concat(reason, '".'));
                      return null;
                    }));
                    if (field.has("Kids")) {
                      var kids = field.get("Kids");
                      var _iterator12 = _createForOfIteratorHelper(kids), _step12;
                      try {
                        for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                          var kid = _step12.value;
                          this._collectFieldObjects(name, kid, promises);
                        }
                      } catch (err) {
                        _iterator12.e(err);
                      } finally {
                        _iterator12.f();
                      }
                    }
                  }
                }, {
                  key: "fieldObjects",
                  get: function get() {
                    if (!this.formInfo.hasFields) {
                      return (0, _util.shadow)(this, "fieldObjects", Promise.resolve(null));
                    }
                    var allFields = /* @__PURE__ */ Object.create(null);
                    var fieldPromises = /* @__PURE__ */ new Map();
                    var _iterator13 = _createForOfIteratorHelper(this.catalog.acroForm.get("Fields")), _step13;
                    try {
                      for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                        var fieldRef = _step13.value;
                        this._collectFieldObjects("", fieldRef, fieldPromises);
                      }
                    } catch (err) {
                      _iterator13.e(err);
                    } finally {
                      _iterator13.f();
                    }
                    var allPromises = [];
                    var _iterator14 = _createForOfIteratorHelper(fieldPromises), _step14;
                    try {
                      var _loop = function _loop2() {
                        var _step14$value = _slicedToArray(_step14.value, 2), name = _step14$value[0], promises = _step14$value[1];
                        allPromises.push(Promise.all(promises).then(function(fields) {
                          fields = fields.filter(function(field) {
                            return !!field;
                          });
                          if (fields.length > 0) {
                            allFields[name] = fields;
                          }
                        }));
                      };
                      for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
                        _loop();
                      }
                    } catch (err) {
                      _iterator14.e(err);
                    } finally {
                      _iterator14.f();
                    }
                    return (0, _util.shadow)(this, "fieldObjects", Promise.all(allPromises).then(function() {
                      return allFields;
                    }));
                  }
                }, {
                  key: "hasJSActions",
                  get: function get() {
                    var promise = this.pdfManager.ensureDoc("_parseHasJSActions");
                    return (0, _util.shadow)(this, "hasJSActions", promise);
                  }
                }, {
                  key: "_parseHasJSActions",
                  value: function() {
                    var _parseHasJSActions2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee9() {
                      var _yield$Promise$all, _yield$Promise$all2, catalogJsActions, fieldObjects;
                      return _regenerator["default"].wrap(function _callee9$(_context9) {
                        while (1) {
                          switch (_context9.prev = _context9.next) {
                            case 0:
                              _context9.next = 2;
                              return Promise.all([this.pdfManager.ensureCatalog("jsActions"), this.pdfManager.ensureDoc("fieldObjects")]);
                            case 2:
                              _yield$Promise$all = _context9.sent;
                              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
                              catalogJsActions = _yield$Promise$all2[0];
                              fieldObjects = _yield$Promise$all2[1];
                              if (!catalogJsActions) {
                                _context9.next = 8;
                                break;
                              }
                              return _context9.abrupt("return", true);
                            case 8:
                              if (!fieldObjects) {
                                _context9.next = 10;
                                break;
                              }
                              return _context9.abrupt("return", Object.values(fieldObjects).some(function(fieldObject) {
                                return fieldObject.some(function(object) {
                                  return object.actions !== null;
                                });
                              }));
                            case 10:
                              return _context9.abrupt("return", false);
                            case 11:
                            case "end":
                              return _context9.stop();
                          }
                        }
                      }, _callee9, this);
                    }));
                    function _parseHasJSActions() {
                      return _parseHasJSActions2.apply(this, arguments);
                    }
                    return _parseHasJSActions;
                  }()
                }, {
                  key: "calculationOrderIds",
                  get: function get() {
                    var acroForm = this.catalog.acroForm;
                    if (!acroForm || !acroForm.has("CO")) {
                      return (0, _util.shadow)(this, "calculationOrderIds", null);
                    }
                    var calculationOrder = acroForm.get("CO");
                    if (!Array.isArray(calculationOrder) || calculationOrder.length === 0) {
                      return (0, _util.shadow)(this, "calculationOrderIds", null);
                    }
                    var ids = calculationOrder.filter(_primitives.isRef).map(function(ref) {
                      return ref.toString();
                    });
                    if (ids.length === 0) {
                      return (0, _util.shadow)(this, "calculationOrderIds", null);
                    }
                    return (0, _util.shadow)(this, "calculationOrderIds", ids);
                  }
                }]);
                return PDFDocument2;
              }();
              exports2.PDFDocument = PDFDocument;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.getXfaFontDict = getXfaFontDict;
              exports2.getXfaFontName = getXfaFontName;
              var _calibri_factors = __w_pdfjs_require__2(143);
              var _primitives = __w_pdfjs_require__2(135);
              var _helvetica_factors = __w_pdfjs_require__2(144);
              var _liberationsans_widths = __w_pdfjs_require__2(145);
              var _myriadpro_factors = __w_pdfjs_require__2(146);
              var _segoeui_factors = __w_pdfjs_require__2(147);
              var _core_utils = __w_pdfjs_require__2(139);
              var _fonts_utils = __w_pdfjs_require__2(148);
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              var getXFAFontMap = (0, _core_utils.getLookupTableFactory)(function(t) {
                t["MyriadPro-Regular"] = t["PdfJS-Fallback-Regular"] = {
                  name: "LiberationSans-Regular",
                  factors: _myriadpro_factors.MyriadProRegularFactors,
                  baseWidths: _liberationsans_widths.LiberationSansRegularWidths,
                  baseMapping: _liberationsans_widths.LiberationSansRegularMapping,
                  metrics: _myriadpro_factors.MyriadProRegularMetrics
                };
                t["MyriadPro-Bold"] = t["PdfJS-Fallback-Bold"] = {
                  name: "LiberationSans-Bold",
                  factors: _myriadpro_factors.MyriadProBoldFactors,
                  baseWidths: _liberationsans_widths.LiberationSansBoldWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldMapping,
                  metrics: _myriadpro_factors.MyriadProBoldMetrics
                };
                t["MyriadPro-It"] = t["MyriadPro-Italic"] = t["PdfJS-Fallback-Italic"] = {
                  name: "LiberationSans-Italic",
                  factors: _myriadpro_factors.MyriadProItalicFactors,
                  baseWidths: _liberationsans_widths.LiberationSansItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansItalicMapping,
                  metrics: _myriadpro_factors.MyriadProItalicMetrics
                };
                t["MyriadPro-BoldIt"] = t["MyriadPro-BoldItalic"] = t["PdfJS-Fallback-BoldItalic"] = {
                  name: "LiberationSans-BoldItalic",
                  factors: _myriadpro_factors.MyriadProBoldItalicFactors,
                  baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping,
                  metrics: _myriadpro_factors.MyriadProBoldItalicMetrics
                };
                t.ArialMT = t.Arial = t["Arial-Regular"] = {
                  name: "LiberationSans-Regular",
                  baseWidths: _liberationsans_widths.LiberationSansRegularWidths,
                  baseMapping: _liberationsans_widths.LiberationSansRegularMapping
                };
                t["Arial-BoldMT"] = t["Arial-Bold"] = {
                  name: "LiberationSans-Bold",
                  baseWidths: _liberationsans_widths.LiberationSansBoldWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldMapping
                };
                t["Arial-ItalicMT"] = t["Arial-Italic"] = {
                  name: "LiberationSans-Italic",
                  baseWidths: _liberationsans_widths.LiberationSansItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansItalicMapping
                };
                t["Arial-BoldItalicMT"] = t["Arial-BoldItalic"] = {
                  name: "LiberationSans-BoldItalic",
                  baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping
                };
                t["Calibri-Regular"] = {
                  name: "LiberationSans-Regular",
                  factors: _calibri_factors.CalibriRegularFactors,
                  baseWidths: _liberationsans_widths.LiberationSansRegularWidths,
                  baseMapping: _liberationsans_widths.LiberationSansRegularMapping,
                  metrics: _calibri_factors.CalibriRegularMetrics
                };
                t["Calibri-Bold"] = {
                  name: "LiberationSans-Bold",
                  factors: _calibri_factors.CalibriBoldFactors,
                  baseWidths: _liberationsans_widths.LiberationSansBoldWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldMapping,
                  metrics: _calibri_factors.CalibriBoldMetrics
                };
                t["Calibri-Italic"] = {
                  name: "LiberationSans-Italic",
                  factors: _calibri_factors.CalibriItalicFactors,
                  baseWidths: _liberationsans_widths.LiberationSansItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansItalicMapping,
                  metrics: _calibri_factors.CalibriItalicMetrics
                };
                t["Calibri-BoldItalic"] = {
                  name: "LiberationSans-BoldItalic",
                  factors: _calibri_factors.CalibriBoldItalicFactors,
                  baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping,
                  metrics: _calibri_factors.CalibriBoldItalicMetrics
                };
                t["Segoeui-Regular"] = {
                  name: "LiberationSans-Regular",
                  factors: _segoeui_factors.SegoeuiRegularFactors,
                  baseWidths: _liberationsans_widths.LiberationSansRegularWidths,
                  baseMapping: _liberationsans_widths.LiberationSansRegularMapping,
                  metrics: _segoeui_factors.SegoeuiRegularMetrics
                };
                t["Segoeui-Bold"] = {
                  name: "LiberationSans-Bold",
                  factors: _segoeui_factors.SegoeuiBoldFactors,
                  baseWidths: _liberationsans_widths.LiberationSansBoldWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldMapping,
                  metrics: _segoeui_factors.SegoeuiBoldMetrics
                };
                t["Segoeui-Italic"] = {
                  name: "LiberationSans-Italic",
                  factors: _segoeui_factors.SegoeuiItalicFactors,
                  baseWidths: _liberationsans_widths.LiberationSansItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansItalicMapping,
                  metrics: _segoeui_factors.SegoeuiItalicMetrics
                };
                t["Segoeui-BoldItalic"] = {
                  name: "LiberationSans-BoldItalic",
                  factors: _segoeui_factors.SegoeuiBoldItalicFactors,
                  baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping,
                  metrics: _segoeui_factors.SegoeuiBoldItalicMetrics
                };
                t["Helvetica-Regular"] = t.Helvetica = {
                  name: "LiberationSans-Regular",
                  factors: _helvetica_factors.HelveticaRegularFactors,
                  baseWidths: _liberationsans_widths.LiberationSansRegularWidths,
                  baseMapping: _liberationsans_widths.LiberationSansRegularMapping,
                  metrics: _helvetica_factors.HelveticaRegularMetrics
                };
                t["Helvetica-Bold"] = {
                  name: "LiberationSans-Bold",
                  factors: _helvetica_factors.HelveticaBoldFactors,
                  baseWidths: _liberationsans_widths.LiberationSansBoldWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldMapping,
                  metrics: _helvetica_factors.HelveticaBoldMetrics
                };
                t["Helvetica-Italic"] = {
                  name: "LiberationSans-Italic",
                  factors: _helvetica_factors.HelveticaItalicFactors,
                  baseWidths: _liberationsans_widths.LiberationSansItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansItalicMapping,
                  metrics: _helvetica_factors.HelveticaItalicMetrics
                };
                t["Helvetica-BoldItalic"] = {
                  name: "LiberationSans-BoldItalic",
                  factors: _helvetica_factors.HelveticaBoldItalicFactors,
                  baseWidths: _liberationsans_widths.LiberationSansBoldItalicWidths,
                  baseMapping: _liberationsans_widths.LiberationSansBoldItalicMapping,
                  metrics: _helvetica_factors.HelveticaBoldItalicMetrics
                };
              });
              function getXfaFontName(name) {
                var fontName = (0, _fonts_utils.normalizeFontName)(name);
                var fontMap = getXFAFontMap();
                return fontMap[fontName];
              }
              function getXfaFontWidths(name) {
                var info = getXfaFontName(name);
                if (!info) {
                  return null;
                }
                var baseWidths = info.baseWidths, baseMapping = info.baseMapping, factors = info.factors;
                var rescaledBaseWidths;
                if (!factors) {
                  rescaledBaseWidths = baseWidths;
                } else {
                  rescaledBaseWidths = baseWidths.map(function(w, i) {
                    return w * factors[i];
                  });
                }
                var currentCode = -2;
                var currentArray;
                var newWidths = [];
                var _iterator = _createForOfIteratorHelper(baseMapping.map(function(charUnicode, index) {
                  return [charUnicode, index];
                }).sort(function(_ref, _ref2) {
                  var _ref3 = _slicedToArray(_ref, 1), unicode1 = _ref3[0];
                  var _ref4 = _slicedToArray(_ref2, 1), unicode2 = _ref4[0];
                  return unicode1 - unicode2;
                })), _step;
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    var _step$value = _slicedToArray(_step.value, 2), unicode = _step$value[0], glyphIndex = _step$value[1];
                    if (unicode === -1) {
                      continue;
                    }
                    if (unicode === currentCode + 1) {
                      currentArray.push(rescaledBaseWidths[glyphIndex]);
                      currentCode += 1;
                    } else {
                      currentCode = unicode;
                      currentArray = [rescaledBaseWidths[glyphIndex]];
                      newWidths.push(unicode, currentArray);
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
                return newWidths;
              }
              function getXfaFontDict(name) {
                var widths = getXfaFontWidths(name);
                var dict = new _primitives.Dict(null);
                dict.set("BaseFont", _primitives.Name.get(name));
                dict.set("Type", _primitives.Name.get("Font"));
                dict.set("Subtype", _primitives.Name.get("CIDFontType2"));
                dict.set("Encoding", _primitives.Name.get("Identity-H"));
                dict.set("CIDToGIDMap", _primitives.Name.get("Identity"));
                dict.set("W", widths);
                dict.set("FirstChar", widths[0]);
                dict.set("LastChar", widths[widths.length - 2] + widths[widths.length - 1].length - 1);
                var descriptor = new _primitives.Dict(null);
                dict.set("FontDescriptor", descriptor);
                var systemInfo = new _primitives.Dict(null);
                systemInfo.set("Ordering", "Identity");
                systemInfo.set("Registry", "Adobe");
                systemInfo.set("Supplement", 0);
                dict.set("CIDSystemInfo", systemInfo);
                return dict;
              }
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.CalibriRegularMetrics = exports2.CalibriRegularFactors = exports2.CalibriItalicMetrics = exports2.CalibriItalicFactors = exports2.CalibriBoldMetrics = exports2.CalibriBoldItalicMetrics = exports2.CalibriBoldItalicFactors = exports2.CalibriBoldFactors = void 0;
              var CalibriBoldFactors = [1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.54657, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762, 0.73293, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.9121, 0.86943, 0.79795, 0.88198, 0.77958, 0.70864, 0.81055, 0.90399, 0.88653, 0.96017, 0.82577, 0.77892, 0.78257, 0.97507, 1.54657, 0.97507, 0.85284, 0.89552, 0.90176, 0.88762, 0.8785, 0.75241, 0.8785, 0.90518, 0.95015, 0.77618, 0.8785, 0.88401, 0.91916, 0.86304, 0.88401, 0.91488, 0.8785, 0.8801, 0.8785, 0.8785, 0.91343, 0.7173, 1.04106, 0.8785, 0.85075, 0.95794, 0.82616, 0.85162, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.12401, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466, 1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839, 0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.77539, 0.73293, 0.73133, 0.73133, 0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.9121, 0.86943, 0.86943, 0.86943, 0.86943, 0.86943, 0.85284, 0.87508, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892, 0.79795, 0.90807, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762, 0.8715, 0.75241, 0.90518, 0.90518, 0.90518, 0.90518, 0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.8785, 0.8801, 0.8801, 0.8801, 0.8801, 0.8801, 0.90747, 0.89049, 0.8785, 0.8785, 0.8785, 0.8785, 0.85162, 0.8785, 0.85162, 0.83908, 0.88762, 0.83908, 0.88762, 0.83908, 0.88762, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293, 0.75241, 0.87289, 0.83016, 0.88506, 0.93125, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.81921, 0.77618, 0.81921, 0.77618, 0.81921, 0.77618, 1, 1, 0.87356, 0.8785, 0.91075, 0.89608, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76229, 0.90167, 0.59526, 0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.79468, 0.91926, 0.88175, 0.70823, 0.94903, 0.9121, 0.8785, 1, 1, 0.9121, 0.8785, 0.87802, 0.88656, 0.8785, 0.86943, 0.8801, 0.86943, 0.8801, 0.86943, 0.8801, 0.87402, 0.89291, 0.77958, 0.91343, 1, 1, 0.77958, 0.91343, 0.70864, 0.7173, 0.70864, 0.7173, 0.70864, 0.7173, 0.70864, 0.7173, 1, 1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.96017, 0.95794, 0.77892, 0.85162, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492, 0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.88762, 0.77539, 0.8715, 0.87508, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70674, 0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.06303, 0.83908, 0.80352, 0.57184, 0.6965, 0.56289, 0.82001, 0.56029, 0.81235, 1.02988, 0.83908, 0.7762, 0.68156, 0.80367, 0.73133, 0.78257, 0.87356, 0.86943, 0.95958, 0.75727, 0.89019, 1.04924, 0.9121, 0.7648, 0.86943, 0.87356, 0.79795, 0.78275, 0.81055, 0.77892, 0.9762, 0.82577, 0.99819, 0.84896, 0.95958, 0.77892, 0.96108, 1.01407, 0.89049, 1.02988, 0.94211, 0.96108, 0.8936, 0.84021, 0.87842, 0.96399, 0.79109, 0.89049, 1.00813, 1.02988, 0.86077, 0.87445, 0.92099, 0.84723, 0.86513, 0.8801, 0.75638, 0.85714, 0.78216, 0.79586, 0.87965, 0.94211, 0.97747, 0.78287, 0.97926, 0.84971, 1.02988, 0.94211, 0.8801, 0.94211, 0.84971, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90264, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90518, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90548, 1, 1, 1, 1, 1, 1, 0.96017, 0.95794, 0.96017, 0.95794, 0.96017, 0.95794, 0.77892, 0.85162, 1, 1, 0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.92794, 0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71143, 1.06152, 1, 1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.93835, 0.83406, 0.91133, 0.84107, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525, 0.81499, 0.90527, 1.81055, 0.90527, 1.81055, 1.31006, 1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716, 1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.CalibriBoldFactors = CalibriBoldFactors;
              var CalibriBoldMetrics = {
                lineHeight: 1.2207,
                lineGap: 0.2207
              };
              exports2.CalibriBoldMetrics = CalibriBoldMetrics;
              var CalibriBoldItalicFactors = [1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.56239, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762, 0.71805, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.90872, 0.85938, 0.79795, 0.87068, 0.77958, 0.69766, 0.81055, 0.90399, 0.88653, 0.96068, 0.82577, 0.77892, 0.78257, 0.97507, 1.529, 0.97507, 0.85284, 0.89552, 0.90176, 0.94908, 0.86411, 0.74012, 0.86411, 0.88323, 0.95015, 0.86411, 0.86331, 0.88401, 0.91916, 0.86304, 0.88401, 0.9039, 0.86331, 0.86331, 0.86411, 0.86411, 0.90464, 0.70852, 1.04106, 0.86331, 0.84372, 0.95794, 0.82616, 0.84548, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.19129, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466, 1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839, 0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.77539, 0.71805, 0.73133, 0.73133, 0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.90872, 0.85938, 0.85938, 0.85938, 0.85938, 0.85938, 0.85284, 0.87068, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892, 0.79795, 0.90807, 0.94908, 0.94908, 0.94908, 0.94908, 0.94908, 0.94908, 0.85887, 0.74012, 0.88323, 0.88323, 0.88323, 0.88323, 0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.86331, 0.86331, 0.86331, 0.86331, 0.86331, 0.86331, 0.90747, 0.89049, 0.86331, 0.86331, 0.86331, 0.86331, 0.84548, 0.86411, 0.84548, 0.83908, 0.94908, 0.83908, 0.94908, 0.83908, 0.94908, 0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012, 0.87289, 0.79538, 0.88506, 0.92726, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.81921, 0.86411, 0.81921, 0.86411, 0.81921, 0.86411, 1, 1, 0.87356, 0.86331, 0.91075, 0.8777, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76467, 0.90167, 0.59526, 0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.77312, 0.91926, 0.88175, 0.70823, 0.94903, 0.90872, 0.86331, 1, 1, 0.90872, 0.86331, 0.86906, 0.88116, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.87402, 0.86549, 0.77958, 0.90464, 1, 1, 0.77958, 0.90464, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 1, 1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.96068, 0.95794, 0.77892, 0.84548, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492, 0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.94908, 0.77539, 0.85887, 0.87068, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70088, 0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.48387, 0.83908, 0.80352, 0.57118, 0.6965, 0.56347, 0.79179, 0.55853, 0.80346, 1.02988, 0.83908, 0.7762, 0.67174, 0.86036, 0.73133, 0.78257, 0.87356, 0.86441, 0.95958, 0.75727, 0.89019, 1.04924, 0.90872, 0.74889, 0.85938, 0.87891, 0.79795, 0.7957, 0.81055, 0.77892, 0.97447, 0.82577, 0.97466, 0.87179, 0.95958, 0.77892, 0.94252, 0.95612, 0.8753, 1.02988, 0.92733, 0.94252, 0.87411, 0.84021, 0.8728, 0.95612, 0.74081, 0.8753, 1.02189, 1.02988, 0.84814, 0.87445, 0.91822, 0.84723, 0.85668, 0.86331, 0.81344, 0.87581, 0.76422, 0.82046, 0.96057, 0.92733, 0.99375, 0.78022, 0.95452, 0.86015, 1.02988, 0.92733, 0.86331, 0.92733, 0.86015, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90631, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.88323, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85174, 1, 1, 1, 1, 1, 1, 0.96068, 0.95794, 0.96068, 0.95794, 0.96068, 0.95794, 0.77892, 0.84548, 1, 1, 0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.89807, 0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71094, 1.06152, 1, 1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.92972, 0.83406, 0.91133, 0.83326, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525, 0.81499, 0.90616, 1.81055, 0.90527, 1.81055, 1.3107, 1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716, 1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.CalibriBoldItalicFactors = CalibriBoldItalicFactors;
              var CalibriBoldItalicMetrics = {
                lineHeight: 1.2207,
                lineGap: 0.2207
              };
              exports2.CalibriBoldItalicMetrics = CalibriBoldItalicMetrics;
              var CalibriItalicFactors = [1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39543, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552, 0.72346, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89249, 0.84118, 0.77452, 0.85374, 0.75186, 0.67789, 0.79776, 0.88844, 0.85066, 0.94309, 0.77818, 0.7306, 0.76659, 1.10369, 1.38313, 1.10369, 1.06139, 0.89552, 0.8739, 0.9245, 0.9245, 0.83203, 0.9245, 0.85865, 1.09842, 0.9245, 0.9245, 1.03297, 1.07692, 0.90918, 1.03297, 0.94959, 0.9245, 0.92274, 0.9245, 0.9245, 1.02933, 0.77832, 1.20562, 0.9245, 0.8916, 0.98986, 0.86621, 0.89453, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.16359, 0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088, 1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.76318, 0.72346, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477, 0.89249, 0.84118, 0.84118, 0.84118, 0.84118, 0.84118, 0.85284, 0.84557, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452, 0.86331, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.84843, 0.83203, 0.85865, 0.85865, 0.85865, 0.85865, 0.82601, 0.82601, 0.82601, 0.82601, 0.94469, 0.9245, 0.92274, 0.92274, 0.92274, 0.92274, 0.92274, 0.90747, 0.86651, 0.9245, 0.9245, 0.9245, 0.9245, 0.89453, 0.9245, 0.89453, 0.8675, 0.9245, 0.8675, 0.9245, 0.8675, 0.9245, 0.72346, 0.83203, 0.72346, 0.83203, 0.72346, 0.83203, 0.72346, 0.83203, 0.85193, 0.8875, 0.86477, 0.99034, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.81105, 0.9245, 0.81105, 0.9245, 0.81105, 0.9245, 1, 1, 0.86275, 0.9245, 0.90872, 0.93591, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297, 0.90685, 0.82601, 0.77896, 1.05611, 0.6377, 1.07692, 1, 1, 0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.9375, 0.98156, 0.93407, 0.77261, 1.11429, 0.89249, 0.9245, 1, 1, 0.89249, 0.9245, 0.92534, 0.86698, 0.9245, 0.84118, 0.92274, 0.84118, 0.92274, 0.84118, 0.92274, 0.8667, 0.86291, 0.75186, 1.02933, 1, 1, 0.75186, 1.02933, 0.67789, 0.77832, 0.67789, 0.77832, 0.67789, 0.77832, 0.67789, 0.77832, 1, 1, 0.79776, 0.97655, 0.79776, 1.23023, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.94309, 0.98986, 0.7306, 0.89453, 0.7306, 0.76659, 0.79004, 0.76659, 0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.9245, 0.76318, 0.84843, 0.84557, 0.86651, 1, 1, 0.79776, 1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67009, 0.96334, 0.93695, 1.35191, 1.40909, 0.95161, 1.48387, 0.8675, 0.90861, 0.6192, 0.7363, 0.64824, 0.82411, 0.56321, 0.85696, 1.23516, 0.8675, 0.81552, 0.7286, 0.84134, 0.73206, 0.76659, 0.86275, 0.84369, 0.90685, 0.77892, 0.85871, 1.02638, 0.89249, 0.75828, 0.84118, 0.85984, 0.77452, 0.76466, 0.79776, 0.7306, 0.90782, 0.77818, 0.903, 0.87291, 0.90685, 0.7306, 0.99058, 1.03667, 0.94635, 1.23516, 0.9849, 0.99058, 0.92393, 0.8916, 0.942, 1.03667, 0.75026, 0.94635, 1.0297, 1.23516, 0.90918, 0.94048, 0.98217, 0.89746, 0.84153, 0.92274, 0.82507, 0.88832, 0.84438, 0.88178, 1.03525, 0.9849, 1.00225, 0.78086, 0.97248, 0.89404, 1.23516, 0.9849, 0.92274, 0.9849, 0.89404, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89693, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85865, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90933, 1, 1, 1, 1, 1, 1, 0.94309, 0.98986, 0.94309, 0.98986, 0.94309, 0.98986, 0.7306, 0.89453, 1, 1, 0.89552, 0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566, 1.2566, 0.89552, 0.89552, 1.42259, 0.68994, 1.03809, 1, 1, 1.0176, 1.0176, 1.11523, 1.4956, 2.01462, 0.97858, 0.82616, 0.91133, 0.83437, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426, 0.774, 0.90572, 1.81055, 0.90749, 1.81055, 1.28809, 1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85284, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.CalibriItalicFactors = CalibriItalicFactors;
              var CalibriItalicMetrics = {
                lineHeight: 1.2207,
                lineGap: 0.2207
              };
              exports2.CalibriItalicMetrics = CalibriItalicMetrics;
              var CalibriRegularFactors = [1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39016, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552, 0.73834, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89385, 0.85122, 0.77452, 0.86503, 0.75186, 0.68887, 0.79776, 0.88844, 0.85066, 0.94258, 0.77818, 0.7306, 0.76659, 1.10369, 1.39016, 1.10369, 1.06139, 0.89552, 0.8739, 0.86128, 0.94469, 0.8457, 0.94469, 0.89464, 1.09842, 0.84636, 0.94469, 1.03297, 1.07692, 0.90918, 1.03297, 0.95897, 0.94469, 0.9482, 0.94469, 0.94469, 1.04692, 0.78223, 1.20562, 0.94469, 0.90332, 0.98986, 0.86621, 0.90527, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.08707, 0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088, 1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.76318, 0.73834, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477, 0.89385, 0.85122, 0.85122, 0.85122, 0.85122, 0.85122, 0.85284, 0.85311, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452, 0.86331, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.8693, 0.8457, 0.89464, 0.89464, 0.89464, 0.89464, 0.82601, 0.82601, 0.82601, 0.82601, 0.94469, 0.94469, 0.9482, 0.9482, 0.9482, 0.9482, 0.9482, 0.90747, 0.86651, 0.94469, 0.94469, 0.94469, 0.94469, 0.90527, 0.94469, 0.90527, 0.8675, 0.86128, 0.8675, 0.86128, 0.8675, 0.86128, 0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.85193, 0.92454, 0.86477, 0.9921, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.81105, 0.84636, 0.81105, 0.84636, 0.81105, 0.84636, 1, 1, 0.86275, 0.94469, 0.90872, 0.95786, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297, 0.90685, 0.82601, 0.77741, 1.05611, 0.6377, 1.07692, 1, 1, 0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.90452, 0.98156, 1.11842, 0.77261, 1.11429, 0.89385, 0.94469, 1, 1, 0.89385, 0.94469, 0.95877, 0.86901, 0.94469, 0.85122, 0.9482, 0.85122, 0.9482, 0.85122, 0.9482, 0.8667, 0.90016, 0.75186, 1.04692, 1, 1, 0.75186, 1.04692, 0.68887, 0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 1, 1, 0.79776, 0.92188, 0.79776, 1.23023, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.94258, 0.98986, 0.7306, 0.90527, 0.7306, 0.76659, 0.79004, 0.76659, 0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.86128, 0.76318, 0.8693, 0.85311, 0.86651, 1, 1, 0.79776, 1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67742, 0.96334, 0.93695, 1.35191, 1.40909, 0.95161, 1.48387, 0.86686, 0.90861, 0.62267, 0.74359, 0.65649, 0.85498, 0.56963, 0.88254, 1.23516, 0.8675, 0.81552, 0.75443, 0.84503, 0.73206, 0.76659, 0.86275, 0.85122, 0.90685, 0.77892, 0.85746, 1.02638, 0.89385, 0.75657, 0.85122, 0.86275, 0.77452, 0.74171, 0.79776, 0.7306, 0.95165, 0.77818, 0.89772, 0.88831, 0.90685, 0.7306, 0.98142, 1.02191, 0.96576, 1.23516, 0.99018, 0.98142, 0.9236, 0.89258, 0.94035, 1.02191, 0.78848, 0.96576, 0.9561, 1.23516, 0.90918, 0.92578, 0.95424, 0.89746, 0.83969, 0.9482, 0.80113, 0.89442, 0.85208, 0.86155, 0.98022, 0.99018, 1.00452, 0.81209, 0.99247, 0.89181, 1.23516, 0.99018, 0.9482, 0.99018, 0.89181, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.88844, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89464, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96766, 1, 1, 1, 1, 1, 1, 0.94258, 0.98986, 0.94258, 0.98986, 0.94258, 0.98986, 0.7306, 0.90527, 1, 1, 0.89552, 0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566, 1.2566, 0.89552, 0.89552, 1.42259, 0.69043, 1.03809, 1, 1, 1.0176, 1.0176, 1.11523, 1.4956, 2.01462, 0.99331, 0.82616, 0.91133, 0.84286, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426, 0.774, 0.90527, 1.81055, 0.90527, 1.81055, 1.28809, 1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1.07185, 0.99413, 0.96334, 1.08065, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.CalibriRegularFactors = CalibriRegularFactors;
              var CalibriRegularMetrics = {
                lineHeight: 1.2207,
                lineGap: 0.2207
              };
              exports2.CalibriRegularMetrics = CalibriRegularMetrics;
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.HelveticaRegularMetrics = exports2.HelveticaRegularFactors = exports2.HelveticaItalicMetrics = exports2.HelveticaItalicFactors = exports2.HelveticaBoldMetrics = exports2.HelveticaBoldItalicMetrics = exports2.HelveticaBoldItalicFactors = exports2.HelveticaBoldFactors = void 0;
              var HelveticaBoldFactors = [0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.03374, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.00042, 0.99973, 0.99973, 1.0006, 0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.03828, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 1.00034, 0.99977, 1, 0.99997, 1.00026, 1.00078, 1.00036, 0.99973, 1.00013, 1.0006, 0.99977, 0.99977, 0.99988, 0.85148, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977, 1.00069, 1.00022, 0.99977, 1.00001, 0.99984, 1.00026, 1.00001, 1.00024, 1.00001, 0.9999, 1, 1.0006, 1.00001, 1.00041, 0.99962, 1.00026, 1.0006, 0.99995, 1.00041, 0.99942, 0.99973, 0.99927, 1.00082, 0.99902, 1.00026, 1.00087, 1.0006, 1.00069, 0.99973, 0.99867, 0.99973, 0.9993, 1.00026, 1.00049, 1.00056, 1, 0.99988, 0.99935, 0.99995, 0.99954, 1.00055, 0.99945, 1.00032, 1.0006, 0.99995, 1.00026, 0.99995, 1.00032, 1.00001, 1.00008, 0.99971, 1.00019, 0.9994, 1.00001, 1.0006, 1.00044, 0.99973, 1.00023, 1.00047, 1, 0.99942, 0.99561, 0.99989, 1.00035, 0.99977, 1.00035, 0.99977, 1.00019, 0.99944, 1.00001, 1.00021, 0.99926, 1.00035, 1.00035, 0.99942, 1.00048, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977, 1.00026, 0.99989, 1.00057, 1.00001, 0.99936, 1.00052, 1.00012, 0.99996, 1.00043, 1, 1.00035, 0.9994, 0.99976, 1.00035, 0.99973, 1.00052, 1.00041, 1.00119, 1.00037, 0.99973, 1.00002, 0.99986, 1.00041, 1.00041, 0.99902, 0.9996, 1.00034, 0.99999, 1.00026, 0.99999, 1.00026, 0.99973, 1.00052, 0.99973, 1, 0.99973, 1.00041, 1.00075, 0.9994, 1.0003, 0.99999, 1, 1.00041, 0.99955, 1, 0.99915, 0.99973, 0.99973, 1.00026, 1.00119, 0.99955, 0.99973, 1.0006, 0.99911, 1.0006, 1.00026, 0.99972, 1.00026, 0.99902, 1.00041, 0.99973, 0.99999, 1, 1, 1.00038, 1.0005, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006, 1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 0.99971, 1.00047, 1.00023, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.HelveticaBoldFactors = HelveticaBoldFactors;
              var HelveticaBoldMetrics = {
                lineHeight: 1.2,
                lineGap: 0.2
              };
              exports2.HelveticaBoldMetrics = HelveticaBoldMetrics;
              var HelveticaBoldItalicFactors = [0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.0044, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99971, 0.99973, 0.99973, 1.0006, 0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.01011, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99977, 1, 1, 1.00026, 0.99969, 0.99972, 0.99981, 0.9998, 1.0006, 0.99977, 0.99977, 1.00022, 0.91155, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977, 0.99966, 1.00022, 1.00032, 1.00001, 0.99944, 1.00026, 1.00001, 0.99968, 1.00001, 1.00047, 1, 1.0006, 1.00001, 0.99981, 1.00101, 1.00026, 1.0006, 0.99948, 0.99981, 1.00064, 0.99973, 0.99942, 1.00101, 1.00061, 1.00026, 1.00069, 1.0006, 1.00014, 0.99973, 1.01322, 0.99973, 1.00065, 1.00026, 1.00012, 0.99923, 1, 1.00064, 1.00076, 0.99948, 1.00055, 1.00063, 1.00007, 0.99943, 1.0006, 0.99948, 1.00026, 0.99948, 0.99943, 1.00001, 1.00001, 1.00029, 1.00038, 1.00035, 1.00001, 1.0006, 1.0006, 0.99973, 0.99978, 1.00001, 1.00057, 0.99989, 0.99967, 0.99964, 0.99967, 0.99977, 0.99999, 0.99977, 1.00038, 0.99977, 1.00001, 0.99973, 1.00066, 0.99967, 0.99967, 1.00041, 0.99998, 0.99999, 0.99977, 1.00022, 0.99967, 1.00001, 0.99977, 1.00026, 0.99964, 1.00031, 1.00001, 0.99999, 0.99999, 1, 1.00023, 1, 1, 0.99999, 1.00035, 1.00001, 0.99999, 0.99973, 0.99977, 0.99999, 1.00058, 0.99973, 0.99973, 0.99955, 0.9995, 1.00026, 1.00026, 1.00032, 0.99989, 1.00034, 0.99999, 1.00026, 1.00026, 1.00026, 0.99973, 0.45998, 0.99973, 1.00026, 0.99973, 1.00001, 0.99999, 0.99982, 0.99994, 0.99996, 1, 1.00042, 1.00044, 1.00029, 1.00023, 0.99973, 0.99973, 1.00026, 0.99949, 1.00002, 0.99973, 1.0006, 1.0006, 1.0006, 0.99975, 1.00026, 1.00026, 1.00032, 0.98685, 0.99973, 1.00026, 1, 1, 0.99966, 1.00044, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006, 1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1, 0.99973, 0.99971, 0.99978, 1, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00098, 1, 1, 1, 1.00049, 1, 1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.HelveticaBoldItalicFactors = HelveticaBoldItalicFactors;
              var HelveticaBoldItalicMetrics = {
                lineHeight: 1.35,
                lineGap: 0.2
              };
              exports2.HelveticaBoldItalicMetrics = HelveticaBoldItalicMetrics;
              var HelveticaItalicFactors = [0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982, 1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973, 0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.0288, 0.99977, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 0.99946, 1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973, 1.06311, 0.99973, 1.00024, 0.99973, 0.99924, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00041, 0.9998, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026, 0.89547, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 1.00001, 1, 1.00054, 0.99977, 1.00084, 1.00007, 0.99973, 1.00013, 0.99924, 1.00001, 1.00001, 0.99945, 0.91221, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001, 1.00001, 0.99999, 0.99977, 0.99933, 1.00022, 1.00054, 1.00001, 1.00065, 1.00026, 1.00001, 1.0001, 1.00001, 1.00052, 1, 1.0006, 1.00001, 0.99945, 0.99897, 0.99968, 0.99924, 1.00036, 0.99945, 0.99949, 1, 1.0006, 0.99897, 0.99918, 0.99968, 0.99911, 0.99924, 1, 0.99962, 1.01487, 1, 1.0005, 0.99973, 1.00012, 1.00043, 1, 0.99995, 0.99994, 1.00036, 0.99947, 1.00019, 1.00063, 1.00025, 0.99924, 1.00036, 0.99973, 1.00036, 1.00025, 1.00001, 1.00001, 1.00027, 1.0001, 1.00068, 1.00001, 1.0006, 1.0006, 1, 1.00008, 0.99957, 0.99972, 0.9994, 0.99954, 0.99975, 1.00051, 1.00001, 1.00019, 1.00001, 1.0001, 0.99986, 1.00001, 1.00001, 1.00038, 0.99954, 0.99954, 0.9994, 1.00066, 0.99999, 0.99977, 1.00022, 1.00054, 1.00001, 0.99977, 1.00026, 0.99975, 1.0001, 1.00001, 0.99993, 0.9995, 0.99955, 1.00016, 0.99978, 0.99974, 1.00019, 1.00022, 0.99955, 1.00053, 0.99973, 1.00089, 1.00005, 0.99967, 1.00048, 0.99973, 1.00002, 1.00034, 0.99973, 0.99973, 0.99964, 1.00006, 1.00066, 0.99947, 0.99973, 0.98894, 0.99973, 1, 0.44898, 1, 0.99946, 1, 1.00039, 1.00082, 0.99991, 0.99991, 0.99985, 1.00022, 1.00023, 1.00061, 1.00006, 0.99966, 0.99973, 0.99973, 0.99973, 1.00019, 1.0008, 1, 0.99924, 0.99924, 0.99924, 0.99983, 1.00044, 0.99973, 0.99964, 0.98332, 1, 0.99973, 1, 1, 0.99962, 0.99895, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 1.00423, 0.99925, 0.99999, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00049, 1, 1.00245, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031, 1.00003, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.HelveticaItalicFactors = HelveticaItalicFactors;
              var HelveticaItalicMetrics = {
                lineHeight: 1.35,
                lineGap: 0.2
              };
              exports2.HelveticaItalicMetrics = HelveticaItalicMetrics;
              var HelveticaRegularFactors = [0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982, 1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973, 0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.04596, 0.99977, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 1.00019, 1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973, 1.02572, 0.99973, 1.00005, 0.99973, 0.99924, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99999, 0.9998, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026, 0.84533, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99928, 1, 0.99977, 1.00013, 1.00055, 0.99947, 0.99945, 0.99941, 0.99924, 1.00001, 1.00001, 1.0004, 0.91621, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001, 1.00005, 0.99999, 0.99977, 1.00015, 1.00022, 0.99977, 1.00001, 0.99973, 1.00026, 1.00001, 1.00019, 1.00001, 0.99946, 1, 1.0006, 1.00001, 0.99978, 1.00045, 0.99973, 0.99924, 1.00023, 0.99978, 0.99966, 1, 1.00065, 1.00045, 1.00019, 0.99973, 0.99973, 0.99924, 1, 1, 0.96499, 1, 1.00055, 0.99973, 1.00008, 1.00027, 1, 0.9997, 0.99995, 1.00023, 0.99933, 1.00019, 1.00015, 1.00031, 0.99924, 1.00023, 0.99973, 1.00023, 1.00031, 1.00001, 0.99928, 1.00029, 1.00092, 1.00035, 1.00001, 1.0006, 1.0006, 1, 0.99988, 0.99975, 1, 1.00082, 0.99561, 0.9996, 1.00035, 1.00001, 0.99962, 1.00001, 1.00092, 0.99964, 1.00001, 0.99963, 0.99999, 1.00035, 1.00035, 1.00082, 0.99962, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977, 1.00026, 0.9996, 0.99967, 1.00001, 1.00034, 1.00074, 1.00054, 1.00053, 1.00063, 0.99971, 0.99962, 1.00035, 0.99975, 0.99977, 0.99973, 1.00043, 0.99953, 1.0007, 0.99915, 0.99973, 1.00008, 0.99892, 1.00073, 1.00073, 1.00114, 0.99915, 1.00073, 0.99955, 0.99973, 1.00092, 0.99973, 1, 0.99998, 1, 1.0003, 1, 1.00043, 1.00001, 0.99969, 1.0003, 1, 1.00035, 1.00001, 0.9995, 1, 1.00092, 0.99973, 0.99973, 0.99973, 1.0007, 0.9995, 1, 0.99924, 1.0006, 0.99924, 0.99972, 1.00062, 0.99973, 1.00114, 1.00073, 1, 0.99955, 1, 1, 1.00047, 0.99968, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 0.99971, 0.99925, 1.00023, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.HelveticaRegularFactors = HelveticaRegularFactors;
              var HelveticaRegularMetrics = {
                lineHeight: 1.2,
                lineGap: 0.2
              };
              exports2.HelveticaRegularMetrics = HelveticaRegularMetrics;
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.LiberationSansRegularWidths = exports2.LiberationSansRegularMapping = exports2.LiberationSansItalicWidths = exports2.LiberationSansItalicMapping = exports2.LiberationSansBoldWidths = exports2.LiberationSansBoldMapping = exports2.LiberationSansBoldItalicWidths = exports2.LiberationSansBoldItalicMapping = void 0;
              var LiberationSansBoldWidths = [365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 719, 722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 785, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278, 611, 385, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778, 611, 1e3, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556, 667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1e3, 889, 778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 465, 722, 333, 853, 906, 474, 825, 927, 838, 278, 722, 722, 601, 719, 667, 611, 722, 778, 278, 722, 667, 833, 722, 644, 778, 722, 667, 600, 611, 667, 821, 667, 809, 802, 278, 667, 615, 451, 611, 278, 582, 615, 610, 556, 606, 475, 460, 611, 541, 278, 558, 556, 612, 556, 445, 611, 766, 619, 520, 684, 446, 582, 715, 576, 753, 845, 278, 582, 611, 582, 845, 667, 669, 885, 567, 711, 667, 278, 276, 556, 1094, 1062, 875, 610, 722, 622, 719, 722, 719, 722, 567, 712, 667, 904, 626, 719, 719, 610, 702, 833, 722, 778, 719, 667, 722, 611, 622, 854, 667, 730, 703, 1005, 1019, 870, 979, 719, 711, 1031, 719, 556, 618, 615, 417, 635, 556, 709, 497, 615, 615, 500, 635, 740, 604, 611, 604, 611, 556, 490, 556, 875, 556, 615, 581, 833, 844, 729, 854, 615, 552, 854, 583, 556, 556, 611, 417, 552, 556, 278, 281, 278, 969, 906, 611, 500, 615, 556, 604, 778, 611, 487, 447, 944, 778, 944, 778, 944, 778, 667, 556, 333, 333, 556, 1e3, 1e3, 552, 278, 278, 278, 278, 500, 500, 500, 556, 556, 350, 1e3, 1e3, 240, 479, 333, 333, 604, 333, 167, 396, 556, 556, 1094, 556, 885, 489, 1115, 1e3, 768, 600, 834, 834, 834, 834, 1e3, 500, 1e3, 500, 1e3, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333, 333, 333, 333];
              exports2.LiberationSansBoldWidths = LiberationSansBoldWidths;
              var LiberationSansBoldMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
              exports2.LiberationSansBoldMapping = LiberationSansBoldMapping;
              var LiberationSansBoldItalicWidths = [365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 740, 722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 782, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278, 611, 396, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778, 611, 1e3, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556, 667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1e3, 889, 778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 722, 333, 854, 906, 473, 844, 930, 847, 278, 722, 722, 610, 671, 667, 611, 722, 778, 278, 722, 667, 833, 722, 657, 778, 718, 667, 590, 611, 667, 822, 667, 829, 781, 278, 667, 620, 479, 611, 278, 591, 620, 621, 556, 610, 479, 492, 611, 558, 278, 566, 556, 603, 556, 450, 611, 712, 605, 532, 664, 409, 591, 704, 578, 773, 834, 278, 591, 611, 591, 834, 667, 667, 886, 614, 719, 667, 278, 278, 556, 1094, 1042, 854, 622, 719, 677, 719, 722, 708, 722, 614, 722, 667, 927, 643, 719, 719, 615, 687, 833, 722, 778, 719, 667, 722, 611, 677, 781, 667, 729, 708, 979, 989, 854, 1e3, 708, 719, 1042, 729, 556, 619, 604, 534, 618, 556, 736, 510, 611, 611, 507, 622, 740, 604, 611, 611, 611, 556, 889, 556, 885, 556, 646, 583, 889, 935, 707, 854, 594, 552, 865, 589, 556, 556, 611, 469, 563, 556, 278, 278, 278, 969, 906, 611, 507, 619, 556, 611, 778, 611, 575, 467, 944, 778, 944, 778, 944, 778, 667, 556, 333, 333, 556, 1e3, 1e3, 552, 278, 278, 278, 278, 500, 500, 500, 556, 556, 350, 1e3, 1e3, 240, 479, 333, 333, 604, 333, 167, 396, 556, 556, 1104, 556, 885, 516, 1146, 1e3, 768, 600, 834, 834, 834, 834, 999, 500, 1e3, 500, 1e3, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333, 333, 333, 333];
              exports2.LiberationSansBoldItalicWidths = LiberationSansBoldItalicWidths;
              var LiberationSansBoldItalicMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
              exports2.LiberationSansBoldItalicMapping = LiberationSansBoldItalicMapping;
              var LiberationSansItalicWidths = [365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 625, 722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278, 278, 222, 278, 278, 733, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222, 556, 281, 556, 400, 556, 222, 722, 556, 722, 556, 722, 556, 615, 723, 556, 778, 556, 778, 556, 778, 556, 1e3, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 354, 611, 278, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500, 667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1e3, 889, 778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 667, 278, 789, 846, 389, 794, 865, 775, 222, 667, 667, 570, 671, 667, 611, 722, 778, 278, 667, 667, 833, 722, 648, 778, 725, 667, 600, 611, 667, 837, 667, 831, 761, 278, 667, 570, 439, 555, 222, 550, 570, 571, 500, 556, 439, 463, 555, 542, 222, 500, 492, 548, 500, 447, 556, 670, 573, 486, 603, 374, 550, 652, 546, 728, 779, 222, 550, 556, 550, 779, 667, 667, 843, 544, 708, 667, 278, 278, 500, 1066, 982, 844, 589, 715, 639, 724, 667, 651, 667, 544, 704, 667, 917, 614, 715, 715, 589, 686, 833, 722, 778, 725, 667, 722, 611, 639, 795, 667, 727, 673, 920, 923, 805, 886, 651, 694, 1022, 682, 556, 562, 522, 493, 553, 556, 688, 465, 556, 556, 472, 564, 686, 550, 556, 556, 556, 500, 833, 500, 835, 500, 572, 518, 830, 851, 621, 736, 526, 492, 752, 534, 556, 556, 556, 378, 496, 500, 222, 222, 222, 910, 828, 556, 472, 565, 500, 556, 778, 556, 492, 339, 944, 722, 944, 722, 944, 722, 667, 500, 333, 333, 556, 1e3, 1e3, 552, 222, 222, 222, 222, 333, 333, 333, 556, 556, 350, 1e3, 1e3, 188, 354, 333, 333, 500, 333, 167, 365, 556, 556, 1094, 556, 885, 323, 1083, 1e3, 768, 600, 834, 834, 834, 834, 1e3, 500, 998, 500, 1e3, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 719, 274, 549, 549, 584, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316, 328, 398, 285];
              exports2.LiberationSansItalicWidths = LiberationSansItalicWidths;
              var LiberationSansItalicMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
              exports2.LiberationSansItalicMapping = LiberationSansItalicMapping;
              var LiberationSansRegularWidths = [365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 615, 722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278, 278, 222, 278, 278, 735, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222, 556, 292, 556, 334, 556, 222, 722, 556, 722, 556, 722, 556, 604, 723, 556, 778, 556, 778, 556, 778, 556, 1e3, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 375, 611, 278, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500, 667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1e3, 889, 778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 667, 278, 784, 838, 384, 774, 855, 752, 222, 667, 667, 551, 668, 667, 611, 722, 778, 278, 667, 668, 833, 722, 650, 778, 722, 667, 618, 611, 667, 798, 667, 835, 748, 278, 667, 578, 446, 556, 222, 547, 578, 575, 500, 557, 446, 441, 556, 556, 222, 500, 500, 576, 500, 448, 556, 690, 569, 482, 617, 395, 547, 648, 525, 713, 781, 222, 547, 556, 547, 781, 667, 667, 865, 542, 719, 667, 278, 278, 500, 1057, 1010, 854, 583, 722, 635, 719, 667, 656, 667, 542, 677, 667, 923, 604, 719, 719, 583, 656, 833, 722, 778, 719, 667, 722, 611, 635, 760, 667, 740, 667, 917, 938, 792, 885, 656, 719, 1010, 722, 556, 573, 531, 365, 583, 556, 669, 458, 559, 559, 438, 583, 688, 552, 556, 542, 556, 500, 458, 500, 823, 500, 573, 521, 802, 823, 625, 719, 521, 510, 750, 542, 556, 556, 556, 365, 510, 500, 222, 278, 222, 906, 812, 556, 438, 559, 500, 552, 778, 556, 489, 411, 944, 722, 944, 722, 944, 722, 667, 500, 333, 333, 556, 1e3, 1e3, 552, 222, 222, 222, 222, 333, 333, 333, 556, 556, 350, 1e3, 1e3, 188, 354, 333, 333, 500, 333, 167, 365, 556, 556, 1094, 556, 885, 323, 1073, 1e3, 768, 600, 834, 834, 834, 834, 1e3, 500, 1e3, 500, 1e3, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 719, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316, 328, 398, 285];
              exports2.LiberationSansRegularWidths = LiberationSansRegularWidths;
              var LiberationSansRegularMapping = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
              exports2.LiberationSansRegularMapping = LiberationSansRegularMapping;
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.MyriadProRegularMetrics = exports2.MyriadProRegularFactors = exports2.MyriadProItalicMetrics = exports2.MyriadProItalicFactors = exports2.MyriadProBoldMetrics = exports2.MyriadProBoldItalicMetrics = exports2.MyriadProBoldItalicFactors = exports2.MyriadProBoldFactors = void 0;
              var MyriadProBoldFactors = [1.36898, 1, 1, 0.72706, 0.80479, 0.83734, 0.98894, 0.99793, 0.9897, 0.93884, 0.86209, 0.94292, 0.94292, 1.16661, 1.02058, 0.93582, 0.96694, 0.93582, 1.19137, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.72851, 0.78966, 0.90838, 0.83637, 0.82391, 0.96376, 0.80061, 0.86275, 0.8768, 0.95407, 1.0258, 0.73901, 0.85022, 0.83655, 1.0156, 0.95546, 0.92179, 0.87107, 0.92179, 0.82114, 0.8096, 0.89713, 0.94438, 0.95353, 0.94083, 0.91905, 0.90406, 0.9446, 0.94292, 1.18777, 0.94292, 1.02058, 0.89903, 0.90088, 0.94938, 0.97898, 0.81093, 0.97571, 0.94938, 1.024, 0.9577, 0.95933, 0.98621, 1.0474, 0.97455, 0.98981, 0.9672, 0.95933, 0.9446, 0.97898, 0.97407, 0.97646, 0.78036, 1.10208, 0.95442, 0.95298, 0.97579, 0.9332, 0.94039, 0.938, 0.80687, 1.01149, 0.80687, 1.02058, 0.80479, 0.99793, 0.99793, 0.99793, 0.99793, 1.01149, 1.00872, 0.90088, 0.91882, 1.0213, 0.8361, 1.02058, 0.62295, 0.54324, 0.89022, 1.08595, 1, 1, 0.90088, 1, 0.97455, 0.93582, 0.90088, 1, 1.05686, 0.8361, 0.99642, 0.99642, 0.99642, 0.72851, 0.90838, 0.90838, 0.90838, 0.90838, 0.90838, 0.90838, 0.868, 0.82391, 0.80061, 0.80061, 0.80061, 0.80061, 1.0258, 1.0258, 1.0258, 1.0258, 0.97484, 0.95546, 0.92179, 0.92179, 0.92179, 0.92179, 0.92179, 1.02058, 0.92179, 0.94438, 0.94438, 0.94438, 0.94438, 0.90406, 0.86958, 0.98225, 0.94938, 0.94938, 0.94938, 0.94938, 0.94938, 0.94938, 0.9031, 0.81093, 0.94938, 0.94938, 0.94938, 0.94938, 0.98621, 0.98621, 0.98621, 0.98621, 0.93969, 0.95933, 0.9446, 0.9446, 0.9446, 0.9446, 0.9446, 1.08595, 0.9446, 0.95442, 0.95442, 0.95442, 0.95442, 0.94039, 0.97898, 0.94039, 0.90838, 0.94938, 0.90838, 0.94938, 0.90838, 0.94938, 0.82391, 0.81093, 0.82391, 0.81093, 0.82391, 0.81093, 0.82391, 0.81093, 0.96376, 0.84313, 0.97484, 0.97571, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.8768, 0.9577, 0.8768, 0.9577, 0.8768, 0.9577, 1, 1, 0.95407, 0.95933, 0.97069, 0.95933, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 0.887, 1.01591, 0.73901, 1.0474, 1, 1, 0.97455, 0.83655, 0.98981, 1, 1, 0.83655, 0.73977, 0.83655, 0.73903, 0.84638, 1.033, 0.95546, 0.95933, 1, 1, 0.95546, 0.95933, 0.8271, 0.95417, 0.95933, 0.92179, 0.9446, 0.92179, 0.9446, 0.92179, 0.9446, 0.936, 0.91964, 0.82114, 0.97646, 1, 1, 0.82114, 0.97646, 0.8096, 0.78036, 0.8096, 0.78036, 1, 1, 0.8096, 0.78036, 1, 1, 0.89713, 0.77452, 0.89713, 1.10208, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94083, 0.97579, 0.90406, 0.94039, 0.90406, 0.9446, 0.938, 0.9446, 0.938, 0.9446, 0.938, 1, 0.99793, 0.90838, 0.94938, 0.868, 0.9031, 0.92179, 0.9446, 1, 1, 0.89713, 1.10208, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90989, 0.9358, 0.91945, 0.83181, 0.75261, 0.87992, 0.82976, 0.96034, 0.83689, 0.97268, 1.0078, 0.90838, 0.83637, 0.8019, 0.90157, 0.80061, 0.9446, 0.95407, 0.92436, 1.0258, 0.85022, 0.97153, 1.0156, 0.95546, 0.89192, 0.92179, 0.92361, 0.87107, 0.96318, 0.89713, 0.93704, 0.95638, 0.91905, 0.91709, 0.92796, 1.0258, 0.93704, 0.94836, 1.0373, 0.95933, 1.0078, 0.95871, 0.94836, 0.96174, 0.92601, 0.9498, 0.98607, 0.95776, 0.95933, 1.05453, 1.0078, 0.98275, 0.9314, 0.95617, 0.91701, 1.05993, 0.9446, 0.78367, 0.9553, 1, 0.86832, 1.0128, 0.95871, 0.99394, 0.87548, 0.96361, 0.86774, 1.0078, 0.95871, 0.9446, 0.95871, 0.86774, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.94083, 0.97579, 0.94083, 0.97579, 0.94083, 0.97579, 0.90406, 0.94039, 0.96694, 1, 0.89903, 1, 1, 1, 0.93582, 0.93582, 0.93582, 1, 0.908, 0.908, 0.918, 0.94219, 0.94219, 0.96544, 1, 1.285, 1, 1, 0.81079, 0.81079, 1, 1, 0.74854, 1, 1, 1, 1, 0.99793, 1, 1, 1, 0.65, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.17173, 1, 0.80535, 0.76169, 1.02058, 1.0732, 1.05486, 1, 1, 1.30692, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.16161, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.MyriadProBoldFactors = MyriadProBoldFactors;
              var MyriadProBoldMetrics = {
                lineHeight: 1.2,
                lineGap: 0.2
              };
              exports2.MyriadProBoldMetrics = MyriadProBoldMetrics;
              var MyriadProBoldItalicFactors = [1.36898, 1, 1, 0.66227, 0.80779, 0.81625, 0.97276, 0.97276, 0.97733, 0.92222, 0.83266, 0.94292, 0.94292, 1.16148, 1.02058, 0.93582, 0.96694, 0.93582, 1.17337, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.71541, 0.76813, 0.85576, 0.80591, 0.80729, 0.94299, 0.77512, 0.83655, 0.86523, 0.92222, 0.98621, 0.71743, 0.81698, 0.79726, 0.98558, 0.92222, 0.90637, 0.83809, 0.90637, 0.80729, 0.76463, 0.86275, 0.90699, 0.91605, 0.9154, 0.85308, 0.85458, 0.90531, 0.94292, 1.21296, 0.94292, 1.02058, 0.89903, 1.18616, 0.99613, 0.91677, 0.78216, 0.91677, 0.90083, 0.98796, 0.9135, 0.92168, 0.95381, 0.98981, 0.95298, 0.95381, 0.93459, 0.92168, 0.91513, 0.92004, 0.91677, 0.95077, 0.748, 1.04502, 0.91677, 0.92061, 0.94236, 0.89544, 0.89364, 0.9, 0.80687, 0.8578, 0.80687, 1.02058, 0.80779, 0.97276, 0.97276, 0.97276, 0.97276, 0.8578, 0.99973, 1.18616, 0.91339, 1.08074, 0.82891, 1.02058, 0.55509, 0.71526, 0.89022, 1.08595, 1, 1, 1.18616, 1, 0.96736, 0.93582, 1.18616, 1, 1.04864, 0.82711, 0.99043, 0.99043, 0.99043, 0.71541, 0.85576, 0.85576, 0.85576, 0.85576, 0.85576, 0.85576, 0.845, 0.80729, 0.77512, 0.77512, 0.77512, 0.77512, 0.98621, 0.98621, 0.98621, 0.98621, 0.95961, 0.92222, 0.90637, 0.90637, 0.90637, 0.90637, 0.90637, 1.02058, 0.90251, 0.90699, 0.90699, 0.90699, 0.90699, 0.85458, 0.83659, 0.94951, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613, 0.85811, 0.78216, 0.90083, 0.90083, 0.90083, 0.90083, 0.95381, 0.95381, 0.95381, 0.95381, 0.9135, 0.92168, 0.91513, 0.91513, 0.91513, 0.91513, 0.91513, 1.08595, 0.91677, 0.91677, 0.91677, 0.91677, 0.91677, 0.89364, 0.92332, 0.89364, 0.85576, 0.99613, 0.85576, 0.99613, 0.85576, 0.99613, 0.80729, 0.78216, 0.80729, 0.78216, 0.80729, 0.78216, 0.80729, 0.78216, 0.94299, 0.76783, 0.95961, 0.91677, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.86523, 0.9135, 0.86523, 0.9135, 0.86523, 0.9135, 1, 1, 0.92222, 0.92168, 0.92222, 0.92168, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.86036, 0.97096, 0.71743, 0.98981, 1, 1, 0.95298, 0.79726, 0.95381, 1, 1, 0.79726, 0.6894, 0.79726, 0.74321, 0.81691, 1.0006, 0.92222, 0.92168, 1, 1, 0.92222, 0.92168, 0.79464, 0.92098, 0.92168, 0.90637, 0.91513, 0.90637, 0.91513, 0.90637, 0.91513, 0.909, 0.87514, 0.80729, 0.95077, 1, 1, 0.80729, 0.95077, 0.76463, 0.748, 0.76463, 0.748, 1, 1, 0.76463, 0.748, 1, 1, 0.86275, 0.72651, 0.86275, 1.04502, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.9154, 0.94236, 0.85458, 0.89364, 0.85458, 0.90531, 0.9, 0.90531, 0.9, 0.90531, 0.9, 1, 0.97276, 0.85576, 0.99613, 0.845, 0.85811, 0.90251, 0.91677, 1, 1, 0.86275, 1.04502, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.00899, 1.30628, 0.85576, 0.80178, 0.66862, 0.7927, 0.69323, 0.88127, 0.72459, 0.89711, 0.95381, 0.85576, 0.80591, 0.7805, 0.94729, 0.77512, 0.90531, 0.92222, 0.90637, 0.98621, 0.81698, 0.92655, 0.98558, 0.92222, 0.85359, 0.90637, 0.90976, 0.83809, 0.94523, 0.86275, 0.83509, 0.93157, 0.85308, 0.83392, 0.92346, 0.98621, 0.83509, 0.92886, 0.91324, 0.92168, 0.95381, 0.90646, 0.92886, 0.90557, 0.86847, 0.90276, 0.91324, 0.86842, 0.92168, 0.99531, 0.95381, 0.9224, 0.85408, 0.92699, 0.86847, 1.0051, 0.91513, 0.80487, 0.93481, 1, 0.88159, 1.05214, 0.90646, 0.97355, 0.81539, 0.89398, 0.85923, 0.95381, 0.90646, 0.91513, 0.90646, 0.85923, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9154, 0.94236, 0.9154, 0.94236, 0.9154, 0.94236, 0.85458, 0.89364, 0.96694, 1, 0.89903, 1, 1, 1, 0.91782, 0.91782, 0.91782, 1, 0.896, 0.896, 0.896, 0.9332, 0.9332, 0.95973, 1, 1.26, 1, 1, 0.80479, 0.80178, 1, 1, 0.85633, 1, 1, 1, 1, 0.97276, 1, 1, 1, 0.698, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.14542, 1, 0.79199, 0.78694, 1.02058, 1.03493, 1.05486, 1, 1, 1.23026, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.20006, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.MyriadProBoldItalicFactors = MyriadProBoldItalicFactors;
              var MyriadProBoldItalicMetrics = {
                lineHeight: 1.2,
                lineGap: 0.2
              };
              exports2.MyriadProBoldItalicMetrics = MyriadProBoldItalicMetrics;
              var MyriadProItalicFactors = [1.36898, 1, 1, 0.65507, 0.84943, 0.85639, 0.88465, 0.88465, 0.86936, 0.88307, 0.86948, 0.85283, 0.85283, 1.06383, 1.02058, 0.75945, 0.9219, 0.75945, 1.17337, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.75945, 0.75945, 1.02058, 1.02058, 1.02058, 0.69046, 0.70926, 0.85158, 0.77812, 0.76852, 0.89591, 0.70466, 0.76125, 0.80094, 0.86822, 0.83864, 0.728, 0.77212, 0.79475, 0.93637, 0.87514, 0.8588, 0.76013, 0.8588, 0.72421, 0.69866, 0.77598, 0.85991, 0.80811, 0.87832, 0.78112, 0.77512, 0.8562, 1.0222, 1.18417, 1.0222, 1.27014, 0.89903, 1.15012, 0.93859, 0.94399, 0.846, 0.94399, 0.81453, 1.0186, 0.94219, 0.96017, 1.03075, 1.02175, 0.912, 1.03075, 0.96998, 0.96017, 0.93859, 0.94399, 0.94399, 0.95493, 0.746, 1.12658, 0.94578, 0.91, 0.979, 0.882, 0.882, 0.83, 0.85034, 0.83537, 0.85034, 1.02058, 0.70869, 0.88465, 0.88465, 0.88465, 0.88465, 0.83537, 0.90083, 1.15012, 0.9161, 0.94565, 0.73541, 1.02058, 0.53609, 0.69353, 0.79519, 1.08595, 1, 1, 1.15012, 1, 0.91974, 0.75945, 1.15012, 1, 0.9446, 0.73361, 0.9005, 0.9005, 0.9005, 0.62864, 0.85158, 0.85158, 0.85158, 0.85158, 0.85158, 0.85158, 0.773, 0.76852, 0.70466, 0.70466, 0.70466, 0.70466, 0.83864, 0.83864, 0.83864, 0.83864, 0.90561, 0.87514, 0.8588, 0.8588, 0.8588, 0.8588, 0.8588, 1.02058, 0.85751, 0.85991, 0.85991, 0.85991, 0.85991, 0.77512, 0.76013, 0.88075, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 0.8075, 0.846, 0.81453, 0.81453, 0.81453, 0.81453, 0.82424, 0.82424, 0.82424, 0.82424, 0.9278, 0.96017, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 1.08595, 0.8562, 0.94578, 0.94578, 0.94578, 0.94578, 0.882, 0.94578, 0.882, 0.85158, 0.93859, 0.85158, 0.93859, 0.85158, 0.93859, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846, 0.89591, 0.8544, 0.90561, 0.94399, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.80094, 0.94219, 0.80094, 0.94219, 0.80094, 0.94219, 1, 1, 0.86822, 0.96017, 0.86822, 0.96017, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 1.03075, 0.83864, 0.82424, 0.81402, 1.02738, 0.728, 1.02175, 1, 1, 0.912, 0.79475, 1.03075, 1, 1, 0.79475, 0.83911, 0.79475, 0.66266, 0.80553, 1.06676, 0.87514, 0.96017, 1, 1, 0.87514, 0.96017, 0.86865, 0.87396, 0.96017, 0.8588, 0.93859, 0.8588, 0.93859, 0.8588, 0.93859, 0.867, 0.84759, 0.72421, 0.95493, 1, 1, 0.72421, 0.95493, 0.69866, 0.746, 0.69866, 0.746, 1, 1, 0.69866, 0.746, 1, 1, 0.77598, 0.88417, 0.77598, 1.12658, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.87832, 0.979, 0.77512, 0.882, 0.77512, 0.8562, 0.83, 0.8562, 0.83, 0.8562, 0.83, 1, 0.88465, 0.85158, 0.93859, 0.773, 0.8075, 0.85751, 0.8562, 1, 1, 0.77598, 1.12658, 1.15012, 1.15012, 1.15012, 1.15012, 1.15012, 1.15313, 1.15012, 1.15012, 1.15012, 1.08106, 1.03901, 0.85158, 0.77025, 0.62264, 0.7646, 0.65351, 0.86026, 0.69461, 0.89947, 1.03075, 0.85158, 0.77812, 0.76449, 0.88836, 0.70466, 0.8562, 0.86822, 0.8588, 0.83864, 0.77212, 0.85308, 0.93637, 0.87514, 0.82352, 0.8588, 0.85701, 0.76013, 0.89058, 0.77598, 0.8156, 0.82565, 0.78112, 0.77899, 0.89386, 0.83864, 0.8156, 0.9486, 0.92388, 0.96186, 1.03075, 0.91123, 0.9486, 0.93298, 0.878, 0.93942, 0.92388, 0.84596, 0.96186, 0.95119, 1.03075, 0.922, 0.88787, 0.95829, 0.88, 0.93559, 0.93859, 0.78815, 0.93758, 1, 0.89217, 1.03737, 0.91123, 0.93969, 0.77487, 0.85769, 0.86799, 1.03075, 0.91123, 0.93859, 0.91123, 0.86799, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87832, 0.979, 0.87832, 0.979, 0.87832, 0.979, 0.77512, 0.882, 0.9219, 1, 0.89903, 1, 1, 1, 0.87321, 0.87321, 0.87321, 1, 1.027, 1.027, 1.027, 0.86847, 0.86847, 0.79121, 1, 1.124, 1, 1, 0.73572, 0.73572, 1, 1, 0.85034, 1, 1, 1, 1, 0.88465, 1, 1, 1, 0.669, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04828, 1, 0.74948, 0.75187, 1.02058, 0.98391, 1.02119, 1, 1, 1.06233, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05233, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.MyriadProItalicFactors = MyriadProItalicFactors;
              var MyriadProItalicMetrics = {
                lineHeight: 1.2,
                lineGap: 0.2
              };
              exports2.MyriadProItalicMetrics = MyriadProItalicMetrics;
              var MyriadProRegularFactors = [1.36898, 1, 1, 0.76305, 0.82784, 0.94935, 0.89364, 0.92241, 0.89073, 0.90706, 0.98472, 0.85283, 0.85283, 1.0664, 1.02058, 0.74505, 0.9219, 0.74505, 1.23456, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.74505, 0.74505, 1.02058, 1.02058, 1.02058, 0.73002, 0.72601, 0.91755, 0.8126, 0.80314, 0.92222, 0.73764, 0.79726, 0.83051, 0.90284, 0.86023, 0.74, 0.8126, 0.84869, 0.96518, 0.91115, 0.8858, 0.79761, 0.8858, 0.74498, 0.73914, 0.81363, 0.89591, 0.83659, 0.89633, 0.85608, 0.8111, 0.90531, 1.0222, 1.22736, 1.0222, 1.27014, 0.89903, 0.90088, 0.86667, 1.0231, 0.896, 1.01411, 0.90083, 1.05099, 1.00512, 0.99793, 1.05326, 1.09377, 0.938, 1.06226, 1.00119, 0.99793, 0.98714, 1.0231, 1.01231, 0.98196, 0.792, 1.19137, 0.99074, 0.962, 1.01915, 0.926, 0.942, 0.856, 0.85034, 0.92006, 0.85034, 1.02058, 0.69067, 0.92241, 0.92241, 0.92241, 0.92241, 0.92006, 0.9332, 0.90088, 0.91882, 0.93484, 0.75339, 1.02058, 0.56866, 0.54324, 0.79519, 1.08595, 1, 1, 0.90088, 1, 0.95325, 0.74505, 0.90088, 1, 0.97198, 0.75339, 0.91009, 0.91009, 0.91009, 0.66466, 0.91755, 0.91755, 0.91755, 0.91755, 0.91755, 0.91755, 0.788, 0.80314, 0.73764, 0.73764, 0.73764, 0.73764, 0.86023, 0.86023, 0.86023, 0.86023, 0.92915, 0.91115, 0.8858, 0.8858, 0.8858, 0.8858, 0.8858, 1.02058, 0.8858, 0.89591, 0.89591, 0.89591, 0.89591, 0.8111, 0.79611, 0.89713, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86936, 0.896, 0.90083, 0.90083, 0.90083, 0.90083, 0.84224, 0.84224, 0.84224, 0.84224, 0.97276, 0.99793, 0.98714, 0.98714, 0.98714, 0.98714, 0.98714, 1.08595, 0.89876, 0.99074, 0.99074, 0.99074, 0.99074, 0.942, 1.0231, 0.942, 0.91755, 0.86667, 0.91755, 0.86667, 0.91755, 0.86667, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896, 0.92222, 0.93372, 0.92915, 1.01411, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.83051, 1.00512, 0.83051, 1.00512, 0.83051, 1.00512, 1, 1, 0.90284, 0.99793, 0.90976, 0.99793, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 1.05326, 0.86023, 0.84224, 0.82873, 1.07469, 0.74, 1.09377, 1, 1, 0.938, 0.84869, 1.06226, 1, 1, 0.84869, 0.83704, 0.84869, 0.81441, 0.85588, 1.08927, 0.91115, 0.99793, 1, 1, 0.91115, 0.99793, 0.91887, 0.90991, 0.99793, 0.8858, 0.98714, 0.8858, 0.98714, 0.8858, 0.98714, 0.894, 0.91434, 0.74498, 0.98196, 1, 1, 0.74498, 0.98196, 0.73914, 0.792, 0.73914, 0.792, 1, 1, 0.73914, 0.792, 1, 1, 0.81363, 0.904, 0.81363, 1.19137, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89633, 1.01915, 0.8111, 0.942, 0.8111, 0.90531, 0.856, 0.90531, 0.856, 0.90531, 0.856, 1, 0.92241, 0.91755, 0.86667, 0.788, 0.86936, 0.8858, 0.89876, 1, 1, 0.81363, 1.19137, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90388, 1.03901, 0.92138, 0.78105, 0.7154, 0.86169, 0.80513, 0.94007, 0.82528, 0.98612, 1.06226, 0.91755, 0.8126, 0.81884, 0.92819, 0.73764, 0.90531, 0.90284, 0.8858, 0.86023, 0.8126, 0.91172, 0.96518, 0.91115, 0.83089, 0.8858, 0.87791, 0.79761, 0.89297, 0.81363, 0.88157, 0.89992, 0.85608, 0.81992, 0.94307, 0.86023, 0.88157, 0.95308, 0.98699, 0.99793, 1.06226, 0.95817, 0.95308, 0.97358, 0.928, 0.98088, 0.98699, 0.92761, 0.99793, 0.96017, 1.06226, 0.986, 0.944, 0.95978, 0.938, 0.96705, 0.98714, 0.80442, 0.98972, 1, 0.89762, 1.04552, 0.95817, 0.99007, 0.87064, 0.91879, 0.88888, 1.06226, 0.95817, 0.98714, 0.95817, 0.88888, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89633, 1.01915, 0.89633, 1.01915, 0.89633, 1.01915, 0.8111, 0.942, 0.9219, 1, 0.89903, 1, 1, 1, 0.93173, 0.93173, 0.93173, 1, 1.06304, 1.06304, 1.06904, 0.89903, 0.89903, 0.80549, 1, 1.156, 1, 1, 0.76575, 0.76575, 1, 1, 0.72458, 1, 1, 1, 1, 0.92241, 1, 1, 1, 0.619, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.07257, 1, 0.74705, 0.71119, 1.02058, 1.024, 1.02119, 1, 1, 1.1536, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05638, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.MyriadProRegularFactors = MyriadProRegularFactors;
              var MyriadProRegularMetrics = {
                lineHeight: 1.2,
                lineGap: 0.2
              };
              exports2.MyriadProRegularMetrics = MyriadProRegularMetrics;
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.SegoeuiRegularMetrics = exports2.SegoeuiRegularFactors = exports2.SegoeuiItalicMetrics = exports2.SegoeuiItalicFactors = exports2.SegoeuiBoldMetrics = exports2.SegoeuiBoldItalicMetrics = exports2.SegoeuiBoldItalicFactors = exports2.SegoeuiBoldFactors = void 0;
              var SegoeuiBoldFactors = [1.76738, 1, 1, 0.99297, 0.9824, 1.04016, 1.06497, 1.03424, 0.97529, 1.17647, 1.23203, 1.1085, 1.1085, 1.16939, 1.2107, 0.9754, 1.21408, 0.9754, 1.59578, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 0.81378, 0.81378, 1.2107, 1.2107, 1.2107, 0.71703, 0.97847, 0.97363, 0.88776, 0.8641, 1.02096, 0.79795, 0.85132, 0.914, 1.06085, 1.1406, 0.8007, 0.89858, 0.83693, 1.14889, 1.09398, 0.97489, 0.92094, 0.97489, 0.90399, 0.84041, 0.95923, 1.00135, 1, 1.06467, 0.98243, 0.90996, 0.99361, 1.1085, 1.56942, 1.1085, 1.2107, 0.74627, 0.94282, 0.96752, 1.01519, 0.86304, 1.01359, 0.97278, 1.15103, 1.01359, 0.98561, 1.02285, 1.02285, 1.00527, 1.02285, 1.0302, 0.99041, 1.0008, 1.01519, 1.01359, 1.02258, 0.79104, 1.16862, 0.99041, 0.97454, 1.02511, 0.99298, 0.96752, 0.95801, 0.94856, 1.16579, 0.94856, 1.2107, 0.9824, 1.03424, 1.03424, 1, 1.03424, 1.16579, 0.8727, 1.3871, 1.18622, 1.10818, 1.04478, 1.2107, 1.18622, 0.75155, 0.94994, 1.28826, 1.21408, 1.21408, 0.91056, 1, 0.91572, 0.9754, 0.64663, 1.18328, 1.24866, 1.04478, 1.14169, 1.15749, 1.17389, 0.71703, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.93506, 0.8641, 0.79795, 0.79795, 0.79795, 0.79795, 1.1406, 1.1406, 1.1406, 1.1406, 1.02096, 1.09398, 0.97426, 0.97426, 0.97426, 0.97426, 0.97426, 1.2107, 0.97489, 1.00135, 1.00135, 1.00135, 1.00135, 0.90996, 0.92094, 1.02798, 0.96752, 0.96752, 0.96752, 0.96752, 0.96752, 0.96752, 0.93136, 0.86304, 0.97278, 0.97278, 0.97278, 0.97278, 1.02285, 1.02285, 1.02285, 1.02285, 0.97122, 0.99041, 1, 1, 1, 1, 1, 1.28826, 1.0008, 0.99041, 0.99041, 0.99041, 0.99041, 0.96752, 1.01519, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 1.02096, 1.03057, 1.02096, 1.03517, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.914, 1.01359, 0.914, 1.01359, 0.914, 1.01359, 1, 1, 1.06085, 0.98561, 1.06085, 1.00879, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 0.97138, 1.08692, 0.8007, 1.02285, 1, 1, 1.00527, 0.83693, 1.02285, 1, 1, 0.83693, 0.9455, 0.83693, 0.90418, 0.83693, 1.13005, 1.09398, 0.99041, 1, 1, 1.09398, 0.99041, 0.96692, 1.09251, 0.99041, 0.97489, 1.0008, 0.97489, 1.0008, 0.97489, 1.0008, 0.93994, 0.97931, 0.90399, 1.02258, 1, 1, 0.90399, 1.02258, 0.84041, 0.79104, 0.84041, 0.79104, 0.84041, 0.79104, 0.84041, 0.79104, 1, 1, 0.95923, 1.07034, 0.95923, 1.16862, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.06467, 1.02511, 0.90996, 0.96752, 0.90996, 0.99361, 0.95801, 0.99361, 0.95801, 0.99361, 0.95801, 1.07733, 1.03424, 0.97363, 0.96752, 0.93506, 0.93136, 0.97489, 1.0008, 1, 1, 0.95923, 1.16862, 1.15103, 1.15103, 1.01173, 1.03959, 0.75953, 0.81378, 0.79912, 1.15103, 1.21994, 0.95161, 0.87815, 1.01149, 0.81525, 0.7676, 0.98167, 1.01134, 1.02546, 0.84097, 1.03089, 1.18102, 0.97363, 0.88776, 0.85134, 0.97826, 0.79795, 0.99361, 1.06085, 0.97489, 1.1406, 0.89858, 1.0388, 1.14889, 1.09398, 0.86039, 0.97489, 1.0595, 0.92094, 0.94793, 0.95923, 0.90996, 0.99346, 0.98243, 1.02112, 0.95493, 1.1406, 0.90996, 1.03574, 1.02597, 1.0008, 1.18102, 1.06628, 1.03574, 1.0192, 1.01932, 1.00886, 0.97531, 1.0106, 1.0008, 1.13189, 1.18102, 1.02277, 0.98683, 1.0016, 0.99561, 1.07237, 1.0008, 0.90434, 0.99921, 0.93803, 0.8965, 1.23085, 1.06628, 1.04983, 0.96268, 1.0499, 0.98439, 1.18102, 1.06628, 1.0008, 1.06628, 0.98439, 0.79795, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.09466, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.97278, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.02065, 1, 1, 1, 1, 1, 1, 1.06467, 1.02511, 1.06467, 1.02511, 1.06467, 1.02511, 0.90996, 0.96752, 1, 1.21408, 0.89903, 1, 1, 0.75155, 1.04394, 1.04394, 1.04394, 1.04394, 0.98633, 0.98633, 0.98633, 0.73047, 0.73047, 1.20642, 0.91211, 1.25635, 1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.12454, 0.93503, 1.03424, 1.19687, 1.03424, 1, 1, 1, 0.771, 1, 1, 1.15749, 1.15749, 1.15749, 1.10948, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1, 1, 1.16897, 1, 0.96085, 0.90137, 1.2107, 1.18416, 1.13973, 0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21172, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18874, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.09193, 1.09193, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.SegoeuiBoldFactors = SegoeuiBoldFactors;
              var SegoeuiBoldMetrics = {
                lineHeight: 1.33008,
                lineGap: 0
              };
              exports2.SegoeuiBoldMetrics = SegoeuiBoldMetrics;
              var SegoeuiBoldItalicFactors = [1.76738, 1, 1, 0.98946, 1.03959, 1.04016, 1.02809, 1.036, 0.97639, 1.10953, 1.23203, 1.11144, 1.11144, 1.16939, 1.21237, 0.9754, 1.21261, 0.9754, 1.59754, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 0.81378, 0.81378, 1.21237, 1.21237, 1.21237, 0.73541, 0.97847, 0.97363, 0.89723, 0.87897, 1.0426, 0.79429, 0.85292, 0.91149, 1.05815, 1.1406, 0.79631, 0.90128, 0.83853, 1.04396, 1.10615, 0.97552, 0.94436, 0.97552, 0.88641, 0.80527, 0.96083, 1.00135, 1, 1.06777, 0.9817, 0.91142, 0.99361, 1.11144, 1.57293, 1.11144, 1.21237, 0.74627, 1.31818, 1.06585, 0.97042, 0.83055, 0.97042, 0.93503, 1.1261, 0.97042, 0.97922, 1.14236, 0.94552, 1.01054, 1.14236, 1.02471, 0.97922, 0.94165, 0.97042, 0.97042, 1.0276, 0.78929, 1.1261, 0.97922, 0.95874, 1.02197, 0.98507, 0.96752, 0.97168, 0.95107, 1.16579, 0.95107, 1.21237, 1.03959, 1.036, 1.036, 1, 1.036, 1.16579, 0.87357, 1.31818, 1.18754, 1.26781, 1.05356, 1.21237, 1.18622, 0.79487, 0.94994, 1.29004, 1.24047, 1.24047, 1.31818, 1, 0.91484, 0.9754, 1.31818, 1.1349, 1.24866, 1.05356, 1.13934, 1.15574, 1.17389, 0.73541, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.94385, 0.87897, 0.79429, 0.79429, 0.79429, 0.79429, 1.1406, 1.1406, 1.1406, 1.1406, 1.0426, 1.10615, 0.97552, 0.97552, 0.97552, 0.97552, 0.97552, 1.21237, 0.97552, 1.00135, 1.00135, 1.00135, 1.00135, 0.91142, 0.94436, 0.98721, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585, 0.96705, 0.83055, 0.93503, 0.93503, 0.93503, 0.93503, 1.14236, 1.14236, 1.14236, 1.14236, 0.93125, 0.97922, 0.94165, 0.94165, 0.94165, 0.94165, 0.94165, 1.29004, 0.94165, 0.97922, 0.97922, 0.97922, 0.97922, 0.96752, 0.97042, 0.96752, 0.97363, 1.06585, 0.97363, 1.06585, 0.97363, 1.06585, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055, 1.0426, 1.0033, 1.0426, 0.97042, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.91149, 0.97042, 0.91149, 0.97042, 0.91149, 0.97042, 1, 1, 1.05815, 0.97922, 1.05815, 0.97922, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 0.97441, 1.04302, 0.79631, 1.01582, 1, 1, 1.01054, 0.83853, 1.14236, 1, 1, 0.83853, 1.09125, 0.83853, 0.90418, 0.83853, 1.19508, 1.10615, 0.97922, 1, 1, 1.10615, 0.97922, 1.01034, 1.10466, 0.97922, 0.97552, 0.94165, 0.97552, 0.94165, 0.97552, 0.94165, 0.91602, 0.91981, 0.88641, 1.0276, 1, 1, 0.88641, 1.0276, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 1, 1, 0.96083, 1.05403, 0.95923, 1.16862, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.06777, 1.02197, 0.91142, 0.96752, 0.91142, 0.99361, 0.97168, 0.99361, 0.97168, 0.99361, 0.97168, 1.23199, 1.036, 0.97363, 1.06585, 0.94385, 0.96705, 0.97552, 0.94165, 1, 1, 0.96083, 1.1261, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 0.95161, 1.27126, 1.00811, 0.83284, 0.77702, 0.99137, 0.95253, 1.0347, 0.86142, 1.07205, 1.14236, 0.97363, 0.89723, 0.86869, 1.09818, 0.79429, 0.99361, 1.05815, 0.97552, 1.1406, 0.90128, 1.06662, 1.04396, 1.10615, 0.84918, 0.97552, 1.04694, 0.94436, 0.98015, 0.96083, 0.91142, 1.00356, 0.9817, 1.01945, 0.98999, 1.1406, 0.91142, 1.04961, 0.9898, 1.00639, 1.14236, 1.07514, 1.04961, 0.99607, 1.02897, 1.008, 0.9898, 0.95134, 1.00639, 1.11121, 1.14236, 1.00518, 0.97981, 1.02186, 1, 1.08578, 0.94165, 0.99314, 0.98387, 0.93028, 0.93377, 1.35125, 1.07514, 1.10687, 0.93491, 1.04232, 1.00351, 1.14236, 1.07514, 0.94165, 1.07514, 1.00351, 0.79429, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.09097, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.93503, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96609, 1, 1, 1, 1, 1, 1, 1.06777, 1.02197, 1.06777, 1.02197, 1.06777, 1.02197, 0.91142, 0.96752, 1, 1.21261, 0.89903, 1, 1, 0.75155, 1.04745, 1.04745, 1.04745, 1.04394, 0.98633, 0.98633, 0.98633, 0.72959, 0.72959, 1.20502, 0.91406, 1.26514, 1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.09125, 0.93327, 1.03336, 1.16541, 1.036, 1, 1, 1, 0.771, 1, 1, 1.15574, 1.15574, 1.15574, 1.15574, 0.86364, 0.94434, 0.86279, 0.94434, 0.86224, 1, 1, 1.16798, 1, 0.96085, 0.90068, 1.21237, 1.18416, 1.13904, 0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21339, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18775, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.13269, 1.13269, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.SegoeuiBoldItalicFactors = SegoeuiBoldItalicFactors;
              var SegoeuiBoldItalicMetrics = {
                lineHeight: 1.33008,
                lineGap: 0
              };
              exports2.SegoeuiBoldItalicMetrics = SegoeuiBoldItalicMetrics;
              var SegoeuiItalicFactors = [1.76738, 1, 1, 0.98946, 1.14763, 1.05365, 1.06234, 0.96927, 0.92586, 1.15373, 1.18414, 0.91349, 0.91349, 1.07403, 1.17308, 0.78383, 1.20088, 0.78383, 1.42531, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.78383, 0.78383, 1.17308, 1.17308, 1.17308, 0.77349, 0.94565, 0.94729, 0.85944, 0.88506, 0.9858, 0.74817, 0.80016, 0.88449, 0.98039, 0.95782, 0.69238, 0.89898, 0.83231, 0.98183, 1.03989, 0.96924, 0.86237, 0.96924, 0.80595, 0.74524, 0.86091, 0.95402, 0.94143, 0.98448, 0.8858, 0.83089, 0.93285, 1.0949, 1.39016, 1.0949, 1.45994, 0.74627, 1.04839, 0.97454, 0.97454, 0.87207, 0.97454, 0.87533, 1.06151, 0.97454, 1.00176, 1.16484, 1.08132, 0.98047, 1.16484, 1.02989, 1.01054, 0.96225, 0.97454, 0.97454, 1.06598, 0.79004, 1.16344, 1.00351, 0.94629, 0.9973, 0.91016, 0.96777, 0.9043, 0.91082, 0.92481, 0.91082, 1.17308, 0.95748, 0.96927, 0.96927, 1, 0.96927, 0.92481, 0.80597, 1.04839, 1.23393, 1.1781, 0.9245, 1.17308, 1.20808, 0.63218, 0.94261, 1.24822, 1.09971, 1.09971, 1.04839, 1, 0.85273, 0.78032, 1.04839, 1.09971, 1.22326, 0.9245, 1.09836, 1.13525, 1.15222, 0.70424, 0.94729, 0.94729, 0.94729, 0.94729, 0.94729, 0.94729, 0.85498, 0.88506, 0.74817, 0.74817, 0.74817, 0.74817, 0.95782, 0.95782, 0.95782, 0.95782, 0.9858, 1.03989, 0.96924, 0.96924, 0.96924, 0.96924, 0.96924, 1.17308, 0.96924, 0.95402, 0.95402, 0.95402, 0.95402, 0.83089, 0.86237, 0.88409, 0.97454, 0.97454, 0.97454, 0.97454, 0.97454, 0.97454, 0.92916, 0.87207, 0.87533, 0.87533, 0.87533, 0.87533, 0.93146, 0.93146, 0.93146, 0.93146, 0.93854, 1.01054, 0.96225, 0.96225, 0.96225, 0.96225, 0.96225, 1.24822, 0.8761, 1.00351, 1.00351, 1.00351, 1.00351, 0.96777, 0.97454, 0.96777, 0.94729, 0.97454, 0.94729, 0.97454, 0.94729, 0.97454, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506, 0.87207, 0.9858, 0.95391, 0.9858, 0.97454, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.88449, 0.97454, 0.88449, 0.97454, 0.88449, 0.97454, 1, 1, 0.98039, 1.00176, 0.98039, 1.00176, 0.95782, 0.93146, 0.95782, 0.93146, 0.95782, 0.93146, 0.95782, 1.16484, 0.95782, 0.93146, 0.84421, 1.12761, 0.69238, 1.08132, 1, 1, 0.98047, 0.83231, 1.16484, 1, 1, 0.84723, 1.04861, 0.84723, 0.78755, 0.83231, 1.23736, 1.03989, 1.01054, 1, 1, 1.03989, 1.01054, 0.9857, 1.03849, 1.01054, 0.96924, 0.96225, 0.96924, 0.96225, 0.96924, 0.96225, 0.92383, 0.90171, 0.80595, 1.06598, 1, 1, 0.80595, 1.06598, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004, 1, 1, 0.86091, 1.02759, 0.85771, 1.16344, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.98448, 0.9973, 0.83089, 0.96777, 0.83089, 0.93285, 0.9043, 0.93285, 0.9043, 0.93285, 0.9043, 1.31868, 0.96927, 0.94729, 0.97454, 0.85498, 0.92916, 0.96924, 0.8761, 1, 1, 0.86091, 1.16344, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 0.81965, 0.81965, 0.94729, 0.78032, 0.71022, 0.90883, 0.84171, 0.99877, 0.77596, 1.05734, 1.2, 0.94729, 0.85944, 0.82791, 0.9607, 0.74817, 0.93285, 0.98039, 0.96924, 0.95782, 0.89898, 0.98316, 0.98183, 1.03989, 0.78614, 0.96924, 0.97642, 0.86237, 0.86075, 0.86091, 0.83089, 0.90082, 0.8858, 0.97296, 1.01284, 0.95782, 0.83089, 1.0976, 1.04, 1.03342, 1.2, 1.0675, 1.0976, 0.98205, 1.03809, 1.05097, 1.04, 0.95364, 1.03342, 1.05401, 1.2, 1.02148, 1.0119, 1.04724, 1.0127, 1.02732, 0.96225, 0.8965, 0.97783, 0.93574, 0.94818, 1.30679, 1.0675, 1.11826, 0.99821, 1.0557, 1.0326, 1.2, 1.0675, 0.96225, 1.0675, 1.0326, 0.74817, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03754, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87533, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.98705, 1, 1, 1, 1, 1, 1, 0.98448, 0.9973, 0.98448, 0.9973, 0.98448, 0.9973, 0.83089, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155, 0.94945, 0.94945, 0.94945, 0.94945, 1.12317, 1.12317, 1.12317, 0.67603, 0.67603, 1.15621, 0.73584, 1.21191, 1.22135, 1.06483, 0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87709, 0.96927, 1.01473, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.09836, 1.09836, 1.09836, 1.01522, 0.86321, 0.94434, 0.8649, 0.94434, 0.86182, 1, 1, 1.083, 1, 0.91578, 0.86438, 1.17308, 1.18416, 1.14589, 0.69825, 0.97622, 1.96791, 1.24822, 1.24822, 1.17308, 1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.17984, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.10742, 1.10742, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.SegoeuiItalicFactors = SegoeuiItalicFactors;
              var SegoeuiItalicMetrics = {
                lineHeight: 1.33008,
                lineGap: 0
              };
              exports2.SegoeuiItalicMetrics = SegoeuiItalicMetrics;
              var SegoeuiRegularFactors = [1.76738, 1, 1, 0.98594, 1.02285, 1.10454, 1.06234, 0.96927, 0.92037, 1.19985, 1.2046, 0.90616, 0.90616, 1.07152, 1.1714, 0.78032, 1.20088, 0.78032, 1.40246, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.78032, 0.78032, 1.1714, 1.1714, 1.1714, 0.80597, 0.94084, 0.96706, 0.85944, 0.85734, 0.97093, 0.75842, 0.79936, 0.88198, 0.9831, 0.95782, 0.71387, 0.86969, 0.84636, 1.07796, 1.03584, 0.96924, 0.83968, 0.96924, 0.82826, 0.79649, 0.85771, 0.95132, 0.93119, 0.98965, 0.88433, 0.8287, 0.93365, 1.08612, 1.3638, 1.08612, 1.45786, 0.74627, 0.80499, 0.91484, 1.05707, 0.92383, 1.05882, 0.9403, 1.12654, 1.05882, 1.01756, 1.09011, 1.09011, 0.99414, 1.09011, 1.034, 1.01756, 1.05356, 1.05707, 1.05882, 1.04399, 0.84863, 1.21968, 1.01756, 0.95801, 1.00068, 0.91797, 0.96777, 0.9043, 0.90351, 0.92105, 0.90351, 1.1714, 0.85337, 0.96927, 0.96927, 0.99912, 0.96927, 0.92105, 0.80597, 1.2434, 1.20808, 1.05937, 0.90957, 1.1714, 1.20808, 0.75155, 0.94261, 1.24644, 1.09971, 1.09971, 0.84751, 1, 0.85273, 0.78032, 0.61584, 1.05425, 1.17914, 0.90957, 1.08665, 1.11593, 1.14169, 0.73381, 0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.86035, 0.85734, 0.75842, 0.75842, 0.75842, 0.75842, 0.95782, 0.95782, 0.95782, 0.95782, 0.97093, 1.03584, 0.96924, 0.96924, 0.96924, 0.96924, 0.96924, 1.1714, 0.96924, 0.95132, 0.95132, 0.95132, 0.95132, 0.8287, 0.83968, 0.89049, 0.91484, 0.91484, 0.91484, 0.91484, 0.91484, 0.91484, 0.93575, 0.92383, 0.9403, 0.9403, 0.9403, 0.9403, 0.8717, 0.8717, 0.8717, 0.8717, 1.00527, 1.01756, 1.05356, 1.05356, 1.05356, 1.05356, 1.05356, 1.24644, 0.95923, 1.01756, 1.01756, 1.01756, 1.01756, 0.96777, 1.05707, 0.96777, 0.96706, 0.91484, 0.96706, 0.91484, 0.96706, 0.91484, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734, 0.92383, 0.97093, 1.0969, 0.97093, 1.05882, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.88198, 1.05882, 0.88198, 1.05882, 0.88198, 1.05882, 1, 1, 0.9831, 1.01756, 0.9831, 1.01756, 0.95782, 0.8717, 0.95782, 0.8717, 0.95782, 0.8717, 0.95782, 1.09011, 0.95782, 0.8717, 0.84784, 1.11551, 0.71387, 1.09011, 1, 1, 0.99414, 0.84636, 1.09011, 1, 1, 0.84636, 1.0536, 0.84636, 0.94298, 0.84636, 1.23297, 1.03584, 1.01756, 1, 1, 1.03584, 1.01756, 1.00323, 1.03444, 1.01756, 0.96924, 1.05356, 0.96924, 1.05356, 0.96924, 1.05356, 0.93066, 0.98293, 0.82826, 1.04399, 1, 1, 0.82826, 1.04399, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863, 1, 1, 0.85771, 1.17318, 0.85771, 1.21968, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.98965, 1.00068, 0.8287, 0.96777, 0.8287, 0.93365, 0.9043, 0.93365, 0.9043, 0.93365, 0.9043, 1.08571, 0.96927, 0.96706, 0.91484, 0.86035, 0.93575, 0.96924, 0.95923, 1, 1, 0.85771, 1.21968, 1.11437, 1.11437, 0.93109, 0.91202, 0.60411, 0.84164, 0.55572, 1.01173, 0.97361, 0.81818, 0.81818, 0.96635, 0.78032, 0.72727, 0.92366, 0.98601, 1.03405, 0.77968, 1.09799, 1.2, 0.96706, 0.85944, 0.85638, 0.96491, 0.75842, 0.93365, 0.9831, 0.96924, 0.95782, 0.86969, 0.94152, 1.07796, 1.03584, 0.78437, 0.96924, 0.98715, 0.83968, 0.83491, 0.85771, 0.8287, 0.94492, 0.88433, 0.9287, 1.0098, 0.95782, 0.8287, 1.0625, 0.98248, 1.03424, 1.2, 1.01071, 1.0625, 0.95246, 1.03809, 1.04912, 0.98248, 1.00221, 1.03424, 1.05443, 1.2, 1.04785, 0.99609, 1.00169, 1.05176, 0.99346, 1.05356, 0.9087, 1.03004, 0.95542, 0.93117, 1.23362, 1.01071, 1.07831, 1.02512, 1.05205, 1.03502, 1.2, 1.01071, 1.05356, 1.01071, 1.03502, 0.75842, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03719, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9403, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04021, 1, 1, 1, 1, 1, 1, 0.98965, 1.00068, 0.98965, 1.00068, 0.98965, 1.00068, 0.8287, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155, 1.03077, 1.03077, 1.03077, 1.03077, 1.13196, 1.13196, 1.13196, 0.67428, 0.67428, 1.16039, 0.73291, 1.20996, 1.22135, 1.06483, 0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87796, 0.96927, 1.01518, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.10539, 1.10539, 1.11358, 1.06967, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1, 1, 1.083, 1, 0.91578, 0.86507, 1.1714, 1.18416, 1.14589, 0.69825, 0.97622, 1.9697, 1.24822, 1.24822, 1.17238, 1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18083, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.10938, 1.10938, 1, 1, 1, 1.05425, 1.09971, 1.09971, 1.09971, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
              exports2.SegoeuiRegularFactors = SegoeuiRegularFactors;
              var SegoeuiRegularMetrics = {
                lineHeight: 1.33008,
                lineGap: 0
              };
              exports2.SegoeuiRegularMetrics = SegoeuiRegularMetrics;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.SEAC_ANALYSIS_ENABLED = exports2.MacStandardGlyphOrdering = exports2.FontFlags = void 0;
              exports2.getFontType = getFontType;
              exports2.normalizeFontName = normalizeFontName;
              exports2.recoverGlyphName = recoverGlyphName;
              exports2.type1FontGlyphMapping = type1FontGlyphMapping;
              var _util = __w_pdfjs_require__2(4);
              var _encodings = __w_pdfjs_require__2(149);
              var _glyphlist = __w_pdfjs_require__2(150);
              var _unicode = __w_pdfjs_require__2(151);
              var SEAC_ANALYSIS_ENABLED = true;
              exports2.SEAC_ANALYSIS_ENABLED = SEAC_ANALYSIS_ENABLED;
              var FontFlags = {
                FixedPitch: 1,
                Serif: 2,
                Symbolic: 4,
                Script: 8,
                Nonsymbolic: 32,
                Italic: 64,
                AllCap: 65536,
                SmallCap: 131072,
                ForceBold: 262144
              };
              exports2.FontFlags = FontFlags;
              var MacStandardGlyphOrdering = [".notdef", ".null", "nonmarkingreturn", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "nonbreakingspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idotaccent", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dcroat"];
              exports2.MacStandardGlyphOrdering = MacStandardGlyphOrdering;
              function getFontType(type, subtype) {
                var isStandardFont = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                switch (type) {
                  case "Type1":
                    if (isStandardFont) {
                      return _util.FontType.TYPE1STANDARD;
                    }
                    return subtype === "Type1C" ? _util.FontType.TYPE1C : _util.FontType.TYPE1;
                  case "CIDFontType0":
                    return subtype === "CIDFontType0C" ? _util.FontType.CIDFONTTYPE0C : _util.FontType.CIDFONTTYPE0;
                  case "OpenType":
                    return _util.FontType.OPENTYPE;
                  case "TrueType":
                    return _util.FontType.TRUETYPE;
                  case "CIDFontType2":
                    return _util.FontType.CIDFONTTYPE2;
                  case "MMType1":
                    return _util.FontType.MMTYPE1;
                  case "Type0":
                    return _util.FontType.TYPE0;
                  default:
                    return _util.FontType.UNKNOWN;
                }
              }
              function recoverGlyphName(name, glyphsUnicodeMap) {
                if (glyphsUnicodeMap[name] !== void 0) {
                  return name;
                }
                var unicode = (0, _unicode.getUnicodeForGlyph)(name, glyphsUnicodeMap);
                if (unicode !== -1) {
                  for (var key in glyphsUnicodeMap) {
                    if (glyphsUnicodeMap[key] === unicode) {
                      return key;
                    }
                  }
                }
                (0, _util.info)("Unable to recover a standard glyph name for: " + name);
                return name;
              }
              function type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {
                var charCodeToGlyphId = /* @__PURE__ */ Object.create(null);
                var glyphId, charCode, baseEncoding;
                var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
                if (properties.isInternalFont) {
                  baseEncoding = builtInEncoding;
                  for (charCode = 0; charCode < baseEncoding.length; charCode++) {
                    glyphId = glyphNames.indexOf(baseEncoding[charCode]);
                    if (glyphId >= 0) {
                      charCodeToGlyphId[charCode] = glyphId;
                    } else {
                      charCodeToGlyphId[charCode] = 0;
                    }
                  }
                } else if (properties.baseEncodingName) {
                  baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);
                  for (charCode = 0; charCode < baseEncoding.length; charCode++) {
                    glyphId = glyphNames.indexOf(baseEncoding[charCode]);
                    if (glyphId >= 0) {
                      charCodeToGlyphId[charCode] = glyphId;
                    } else {
                      charCodeToGlyphId[charCode] = 0;
                    }
                  }
                } else if (isSymbolicFont) {
                  for (charCode in builtInEncoding) {
                    charCodeToGlyphId[charCode] = builtInEncoding[charCode];
                  }
                } else {
                  baseEncoding = _encodings.StandardEncoding;
                  for (charCode = 0; charCode < baseEncoding.length; charCode++) {
                    glyphId = glyphNames.indexOf(baseEncoding[charCode]);
                    if (glyphId >= 0) {
                      charCodeToGlyphId[charCode] = glyphId;
                    } else {
                      charCodeToGlyphId[charCode] = 0;
                    }
                  }
                }
                var differences = properties.differences;
                var glyphsUnicodeMap;
                if (differences) {
                  for (charCode in differences) {
                    var glyphName = differences[charCode];
                    glyphId = glyphNames.indexOf(glyphName);
                    if (glyphId === -1) {
                      if (!glyphsUnicodeMap) {
                        glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
                      }
                      var standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);
                      if (standardGlyphName !== glyphName) {
                        glyphId = glyphNames.indexOf(standardGlyphName);
                      }
                    }
                    if (glyphId >= 0) {
                      charCodeToGlyphId[charCode] = glyphId;
                    } else {
                      charCodeToGlyphId[charCode] = 0;
                    }
                  }
                }
                return charCodeToGlyphId;
              }
              function normalizeFontName(name) {
                return name.replace(/[,_]/g, "-").replace(/\s/g, "");
              }
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.ZapfDingbatsEncoding = exports2.WinAnsiEncoding = exports2.SymbolSetEncoding = exports2.StandardEncoding = exports2.MacRomanEncoding = exports2.ExpertEncoding = void 0;
              exports2.getEncoding = getEncoding;
              var ExpertEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "", "", "", "isuperior", "", "", "lsuperior", "msuperior", "nsuperior", "osuperior", "", "", "rsuperior", "ssuperior", "tsuperior", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdownsmall", "centoldstyle", "Lslashsmall", "", "", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "", "Dotaccentsmall", "", "", "Macronsmall", "", "", "figuredash", "hypheninferior", "", "", "Ogoneksmall", "Ringsmall", "Cedillasmall", "", "", "", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"];
              exports2.ExpertEncoding = ExpertEncoding;
              var MacExpertEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "centoldstyle", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "", "threequartersemdash", "", "questionsmall", "", "", "", "", "Ethsmall", "", "", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "", "", "", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hypheninferior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "asuperior", "centsuperior", "", "", "", "", "Aacutesmall", "Agravesmall", "Acircumflexsmall", "Adieresissmall", "Atildesmall", "Aringsmall", "Ccedillasmall", "Eacutesmall", "Egravesmall", "Ecircumflexsmall", "Edieresissmall", "Iacutesmall", "Igravesmall", "Icircumflexsmall", "Idieresissmall", "Ntildesmall", "Oacutesmall", "Ogravesmall", "Ocircumflexsmall", "Odieresissmall", "Otildesmall", "Uacutesmall", "Ugravesmall", "Ucircumflexsmall", "Udieresissmall", "", "eightsuperior", "fourinferior", "threeinferior", "sixinferior", "eightinferior", "seveninferior", "Scaronsmall", "", "centinferior", "twoinferior", "", "Dieresissmall", "", "Caronsmall", "osuperior", "fiveinferior", "", "commainferior", "periodinferior", "Yacutesmall", "", "dollarinferior", "", "", "Thornsmall", "", "nineinferior", "zeroinferior", "Zcaronsmall", "AEsmall", "Oslashsmall", "questiondownsmall", "oneinferior", "Lslashsmall", "", "", "", "", "", "", "Cedillasmall", "", "", "", "", "", "OEsmall", "figuredash", "hyphensuperior", "", "", "", "", "exclamdownsmall", "", "Ydieresissmall", "", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "ninesuperior", "zerosuperior", "", "esuperior", "rsuperior", "tsuperior", "", "", "isuperior", "ssuperior", "dsuperior", "", "", "", "", "", "lsuperior", "Ogoneksmall", "Brevesmall", "Macronsmall", "bsuperior", "nsuperior", "msuperior", "commasuperior", "periodsuperior", "Dotaccentsmall", "Ringsmall", "", "", "", ""];
              var MacRomanEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "space", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron"];
              exports2.MacRomanEncoding = MacRomanEncoding;
              var StandardEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "", "endash", "dagger", "daggerdbl", "periodcentered", "", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "", "questiondown", "", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "", "ring", "cedilla", "", "hungarumlaut", "ogonek", "caron", "emdash", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AE", "", "ordfeminine", "", "", "", "", "Lslash", "Oslash", "OE", "ordmasculine", "", "", "", "", "", "ae", "", "", "", "dotlessi", "", "", "lslash", "oslash", "oe", "germandbls", "", "", "", ""];
              exports2.StandardEncoding = StandardEncoding;
              var WinAnsiEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "bullet", "Euro", "bullet", "quotesinglbase", "florin", "quotedblbase", "ellipsis", "dagger", "daggerdbl", "circumflex", "perthousand", "Scaron", "guilsinglleft", "OE", "bullet", "Zcaron", "bullet", "bullet", "quoteleft", "quoteright", "quotedblleft", "quotedblright", "bullet", "endash", "emdash", "tilde", "trademark", "scaron", "guilsinglright", "oe", "bullet", "zcaron", "Ydieresis", "space", "exclamdown", "cent", "sterling", "currency", "yen", "brokenbar", "section", "dieresis", "copyright", "ordfeminine", "guillemotleft", "logicalnot", "hyphen", "registered", "macron", "degree", "plusminus", "twosuperior", "threesuperior", "acute", "mu", "paragraph", "periodcentered", "cedilla", "onesuperior", "ordmasculine", "guillemotright", "onequarter", "onehalf", "threequarters", "questiondown", "Agrave", "Aacute", "Acircumflex", "Atilde", "Adieresis", "Aring", "AE", "Ccedilla", "Egrave", "Eacute", "Ecircumflex", "Edieresis", "Igrave", "Iacute", "Icircumflex", "Idieresis", "Eth", "Ntilde", "Ograve", "Oacute", "Ocircumflex", "Otilde", "Odieresis", "multiply", "Oslash", "Ugrave", "Uacute", "Ucircumflex", "Udieresis", "Yacute", "Thorn", "germandbls", "agrave", "aacute", "acircumflex", "atilde", "adieresis", "aring", "ae", "ccedilla", "egrave", "eacute", "ecircumflex", "edieresis", "igrave", "iacute", "icircumflex", "idieresis", "eth", "ntilde", "ograve", "oacute", "ocircumflex", "otilde", "odieresis", "divide", "oslash", "ugrave", "uacute", "ucircumflex", "udieresis", "yacute", "thorn", "ydieresis"];
              exports2.WinAnsiEncoding = WinAnsiEncoding;
              var SymbolSetEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "universal", "numbersign", "existential", "percent", "ampersand", "suchthat", "parenleft", "parenright", "asteriskmath", "plus", "comma", "minus", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "congruent", "Alpha", "Beta", "Chi", "Delta", "Epsilon", "Phi", "Gamma", "Eta", "Iota", "theta1", "Kappa", "Lambda", "Mu", "Nu", "Omicron", "Pi", "Theta", "Rho", "Sigma", "Tau", "Upsilon", "sigma1", "Omega", "Xi", "Psi", "Zeta", "bracketleft", "therefore", "bracketright", "perpendicular", "underscore", "radicalex", "alpha", "beta", "chi", "delta", "epsilon", "phi", "gamma", "eta", "iota", "phi1", "kappa", "lambda", "mu", "nu", "omicron", "pi", "theta", "rho", "sigma", "tau", "upsilon", "omega1", "omega", "xi", "psi", "zeta", "braceleft", "bar", "braceright", "similar", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Euro", "Upsilon1", "minute", "lessequal", "fraction", "infinity", "florin", "club", "diamond", "heart", "spade", "arrowboth", "arrowleft", "arrowup", "arrowright", "arrowdown", "degree", "plusminus", "second", "greaterequal", "multiply", "proportional", "partialdiff", "bullet", "divide", "notequal", "equivalence", "approxequal", "ellipsis", "arrowvertex", "arrowhorizex", "carriagereturn", "aleph", "Ifraktur", "Rfraktur", "weierstrass", "circlemultiply", "circleplus", "emptyset", "intersection", "union", "propersuperset", "reflexsuperset", "notsubset", "propersubset", "reflexsubset", "element", "notelement", "angle", "gradient", "registerserif", "copyrightserif", "trademarkserif", "product", "radical", "dotmath", "logicalnot", "logicaland", "logicalor", "arrowdblboth", "arrowdblleft", "arrowdblup", "arrowdblright", "arrowdbldown", "lozenge", "angleleft", "registersans", "copyrightsans", "trademarksans", "summation", "parenlefttp", "parenleftex", "parenleftbt", "bracketlefttp", "bracketleftex", "bracketleftbt", "bracelefttp", "braceleftmid", "braceleftbt", "braceex", "", "angleright", "integral", "integraltp", "integralex", "integralbt", "parenrighttp", "parenrightex", "parenrightbt", "bracketrighttp", "bracketrightex", "bracketrightbt", "bracerighttp", "bracerightmid", "bracerightbt", ""];
              exports2.SymbolSetEncoding = SymbolSetEncoding;
              var ZapfDingbatsEncoding = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "a1", "a2", "a202", "a3", "a4", "a5", "a119", "a118", "a117", "a11", "a12", "a13", "a14", "a15", "a16", "a105", "a17", "a18", "a19", "a20", "a21", "a22", "a23", "a24", "a25", "a26", "a27", "a28", "a6", "a7", "a8", "a9", "a10", "a29", "a30", "a31", "a32", "a33", "a34", "a35", "a36", "a37", "a38", "a39", "a40", "a41", "a42", "a43", "a44", "a45", "a46", "a47", "a48", "a49", "a50", "a51", "a52", "a53", "a54", "a55", "a56", "a57", "a58", "a59", "a60", "a61", "a62", "a63", "a64", "a65", "a66", "a67", "a68", "a69", "a70", "a71", "a72", "a73", "a74", "a203", "a75", "a204", "a76", "a77", "a78", "a79", "a81", "a82", "a83", "a84", "a97", "a98", "a99", "a100", "", "a89", "a90", "a93", "a94", "a91", "a92", "a205", "a85", "a206", "a86", "a87", "a88", "a95", "a96", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "a101", "a102", "a103", "a104", "a106", "a107", "a108", "a112", "a111", "a110", "a109", "a120", "a121", "a122", "a123", "a124", "a125", "a126", "a127", "a128", "a129", "a130", "a131", "a132", "a133", "a134", "a135", "a136", "a137", "a138", "a139", "a140", "a141", "a142", "a143", "a144", "a145", "a146", "a147", "a148", "a149", "a150", "a151", "a152", "a153", "a154", "a155", "a156", "a157", "a158", "a159", "a160", "a161", "a163", "a164", "a196", "a165", "a192", "a166", "a167", "a168", "a169", "a170", "a171", "a172", "a173", "a162", "a174", "a175", "a176", "a177", "a178", "a179", "a193", "a180", "a199", "a181", "a200", "a182", "", "a201", "a183", "a184", "a197", "a185", "a194", "a198", "a186", "a195", "a187", "a188", "a189", "a190", "a191", ""];
              exports2.ZapfDingbatsEncoding = ZapfDingbatsEncoding;
              function getEncoding(encodingName) {
                switch (encodingName) {
                  case "WinAnsiEncoding":
                    return WinAnsiEncoding;
                  case "StandardEncoding":
                    return StandardEncoding;
                  case "MacRomanEncoding":
                    return MacRomanEncoding;
                  case "SymbolSetEncoding":
                    return SymbolSetEncoding;
                  case "ZapfDingbatsEncoding":
                    return ZapfDingbatsEncoding;
                  case "ExpertEncoding":
                    return ExpertEncoding;
                  case "MacExpertEncoding":
                    return MacExpertEncoding;
                  default:
                    return null;
                }
              }
            },
            (__unused_webpack_module, __webpack_exports__2, __w_pdfjs_require__2) => {
              "use strict";
              __w_pdfjs_require__2.r(__webpack_exports__2);
              __w_pdfjs_require__2.d(__webpack_exports__2, {
                "getDingbatsGlyphsUnicode": () => getDingbatsGlyphsUnicode,
                "getGlyphsUnicode": () => getGlyphsUnicode
              });
              var _core_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __w_pdfjs_require__2(139);
              const getGlyphsUnicode = (0, _core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getArrayLookupTableFactory)(function() {
                return [
                  "A",
                  65,
                  "AE",
                  198,
                  "AEacute",
                  508,
                  "AEmacron",
                  482,
                  "AEsmall",
                  63462,
                  "Aacute",
                  193,
                  "Aacutesmall",
                  63457,
                  "Abreve",
                  258,
                  "Abreveacute",
                  7854,
                  "Abrevecyrillic",
                  1232,
                  "Abrevedotbelow",
                  7862,
                  "Abrevegrave",
                  7856,
                  "Abrevehookabove",
                  7858,
                  "Abrevetilde",
                  7860,
                  "Acaron",
                  461,
                  "Acircle",
                  9398,
                  "Acircumflex",
                  194,
                  "Acircumflexacute",
                  7844,
                  "Acircumflexdotbelow",
                  7852,
                  "Acircumflexgrave",
                  7846,
                  "Acircumflexhookabove",
                  7848,
                  "Acircumflexsmall",
                  63458,
                  "Acircumflextilde",
                  7850,
                  "Acute",
                  63177,
                  "Acutesmall",
                  63412,
                  "Acyrillic",
                  1040,
                  "Adblgrave",
                  512,
                  "Adieresis",
                  196,
                  "Adieresiscyrillic",
                  1234,
                  "Adieresismacron",
                  478,
                  "Adieresissmall",
                  63460,
                  "Adotbelow",
                  7840,
                  "Adotmacron",
                  480,
                  "Agrave",
                  192,
                  "Agravesmall",
                  63456,
                  "Ahookabove",
                  7842,
                  "Aiecyrillic",
                  1236,
                  "Ainvertedbreve",
                  514,
                  "Alpha",
                  913,
                  "Alphatonos",
                  902,
                  "Amacron",
                  256,
                  "Amonospace",
                  65313,
                  "Aogonek",
                  260,
                  "Aring",
                  197,
                  "Aringacute",
                  506,
                  "Aringbelow",
                  7680,
                  "Aringsmall",
                  63461,
                  "Asmall",
                  63329,
                  "Atilde",
                  195,
                  "Atildesmall",
                  63459,
                  "Aybarmenian",
                  1329,
                  "B",
                  66,
                  "Bcircle",
                  9399,
                  "Bdotaccent",
                  7682,
                  "Bdotbelow",
                  7684,
                  "Becyrillic",
                  1041,
                  "Benarmenian",
                  1330,
                  "Beta",
                  914,
                  "Bhook",
                  385,
                  "Blinebelow",
                  7686,
                  "Bmonospace",
                  65314,
                  "Brevesmall",
                  63220,
                  "Bsmall",
                  63330,
                  "Btopbar",
                  386,
                  "C",
                  67,
                  "Caarmenian",
                  1342,
                  "Cacute",
                  262,
                  "Caron",
                  63178,
                  "Caronsmall",
                  63221,
                  "Ccaron",
                  268,
                  "Ccedilla",
                  199,
                  "Ccedillaacute",
                  7688,
                  "Ccedillasmall",
                  63463,
                  "Ccircle",
                  9400,
                  "Ccircumflex",
                  264,
                  "Cdot",
                  266,
                  "Cdotaccent",
                  266,
                  "Cedillasmall",
                  63416,
                  "Chaarmenian",
                  1353,
                  "Cheabkhasiancyrillic",
                  1212,
                  "Checyrillic",
                  1063,
                  "Chedescenderabkhasiancyrillic",
                  1214,
                  "Chedescendercyrillic",
                  1206,
                  "Chedieresiscyrillic",
                  1268,
                  "Cheharmenian",
                  1347,
                  "Chekhakassiancyrillic",
                  1227,
                  "Cheverticalstrokecyrillic",
                  1208,
                  "Chi",
                  935,
                  "Chook",
                  391,
                  "Circumflexsmall",
                  63222,
                  "Cmonospace",
                  65315,
                  "Coarmenian",
                  1361,
                  "Csmall",
                  63331,
                  "D",
                  68,
                  "DZ",
                  497,
                  "DZcaron",
                  452,
                  "Daarmenian",
                  1332,
                  "Dafrican",
                  393,
                  "Dcaron",
                  270,
                  "Dcedilla",
                  7696,
                  "Dcircle",
                  9401,
                  "Dcircumflexbelow",
                  7698,
                  "Dcroat",
                  272,
                  "Ddotaccent",
                  7690,
                  "Ddotbelow",
                  7692,
                  "Decyrillic",
                  1044,
                  "Deicoptic",
                  1006,
                  "Delta",
                  8710,
                  "Deltagreek",
                  916,
                  "Dhook",
                  394,
                  "Dieresis",
                  63179,
                  "DieresisAcute",
                  63180,
                  "DieresisGrave",
                  63181,
                  "Dieresissmall",
                  63400,
                  "Digammagreek",
                  988,
                  "Djecyrillic",
                  1026,
                  "Dlinebelow",
                  7694,
                  "Dmonospace",
                  65316,
                  "Dotaccentsmall",
                  63223,
                  "Dslash",
                  272,
                  "Dsmall",
                  63332,
                  "Dtopbar",
                  395,
                  "Dz",
                  498,
                  "Dzcaron",
                  453,
                  "Dzeabkhasiancyrillic",
                  1248,
                  "Dzecyrillic",
                  1029,
                  "Dzhecyrillic",
                  1039,
                  "E",
                  69,
                  "Eacute",
                  201,
                  "Eacutesmall",
                  63465,
                  "Ebreve",
                  276,
                  "Ecaron",
                  282,
                  "Ecedillabreve",
                  7708,
                  "Echarmenian",
                  1333,
                  "Ecircle",
                  9402,
                  "Ecircumflex",
                  202,
                  "Ecircumflexacute",
                  7870,
                  "Ecircumflexbelow",
                  7704,
                  "Ecircumflexdotbelow",
                  7878,
                  "Ecircumflexgrave",
                  7872,
                  "Ecircumflexhookabove",
                  7874,
                  "Ecircumflexsmall",
                  63466,
                  "Ecircumflextilde",
                  7876,
                  "Ecyrillic",
                  1028,
                  "Edblgrave",
                  516,
                  "Edieresis",
                  203,
                  "Edieresissmall",
                  63467,
                  "Edot",
                  278,
                  "Edotaccent",
                  278,
                  "Edotbelow",
                  7864,
                  "Efcyrillic",
                  1060,
                  "Egrave",
                  200,
                  "Egravesmall",
                  63464,
                  "Eharmenian",
                  1335,
                  "Ehookabove",
                  7866,
                  "Eightroman",
                  8551,
                  "Einvertedbreve",
                  518,
                  "Eiotifiedcyrillic",
                  1124,
                  "Elcyrillic",
                  1051,
                  "Elevenroman",
                  8554,
                  "Emacron",
                  274,
                  "Emacronacute",
                  7702,
                  "Emacrongrave",
                  7700,
                  "Emcyrillic",
                  1052,
                  "Emonospace",
                  65317,
                  "Encyrillic",
                  1053,
                  "Endescendercyrillic",
                  1186,
                  "Eng",
                  330,
                  "Enghecyrillic",
                  1188,
                  "Enhookcyrillic",
                  1223,
                  "Eogonek",
                  280,
                  "Eopen",
                  400,
                  "Epsilon",
                  917,
                  "Epsilontonos",
                  904,
                  "Ercyrillic",
                  1056,
                  "Ereversed",
                  398,
                  "Ereversedcyrillic",
                  1069,
                  "Escyrillic",
                  1057,
                  "Esdescendercyrillic",
                  1194,
                  "Esh",
                  425,
                  "Esmall",
                  63333,
                  "Eta",
                  919,
                  "Etarmenian",
                  1336,
                  "Etatonos",
                  905,
                  "Eth",
                  208,
                  "Ethsmall",
                  63472,
                  "Etilde",
                  7868,
                  "Etildebelow",
                  7706,
                  "Euro",
                  8364,
                  "Ezh",
                  439,
                  "Ezhcaron",
                  494,
                  "Ezhreversed",
                  440,
                  "F",
                  70,
                  "Fcircle",
                  9403,
                  "Fdotaccent",
                  7710,
                  "Feharmenian",
                  1366,
                  "Feicoptic",
                  996,
                  "Fhook",
                  401,
                  "Fitacyrillic",
                  1138,
                  "Fiveroman",
                  8548,
                  "Fmonospace",
                  65318,
                  "Fourroman",
                  8547,
                  "Fsmall",
                  63334,
                  "G",
                  71,
                  "GBsquare",
                  13191,
                  "Gacute",
                  500,
                  "Gamma",
                  915,
                  "Gammaafrican",
                  404,
                  "Gangiacoptic",
                  1002,
                  "Gbreve",
                  286,
                  "Gcaron",
                  486,
                  "Gcedilla",
                  290,
                  "Gcircle",
                  9404,
                  "Gcircumflex",
                  284,
                  "Gcommaaccent",
                  290,
                  "Gdot",
                  288,
                  "Gdotaccent",
                  288,
                  "Gecyrillic",
                  1043,
                  "Ghadarmenian",
                  1346,
                  "Ghemiddlehookcyrillic",
                  1172,
                  "Ghestrokecyrillic",
                  1170,
                  "Gheupturncyrillic",
                  1168,
                  "Ghook",
                  403,
                  "Gimarmenian",
                  1331,
                  "Gjecyrillic",
                  1027,
                  "Gmacron",
                  7712,
                  "Gmonospace",
                  65319,
                  "Grave",
                  63182,
                  "Gravesmall",
                  63328,
                  "Gsmall",
                  63335,
                  "Gsmallhook",
                  667,
                  "Gstroke",
                  484,
                  "H",
                  72,
                  "H18533",
                  9679,
                  "H18543",
                  9642,
                  "H18551",
                  9643,
                  "H22073",
                  9633,
                  "HPsquare",
                  13259,
                  "Haabkhasiancyrillic",
                  1192,
                  "Hadescendercyrillic",
                  1202,
                  "Hardsigncyrillic",
                  1066,
                  "Hbar",
                  294,
                  "Hbrevebelow",
                  7722,
                  "Hcedilla",
                  7720,
                  "Hcircle",
                  9405,
                  "Hcircumflex",
                  292,
                  "Hdieresis",
                  7718,
                  "Hdotaccent",
                  7714,
                  "Hdotbelow",
                  7716,
                  "Hmonospace",
                  65320,
                  "Hoarmenian",
                  1344,
                  "Horicoptic",
                  1e3,
                  "Hsmall",
                  63336,
                  "Hungarumlaut",
                  63183,
                  "Hungarumlautsmall",
                  63224,
                  "Hzsquare",
                  13200,
                  "I",
                  73,
                  "IAcyrillic",
                  1071,
                  "IJ",
                  306,
                  "IUcyrillic",
                  1070,
                  "Iacute",
                  205,
                  "Iacutesmall",
                  63469,
                  "Ibreve",
                  300,
                  "Icaron",
                  463,
                  "Icircle",
                  9406,
                  "Icircumflex",
                  206,
                  "Icircumflexsmall",
                  63470,
                  "Icyrillic",
                  1030,
                  "Idblgrave",
                  520,
                  "Idieresis",
                  207,
                  "Idieresisacute",
                  7726,
                  "Idieresiscyrillic",
                  1252,
                  "Idieresissmall",
                  63471,
                  "Idot",
                  304,
                  "Idotaccent",
                  304,
                  "Idotbelow",
                  7882,
                  "Iebrevecyrillic",
                  1238,
                  "Iecyrillic",
                  1045,
                  "Ifraktur",
                  8465,
                  "Igrave",
                  204,
                  "Igravesmall",
                  63468,
                  "Ihookabove",
                  7880,
                  "Iicyrillic",
                  1048,
                  "Iinvertedbreve",
                  522,
                  "Iishortcyrillic",
                  1049,
                  "Imacron",
                  298,
                  "Imacroncyrillic",
                  1250,
                  "Imonospace",
                  65321,
                  "Iniarmenian",
                  1339,
                  "Iocyrillic",
                  1025,
                  "Iogonek",
                  302,
                  "Iota",
                  921,
                  "Iotaafrican",
                  406,
                  "Iotadieresis",
                  938,
                  "Iotatonos",
                  906,
                  "Ismall",
                  63337,
                  "Istroke",
                  407,
                  "Itilde",
                  296,
                  "Itildebelow",
                  7724,
                  "Izhitsacyrillic",
                  1140,
                  "Izhitsadblgravecyrillic",
                  1142,
                  "J",
                  74,
                  "Jaarmenian",
                  1345,
                  "Jcircle",
                  9407,
                  "Jcircumflex",
                  308,
                  "Jecyrillic",
                  1032,
                  "Jheharmenian",
                  1355,
                  "Jmonospace",
                  65322,
                  "Jsmall",
                  63338,
                  "K",
                  75,
                  "KBsquare",
                  13189,
                  "KKsquare",
                  13261,
                  "Kabashkircyrillic",
                  1184,
                  "Kacute",
                  7728,
                  "Kacyrillic",
                  1050,
                  "Kadescendercyrillic",
                  1178,
                  "Kahookcyrillic",
                  1219,
                  "Kappa",
                  922,
                  "Kastrokecyrillic",
                  1182,
                  "Kaverticalstrokecyrillic",
                  1180,
                  "Kcaron",
                  488,
                  "Kcedilla",
                  310,
                  "Kcircle",
                  9408,
                  "Kcommaaccent",
                  310,
                  "Kdotbelow",
                  7730,
                  "Keharmenian",
                  1364,
                  "Kenarmenian",
                  1343,
                  "Khacyrillic",
                  1061,
                  "Kheicoptic",
                  998,
                  "Khook",
                  408,
                  "Kjecyrillic",
                  1036,
                  "Klinebelow",
                  7732,
                  "Kmonospace",
                  65323,
                  "Koppacyrillic",
                  1152,
                  "Koppagreek",
                  990,
                  "Ksicyrillic",
                  1134,
                  "Ksmall",
                  63339,
                  "L",
                  76,
                  "LJ",
                  455,
                  "LL",
                  63167,
                  "Lacute",
                  313,
                  "Lambda",
                  923,
                  "Lcaron",
                  317,
                  "Lcedilla",
                  315,
                  "Lcircle",
                  9409,
                  "Lcircumflexbelow",
                  7740,
                  "Lcommaaccent",
                  315,
                  "Ldot",
                  319,
                  "Ldotaccent",
                  319,
                  "Ldotbelow",
                  7734,
                  "Ldotbelowmacron",
                  7736,
                  "Liwnarmenian",
                  1340,
                  "Lj",
                  456,
                  "Ljecyrillic",
                  1033,
                  "Llinebelow",
                  7738,
                  "Lmonospace",
                  65324,
                  "Lslash",
                  321,
                  "Lslashsmall",
                  63225,
                  "Lsmall",
                  63340,
                  "M",
                  77,
                  "MBsquare",
                  13190,
                  "Macron",
                  63184,
                  "Macronsmall",
                  63407,
                  "Macute",
                  7742,
                  "Mcircle",
                  9410,
                  "Mdotaccent",
                  7744,
                  "Mdotbelow",
                  7746,
                  "Menarmenian",
                  1348,
                  "Mmonospace",
                  65325,
                  "Msmall",
                  63341,
                  "Mturned",
                  412,
                  "Mu",
                  924,
                  "N",
                  78,
                  "NJ",
                  458,
                  "Nacute",
                  323,
                  "Ncaron",
                  327,
                  "Ncedilla",
                  325,
                  "Ncircle",
                  9411,
                  "Ncircumflexbelow",
                  7754,
                  "Ncommaaccent",
                  325,
                  "Ndotaccent",
                  7748,
                  "Ndotbelow",
                  7750,
                  "Nhookleft",
                  413,
                  "Nineroman",
                  8552,
                  "Nj",
                  459,
                  "Njecyrillic",
                  1034,
                  "Nlinebelow",
                  7752,
                  "Nmonospace",
                  65326,
                  "Nowarmenian",
                  1350,
                  "Nsmall",
                  63342,
                  "Ntilde",
                  209,
                  "Ntildesmall",
                  63473,
                  "Nu",
                  925,
                  "O",
                  79,
                  "OE",
                  338,
                  "OEsmall",
                  63226,
                  "Oacute",
                  211,
                  "Oacutesmall",
                  63475,
                  "Obarredcyrillic",
                  1256,
                  "Obarreddieresiscyrillic",
                  1258,
                  "Obreve",
                  334,
                  "Ocaron",
                  465,
                  "Ocenteredtilde",
                  415,
                  "Ocircle",
                  9412,
                  "Ocircumflex",
                  212,
                  "Ocircumflexacute",
                  7888,
                  "Ocircumflexdotbelow",
                  7896,
                  "Ocircumflexgrave",
                  7890,
                  "Ocircumflexhookabove",
                  7892,
                  "Ocircumflexsmall",
                  63476,
                  "Ocircumflextilde",
                  7894,
                  "Ocyrillic",
                  1054,
                  "Odblacute",
                  336,
                  "Odblgrave",
                  524,
                  "Odieresis",
                  214,
                  "Odieresiscyrillic",
                  1254,
                  "Odieresissmall",
                  63478,
                  "Odotbelow",
                  7884,
                  "Ogoneksmall",
                  63227,
                  "Ograve",
                  210,
                  "Ogravesmall",
                  63474,
                  "Oharmenian",
                  1365,
                  "Ohm",
                  8486,
                  "Ohookabove",
                  7886,
                  "Ohorn",
                  416,
                  "Ohornacute",
                  7898,
                  "Ohorndotbelow",
                  7906,
                  "Ohorngrave",
                  7900,
                  "Ohornhookabove",
                  7902,
                  "Ohorntilde",
                  7904,
                  "Ohungarumlaut",
                  336,
                  "Oi",
                  418,
                  "Oinvertedbreve",
                  526,
                  "Omacron",
                  332,
                  "Omacronacute",
                  7762,
                  "Omacrongrave",
                  7760,
                  "Omega",
                  8486,
                  "Omegacyrillic",
                  1120,
                  "Omegagreek",
                  937,
                  "Omegaroundcyrillic",
                  1146,
                  "Omegatitlocyrillic",
                  1148,
                  "Omegatonos",
                  911,
                  "Omicron",
                  927,
                  "Omicrontonos",
                  908,
                  "Omonospace",
                  65327,
                  "Oneroman",
                  8544,
                  "Oogonek",
                  490,
                  "Oogonekmacron",
                  492,
                  "Oopen",
                  390,
                  "Oslash",
                  216,
                  "Oslashacute",
                  510,
                  "Oslashsmall",
                  63480,
                  "Osmall",
                  63343,
                  "Ostrokeacute",
                  510,
                  "Otcyrillic",
                  1150,
                  "Otilde",
                  213,
                  "Otildeacute",
                  7756,
                  "Otildedieresis",
                  7758,
                  "Otildesmall",
                  63477,
                  "P",
                  80,
                  "Pacute",
                  7764,
                  "Pcircle",
                  9413,
                  "Pdotaccent",
                  7766,
                  "Pecyrillic",
                  1055,
                  "Peharmenian",
                  1354,
                  "Pemiddlehookcyrillic",
                  1190,
                  "Phi",
                  934,
                  "Phook",
                  420,
                  "Pi",
                  928,
                  "Piwrarmenian",
                  1363,
                  "Pmonospace",
                  65328,
                  "Psi",
                  936,
                  "Psicyrillic",
                  1136,
                  "Psmall",
                  63344,
                  "Q",
                  81,
                  "Qcircle",
                  9414,
                  "Qmonospace",
                  65329,
                  "Qsmall",
                  63345,
                  "R",
                  82,
                  "Raarmenian",
                  1356,
                  "Racute",
                  340,
                  "Rcaron",
                  344,
                  "Rcedilla",
                  342,
                  "Rcircle",
                  9415,
                  "Rcommaaccent",
                  342,
                  "Rdblgrave",
                  528,
                  "Rdotaccent",
                  7768,
                  "Rdotbelow",
                  7770,
                  "Rdotbelowmacron",
                  7772,
                  "Reharmenian",
                  1360,
                  "Rfraktur",
                  8476,
                  "Rho",
                  929,
                  "Ringsmall",
                  63228,
                  "Rinvertedbreve",
                  530,
                  "Rlinebelow",
                  7774,
                  "Rmonospace",
                  65330,
                  "Rsmall",
                  63346,
                  "Rsmallinverted",
                  641,
                  "Rsmallinvertedsuperior",
                  694,
                  "S",
                  83,
                  "SF010000",
                  9484,
                  "SF020000",
                  9492,
                  "SF030000",
                  9488,
                  "SF040000",
                  9496,
                  "SF050000",
                  9532,
                  "SF060000",
                  9516,
                  "SF070000",
                  9524,
                  "SF080000",
                  9500,
                  "SF090000",
                  9508,
                  "SF100000",
                  9472,
                  "SF110000",
                  9474,
                  "SF190000",
                  9569,
                  "SF200000",
                  9570,
                  "SF210000",
                  9558,
                  "SF220000",
                  9557,
                  "SF230000",
                  9571,
                  "SF240000",
                  9553,
                  "SF250000",
                  9559,
                  "SF260000",
                  9565,
                  "SF270000",
                  9564,
                  "SF280000",
                  9563,
                  "SF360000",
                  9566,
                  "SF370000",
                  9567,
                  "SF380000",
                  9562,
                  "SF390000",
                  9556,
                  "SF400000",
                  9577,
                  "SF410000",
                  9574,
                  "SF420000",
                  9568,
                  "SF430000",
                  9552,
                  "SF440000",
                  9580,
                  "SF450000",
                  9575,
                  "SF460000",
                  9576,
                  "SF470000",
                  9572,
                  "SF480000",
                  9573,
                  "SF490000",
                  9561,
                  "SF500000",
                  9560,
                  "SF510000",
                  9554,
                  "SF520000",
                  9555,
                  "SF530000",
                  9579,
                  "SF540000",
                  9578,
                  "Sacute",
                  346,
                  "Sacutedotaccent",
                  7780,
                  "Sampigreek",
                  992,
                  "Scaron",
                  352,
                  "Scarondotaccent",
                  7782,
                  "Scaronsmall",
                  63229,
                  "Scedilla",
                  350,
                  "Schwa",
                  399,
                  "Schwacyrillic",
                  1240,
                  "Schwadieresiscyrillic",
                  1242,
                  "Scircle",
                  9416,
                  "Scircumflex",
                  348,
                  "Scommaaccent",
                  536,
                  "Sdotaccent",
                  7776,
                  "Sdotbelow",
                  7778,
                  "Sdotbelowdotaccent",
                  7784,
                  "Seharmenian",
                  1357,
                  "Sevenroman",
                  8550,
                  "Shaarmenian",
                  1351,
                  "Shacyrillic",
                  1064,
                  "Shchacyrillic",
                  1065,
                  "Sheicoptic",
                  994,
                  "Shhacyrillic",
                  1210,
                  "Shimacoptic",
                  1004,
                  "Sigma",
                  931,
                  "Sixroman",
                  8549,
                  "Smonospace",
                  65331,
                  "Softsigncyrillic",
                  1068,
                  "Ssmall",
                  63347,
                  "Stigmagreek",
                  986,
                  "T",
                  84,
                  "Tau",
                  932,
                  "Tbar",
                  358,
                  "Tcaron",
                  356,
                  "Tcedilla",
                  354,
                  "Tcircle",
                  9417,
                  "Tcircumflexbelow",
                  7792,
                  "Tcommaaccent",
                  354,
                  "Tdotaccent",
                  7786,
                  "Tdotbelow",
                  7788,
                  "Tecyrillic",
                  1058,
                  "Tedescendercyrillic",
                  1196,
                  "Tenroman",
                  8553,
                  "Tetsecyrillic",
                  1204,
                  "Theta",
                  920,
                  "Thook",
                  428,
                  "Thorn",
                  222,
                  "Thornsmall",
                  63486,
                  "Threeroman",
                  8546,
                  "Tildesmall",
                  63230,
                  "Tiwnarmenian",
                  1359,
                  "Tlinebelow",
                  7790,
                  "Tmonospace",
                  65332,
                  "Toarmenian",
                  1337,
                  "Tonefive",
                  444,
                  "Tonesix",
                  388,
                  "Tonetwo",
                  423,
                  "Tretroflexhook",
                  430,
                  "Tsecyrillic",
                  1062,
                  "Tshecyrillic",
                  1035,
                  "Tsmall",
                  63348,
                  "Twelveroman",
                  8555,
                  "Tworoman",
                  8545,
                  "U",
                  85,
                  "Uacute",
                  218,
                  "Uacutesmall",
                  63482,
                  "Ubreve",
                  364,
                  "Ucaron",
                  467,
                  "Ucircle",
                  9418,
                  "Ucircumflex",
                  219,
                  "Ucircumflexbelow",
                  7798,
                  "Ucircumflexsmall",
                  63483,
                  "Ucyrillic",
                  1059,
                  "Udblacute",
                  368,
                  "Udblgrave",
                  532,
                  "Udieresis",
                  220,
                  "Udieresisacute",
                  471,
                  "Udieresisbelow",
                  7794,
                  "Udieresiscaron",
                  473,
                  "Udieresiscyrillic",
                  1264,
                  "Udieresisgrave",
                  475,
                  "Udieresismacron",
                  469,
                  "Udieresissmall",
                  63484,
                  "Udotbelow",
                  7908,
                  "Ugrave",
                  217,
                  "Ugravesmall",
                  63481,
                  "Uhookabove",
                  7910,
                  "Uhorn",
                  431,
                  "Uhornacute",
                  7912,
                  "Uhorndotbelow",
                  7920,
                  "Uhorngrave",
                  7914,
                  "Uhornhookabove",
                  7916,
                  "Uhorntilde",
                  7918,
                  "Uhungarumlaut",
                  368,
                  "Uhungarumlautcyrillic",
                  1266,
                  "Uinvertedbreve",
                  534,
                  "Ukcyrillic",
                  1144,
                  "Umacron",
                  362,
                  "Umacroncyrillic",
                  1262,
                  "Umacrondieresis",
                  7802,
                  "Umonospace",
                  65333,
                  "Uogonek",
                  370,
                  "Upsilon",
                  933,
                  "Upsilon1",
                  978,
                  "Upsilonacutehooksymbolgreek",
                  979,
                  "Upsilonafrican",
                  433,
                  "Upsilondieresis",
                  939,
                  "Upsilondieresishooksymbolgreek",
                  980,
                  "Upsilonhooksymbol",
                  978,
                  "Upsilontonos",
                  910,
                  "Uring",
                  366,
                  "Ushortcyrillic",
                  1038,
                  "Usmall",
                  63349,
                  "Ustraightcyrillic",
                  1198,
                  "Ustraightstrokecyrillic",
                  1200,
                  "Utilde",
                  360,
                  "Utildeacute",
                  7800,
                  "Utildebelow",
                  7796,
                  "V",
                  86,
                  "Vcircle",
                  9419,
                  "Vdotbelow",
                  7806,
                  "Vecyrillic",
                  1042,
                  "Vewarmenian",
                  1358,
                  "Vhook",
                  434,
                  "Vmonospace",
                  65334,
                  "Voarmenian",
                  1352,
                  "Vsmall",
                  63350,
                  "Vtilde",
                  7804,
                  "W",
                  87,
                  "Wacute",
                  7810,
                  "Wcircle",
                  9420,
                  "Wcircumflex",
                  372,
                  "Wdieresis",
                  7812,
                  "Wdotaccent",
                  7814,
                  "Wdotbelow",
                  7816,
                  "Wgrave",
                  7808,
                  "Wmonospace",
                  65335,
                  "Wsmall",
                  63351,
                  "X",
                  88,
                  "Xcircle",
                  9421,
                  "Xdieresis",
                  7820,
                  "Xdotaccent",
                  7818,
                  "Xeharmenian",
                  1341,
                  "Xi",
                  926,
                  "Xmonospace",
                  65336,
                  "Xsmall",
                  63352,
                  "Y",
                  89,
                  "Yacute",
                  221,
                  "Yacutesmall",
                  63485,
                  "Yatcyrillic",
                  1122,
                  "Ycircle",
                  9422,
                  "Ycircumflex",
                  374,
                  "Ydieresis",
                  376,
                  "Ydieresissmall",
                  63487,
                  "Ydotaccent",
                  7822,
                  "Ydotbelow",
                  7924,
                  "Yericyrillic",
                  1067,
                  "Yerudieresiscyrillic",
                  1272,
                  "Ygrave",
                  7922,
                  "Yhook",
                  435,
                  "Yhookabove",
                  7926,
                  "Yiarmenian",
                  1349,
                  "Yicyrillic",
                  1031,
                  "Yiwnarmenian",
                  1362,
                  "Ymonospace",
                  65337,
                  "Ysmall",
                  63353,
                  "Ytilde",
                  7928,
                  "Yusbigcyrillic",
                  1130,
                  "Yusbigiotifiedcyrillic",
                  1132,
                  "Yuslittlecyrillic",
                  1126,
                  "Yuslittleiotifiedcyrillic",
                  1128,
                  "Z",
                  90,
                  "Zaarmenian",
                  1334,
                  "Zacute",
                  377,
                  "Zcaron",
                  381,
                  "Zcaronsmall",
                  63231,
                  "Zcircle",
                  9423,
                  "Zcircumflex",
                  7824,
                  "Zdot",
                  379,
                  "Zdotaccent",
                  379,
                  "Zdotbelow",
                  7826,
                  "Zecyrillic",
                  1047,
                  "Zedescendercyrillic",
                  1176,
                  "Zedieresiscyrillic",
                  1246,
                  "Zeta",
                  918,
                  "Zhearmenian",
                  1338,
                  "Zhebrevecyrillic",
                  1217,
                  "Zhecyrillic",
                  1046,
                  "Zhedescendercyrillic",
                  1174,
                  "Zhedieresiscyrillic",
                  1244,
                  "Zlinebelow",
                  7828,
                  "Zmonospace",
                  65338,
                  "Zsmall",
                  63354,
                  "Zstroke",
                  437,
                  "a",
                  97,
                  "aabengali",
                  2438,
                  "aacute",
                  225,
                  "aadeva",
                  2310,
                  "aagujarati",
                  2694,
                  "aagurmukhi",
                  2566,
                  "aamatragurmukhi",
                  2622,
                  "aarusquare",
                  13059,
                  "aavowelsignbengali",
                  2494,
                  "aavowelsigndeva",
                  2366,
                  "aavowelsigngujarati",
                  2750,
                  "abbreviationmarkarmenian",
                  1375,
                  "abbreviationsigndeva",
                  2416,
                  "abengali",
                  2437,
                  "abopomofo",
                  12570,
                  "abreve",
                  259,
                  "abreveacute",
                  7855,
                  "abrevecyrillic",
                  1233,
                  "abrevedotbelow",
                  7863,
                  "abrevegrave",
                  7857,
                  "abrevehookabove",
                  7859,
                  "abrevetilde",
                  7861,
                  "acaron",
                  462,
                  "acircle",
                  9424,
                  "acircumflex",
                  226,
                  "acircumflexacute",
                  7845,
                  "acircumflexdotbelow",
                  7853,
                  "acircumflexgrave",
                  7847,
                  "acircumflexhookabove",
                  7849,
                  "acircumflextilde",
                  7851,
                  "acute",
                  180,
                  "acutebelowcmb",
                  791,
                  "acutecmb",
                  769,
                  "acutecomb",
                  769,
                  "acutedeva",
                  2388,
                  "acutelowmod",
                  719,
                  "acutetonecmb",
                  833,
                  "acyrillic",
                  1072,
                  "adblgrave",
                  513,
                  "addakgurmukhi",
                  2673,
                  "adeva",
                  2309,
                  "adieresis",
                  228,
                  "adieresiscyrillic",
                  1235,
                  "adieresismacron",
                  479,
                  "adotbelow",
                  7841,
                  "adotmacron",
                  481,
                  "ae",
                  230,
                  "aeacute",
                  509,
                  "aekorean",
                  12624,
                  "aemacron",
                  483,
                  "afii00208",
                  8213,
                  "afii08941",
                  8356,
                  "afii10017",
                  1040,
                  "afii10018",
                  1041,
                  "afii10019",
                  1042,
                  "afii10020",
                  1043,
                  "afii10021",
                  1044,
                  "afii10022",
                  1045,
                  "afii10023",
                  1025,
                  "afii10024",
                  1046,
                  "afii10025",
                  1047,
                  "afii10026",
                  1048,
                  "afii10027",
                  1049,
                  "afii10028",
                  1050,
                  "afii10029",
                  1051,
                  "afii10030",
                  1052,
                  "afii10031",
                  1053,
                  "afii10032",
                  1054,
                  "afii10033",
                  1055,
                  "afii10034",
                  1056,
                  "afii10035",
                  1057,
                  "afii10036",
                  1058,
                  "afii10037",
                  1059,
                  "afii10038",
                  1060,
                  "afii10039",
                  1061,
                  "afii10040",
                  1062,
                  "afii10041",
                  1063,
                  "afii10042",
                  1064,
                  "afii10043",
                  1065,
                  "afii10044",
                  1066,
                  "afii10045",
                  1067,
                  "afii10046",
                  1068,
                  "afii10047",
                  1069,
                  "afii10048",
                  1070,
                  "afii10049",
                  1071,
                  "afii10050",
                  1168,
                  "afii10051",
                  1026,
                  "afii10052",
                  1027,
                  "afii10053",
                  1028,
                  "afii10054",
                  1029,
                  "afii10055",
                  1030,
                  "afii10056",
                  1031,
                  "afii10057",
                  1032,
                  "afii10058",
                  1033,
                  "afii10059",
                  1034,
                  "afii10060",
                  1035,
                  "afii10061",
                  1036,
                  "afii10062",
                  1038,
                  "afii10063",
                  63172,
                  "afii10064",
                  63173,
                  "afii10065",
                  1072,
                  "afii10066",
                  1073,
                  "afii10067",
                  1074,
                  "afii10068",
                  1075,
                  "afii10069",
                  1076,
                  "afii10070",
                  1077,
                  "afii10071",
                  1105,
                  "afii10072",
                  1078,
                  "afii10073",
                  1079,
                  "afii10074",
                  1080,
                  "afii10075",
                  1081,
                  "afii10076",
                  1082,
                  "afii10077",
                  1083,
                  "afii10078",
                  1084,
                  "afii10079",
                  1085,
                  "afii10080",
                  1086,
                  "afii10081",
                  1087,
                  "afii10082",
                  1088,
                  "afii10083",
                  1089,
                  "afii10084",
                  1090,
                  "afii10085",
                  1091,
                  "afii10086",
                  1092,
                  "afii10087",
                  1093,
                  "afii10088",
                  1094,
                  "afii10089",
                  1095,
                  "afii10090",
                  1096,
                  "afii10091",
                  1097,
                  "afii10092",
                  1098,
                  "afii10093",
                  1099,
                  "afii10094",
                  1100,
                  "afii10095",
                  1101,
                  "afii10096",
                  1102,
                  "afii10097",
                  1103,
                  "afii10098",
                  1169,
                  "afii10099",
                  1106,
                  "afii10100",
                  1107,
                  "afii10101",
                  1108,
                  "afii10102",
                  1109,
                  "afii10103",
                  1110,
                  "afii10104",
                  1111,
                  "afii10105",
                  1112,
                  "afii10106",
                  1113,
                  "afii10107",
                  1114,
                  "afii10108",
                  1115,
                  "afii10109",
                  1116,
                  "afii10110",
                  1118,
                  "afii10145",
                  1039,
                  "afii10146",
                  1122,
                  "afii10147",
                  1138,
                  "afii10148",
                  1140,
                  "afii10192",
                  63174,
                  "afii10193",
                  1119,
                  "afii10194",
                  1123,
                  "afii10195",
                  1139,
                  "afii10196",
                  1141,
                  "afii10831",
                  63175,
                  "afii10832",
                  63176,
                  "afii10846",
                  1241,
                  "afii299",
                  8206,
                  "afii300",
                  8207,
                  "afii301",
                  8205,
                  "afii57381",
                  1642,
                  "afii57388",
                  1548,
                  "afii57392",
                  1632,
                  "afii57393",
                  1633,
                  "afii57394",
                  1634,
                  "afii57395",
                  1635,
                  "afii57396",
                  1636,
                  "afii57397",
                  1637,
                  "afii57398",
                  1638,
                  "afii57399",
                  1639,
                  "afii57400",
                  1640,
                  "afii57401",
                  1641,
                  "afii57403",
                  1563,
                  "afii57407",
                  1567,
                  "afii57409",
                  1569,
                  "afii57410",
                  1570,
                  "afii57411",
                  1571,
                  "afii57412",
                  1572,
                  "afii57413",
                  1573,
                  "afii57414",
                  1574,
                  "afii57415",
                  1575,
                  "afii57416",
                  1576,
                  "afii57417",
                  1577,
                  "afii57418",
                  1578,
                  "afii57419",
                  1579,
                  "afii57420",
                  1580,
                  "afii57421",
                  1581,
                  "afii57422",
                  1582,
                  "afii57423",
                  1583,
                  "afii57424",
                  1584,
                  "afii57425",
                  1585,
                  "afii57426",
                  1586,
                  "afii57427",
                  1587,
                  "afii57428",
                  1588,
                  "afii57429",
                  1589,
                  "afii57430",
                  1590,
                  "afii57431",
                  1591,
                  "afii57432",
                  1592,
                  "afii57433",
                  1593,
                  "afii57434",
                  1594,
                  "afii57440",
                  1600,
                  "afii57441",
                  1601,
                  "afii57442",
                  1602,
                  "afii57443",
                  1603,
                  "afii57444",
                  1604,
                  "afii57445",
                  1605,
                  "afii57446",
                  1606,
                  "afii57448",
                  1608,
                  "afii57449",
                  1609,
                  "afii57450",
                  1610,
                  "afii57451",
                  1611,
                  "afii57452",
                  1612,
                  "afii57453",
                  1613,
                  "afii57454",
                  1614,
                  "afii57455",
                  1615,
                  "afii57456",
                  1616,
                  "afii57457",
                  1617,
                  "afii57458",
                  1618,
                  "afii57470",
                  1607,
                  "afii57505",
                  1700,
                  "afii57506",
                  1662,
                  "afii57507",
                  1670,
                  "afii57508",
                  1688,
                  "afii57509",
                  1711,
                  "afii57511",
                  1657,
                  "afii57512",
                  1672,
                  "afii57513",
                  1681,
                  "afii57514",
                  1722,
                  "afii57519",
                  1746,
                  "afii57534",
                  1749,
                  "afii57636",
                  8362,
                  "afii57645",
                  1470,
                  "afii57658",
                  1475,
                  "afii57664",
                  1488,
                  "afii57665",
                  1489,
                  "afii57666",
                  1490,
                  "afii57667",
                  1491,
                  "afii57668",
                  1492,
                  "afii57669",
                  1493,
                  "afii57670",
                  1494,
                  "afii57671",
                  1495,
                  "afii57672",
                  1496,
                  "afii57673",
                  1497,
                  "afii57674",
                  1498,
                  "afii57675",
                  1499,
                  "afii57676",
                  1500,
                  "afii57677",
                  1501,
                  "afii57678",
                  1502,
                  "afii57679",
                  1503,
                  "afii57680",
                  1504,
                  "afii57681",
                  1505,
                  "afii57682",
                  1506,
                  "afii57683",
                  1507,
                  "afii57684",
                  1508,
                  "afii57685",
                  1509,
                  "afii57686",
                  1510,
                  "afii57687",
                  1511,
                  "afii57688",
                  1512,
                  "afii57689",
                  1513,
                  "afii57690",
                  1514,
                  "afii57694",
                  64298,
                  "afii57695",
                  64299,
                  "afii57700",
                  64331,
                  "afii57705",
                  64287,
                  "afii57716",
                  1520,
                  "afii57717",
                  1521,
                  "afii57718",
                  1522,
                  "afii57723",
                  64309,
                  "afii57793",
                  1460,
                  "afii57794",
                  1461,
                  "afii57795",
                  1462,
                  "afii57796",
                  1467,
                  "afii57797",
                  1464,
                  "afii57798",
                  1463,
                  "afii57799",
                  1456,
                  "afii57800",
                  1458,
                  "afii57801",
                  1457,
                  "afii57802",
                  1459,
                  "afii57803",
                  1474,
                  "afii57804",
                  1473,
                  "afii57806",
                  1465,
                  "afii57807",
                  1468,
                  "afii57839",
                  1469,
                  "afii57841",
                  1471,
                  "afii57842",
                  1472,
                  "afii57929",
                  700,
                  "afii61248",
                  8453,
                  "afii61289",
                  8467,
                  "afii61352",
                  8470,
                  "afii61573",
                  8236,
                  "afii61574",
                  8237,
                  "afii61575",
                  8238,
                  "afii61664",
                  8204,
                  "afii63167",
                  1645,
                  "afii64937",
                  701,
                  "agrave",
                  224,
                  "agujarati",
                  2693,
                  "agurmukhi",
                  2565,
                  "ahiragana",
                  12354,
                  "ahookabove",
                  7843,
                  "aibengali",
                  2448,
                  "aibopomofo",
                  12574,
                  "aideva",
                  2320,
                  "aiecyrillic",
                  1237,
                  "aigujarati",
                  2704,
                  "aigurmukhi",
                  2576,
                  "aimatragurmukhi",
                  2632,
                  "ainarabic",
                  1593,
                  "ainfinalarabic",
                  65226,
                  "aininitialarabic",
                  65227,
                  "ainmedialarabic",
                  65228,
                  "ainvertedbreve",
                  515,
                  "aivowelsignbengali",
                  2504,
                  "aivowelsigndeva",
                  2376,
                  "aivowelsigngujarati",
                  2760,
                  "akatakana",
                  12450,
                  "akatakanahalfwidth",
                  65393,
                  "akorean",
                  12623,
                  "alef",
                  1488,
                  "alefarabic",
                  1575,
                  "alefdageshhebrew",
                  64304,
                  "aleffinalarabic",
                  65166,
                  "alefhamzaabovearabic",
                  1571,
                  "alefhamzaabovefinalarabic",
                  65156,
                  "alefhamzabelowarabic",
                  1573,
                  "alefhamzabelowfinalarabic",
                  65160,
                  "alefhebrew",
                  1488,
                  "aleflamedhebrew",
                  64335,
                  "alefmaddaabovearabic",
                  1570,
                  "alefmaddaabovefinalarabic",
                  65154,
                  "alefmaksuraarabic",
                  1609,
                  "alefmaksurafinalarabic",
                  65264,
                  "alefmaksurainitialarabic",
                  65267,
                  "alefmaksuramedialarabic",
                  65268,
                  "alefpatahhebrew",
                  64302,
                  "alefqamatshebrew",
                  64303,
                  "aleph",
                  8501,
                  "allequal",
                  8780,
                  "alpha",
                  945,
                  "alphatonos",
                  940,
                  "amacron",
                  257,
                  "amonospace",
                  65345,
                  "ampersand",
                  38,
                  "ampersandmonospace",
                  65286,
                  "ampersandsmall",
                  63270,
                  "amsquare",
                  13250,
                  "anbopomofo",
                  12578,
                  "angbopomofo",
                  12580,
                  "angbracketleft",
                  12296,
                  "angbracketright",
                  12297,
                  "angkhankhuthai",
                  3674,
                  "angle",
                  8736,
                  "anglebracketleft",
                  12296,
                  "anglebracketleftvertical",
                  65087,
                  "anglebracketright",
                  12297,
                  "anglebracketrightvertical",
                  65088,
                  "angleleft",
                  9001,
                  "angleright",
                  9002,
                  "angstrom",
                  8491,
                  "anoteleia",
                  903,
                  "anudattadeva",
                  2386,
                  "anusvarabengali",
                  2434,
                  "anusvaradeva",
                  2306,
                  "anusvaragujarati",
                  2690,
                  "aogonek",
                  261,
                  "apaatosquare",
                  13056,
                  "aparen",
                  9372,
                  "apostrophearmenian",
                  1370,
                  "apostrophemod",
                  700,
                  "apple",
                  63743,
                  "approaches",
                  8784,
                  "approxequal",
                  8776,
                  "approxequalorimage",
                  8786,
                  "approximatelyequal",
                  8773,
                  "araeaekorean",
                  12686,
                  "araeakorean",
                  12685,
                  "arc",
                  8978,
                  "arighthalfring",
                  7834,
                  "aring",
                  229,
                  "aringacute",
                  507,
                  "aringbelow",
                  7681,
                  "arrowboth",
                  8596,
                  "arrowdashdown",
                  8675,
                  "arrowdashleft",
                  8672,
                  "arrowdashright",
                  8674,
                  "arrowdashup",
                  8673,
                  "arrowdblboth",
                  8660,
                  "arrowdbldown",
                  8659,
                  "arrowdblleft",
                  8656,
                  "arrowdblright",
                  8658,
                  "arrowdblup",
                  8657,
                  "arrowdown",
                  8595,
                  "arrowdownleft",
                  8601,
                  "arrowdownright",
                  8600,
                  "arrowdownwhite",
                  8681,
                  "arrowheaddownmod",
                  709,
                  "arrowheadleftmod",
                  706,
                  "arrowheadrightmod",
                  707,
                  "arrowheadupmod",
                  708,
                  "arrowhorizex",
                  63719,
                  "arrowleft",
                  8592,
                  "arrowleftdbl",
                  8656,
                  "arrowleftdblstroke",
                  8653,
                  "arrowleftoverright",
                  8646,
                  "arrowleftwhite",
                  8678,
                  "arrowright",
                  8594,
                  "arrowrightdblstroke",
                  8655,
                  "arrowrightheavy",
                  10142,
                  "arrowrightoverleft",
                  8644,
                  "arrowrightwhite",
                  8680,
                  "arrowtableft",
                  8676,
                  "arrowtabright",
                  8677,
                  "arrowup",
                  8593,
                  "arrowupdn",
                  8597,
                  "arrowupdnbse",
                  8616,
                  "arrowupdownbase",
                  8616,
                  "arrowupleft",
                  8598,
                  "arrowupleftofdown",
                  8645,
                  "arrowupright",
                  8599,
                  "arrowupwhite",
                  8679,
                  "arrowvertex",
                  63718,
                  "asciicircum",
                  94,
                  "asciicircummonospace",
                  65342,
                  "asciitilde",
                  126,
                  "asciitildemonospace",
                  65374,
                  "ascript",
                  593,
                  "ascriptturned",
                  594,
                  "asmallhiragana",
                  12353,
                  "asmallkatakana",
                  12449,
                  "asmallkatakanahalfwidth",
                  65383,
                  "asterisk",
                  42,
                  "asteriskaltonearabic",
                  1645,
                  "asteriskarabic",
                  1645,
                  "asteriskmath",
                  8727,
                  "asteriskmonospace",
                  65290,
                  "asterisksmall",
                  65121,
                  "asterism",
                  8258,
                  "asuperior",
                  63209,
                  "asymptoticallyequal",
                  8771,
                  "at",
                  64,
                  "atilde",
                  227,
                  "atmonospace",
                  65312,
                  "atsmall",
                  65131,
                  "aturned",
                  592,
                  "aubengali",
                  2452,
                  "aubopomofo",
                  12576,
                  "audeva",
                  2324,
                  "augujarati",
                  2708,
                  "augurmukhi",
                  2580,
                  "aulengthmarkbengali",
                  2519,
                  "aumatragurmukhi",
                  2636,
                  "auvowelsignbengali",
                  2508,
                  "auvowelsigndeva",
                  2380,
                  "auvowelsigngujarati",
                  2764,
                  "avagrahadeva",
                  2365,
                  "aybarmenian",
                  1377,
                  "ayin",
                  1506,
                  "ayinaltonehebrew",
                  64288,
                  "ayinhebrew",
                  1506,
                  "b",
                  98,
                  "babengali",
                  2476,
                  "backslash",
                  92,
                  "backslashmonospace",
                  65340,
                  "badeva",
                  2348,
                  "bagujarati",
                  2732,
                  "bagurmukhi",
                  2604,
                  "bahiragana",
                  12400,
                  "bahtthai",
                  3647,
                  "bakatakana",
                  12496,
                  "bar",
                  124,
                  "barmonospace",
                  65372,
                  "bbopomofo",
                  12549,
                  "bcircle",
                  9425,
                  "bdotaccent",
                  7683,
                  "bdotbelow",
                  7685,
                  "beamedsixteenthnotes",
                  9836,
                  "because",
                  8757,
                  "becyrillic",
                  1073,
                  "beharabic",
                  1576,
                  "behfinalarabic",
                  65168,
                  "behinitialarabic",
                  65169,
                  "behiragana",
                  12409,
                  "behmedialarabic",
                  65170,
                  "behmeeminitialarabic",
                  64671,
                  "behmeemisolatedarabic",
                  64520,
                  "behnoonfinalarabic",
                  64621,
                  "bekatakana",
                  12505,
                  "benarmenian",
                  1378,
                  "bet",
                  1489,
                  "beta",
                  946,
                  "betasymbolgreek",
                  976,
                  "betdagesh",
                  64305,
                  "betdageshhebrew",
                  64305,
                  "bethebrew",
                  1489,
                  "betrafehebrew",
                  64332,
                  "bhabengali",
                  2477,
                  "bhadeva",
                  2349,
                  "bhagujarati",
                  2733,
                  "bhagurmukhi",
                  2605,
                  "bhook",
                  595,
                  "bihiragana",
                  12403,
                  "bikatakana",
                  12499,
                  "bilabialclick",
                  664,
                  "bindigurmukhi",
                  2562,
                  "birusquare",
                  13105,
                  "blackcircle",
                  9679,
                  "blackdiamond",
                  9670,
                  "blackdownpointingtriangle",
                  9660,
                  "blackleftpointingpointer",
                  9668,
                  "blackleftpointingtriangle",
                  9664,
                  "blacklenticularbracketleft",
                  12304,
                  "blacklenticularbracketleftvertical",
                  65083,
                  "blacklenticularbracketright",
                  12305,
                  "blacklenticularbracketrightvertical",
                  65084,
                  "blacklowerlefttriangle",
                  9699,
                  "blacklowerrighttriangle",
                  9698,
                  "blackrectangle",
                  9644,
                  "blackrightpointingpointer",
                  9658,
                  "blackrightpointingtriangle",
                  9654,
                  "blacksmallsquare",
                  9642,
                  "blacksmilingface",
                  9787,
                  "blacksquare",
                  9632,
                  "blackstar",
                  9733,
                  "blackupperlefttriangle",
                  9700,
                  "blackupperrighttriangle",
                  9701,
                  "blackuppointingsmalltriangle",
                  9652,
                  "blackuppointingtriangle",
                  9650,
                  "blank",
                  9251,
                  "blinebelow",
                  7687,
                  "block",
                  9608,
                  "bmonospace",
                  65346,
                  "bobaimaithai",
                  3610,
                  "bohiragana",
                  12412,
                  "bokatakana",
                  12508,
                  "bparen",
                  9373,
                  "bqsquare",
                  13251,
                  "braceex",
                  63732,
                  "braceleft",
                  123,
                  "braceleftbt",
                  63731,
                  "braceleftmid",
                  63730,
                  "braceleftmonospace",
                  65371,
                  "braceleftsmall",
                  65115,
                  "bracelefttp",
                  63729,
                  "braceleftvertical",
                  65079,
                  "braceright",
                  125,
                  "bracerightbt",
                  63742,
                  "bracerightmid",
                  63741,
                  "bracerightmonospace",
                  65373,
                  "bracerightsmall",
                  65116,
                  "bracerighttp",
                  63740,
                  "bracerightvertical",
                  65080,
                  "bracketleft",
                  91,
                  "bracketleftbt",
                  63728,
                  "bracketleftex",
                  63727,
                  "bracketleftmonospace",
                  65339,
                  "bracketlefttp",
                  63726,
                  "bracketright",
                  93,
                  "bracketrightbt",
                  63739,
                  "bracketrightex",
                  63738,
                  "bracketrightmonospace",
                  65341,
                  "bracketrighttp",
                  63737,
                  "breve",
                  728,
                  "brevebelowcmb",
                  814,
                  "brevecmb",
                  774,
                  "breveinvertedbelowcmb",
                  815,
                  "breveinvertedcmb",
                  785,
                  "breveinverteddoublecmb",
                  865,
                  "bridgebelowcmb",
                  810,
                  "bridgeinvertedbelowcmb",
                  826,
                  "brokenbar",
                  166,
                  "bstroke",
                  384,
                  "bsuperior",
                  63210,
                  "btopbar",
                  387,
                  "buhiragana",
                  12406,
                  "bukatakana",
                  12502,
                  "bullet",
                  8226,
                  "bulletinverse",
                  9688,
                  "bulletoperator",
                  8729,
                  "bullseye",
                  9678,
                  "c",
                  99,
                  "caarmenian",
                  1390,
                  "cabengali",
                  2458,
                  "cacute",
                  263,
                  "cadeva",
                  2330,
                  "cagujarati",
                  2714,
                  "cagurmukhi",
                  2586,
                  "calsquare",
                  13192,
                  "candrabindubengali",
                  2433,
                  "candrabinducmb",
                  784,
                  "candrabindudeva",
                  2305,
                  "candrabindugujarati",
                  2689,
                  "capslock",
                  8682,
                  "careof",
                  8453,
                  "caron",
                  711,
                  "caronbelowcmb",
                  812,
                  "caroncmb",
                  780,
                  "carriagereturn",
                  8629,
                  "cbopomofo",
                  12568,
                  "ccaron",
                  269,
                  "ccedilla",
                  231,
                  "ccedillaacute",
                  7689,
                  "ccircle",
                  9426,
                  "ccircumflex",
                  265,
                  "ccurl",
                  597,
                  "cdot",
                  267,
                  "cdotaccent",
                  267,
                  "cdsquare",
                  13253,
                  "cedilla",
                  184,
                  "cedillacmb",
                  807,
                  "cent",
                  162,
                  "centigrade",
                  8451,
                  "centinferior",
                  63199,
                  "centmonospace",
                  65504,
                  "centoldstyle",
                  63394,
                  "centsuperior",
                  63200,
                  "chaarmenian",
                  1401,
                  "chabengali",
                  2459,
                  "chadeva",
                  2331,
                  "chagujarati",
                  2715,
                  "chagurmukhi",
                  2587,
                  "chbopomofo",
                  12564,
                  "cheabkhasiancyrillic",
                  1213,
                  "checkmark",
                  10003,
                  "checyrillic",
                  1095,
                  "chedescenderabkhasiancyrillic",
                  1215,
                  "chedescendercyrillic",
                  1207,
                  "chedieresiscyrillic",
                  1269,
                  "cheharmenian",
                  1395,
                  "chekhakassiancyrillic",
                  1228,
                  "cheverticalstrokecyrillic",
                  1209,
                  "chi",
                  967,
                  "chieuchacirclekorean",
                  12919,
                  "chieuchaparenkorean",
                  12823,
                  "chieuchcirclekorean",
                  12905,
                  "chieuchkorean",
                  12618,
                  "chieuchparenkorean",
                  12809,
                  "chochangthai",
                  3594,
                  "chochanthai",
                  3592,
                  "chochingthai",
                  3593,
                  "chochoethai",
                  3596,
                  "chook",
                  392,
                  "cieucacirclekorean",
                  12918,
                  "cieucaparenkorean",
                  12822,
                  "cieuccirclekorean",
                  12904,
                  "cieuckorean",
                  12616,
                  "cieucparenkorean",
                  12808,
                  "cieucuparenkorean",
                  12828,
                  "circle",
                  9675,
                  "circlecopyrt",
                  169,
                  "circlemultiply",
                  8855,
                  "circleot",
                  8857,
                  "circleplus",
                  8853,
                  "circlepostalmark",
                  12342,
                  "circlewithlefthalfblack",
                  9680,
                  "circlewithrighthalfblack",
                  9681,
                  "circumflex",
                  710,
                  "circumflexbelowcmb",
                  813,
                  "circumflexcmb",
                  770,
                  "clear",
                  8999,
                  "clickalveolar",
                  450,
                  "clickdental",
                  448,
                  "clicklateral",
                  449,
                  "clickretroflex",
                  451,
                  "club",
                  9827,
                  "clubsuitblack",
                  9827,
                  "clubsuitwhite",
                  9831,
                  "cmcubedsquare",
                  13220,
                  "cmonospace",
                  65347,
                  "cmsquaredsquare",
                  13216,
                  "coarmenian",
                  1409,
                  "colon",
                  58,
                  "colonmonetary",
                  8353,
                  "colonmonospace",
                  65306,
                  "colonsign",
                  8353,
                  "colonsmall",
                  65109,
                  "colontriangularhalfmod",
                  721,
                  "colontriangularmod",
                  720,
                  "comma",
                  44,
                  "commaabovecmb",
                  787,
                  "commaaboverightcmb",
                  789,
                  "commaaccent",
                  63171,
                  "commaarabic",
                  1548,
                  "commaarmenian",
                  1373,
                  "commainferior",
                  63201,
                  "commamonospace",
                  65292,
                  "commareversedabovecmb",
                  788,
                  "commareversedmod",
                  701,
                  "commasmall",
                  65104,
                  "commasuperior",
                  63202,
                  "commaturnedabovecmb",
                  786,
                  "commaturnedmod",
                  699,
                  "compass",
                  9788,
                  "congruent",
                  8773,
                  "contourintegral",
                  8750,
                  "control",
                  8963,
                  "controlACK",
                  6,
                  "controlBEL",
                  7,
                  "controlBS",
                  8,
                  "controlCAN",
                  24,
                  "controlCR",
                  13,
                  "controlDC1",
                  17,
                  "controlDC2",
                  18,
                  "controlDC3",
                  19,
                  "controlDC4",
                  20,
                  "controlDEL",
                  127,
                  "controlDLE",
                  16,
                  "controlEM",
                  25,
                  "controlENQ",
                  5,
                  "controlEOT",
                  4,
                  "controlESC",
                  27,
                  "controlETB",
                  23,
                  "controlETX",
                  3,
                  "controlFF",
                  12,
                  "controlFS",
                  28,
                  "controlGS",
                  29,
                  "controlHT",
                  9,
                  "controlLF",
                  10,
                  "controlNAK",
                  21,
                  "controlNULL",
                  0,
                  "controlRS",
                  30,
                  "controlSI",
                  15,
                  "controlSO",
                  14,
                  "controlSOT",
                  2,
                  "controlSTX",
                  1,
                  "controlSUB",
                  26,
                  "controlSYN",
                  22,
                  "controlUS",
                  31,
                  "controlVT",
                  11,
                  "copyright",
                  169,
                  "copyrightsans",
                  63721,
                  "copyrightserif",
                  63193,
                  "cornerbracketleft",
                  12300,
                  "cornerbracketlefthalfwidth",
                  65378,
                  "cornerbracketleftvertical",
                  65089,
                  "cornerbracketright",
                  12301,
                  "cornerbracketrighthalfwidth",
                  65379,
                  "cornerbracketrightvertical",
                  65090,
                  "corporationsquare",
                  13183,
                  "cosquare",
                  13255,
                  "coverkgsquare",
                  13254,
                  "cparen",
                  9374,
                  "cruzeiro",
                  8354,
                  "cstretched",
                  663,
                  "curlyand",
                  8911,
                  "curlyor",
                  8910,
                  "currency",
                  164,
                  "cyrBreve",
                  63185,
                  "cyrFlex",
                  63186,
                  "cyrbreve",
                  63188,
                  "cyrflex",
                  63189,
                  "d",
                  100,
                  "daarmenian",
                  1380,
                  "dabengali",
                  2470,
                  "dadarabic",
                  1590,
                  "dadeva",
                  2342,
                  "dadfinalarabic",
                  65214,
                  "dadinitialarabic",
                  65215,
                  "dadmedialarabic",
                  65216,
                  "dagesh",
                  1468,
                  "dageshhebrew",
                  1468,
                  "dagger",
                  8224,
                  "daggerdbl",
                  8225,
                  "dagujarati",
                  2726,
                  "dagurmukhi",
                  2598,
                  "dahiragana",
                  12384,
                  "dakatakana",
                  12480,
                  "dalarabic",
                  1583,
                  "dalet",
                  1491,
                  "daletdagesh",
                  64307,
                  "daletdageshhebrew",
                  64307,
                  "dalethebrew",
                  1491,
                  "dalfinalarabic",
                  65194,
                  "dammaarabic",
                  1615,
                  "dammalowarabic",
                  1615,
                  "dammatanaltonearabic",
                  1612,
                  "dammatanarabic",
                  1612,
                  "danda",
                  2404,
                  "dargahebrew",
                  1447,
                  "dargalefthebrew",
                  1447,
                  "dasiapneumatacyrilliccmb",
                  1157,
                  "dblGrave",
                  63187,
                  "dblanglebracketleft",
                  12298,
                  "dblanglebracketleftvertical",
                  65085,
                  "dblanglebracketright",
                  12299,
                  "dblanglebracketrightvertical",
                  65086,
                  "dblarchinvertedbelowcmb",
                  811,
                  "dblarrowleft",
                  8660,
                  "dblarrowright",
                  8658,
                  "dbldanda",
                  2405,
                  "dblgrave",
                  63190,
                  "dblgravecmb",
                  783,
                  "dblintegral",
                  8748,
                  "dbllowline",
                  8215,
                  "dbllowlinecmb",
                  819,
                  "dbloverlinecmb",
                  831,
                  "dblprimemod",
                  698,
                  "dblverticalbar",
                  8214,
                  "dblverticallineabovecmb",
                  782,
                  "dbopomofo",
                  12553,
                  "dbsquare",
                  13256,
                  "dcaron",
                  271,
                  "dcedilla",
                  7697,
                  "dcircle",
                  9427,
                  "dcircumflexbelow",
                  7699,
                  "dcroat",
                  273,
                  "ddabengali",
                  2465,
                  "ddadeva",
                  2337,
                  "ddagujarati",
                  2721,
                  "ddagurmukhi",
                  2593,
                  "ddalarabic",
                  1672,
                  "ddalfinalarabic",
                  64393,
                  "dddhadeva",
                  2396,
                  "ddhabengali",
                  2466,
                  "ddhadeva",
                  2338,
                  "ddhagujarati",
                  2722,
                  "ddhagurmukhi",
                  2594,
                  "ddotaccent",
                  7691,
                  "ddotbelow",
                  7693,
                  "decimalseparatorarabic",
                  1643,
                  "decimalseparatorpersian",
                  1643,
                  "decyrillic",
                  1076,
                  "degree",
                  176,
                  "dehihebrew",
                  1453,
                  "dehiragana",
                  12391,
                  "deicoptic",
                  1007,
                  "dekatakana",
                  12487,
                  "deleteleft",
                  9003,
                  "deleteright",
                  8998,
                  "delta",
                  948,
                  "deltaturned",
                  397,
                  "denominatorminusonenumeratorbengali",
                  2552,
                  "dezh",
                  676,
                  "dhabengali",
                  2471,
                  "dhadeva",
                  2343,
                  "dhagujarati",
                  2727,
                  "dhagurmukhi",
                  2599,
                  "dhook",
                  599,
                  "dialytikatonos",
                  901,
                  "dialytikatonoscmb",
                  836,
                  "diamond",
                  9830,
                  "diamondsuitwhite",
                  9826,
                  "dieresis",
                  168,
                  "dieresisacute",
                  63191,
                  "dieresisbelowcmb",
                  804,
                  "dieresiscmb",
                  776,
                  "dieresisgrave",
                  63192,
                  "dieresistonos",
                  901,
                  "dihiragana",
                  12386,
                  "dikatakana",
                  12482,
                  "dittomark",
                  12291,
                  "divide",
                  247,
                  "divides",
                  8739,
                  "divisionslash",
                  8725,
                  "djecyrillic",
                  1106,
                  "dkshade",
                  9619,
                  "dlinebelow",
                  7695,
                  "dlsquare",
                  13207,
                  "dmacron",
                  273,
                  "dmonospace",
                  65348,
                  "dnblock",
                  9604,
                  "dochadathai",
                  3598,
                  "dodekthai",
                  3604,
                  "dohiragana",
                  12393,
                  "dokatakana",
                  12489,
                  "dollar",
                  36,
                  "dollarinferior",
                  63203,
                  "dollarmonospace",
                  65284,
                  "dollaroldstyle",
                  63268,
                  "dollarsmall",
                  65129,
                  "dollarsuperior",
                  63204,
                  "dong",
                  8363,
                  "dorusquare",
                  13094,
                  "dotaccent",
                  729,
                  "dotaccentcmb",
                  775,
                  "dotbelowcmb",
                  803,
                  "dotbelowcomb",
                  803,
                  "dotkatakana",
                  12539,
                  "dotlessi",
                  305,
                  "dotlessj",
                  63166,
                  "dotlessjstrokehook",
                  644,
                  "dotmath",
                  8901,
                  "dottedcircle",
                  9676,
                  "doubleyodpatah",
                  64287,
                  "doubleyodpatahhebrew",
                  64287,
                  "downtackbelowcmb",
                  798,
                  "downtackmod",
                  725,
                  "dparen",
                  9375,
                  "dsuperior",
                  63211,
                  "dtail",
                  598,
                  "dtopbar",
                  396,
                  "duhiragana",
                  12389,
                  "dukatakana",
                  12485,
                  "dz",
                  499,
                  "dzaltone",
                  675,
                  "dzcaron",
                  454,
                  "dzcurl",
                  677,
                  "dzeabkhasiancyrillic",
                  1249,
                  "dzecyrillic",
                  1109,
                  "dzhecyrillic",
                  1119,
                  "e",
                  101,
                  "eacute",
                  233,
                  "earth",
                  9793,
                  "ebengali",
                  2447,
                  "ebopomofo",
                  12572,
                  "ebreve",
                  277,
                  "ecandradeva",
                  2317,
                  "ecandragujarati",
                  2701,
                  "ecandravowelsigndeva",
                  2373,
                  "ecandravowelsigngujarati",
                  2757,
                  "ecaron",
                  283,
                  "ecedillabreve",
                  7709,
                  "echarmenian",
                  1381,
                  "echyiwnarmenian",
                  1415,
                  "ecircle",
                  9428,
                  "ecircumflex",
                  234,
                  "ecircumflexacute",
                  7871,
                  "ecircumflexbelow",
                  7705,
                  "ecircumflexdotbelow",
                  7879,
                  "ecircumflexgrave",
                  7873,
                  "ecircumflexhookabove",
                  7875,
                  "ecircumflextilde",
                  7877,
                  "ecyrillic",
                  1108,
                  "edblgrave",
                  517,
                  "edeva",
                  2319,
                  "edieresis",
                  235,
                  "edot",
                  279,
                  "edotaccent",
                  279,
                  "edotbelow",
                  7865,
                  "eegurmukhi",
                  2575,
                  "eematragurmukhi",
                  2631,
                  "efcyrillic",
                  1092,
                  "egrave",
                  232,
                  "egujarati",
                  2703,
                  "eharmenian",
                  1383,
                  "ehbopomofo",
                  12573,
                  "ehiragana",
                  12360,
                  "ehookabove",
                  7867,
                  "eibopomofo",
                  12575,
                  "eight",
                  56,
                  "eightarabic",
                  1640,
                  "eightbengali",
                  2542,
                  "eightcircle",
                  9319,
                  "eightcircleinversesansserif",
                  10129,
                  "eightdeva",
                  2414,
                  "eighteencircle",
                  9329,
                  "eighteenparen",
                  9349,
                  "eighteenperiod",
                  9369,
                  "eightgujarati",
                  2798,
                  "eightgurmukhi",
                  2670,
                  "eighthackarabic",
                  1640,
                  "eighthangzhou",
                  12328,
                  "eighthnotebeamed",
                  9835,
                  "eightideographicparen",
                  12839,
                  "eightinferior",
                  8328,
                  "eightmonospace",
                  65304,
                  "eightoldstyle",
                  63288,
                  "eightparen",
                  9339,
                  "eightperiod",
                  9359,
                  "eightpersian",
                  1784,
                  "eightroman",
                  8567,
                  "eightsuperior",
                  8312,
                  "eightthai",
                  3672,
                  "einvertedbreve",
                  519,
                  "eiotifiedcyrillic",
                  1125,
                  "ekatakana",
                  12456,
                  "ekatakanahalfwidth",
                  65396,
                  "ekonkargurmukhi",
                  2676,
                  "ekorean",
                  12628,
                  "elcyrillic",
                  1083,
                  "element",
                  8712,
                  "elevencircle",
                  9322,
                  "elevenparen",
                  9342,
                  "elevenperiod",
                  9362,
                  "elevenroman",
                  8570,
                  "ellipsis",
                  8230,
                  "ellipsisvertical",
                  8942,
                  "emacron",
                  275,
                  "emacronacute",
                  7703,
                  "emacrongrave",
                  7701,
                  "emcyrillic",
                  1084,
                  "emdash",
                  8212,
                  "emdashvertical",
                  65073,
                  "emonospace",
                  65349,
                  "emphasismarkarmenian",
                  1371,
                  "emptyset",
                  8709,
                  "enbopomofo",
                  12579,
                  "encyrillic",
                  1085,
                  "endash",
                  8211,
                  "endashvertical",
                  65074,
                  "endescendercyrillic",
                  1187,
                  "eng",
                  331,
                  "engbopomofo",
                  12581,
                  "enghecyrillic",
                  1189,
                  "enhookcyrillic",
                  1224,
                  "enspace",
                  8194,
                  "eogonek",
                  281,
                  "eokorean",
                  12627,
                  "eopen",
                  603,
                  "eopenclosed",
                  666,
                  "eopenreversed",
                  604,
                  "eopenreversedclosed",
                  606,
                  "eopenreversedhook",
                  605,
                  "eparen",
                  9376,
                  "epsilon",
                  949,
                  "epsilontonos",
                  941,
                  "equal",
                  61,
                  "equalmonospace",
                  65309,
                  "equalsmall",
                  65126,
                  "equalsuperior",
                  8316,
                  "equivalence",
                  8801,
                  "erbopomofo",
                  12582,
                  "ercyrillic",
                  1088,
                  "ereversed",
                  600,
                  "ereversedcyrillic",
                  1101,
                  "escyrillic",
                  1089,
                  "esdescendercyrillic",
                  1195,
                  "esh",
                  643,
                  "eshcurl",
                  646,
                  "eshortdeva",
                  2318,
                  "eshortvowelsigndeva",
                  2374,
                  "eshreversedloop",
                  426,
                  "eshsquatreversed",
                  645,
                  "esmallhiragana",
                  12359,
                  "esmallkatakana",
                  12455,
                  "esmallkatakanahalfwidth",
                  65386,
                  "estimated",
                  8494,
                  "esuperior",
                  63212,
                  "eta",
                  951,
                  "etarmenian",
                  1384,
                  "etatonos",
                  942,
                  "eth",
                  240,
                  "etilde",
                  7869,
                  "etildebelow",
                  7707,
                  "etnahtafoukhhebrew",
                  1425,
                  "etnahtafoukhlefthebrew",
                  1425,
                  "etnahtahebrew",
                  1425,
                  "etnahtalefthebrew",
                  1425,
                  "eturned",
                  477,
                  "eukorean",
                  12641,
                  "euro",
                  8364,
                  "evowelsignbengali",
                  2503,
                  "evowelsigndeva",
                  2375,
                  "evowelsigngujarati",
                  2759,
                  "exclam",
                  33,
                  "exclamarmenian",
                  1372,
                  "exclamdbl",
                  8252,
                  "exclamdown",
                  161,
                  "exclamdownsmall",
                  63393,
                  "exclammonospace",
                  65281,
                  "exclamsmall",
                  63265,
                  "existential",
                  8707,
                  "ezh",
                  658,
                  "ezhcaron",
                  495,
                  "ezhcurl",
                  659,
                  "ezhreversed",
                  441,
                  "ezhtail",
                  442,
                  "f",
                  102,
                  "fadeva",
                  2398,
                  "fagurmukhi",
                  2654,
                  "fahrenheit",
                  8457,
                  "fathaarabic",
                  1614,
                  "fathalowarabic",
                  1614,
                  "fathatanarabic",
                  1611,
                  "fbopomofo",
                  12552,
                  "fcircle",
                  9429,
                  "fdotaccent",
                  7711,
                  "feharabic",
                  1601,
                  "feharmenian",
                  1414,
                  "fehfinalarabic",
                  65234,
                  "fehinitialarabic",
                  65235,
                  "fehmedialarabic",
                  65236,
                  "feicoptic",
                  997,
                  "female",
                  9792,
                  "ff",
                  64256,
                  "f_f",
                  64256,
                  "ffi",
                  64259,
                  "ffl",
                  64260,
                  "fi",
                  64257,
                  "fifteencircle",
                  9326,
                  "fifteenparen",
                  9346,
                  "fifteenperiod",
                  9366,
                  "figuredash",
                  8210,
                  "filledbox",
                  9632,
                  "filledrect",
                  9644,
                  "finalkaf",
                  1498,
                  "finalkafdagesh",
                  64314,
                  "finalkafdageshhebrew",
                  64314,
                  "finalkafhebrew",
                  1498,
                  "finalmem",
                  1501,
                  "finalmemhebrew",
                  1501,
                  "finalnun",
                  1503,
                  "finalnunhebrew",
                  1503,
                  "finalpe",
                  1507,
                  "finalpehebrew",
                  1507,
                  "finaltsadi",
                  1509,
                  "finaltsadihebrew",
                  1509,
                  "firsttonechinese",
                  713,
                  "fisheye",
                  9673,
                  "fitacyrillic",
                  1139,
                  "five",
                  53,
                  "fivearabic",
                  1637,
                  "fivebengali",
                  2539,
                  "fivecircle",
                  9316,
                  "fivecircleinversesansserif",
                  10126,
                  "fivedeva",
                  2411,
                  "fiveeighths",
                  8541,
                  "fivegujarati",
                  2795,
                  "fivegurmukhi",
                  2667,
                  "fivehackarabic",
                  1637,
                  "fivehangzhou",
                  12325,
                  "fiveideographicparen",
                  12836,
                  "fiveinferior",
                  8325,
                  "fivemonospace",
                  65301,
                  "fiveoldstyle",
                  63285,
                  "fiveparen",
                  9336,
                  "fiveperiod",
                  9356,
                  "fivepersian",
                  1781,
                  "fiveroman",
                  8564,
                  "fivesuperior",
                  8309,
                  "fivethai",
                  3669,
                  "fl",
                  64258,
                  "florin",
                  402,
                  "fmonospace",
                  65350,
                  "fmsquare",
                  13209,
                  "fofanthai",
                  3615,
                  "fofathai",
                  3613,
                  "fongmanthai",
                  3663,
                  "forall",
                  8704,
                  "four",
                  52,
                  "fourarabic",
                  1636,
                  "fourbengali",
                  2538,
                  "fourcircle",
                  9315,
                  "fourcircleinversesansserif",
                  10125,
                  "fourdeva",
                  2410,
                  "fourgujarati",
                  2794,
                  "fourgurmukhi",
                  2666,
                  "fourhackarabic",
                  1636,
                  "fourhangzhou",
                  12324,
                  "fourideographicparen",
                  12835,
                  "fourinferior",
                  8324,
                  "fourmonospace",
                  65300,
                  "fournumeratorbengali",
                  2551,
                  "fouroldstyle",
                  63284,
                  "fourparen",
                  9335,
                  "fourperiod",
                  9355,
                  "fourpersian",
                  1780,
                  "fourroman",
                  8563,
                  "foursuperior",
                  8308,
                  "fourteencircle",
                  9325,
                  "fourteenparen",
                  9345,
                  "fourteenperiod",
                  9365,
                  "fourthai",
                  3668,
                  "fourthtonechinese",
                  715,
                  "fparen",
                  9377,
                  "fraction",
                  8260,
                  "franc",
                  8355,
                  "g",
                  103,
                  "gabengali",
                  2455,
                  "gacute",
                  501,
                  "gadeva",
                  2327,
                  "gafarabic",
                  1711,
                  "gaffinalarabic",
                  64403,
                  "gafinitialarabic",
                  64404,
                  "gafmedialarabic",
                  64405,
                  "gagujarati",
                  2711,
                  "gagurmukhi",
                  2583,
                  "gahiragana",
                  12364,
                  "gakatakana",
                  12460,
                  "gamma",
                  947,
                  "gammalatinsmall",
                  611,
                  "gammasuperior",
                  736,
                  "gangiacoptic",
                  1003,
                  "gbopomofo",
                  12557,
                  "gbreve",
                  287,
                  "gcaron",
                  487,
                  "gcedilla",
                  291,
                  "gcircle",
                  9430,
                  "gcircumflex",
                  285,
                  "gcommaaccent",
                  291,
                  "gdot",
                  289,
                  "gdotaccent",
                  289,
                  "gecyrillic",
                  1075,
                  "gehiragana",
                  12370,
                  "gekatakana",
                  12466,
                  "geometricallyequal",
                  8785,
                  "gereshaccenthebrew",
                  1436,
                  "gereshhebrew",
                  1523,
                  "gereshmuqdamhebrew",
                  1437,
                  "germandbls",
                  223,
                  "gershayimaccenthebrew",
                  1438,
                  "gershayimhebrew",
                  1524,
                  "getamark",
                  12307,
                  "ghabengali",
                  2456,
                  "ghadarmenian",
                  1394,
                  "ghadeva",
                  2328,
                  "ghagujarati",
                  2712,
                  "ghagurmukhi",
                  2584,
                  "ghainarabic",
                  1594,
                  "ghainfinalarabic",
                  65230,
                  "ghaininitialarabic",
                  65231,
                  "ghainmedialarabic",
                  65232,
                  "ghemiddlehookcyrillic",
                  1173,
                  "ghestrokecyrillic",
                  1171,
                  "gheupturncyrillic",
                  1169,
                  "ghhadeva",
                  2394,
                  "ghhagurmukhi",
                  2650,
                  "ghook",
                  608,
                  "ghzsquare",
                  13203,
                  "gihiragana",
                  12366,
                  "gikatakana",
                  12462,
                  "gimarmenian",
                  1379,
                  "gimel",
                  1490,
                  "gimeldagesh",
                  64306,
                  "gimeldageshhebrew",
                  64306,
                  "gimelhebrew",
                  1490,
                  "gjecyrillic",
                  1107,
                  "glottalinvertedstroke",
                  446,
                  "glottalstop",
                  660,
                  "glottalstopinverted",
                  662,
                  "glottalstopmod",
                  704,
                  "glottalstopreversed",
                  661,
                  "glottalstopreversedmod",
                  705,
                  "glottalstopreversedsuperior",
                  740,
                  "glottalstopstroke",
                  673,
                  "glottalstopstrokereversed",
                  674,
                  "gmacron",
                  7713,
                  "gmonospace",
                  65351,
                  "gohiragana",
                  12372,
                  "gokatakana",
                  12468,
                  "gparen",
                  9378,
                  "gpasquare",
                  13228,
                  "gradient",
                  8711,
                  "grave",
                  96,
                  "gravebelowcmb",
                  790,
                  "gravecmb",
                  768,
                  "gravecomb",
                  768,
                  "gravedeva",
                  2387,
                  "gravelowmod",
                  718,
                  "gravemonospace",
                  65344,
                  "gravetonecmb",
                  832,
                  "greater",
                  62,
                  "greaterequal",
                  8805,
                  "greaterequalorless",
                  8923,
                  "greatermonospace",
                  65310,
                  "greaterorequivalent",
                  8819,
                  "greaterorless",
                  8823,
                  "greateroverequal",
                  8807,
                  "greatersmall",
                  65125,
                  "gscript",
                  609,
                  "gstroke",
                  485,
                  "guhiragana",
                  12368,
                  "guillemotleft",
                  171,
                  "guillemotright",
                  187,
                  "guilsinglleft",
                  8249,
                  "guilsinglright",
                  8250,
                  "gukatakana",
                  12464,
                  "guramusquare",
                  13080,
                  "gysquare",
                  13257,
                  "h",
                  104,
                  "haabkhasiancyrillic",
                  1193,
                  "haaltonearabic",
                  1729,
                  "habengali",
                  2489,
                  "hadescendercyrillic",
                  1203,
                  "hadeva",
                  2361,
                  "hagujarati",
                  2745,
                  "hagurmukhi",
                  2617,
                  "haharabic",
                  1581,
                  "hahfinalarabic",
                  65186,
                  "hahinitialarabic",
                  65187,
                  "hahiragana",
                  12399,
                  "hahmedialarabic",
                  65188,
                  "haitusquare",
                  13098,
                  "hakatakana",
                  12495,
                  "hakatakanahalfwidth",
                  65418,
                  "halantgurmukhi",
                  2637,
                  "hamzaarabic",
                  1569,
                  "hamzalowarabic",
                  1569,
                  "hangulfiller",
                  12644,
                  "hardsigncyrillic",
                  1098,
                  "harpoonleftbarbup",
                  8636,
                  "harpoonrightbarbup",
                  8640,
                  "hasquare",
                  13258,
                  "hatafpatah",
                  1458,
                  "hatafpatah16",
                  1458,
                  "hatafpatah23",
                  1458,
                  "hatafpatah2f",
                  1458,
                  "hatafpatahhebrew",
                  1458,
                  "hatafpatahnarrowhebrew",
                  1458,
                  "hatafpatahquarterhebrew",
                  1458,
                  "hatafpatahwidehebrew",
                  1458,
                  "hatafqamats",
                  1459,
                  "hatafqamats1b",
                  1459,
                  "hatafqamats28",
                  1459,
                  "hatafqamats34",
                  1459,
                  "hatafqamatshebrew",
                  1459,
                  "hatafqamatsnarrowhebrew",
                  1459,
                  "hatafqamatsquarterhebrew",
                  1459,
                  "hatafqamatswidehebrew",
                  1459,
                  "hatafsegol",
                  1457,
                  "hatafsegol17",
                  1457,
                  "hatafsegol24",
                  1457,
                  "hatafsegol30",
                  1457,
                  "hatafsegolhebrew",
                  1457,
                  "hatafsegolnarrowhebrew",
                  1457,
                  "hatafsegolquarterhebrew",
                  1457,
                  "hatafsegolwidehebrew",
                  1457,
                  "hbar",
                  295,
                  "hbopomofo",
                  12559,
                  "hbrevebelow",
                  7723,
                  "hcedilla",
                  7721,
                  "hcircle",
                  9431,
                  "hcircumflex",
                  293,
                  "hdieresis",
                  7719,
                  "hdotaccent",
                  7715,
                  "hdotbelow",
                  7717,
                  "he",
                  1492,
                  "heart",
                  9829,
                  "heartsuitblack",
                  9829,
                  "heartsuitwhite",
                  9825,
                  "hedagesh",
                  64308,
                  "hedageshhebrew",
                  64308,
                  "hehaltonearabic",
                  1729,
                  "heharabic",
                  1607,
                  "hehebrew",
                  1492,
                  "hehfinalaltonearabic",
                  64423,
                  "hehfinalalttwoarabic",
                  65258,
                  "hehfinalarabic",
                  65258,
                  "hehhamzaabovefinalarabic",
                  64421,
                  "hehhamzaaboveisolatedarabic",
                  64420,
                  "hehinitialaltonearabic",
                  64424,
                  "hehinitialarabic",
                  65259,
                  "hehiragana",
                  12408,
                  "hehmedialaltonearabic",
                  64425,
                  "hehmedialarabic",
                  65260,
                  "heiseierasquare",
                  13179,
                  "hekatakana",
                  12504,
                  "hekatakanahalfwidth",
                  65421,
                  "hekutaarusquare",
                  13110,
                  "henghook",
                  615,
                  "herutusquare",
                  13113,
                  "het",
                  1495,
                  "hethebrew",
                  1495,
                  "hhook",
                  614,
                  "hhooksuperior",
                  689,
                  "hieuhacirclekorean",
                  12923,
                  "hieuhaparenkorean",
                  12827,
                  "hieuhcirclekorean",
                  12909,
                  "hieuhkorean",
                  12622,
                  "hieuhparenkorean",
                  12813,
                  "hihiragana",
                  12402,
                  "hikatakana",
                  12498,
                  "hikatakanahalfwidth",
                  65419,
                  "hiriq",
                  1460,
                  "hiriq14",
                  1460,
                  "hiriq21",
                  1460,
                  "hiriq2d",
                  1460,
                  "hiriqhebrew",
                  1460,
                  "hiriqnarrowhebrew",
                  1460,
                  "hiriqquarterhebrew",
                  1460,
                  "hiriqwidehebrew",
                  1460,
                  "hlinebelow",
                  7830,
                  "hmonospace",
                  65352,
                  "hoarmenian",
                  1392,
                  "hohipthai",
                  3627,
                  "hohiragana",
                  12411,
                  "hokatakana",
                  12507,
                  "hokatakanahalfwidth",
                  65422,
                  "holam",
                  1465,
                  "holam19",
                  1465,
                  "holam26",
                  1465,
                  "holam32",
                  1465,
                  "holamhebrew",
                  1465,
                  "holamnarrowhebrew",
                  1465,
                  "holamquarterhebrew",
                  1465,
                  "holamwidehebrew",
                  1465,
                  "honokhukthai",
                  3630,
                  "hookabovecomb",
                  777,
                  "hookcmb",
                  777,
                  "hookpalatalizedbelowcmb",
                  801,
                  "hookretroflexbelowcmb",
                  802,
                  "hoonsquare",
                  13122,
                  "horicoptic",
                  1001,
                  "horizontalbar",
                  8213,
                  "horncmb",
                  795,
                  "hotsprings",
                  9832,
                  "house",
                  8962,
                  "hparen",
                  9379,
                  "hsuperior",
                  688,
                  "hturned",
                  613,
                  "huhiragana",
                  12405,
                  "huiitosquare",
                  13107,
                  "hukatakana",
                  12501,
                  "hukatakanahalfwidth",
                  65420,
                  "hungarumlaut",
                  733,
                  "hungarumlautcmb",
                  779,
                  "hv",
                  405,
                  "hyphen",
                  45,
                  "hypheninferior",
                  63205,
                  "hyphenmonospace",
                  65293,
                  "hyphensmall",
                  65123,
                  "hyphensuperior",
                  63206,
                  "hyphentwo",
                  8208,
                  "i",
                  105,
                  "iacute",
                  237,
                  "iacyrillic",
                  1103,
                  "ibengali",
                  2439,
                  "ibopomofo",
                  12583,
                  "ibreve",
                  301,
                  "icaron",
                  464,
                  "icircle",
                  9432,
                  "icircumflex",
                  238,
                  "icyrillic",
                  1110,
                  "idblgrave",
                  521,
                  "ideographearthcircle",
                  12943,
                  "ideographfirecircle",
                  12939,
                  "ideographicallianceparen",
                  12863,
                  "ideographiccallparen",
                  12858,
                  "ideographiccentrecircle",
                  12965,
                  "ideographicclose",
                  12294,
                  "ideographiccomma",
                  12289,
                  "ideographiccommaleft",
                  65380,
                  "ideographiccongratulationparen",
                  12855,
                  "ideographiccorrectcircle",
                  12963,
                  "ideographicearthparen",
                  12847,
                  "ideographicenterpriseparen",
                  12861,
                  "ideographicexcellentcircle",
                  12957,
                  "ideographicfestivalparen",
                  12864,
                  "ideographicfinancialcircle",
                  12950,
                  "ideographicfinancialparen",
                  12854,
                  "ideographicfireparen",
                  12843,
                  "ideographichaveparen",
                  12850,
                  "ideographichighcircle",
                  12964,
                  "ideographiciterationmark",
                  12293,
                  "ideographiclaborcircle",
                  12952,
                  "ideographiclaborparen",
                  12856,
                  "ideographicleftcircle",
                  12967,
                  "ideographiclowcircle",
                  12966,
                  "ideographicmedicinecircle",
                  12969,
                  "ideographicmetalparen",
                  12846,
                  "ideographicmoonparen",
                  12842,
                  "ideographicnameparen",
                  12852,
                  "ideographicperiod",
                  12290,
                  "ideographicprintcircle",
                  12958,
                  "ideographicreachparen",
                  12867,
                  "ideographicrepresentparen",
                  12857,
                  "ideographicresourceparen",
                  12862,
                  "ideographicrightcircle",
                  12968,
                  "ideographicsecretcircle",
                  12953,
                  "ideographicselfparen",
                  12866,
                  "ideographicsocietyparen",
                  12851,
                  "ideographicspace",
                  12288,
                  "ideographicspecialparen",
                  12853,
                  "ideographicstockparen",
                  12849,
                  "ideographicstudyparen",
                  12859,
                  "ideographicsunparen",
                  12848,
                  "ideographicsuperviseparen",
                  12860,
                  "ideographicwaterparen",
                  12844,
                  "ideographicwoodparen",
                  12845,
                  "ideographiczero",
                  12295,
                  "ideographmetalcircle",
                  12942,
                  "ideographmooncircle",
                  12938,
                  "ideographnamecircle",
                  12948,
                  "ideographsuncircle",
                  12944,
                  "ideographwatercircle",
                  12940,
                  "ideographwoodcircle",
                  12941,
                  "ideva",
                  2311,
                  "idieresis",
                  239,
                  "idieresisacute",
                  7727,
                  "idieresiscyrillic",
                  1253,
                  "idotbelow",
                  7883,
                  "iebrevecyrillic",
                  1239,
                  "iecyrillic",
                  1077,
                  "ieungacirclekorean",
                  12917,
                  "ieungaparenkorean",
                  12821,
                  "ieungcirclekorean",
                  12903,
                  "ieungkorean",
                  12615,
                  "ieungparenkorean",
                  12807,
                  "igrave",
                  236,
                  "igujarati",
                  2695,
                  "igurmukhi",
                  2567,
                  "ihiragana",
                  12356,
                  "ihookabove",
                  7881,
                  "iibengali",
                  2440,
                  "iicyrillic",
                  1080,
                  "iideva",
                  2312,
                  "iigujarati",
                  2696,
                  "iigurmukhi",
                  2568,
                  "iimatragurmukhi",
                  2624,
                  "iinvertedbreve",
                  523,
                  "iishortcyrillic",
                  1081,
                  "iivowelsignbengali",
                  2496,
                  "iivowelsigndeva",
                  2368,
                  "iivowelsigngujarati",
                  2752,
                  "ij",
                  307,
                  "ikatakana",
                  12452,
                  "ikatakanahalfwidth",
                  65394,
                  "ikorean",
                  12643,
                  "ilde",
                  732,
                  "iluyhebrew",
                  1452,
                  "imacron",
                  299,
                  "imacroncyrillic",
                  1251,
                  "imageorapproximatelyequal",
                  8787,
                  "imatragurmukhi",
                  2623,
                  "imonospace",
                  65353,
                  "increment",
                  8710,
                  "infinity",
                  8734,
                  "iniarmenian",
                  1387,
                  "integral",
                  8747,
                  "integralbottom",
                  8993,
                  "integralbt",
                  8993,
                  "integralex",
                  63733,
                  "integraltop",
                  8992,
                  "integraltp",
                  8992,
                  "intersection",
                  8745,
                  "intisquare",
                  13061,
                  "invbullet",
                  9688,
                  "invcircle",
                  9689,
                  "invsmileface",
                  9787,
                  "iocyrillic",
                  1105,
                  "iogonek",
                  303,
                  "iota",
                  953,
                  "iotadieresis",
                  970,
                  "iotadieresistonos",
                  912,
                  "iotalatin",
                  617,
                  "iotatonos",
                  943,
                  "iparen",
                  9380,
                  "irigurmukhi",
                  2674,
                  "ismallhiragana",
                  12355,
                  "ismallkatakana",
                  12451,
                  "ismallkatakanahalfwidth",
                  65384,
                  "issharbengali",
                  2554,
                  "istroke",
                  616,
                  "isuperior",
                  63213,
                  "iterationhiragana",
                  12445,
                  "iterationkatakana",
                  12541,
                  "itilde",
                  297,
                  "itildebelow",
                  7725,
                  "iubopomofo",
                  12585,
                  "iucyrillic",
                  1102,
                  "ivowelsignbengali",
                  2495,
                  "ivowelsigndeva",
                  2367,
                  "ivowelsigngujarati",
                  2751,
                  "izhitsacyrillic",
                  1141,
                  "izhitsadblgravecyrillic",
                  1143,
                  "j",
                  106,
                  "jaarmenian",
                  1393,
                  "jabengali",
                  2460,
                  "jadeva",
                  2332,
                  "jagujarati",
                  2716,
                  "jagurmukhi",
                  2588,
                  "jbopomofo",
                  12560,
                  "jcaron",
                  496,
                  "jcircle",
                  9433,
                  "jcircumflex",
                  309,
                  "jcrossedtail",
                  669,
                  "jdotlessstroke",
                  607,
                  "jecyrillic",
                  1112,
                  "jeemarabic",
                  1580,
                  "jeemfinalarabic",
                  65182,
                  "jeeminitialarabic",
                  65183,
                  "jeemmedialarabic",
                  65184,
                  "jeharabic",
                  1688,
                  "jehfinalarabic",
                  64395,
                  "jhabengali",
                  2461,
                  "jhadeva",
                  2333,
                  "jhagujarati",
                  2717,
                  "jhagurmukhi",
                  2589,
                  "jheharmenian",
                  1403,
                  "jis",
                  12292,
                  "jmonospace",
                  65354,
                  "jparen",
                  9381,
                  "jsuperior",
                  690,
                  "k",
                  107,
                  "kabashkircyrillic",
                  1185,
                  "kabengali",
                  2453,
                  "kacute",
                  7729,
                  "kacyrillic",
                  1082,
                  "kadescendercyrillic",
                  1179,
                  "kadeva",
                  2325,
                  "kaf",
                  1499,
                  "kafarabic",
                  1603,
                  "kafdagesh",
                  64315,
                  "kafdageshhebrew",
                  64315,
                  "kaffinalarabic",
                  65242,
                  "kafhebrew",
                  1499,
                  "kafinitialarabic",
                  65243,
                  "kafmedialarabic",
                  65244,
                  "kafrafehebrew",
                  64333,
                  "kagujarati",
                  2709,
                  "kagurmukhi",
                  2581,
                  "kahiragana",
                  12363,
                  "kahookcyrillic",
                  1220,
                  "kakatakana",
                  12459,
                  "kakatakanahalfwidth",
                  65398,
                  "kappa",
                  954,
                  "kappasymbolgreek",
                  1008,
                  "kapyeounmieumkorean",
                  12657,
                  "kapyeounphieuphkorean",
                  12676,
                  "kapyeounpieupkorean",
                  12664,
                  "kapyeounssangpieupkorean",
                  12665,
                  "karoriisquare",
                  13069,
                  "kashidaautoarabic",
                  1600,
                  "kashidaautonosidebearingarabic",
                  1600,
                  "kasmallkatakana",
                  12533,
                  "kasquare",
                  13188,
                  "kasraarabic",
                  1616,
                  "kasratanarabic",
                  1613,
                  "kastrokecyrillic",
                  1183,
                  "katahiraprolongmarkhalfwidth",
                  65392,
                  "kaverticalstrokecyrillic",
                  1181,
                  "kbopomofo",
                  12558,
                  "kcalsquare",
                  13193,
                  "kcaron",
                  489,
                  "kcedilla",
                  311,
                  "kcircle",
                  9434,
                  "kcommaaccent",
                  311,
                  "kdotbelow",
                  7731,
                  "keharmenian",
                  1412,
                  "kehiragana",
                  12369,
                  "kekatakana",
                  12465,
                  "kekatakanahalfwidth",
                  65401,
                  "kenarmenian",
                  1391,
                  "kesmallkatakana",
                  12534,
                  "kgreenlandic",
                  312,
                  "khabengali",
                  2454,
                  "khacyrillic",
                  1093,
                  "khadeva",
                  2326,
                  "khagujarati",
                  2710,
                  "khagurmukhi",
                  2582,
                  "khaharabic",
                  1582,
                  "khahfinalarabic",
                  65190,
                  "khahinitialarabic",
                  65191,
                  "khahmedialarabic",
                  65192,
                  "kheicoptic",
                  999,
                  "khhadeva",
                  2393,
                  "khhagurmukhi",
                  2649,
                  "khieukhacirclekorean",
                  12920,
                  "khieukhaparenkorean",
                  12824,
                  "khieukhcirclekorean",
                  12906,
                  "khieukhkorean",
                  12619,
                  "khieukhparenkorean",
                  12810,
                  "khokhaithai",
                  3586,
                  "khokhonthai",
                  3589,
                  "khokhuatthai",
                  3587,
                  "khokhwaithai",
                  3588,
                  "khomutthai",
                  3675,
                  "khook",
                  409,
                  "khorakhangthai",
                  3590,
                  "khzsquare",
                  13201,
                  "kihiragana",
                  12365,
                  "kikatakana",
                  12461,
                  "kikatakanahalfwidth",
                  65399,
                  "kiroguramusquare",
                  13077,
                  "kiromeetorusquare",
                  13078,
                  "kirosquare",
                  13076,
                  "kiyeokacirclekorean",
                  12910,
                  "kiyeokaparenkorean",
                  12814,
                  "kiyeokcirclekorean",
                  12896,
                  "kiyeokkorean",
                  12593,
                  "kiyeokparenkorean",
                  12800,
                  "kiyeoksioskorean",
                  12595,
                  "kjecyrillic",
                  1116,
                  "klinebelow",
                  7733,
                  "klsquare",
                  13208,
                  "kmcubedsquare",
                  13222,
                  "kmonospace",
                  65355,
                  "kmsquaredsquare",
                  13218,
                  "kohiragana",
                  12371,
                  "kohmsquare",
                  13248,
                  "kokaithai",
                  3585,
                  "kokatakana",
                  12467,
                  "kokatakanahalfwidth",
                  65402,
                  "kooposquare",
                  13086,
                  "koppacyrillic",
                  1153,
                  "koreanstandardsymbol",
                  12927,
                  "koroniscmb",
                  835,
                  "kparen",
                  9382,
                  "kpasquare",
                  13226,
                  "ksicyrillic",
                  1135,
                  "ktsquare",
                  13263,
                  "kturned",
                  670,
                  "kuhiragana",
                  12367,
                  "kukatakana",
                  12463,
                  "kukatakanahalfwidth",
                  65400,
                  "kvsquare",
                  13240,
                  "kwsquare",
                  13246,
                  "l",
                  108,
                  "labengali",
                  2482,
                  "lacute",
                  314,
                  "ladeva",
                  2354,
                  "lagujarati",
                  2738,
                  "lagurmukhi",
                  2610,
                  "lakkhangyaothai",
                  3653,
                  "lamaleffinalarabic",
                  65276,
                  "lamalefhamzaabovefinalarabic",
                  65272,
                  "lamalefhamzaaboveisolatedarabic",
                  65271,
                  "lamalefhamzabelowfinalarabic",
                  65274,
                  "lamalefhamzabelowisolatedarabic",
                  65273,
                  "lamalefisolatedarabic",
                  65275,
                  "lamalefmaddaabovefinalarabic",
                  65270,
                  "lamalefmaddaaboveisolatedarabic",
                  65269,
                  "lamarabic",
                  1604,
                  "lambda",
                  955,
                  "lambdastroke",
                  411,
                  "lamed",
                  1500,
                  "lameddagesh",
                  64316,
                  "lameddageshhebrew",
                  64316,
                  "lamedhebrew",
                  1500,
                  "lamfinalarabic",
                  65246,
                  "lamhahinitialarabic",
                  64714,
                  "laminitialarabic",
                  65247,
                  "lamjeeminitialarabic",
                  64713,
                  "lamkhahinitialarabic",
                  64715,
                  "lamlamhehisolatedarabic",
                  65010,
                  "lammedialarabic",
                  65248,
                  "lammeemhahinitialarabic",
                  64904,
                  "lammeeminitialarabic",
                  64716,
                  "largecircle",
                  9711,
                  "lbar",
                  410,
                  "lbelt",
                  620,
                  "lbopomofo",
                  12556,
                  "lcaron",
                  318,
                  "lcedilla",
                  316,
                  "lcircle",
                  9435,
                  "lcircumflexbelow",
                  7741,
                  "lcommaaccent",
                  316,
                  "ldot",
                  320,
                  "ldotaccent",
                  320,
                  "ldotbelow",
                  7735,
                  "ldotbelowmacron",
                  7737,
                  "leftangleabovecmb",
                  794,
                  "lefttackbelowcmb",
                  792,
                  "less",
                  60,
                  "lessequal",
                  8804,
                  "lessequalorgreater",
                  8922,
                  "lessmonospace",
                  65308,
                  "lessorequivalent",
                  8818,
                  "lessorgreater",
                  8822,
                  "lessoverequal",
                  8806,
                  "lesssmall",
                  65124,
                  "lezh",
                  622,
                  "lfblock",
                  9612,
                  "lhookretroflex",
                  621,
                  "lira",
                  8356,
                  "liwnarmenian",
                  1388,
                  "lj",
                  457,
                  "ljecyrillic",
                  1113,
                  "ll",
                  63168,
                  "lladeva",
                  2355,
                  "llagujarati",
                  2739,
                  "llinebelow",
                  7739,
                  "llladeva",
                  2356,
                  "llvocalicbengali",
                  2529,
                  "llvocalicdeva",
                  2401,
                  "llvocalicvowelsignbengali",
                  2531,
                  "llvocalicvowelsigndeva",
                  2403,
                  "lmiddletilde",
                  619,
                  "lmonospace",
                  65356,
                  "lmsquare",
                  13264,
                  "lochulathai",
                  3628,
                  "logicaland",
                  8743,
                  "logicalnot",
                  172,
                  "logicalnotreversed",
                  8976,
                  "logicalor",
                  8744,
                  "lolingthai",
                  3621,
                  "longs",
                  383,
                  "lowlinecenterline",
                  65102,
                  "lowlinecmb",
                  818,
                  "lowlinedashed",
                  65101,
                  "lozenge",
                  9674,
                  "lparen",
                  9383,
                  "lslash",
                  322,
                  "lsquare",
                  8467,
                  "lsuperior",
                  63214,
                  "ltshade",
                  9617,
                  "luthai",
                  3622,
                  "lvocalicbengali",
                  2444,
                  "lvocalicdeva",
                  2316,
                  "lvocalicvowelsignbengali",
                  2530,
                  "lvocalicvowelsigndeva",
                  2402,
                  "lxsquare",
                  13267,
                  "m",
                  109,
                  "mabengali",
                  2478,
                  "macron",
                  175,
                  "macronbelowcmb",
                  817,
                  "macroncmb",
                  772,
                  "macronlowmod",
                  717,
                  "macronmonospace",
                  65507,
                  "macute",
                  7743,
                  "madeva",
                  2350,
                  "magujarati",
                  2734,
                  "magurmukhi",
                  2606,
                  "mahapakhhebrew",
                  1444,
                  "mahapakhlefthebrew",
                  1444,
                  "mahiragana",
                  12414,
                  "maichattawalowleftthai",
                  63637,
                  "maichattawalowrightthai",
                  63636,
                  "maichattawathai",
                  3659,
                  "maichattawaupperleftthai",
                  63635,
                  "maieklowleftthai",
                  63628,
                  "maieklowrightthai",
                  63627,
                  "maiekthai",
                  3656,
                  "maiekupperleftthai",
                  63626,
                  "maihanakatleftthai",
                  63620,
                  "maihanakatthai",
                  3633,
                  "maitaikhuleftthai",
                  63625,
                  "maitaikhuthai",
                  3655,
                  "maitholowleftthai",
                  63631,
                  "maitholowrightthai",
                  63630,
                  "maithothai",
                  3657,
                  "maithoupperleftthai",
                  63629,
                  "maitrilowleftthai",
                  63634,
                  "maitrilowrightthai",
                  63633,
                  "maitrithai",
                  3658,
                  "maitriupperleftthai",
                  63632,
                  "maiyamokthai",
                  3654,
                  "makatakana",
                  12510,
                  "makatakanahalfwidth",
                  65423,
                  "male",
                  9794,
                  "mansyonsquare",
                  13127,
                  "maqafhebrew",
                  1470,
                  "mars",
                  9794,
                  "masoracirclehebrew",
                  1455,
                  "masquare",
                  13187,
                  "mbopomofo",
                  12551,
                  "mbsquare",
                  13268,
                  "mcircle",
                  9436,
                  "mcubedsquare",
                  13221,
                  "mdotaccent",
                  7745,
                  "mdotbelow",
                  7747,
                  "meemarabic",
                  1605,
                  "meemfinalarabic",
                  65250,
                  "meeminitialarabic",
                  65251,
                  "meemmedialarabic",
                  65252,
                  "meemmeeminitialarabic",
                  64721,
                  "meemmeemisolatedarabic",
                  64584,
                  "meetorusquare",
                  13133,
                  "mehiragana",
                  12417,
                  "meizierasquare",
                  13182,
                  "mekatakana",
                  12513,
                  "mekatakanahalfwidth",
                  65426,
                  "mem",
                  1502,
                  "memdagesh",
                  64318,
                  "memdageshhebrew",
                  64318,
                  "memhebrew",
                  1502,
                  "menarmenian",
                  1396,
                  "merkhahebrew",
                  1445,
                  "merkhakefulahebrew",
                  1446,
                  "merkhakefulalefthebrew",
                  1446,
                  "merkhalefthebrew",
                  1445,
                  "mhook",
                  625,
                  "mhzsquare",
                  13202,
                  "middledotkatakanahalfwidth",
                  65381,
                  "middot",
                  183,
                  "mieumacirclekorean",
                  12914,
                  "mieumaparenkorean",
                  12818,
                  "mieumcirclekorean",
                  12900,
                  "mieumkorean",
                  12609,
                  "mieumpansioskorean",
                  12656,
                  "mieumparenkorean",
                  12804,
                  "mieumpieupkorean",
                  12654,
                  "mieumsioskorean",
                  12655,
                  "mihiragana",
                  12415,
                  "mikatakana",
                  12511,
                  "mikatakanahalfwidth",
                  65424,
                  "minus",
                  8722,
                  "minusbelowcmb",
                  800,
                  "minuscircle",
                  8854,
                  "minusmod",
                  727,
                  "minusplus",
                  8723,
                  "minute",
                  8242,
                  "miribaarusquare",
                  13130,
                  "mirisquare",
                  13129,
                  "mlonglegturned",
                  624,
                  "mlsquare",
                  13206,
                  "mmcubedsquare",
                  13219,
                  "mmonospace",
                  65357,
                  "mmsquaredsquare",
                  13215,
                  "mohiragana",
                  12418,
                  "mohmsquare",
                  13249,
                  "mokatakana",
                  12514,
                  "mokatakanahalfwidth",
                  65427,
                  "molsquare",
                  13270,
                  "momathai",
                  3617,
                  "moverssquare",
                  13223,
                  "moverssquaredsquare",
                  13224,
                  "mparen",
                  9384,
                  "mpasquare",
                  13227,
                  "mssquare",
                  13235,
                  "msuperior",
                  63215,
                  "mturned",
                  623,
                  "mu",
                  181,
                  "mu1",
                  181,
                  "muasquare",
                  13186,
                  "muchgreater",
                  8811,
                  "muchless",
                  8810,
                  "mufsquare",
                  13196,
                  "mugreek",
                  956,
                  "mugsquare",
                  13197,
                  "muhiragana",
                  12416,
                  "mukatakana",
                  12512,
                  "mukatakanahalfwidth",
                  65425,
                  "mulsquare",
                  13205,
                  "multiply",
                  215,
                  "mumsquare",
                  13211,
                  "munahhebrew",
                  1443,
                  "munahlefthebrew",
                  1443,
                  "musicalnote",
                  9834,
                  "musicalnotedbl",
                  9835,
                  "musicflatsign",
                  9837,
                  "musicsharpsign",
                  9839,
                  "mussquare",
                  13234,
                  "muvsquare",
                  13238,
                  "muwsquare",
                  13244,
                  "mvmegasquare",
                  13241,
                  "mvsquare",
                  13239,
                  "mwmegasquare",
                  13247,
                  "mwsquare",
                  13245,
                  "n",
                  110,
                  "nabengali",
                  2472,
                  "nabla",
                  8711,
                  "nacute",
                  324,
                  "nadeva",
                  2344,
                  "nagujarati",
                  2728,
                  "nagurmukhi",
                  2600,
                  "nahiragana",
                  12394,
                  "nakatakana",
                  12490,
                  "nakatakanahalfwidth",
                  65413,
                  "napostrophe",
                  329,
                  "nasquare",
                  13185,
                  "nbopomofo",
                  12555,
                  "nbspace",
                  160,
                  "ncaron",
                  328,
                  "ncedilla",
                  326,
                  "ncircle",
                  9437,
                  "ncircumflexbelow",
                  7755,
                  "ncommaaccent",
                  326,
                  "ndotaccent",
                  7749,
                  "ndotbelow",
                  7751,
                  "nehiragana",
                  12397,
                  "nekatakana",
                  12493,
                  "nekatakanahalfwidth",
                  65416,
                  "newsheqelsign",
                  8362,
                  "nfsquare",
                  13195,
                  "ngabengali",
                  2457,
                  "ngadeva",
                  2329,
                  "ngagujarati",
                  2713,
                  "ngagurmukhi",
                  2585,
                  "ngonguthai",
                  3591,
                  "nhiragana",
                  12435,
                  "nhookleft",
                  626,
                  "nhookretroflex",
                  627,
                  "nieunacirclekorean",
                  12911,
                  "nieunaparenkorean",
                  12815,
                  "nieuncieuckorean",
                  12597,
                  "nieuncirclekorean",
                  12897,
                  "nieunhieuhkorean",
                  12598,
                  "nieunkorean",
                  12596,
                  "nieunpansioskorean",
                  12648,
                  "nieunparenkorean",
                  12801,
                  "nieunsioskorean",
                  12647,
                  "nieuntikeutkorean",
                  12646,
                  "nihiragana",
                  12395,
                  "nikatakana",
                  12491,
                  "nikatakanahalfwidth",
                  65414,
                  "nikhahitleftthai",
                  63641,
                  "nikhahitthai",
                  3661,
                  "nine",
                  57,
                  "ninearabic",
                  1641,
                  "ninebengali",
                  2543,
                  "ninecircle",
                  9320,
                  "ninecircleinversesansserif",
                  10130,
                  "ninedeva",
                  2415,
                  "ninegujarati",
                  2799,
                  "ninegurmukhi",
                  2671,
                  "ninehackarabic",
                  1641,
                  "ninehangzhou",
                  12329,
                  "nineideographicparen",
                  12840,
                  "nineinferior",
                  8329,
                  "ninemonospace",
                  65305,
                  "nineoldstyle",
                  63289,
                  "nineparen",
                  9340,
                  "nineperiod",
                  9360,
                  "ninepersian",
                  1785,
                  "nineroman",
                  8568,
                  "ninesuperior",
                  8313,
                  "nineteencircle",
                  9330,
                  "nineteenparen",
                  9350,
                  "nineteenperiod",
                  9370,
                  "ninethai",
                  3673,
                  "nj",
                  460,
                  "njecyrillic",
                  1114,
                  "nkatakana",
                  12531,
                  "nkatakanahalfwidth",
                  65437,
                  "nlegrightlong",
                  414,
                  "nlinebelow",
                  7753,
                  "nmonospace",
                  65358,
                  "nmsquare",
                  13210,
                  "nnabengali",
                  2467,
                  "nnadeva",
                  2339,
                  "nnagujarati",
                  2723,
                  "nnagurmukhi",
                  2595,
                  "nnnadeva",
                  2345,
                  "nohiragana",
                  12398,
                  "nokatakana",
                  12494,
                  "nokatakanahalfwidth",
                  65417,
                  "nonbreakingspace",
                  160,
                  "nonenthai",
                  3603,
                  "nonuthai",
                  3609,
                  "noonarabic",
                  1606,
                  "noonfinalarabic",
                  65254,
                  "noonghunnaarabic",
                  1722,
                  "noonghunnafinalarabic",
                  64415,
                  "nooninitialarabic",
                  65255,
                  "noonjeeminitialarabic",
                  64722,
                  "noonjeemisolatedarabic",
                  64587,
                  "noonmedialarabic",
                  65256,
                  "noonmeeminitialarabic",
                  64725,
                  "noonmeemisolatedarabic",
                  64590,
                  "noonnoonfinalarabic",
                  64653,
                  "notcontains",
                  8716,
                  "notelement",
                  8713,
                  "notelementof",
                  8713,
                  "notequal",
                  8800,
                  "notgreater",
                  8815,
                  "notgreaternorequal",
                  8817,
                  "notgreaternorless",
                  8825,
                  "notidentical",
                  8802,
                  "notless",
                  8814,
                  "notlessnorequal",
                  8816,
                  "notparallel",
                  8742,
                  "notprecedes",
                  8832,
                  "notsubset",
                  8836,
                  "notsucceeds",
                  8833,
                  "notsuperset",
                  8837,
                  "nowarmenian",
                  1398,
                  "nparen",
                  9385,
                  "nssquare",
                  13233,
                  "nsuperior",
                  8319,
                  "ntilde",
                  241,
                  "nu",
                  957,
                  "nuhiragana",
                  12396,
                  "nukatakana",
                  12492,
                  "nukatakanahalfwidth",
                  65415,
                  "nuktabengali",
                  2492,
                  "nuktadeva",
                  2364,
                  "nuktagujarati",
                  2748,
                  "nuktagurmukhi",
                  2620,
                  "numbersign",
                  35,
                  "numbersignmonospace",
                  65283,
                  "numbersignsmall",
                  65119,
                  "numeralsigngreek",
                  884,
                  "numeralsignlowergreek",
                  885,
                  "numero",
                  8470,
                  "nun",
                  1504,
                  "nundagesh",
                  64320,
                  "nundageshhebrew",
                  64320,
                  "nunhebrew",
                  1504,
                  "nvsquare",
                  13237,
                  "nwsquare",
                  13243,
                  "nyabengali",
                  2462,
                  "nyadeva",
                  2334,
                  "nyagujarati",
                  2718,
                  "nyagurmukhi",
                  2590,
                  "o",
                  111,
                  "oacute",
                  243,
                  "oangthai",
                  3629,
                  "obarred",
                  629,
                  "obarredcyrillic",
                  1257,
                  "obarreddieresiscyrillic",
                  1259,
                  "obengali",
                  2451,
                  "obopomofo",
                  12571,
                  "obreve",
                  335,
                  "ocandradeva",
                  2321,
                  "ocandragujarati",
                  2705,
                  "ocandravowelsigndeva",
                  2377,
                  "ocandravowelsigngujarati",
                  2761,
                  "ocaron",
                  466,
                  "ocircle",
                  9438,
                  "ocircumflex",
                  244,
                  "ocircumflexacute",
                  7889,
                  "ocircumflexdotbelow",
                  7897,
                  "ocircumflexgrave",
                  7891,
                  "ocircumflexhookabove",
                  7893,
                  "ocircumflextilde",
                  7895,
                  "ocyrillic",
                  1086,
                  "odblacute",
                  337,
                  "odblgrave",
                  525,
                  "odeva",
                  2323,
                  "odieresis",
                  246,
                  "odieresiscyrillic",
                  1255,
                  "odotbelow",
                  7885,
                  "oe",
                  339,
                  "oekorean",
                  12634,
                  "ogonek",
                  731,
                  "ogonekcmb",
                  808,
                  "ograve",
                  242,
                  "ogujarati",
                  2707,
                  "oharmenian",
                  1413,
                  "ohiragana",
                  12362,
                  "ohookabove",
                  7887,
                  "ohorn",
                  417,
                  "ohornacute",
                  7899,
                  "ohorndotbelow",
                  7907,
                  "ohorngrave",
                  7901,
                  "ohornhookabove",
                  7903,
                  "ohorntilde",
                  7905,
                  "ohungarumlaut",
                  337,
                  "oi",
                  419,
                  "oinvertedbreve",
                  527,
                  "okatakana",
                  12458,
                  "okatakanahalfwidth",
                  65397,
                  "okorean",
                  12631,
                  "olehebrew",
                  1451,
                  "omacron",
                  333,
                  "omacronacute",
                  7763,
                  "omacrongrave",
                  7761,
                  "omdeva",
                  2384,
                  "omega",
                  969,
                  "omega1",
                  982,
                  "omegacyrillic",
                  1121,
                  "omegalatinclosed",
                  631,
                  "omegaroundcyrillic",
                  1147,
                  "omegatitlocyrillic",
                  1149,
                  "omegatonos",
                  974,
                  "omgujarati",
                  2768,
                  "omicron",
                  959,
                  "omicrontonos",
                  972,
                  "omonospace",
                  65359,
                  "one",
                  49,
                  "onearabic",
                  1633,
                  "onebengali",
                  2535,
                  "onecircle",
                  9312,
                  "onecircleinversesansserif",
                  10122,
                  "onedeva",
                  2407,
                  "onedotenleader",
                  8228,
                  "oneeighth",
                  8539,
                  "onefitted",
                  63196,
                  "onegujarati",
                  2791,
                  "onegurmukhi",
                  2663,
                  "onehackarabic",
                  1633,
                  "onehalf",
                  189,
                  "onehangzhou",
                  12321,
                  "oneideographicparen",
                  12832,
                  "oneinferior",
                  8321,
                  "onemonospace",
                  65297,
                  "onenumeratorbengali",
                  2548,
                  "oneoldstyle",
                  63281,
                  "oneparen",
                  9332,
                  "oneperiod",
                  9352,
                  "onepersian",
                  1777,
                  "onequarter",
                  188,
                  "oneroman",
                  8560,
                  "onesuperior",
                  185,
                  "onethai",
                  3665,
                  "onethird",
                  8531,
                  "oogonek",
                  491,
                  "oogonekmacron",
                  493,
                  "oogurmukhi",
                  2579,
                  "oomatragurmukhi",
                  2635,
                  "oopen",
                  596,
                  "oparen",
                  9386,
                  "openbullet",
                  9702,
                  "option",
                  8997,
                  "ordfeminine",
                  170,
                  "ordmasculine",
                  186,
                  "orthogonal",
                  8735,
                  "oshortdeva",
                  2322,
                  "oshortvowelsigndeva",
                  2378,
                  "oslash",
                  248,
                  "oslashacute",
                  511,
                  "osmallhiragana",
                  12361,
                  "osmallkatakana",
                  12457,
                  "osmallkatakanahalfwidth",
                  65387,
                  "ostrokeacute",
                  511,
                  "osuperior",
                  63216,
                  "otcyrillic",
                  1151,
                  "otilde",
                  245,
                  "otildeacute",
                  7757,
                  "otildedieresis",
                  7759,
                  "oubopomofo",
                  12577,
                  "overline",
                  8254,
                  "overlinecenterline",
                  65098,
                  "overlinecmb",
                  773,
                  "overlinedashed",
                  65097,
                  "overlinedblwavy",
                  65100,
                  "overlinewavy",
                  65099,
                  "overscore",
                  175,
                  "ovowelsignbengali",
                  2507,
                  "ovowelsigndeva",
                  2379,
                  "ovowelsigngujarati",
                  2763,
                  "p",
                  112,
                  "paampssquare",
                  13184,
                  "paasentosquare",
                  13099,
                  "pabengali",
                  2474,
                  "pacute",
                  7765,
                  "padeva",
                  2346,
                  "pagedown",
                  8671,
                  "pageup",
                  8670,
                  "pagujarati",
                  2730,
                  "pagurmukhi",
                  2602,
                  "pahiragana",
                  12401,
                  "paiyannoithai",
                  3631,
                  "pakatakana",
                  12497,
                  "palatalizationcyrilliccmb",
                  1156,
                  "palochkacyrillic",
                  1216,
                  "pansioskorean",
                  12671,
                  "paragraph",
                  182,
                  "parallel",
                  8741,
                  "parenleft",
                  40,
                  "parenleftaltonearabic",
                  64830,
                  "parenleftbt",
                  63725,
                  "parenleftex",
                  63724,
                  "parenleftinferior",
                  8333,
                  "parenleftmonospace",
                  65288,
                  "parenleftsmall",
                  65113,
                  "parenleftsuperior",
                  8317,
                  "parenlefttp",
                  63723,
                  "parenleftvertical",
                  65077,
                  "parenright",
                  41,
                  "parenrightaltonearabic",
                  64831,
                  "parenrightbt",
                  63736,
                  "parenrightex",
                  63735,
                  "parenrightinferior",
                  8334,
                  "parenrightmonospace",
                  65289,
                  "parenrightsmall",
                  65114,
                  "parenrightsuperior",
                  8318,
                  "parenrighttp",
                  63734,
                  "parenrightvertical",
                  65078,
                  "partialdiff",
                  8706,
                  "paseqhebrew",
                  1472,
                  "pashtahebrew",
                  1433,
                  "pasquare",
                  13225,
                  "patah",
                  1463,
                  "patah11",
                  1463,
                  "patah1d",
                  1463,
                  "patah2a",
                  1463,
                  "patahhebrew",
                  1463,
                  "patahnarrowhebrew",
                  1463,
                  "patahquarterhebrew",
                  1463,
                  "patahwidehebrew",
                  1463,
                  "pazerhebrew",
                  1441,
                  "pbopomofo",
                  12550,
                  "pcircle",
                  9439,
                  "pdotaccent",
                  7767,
                  "pe",
                  1508,
                  "pecyrillic",
                  1087,
                  "pedagesh",
                  64324,
                  "pedageshhebrew",
                  64324,
                  "peezisquare",
                  13115,
                  "pefinaldageshhebrew",
                  64323,
                  "peharabic",
                  1662,
                  "peharmenian",
                  1402,
                  "pehebrew",
                  1508,
                  "pehfinalarabic",
                  64343,
                  "pehinitialarabic",
                  64344,
                  "pehiragana",
                  12410,
                  "pehmedialarabic",
                  64345,
                  "pekatakana",
                  12506,
                  "pemiddlehookcyrillic",
                  1191,
                  "perafehebrew",
                  64334,
                  "percent",
                  37,
                  "percentarabic",
                  1642,
                  "percentmonospace",
                  65285,
                  "percentsmall",
                  65130,
                  "period",
                  46,
                  "periodarmenian",
                  1417,
                  "periodcentered",
                  183,
                  "periodhalfwidth",
                  65377,
                  "periodinferior",
                  63207,
                  "periodmonospace",
                  65294,
                  "periodsmall",
                  65106,
                  "periodsuperior",
                  63208,
                  "perispomenigreekcmb",
                  834,
                  "perpendicular",
                  8869,
                  "perthousand",
                  8240,
                  "peseta",
                  8359,
                  "pfsquare",
                  13194,
                  "phabengali",
                  2475,
                  "phadeva",
                  2347,
                  "phagujarati",
                  2731,
                  "phagurmukhi",
                  2603,
                  "phi",
                  966,
                  "phi1",
                  981,
                  "phieuphacirclekorean",
                  12922,
                  "phieuphaparenkorean",
                  12826,
                  "phieuphcirclekorean",
                  12908,
                  "phieuphkorean",
                  12621,
                  "phieuphparenkorean",
                  12812,
                  "philatin",
                  632,
                  "phinthuthai",
                  3642,
                  "phisymbolgreek",
                  981,
                  "phook",
                  421,
                  "phophanthai",
                  3614,
                  "phophungthai",
                  3612,
                  "phosamphaothai",
                  3616,
                  "pi",
                  960,
                  "pieupacirclekorean",
                  12915,
                  "pieupaparenkorean",
                  12819,
                  "pieupcieuckorean",
                  12662,
                  "pieupcirclekorean",
                  12901,
                  "pieupkiyeokkorean",
                  12658,
                  "pieupkorean",
                  12610,
                  "pieupparenkorean",
                  12805,
                  "pieupsioskiyeokkorean",
                  12660,
                  "pieupsioskorean",
                  12612,
                  "pieupsiostikeutkorean",
                  12661,
                  "pieupthieuthkorean",
                  12663,
                  "pieuptikeutkorean",
                  12659,
                  "pihiragana",
                  12404,
                  "pikatakana",
                  12500,
                  "pisymbolgreek",
                  982,
                  "piwrarmenian",
                  1411,
                  "plus",
                  43,
                  "plusbelowcmb",
                  799,
                  "pluscircle",
                  8853,
                  "plusminus",
                  177,
                  "plusmod",
                  726,
                  "plusmonospace",
                  65291,
                  "plussmall",
                  65122,
                  "plussuperior",
                  8314,
                  "pmonospace",
                  65360,
                  "pmsquare",
                  13272,
                  "pohiragana",
                  12413,
                  "pointingindexdownwhite",
                  9759,
                  "pointingindexleftwhite",
                  9756,
                  "pointingindexrightwhite",
                  9758,
                  "pointingindexupwhite",
                  9757,
                  "pokatakana",
                  12509,
                  "poplathai",
                  3611,
                  "postalmark",
                  12306,
                  "postalmarkface",
                  12320,
                  "pparen",
                  9387,
                  "precedes",
                  8826,
                  "prescription",
                  8478,
                  "primemod",
                  697,
                  "primereversed",
                  8245,
                  "product",
                  8719,
                  "projective",
                  8965,
                  "prolongedkana",
                  12540,
                  "propellor",
                  8984,
                  "propersubset",
                  8834,
                  "propersuperset",
                  8835,
                  "proportion",
                  8759,
                  "proportional",
                  8733,
                  "psi",
                  968,
                  "psicyrillic",
                  1137,
                  "psilipneumatacyrilliccmb",
                  1158,
                  "pssquare",
                  13232,
                  "puhiragana",
                  12407,
                  "pukatakana",
                  12503,
                  "pvsquare",
                  13236,
                  "pwsquare",
                  13242,
                  "q",
                  113,
                  "qadeva",
                  2392,
                  "qadmahebrew",
                  1448,
                  "qafarabic",
                  1602,
                  "qaffinalarabic",
                  65238,
                  "qafinitialarabic",
                  65239,
                  "qafmedialarabic",
                  65240,
                  "qamats",
                  1464,
                  "qamats10",
                  1464,
                  "qamats1a",
                  1464,
                  "qamats1c",
                  1464,
                  "qamats27",
                  1464,
                  "qamats29",
                  1464,
                  "qamats33",
                  1464,
                  "qamatsde",
                  1464,
                  "qamatshebrew",
                  1464,
                  "qamatsnarrowhebrew",
                  1464,
                  "qamatsqatanhebrew",
                  1464,
                  "qamatsqatannarrowhebrew",
                  1464,
                  "qamatsqatanquarterhebrew",
                  1464,
                  "qamatsqatanwidehebrew",
                  1464,
                  "qamatsquarterhebrew",
                  1464,
                  "qamatswidehebrew",
                  1464,
                  "qarneyparahebrew",
                  1439,
                  "qbopomofo",
                  12561,
                  "qcircle",
                  9440,
                  "qhook",
                  672,
                  "qmonospace",
                  65361,
                  "qof",
                  1511,
                  "qofdagesh",
                  64327,
                  "qofdageshhebrew",
                  64327,
                  "qofhebrew",
                  1511,
                  "qparen",
                  9388,
                  "quarternote",
                  9833,
                  "qubuts",
                  1467,
                  "qubuts18",
                  1467,
                  "qubuts25",
                  1467,
                  "qubuts31",
                  1467,
                  "qubutshebrew",
                  1467,
                  "qubutsnarrowhebrew",
                  1467,
                  "qubutsquarterhebrew",
                  1467,
                  "qubutswidehebrew",
                  1467,
                  "question",
                  63,
                  "questionarabic",
                  1567,
                  "questionarmenian",
                  1374,
                  "questiondown",
                  191,
                  "questiondownsmall",
                  63423,
                  "questiongreek",
                  894,
                  "questionmonospace",
                  65311,
                  "questionsmall",
                  63295,
                  "quotedbl",
                  34,
                  "quotedblbase",
                  8222,
                  "quotedblleft",
                  8220,
                  "quotedblmonospace",
                  65282,
                  "quotedblprime",
                  12318,
                  "quotedblprimereversed",
                  12317,
                  "quotedblright",
                  8221,
                  "quoteleft",
                  8216,
                  "quoteleftreversed",
                  8219,
                  "quotereversed",
                  8219,
                  "quoteright",
                  8217,
                  "quoterightn",
                  329,
                  "quotesinglbase",
                  8218,
                  "quotesingle",
                  39,
                  "quotesinglemonospace",
                  65287,
                  "r",
                  114,
                  "raarmenian",
                  1404,
                  "rabengali",
                  2480,
                  "racute",
                  341,
                  "radeva",
                  2352,
                  "radical",
                  8730,
                  "radicalex",
                  63717,
                  "radoverssquare",
                  13230,
                  "radoverssquaredsquare",
                  13231,
                  "radsquare",
                  13229,
                  "rafe",
                  1471,
                  "rafehebrew",
                  1471,
                  "ragujarati",
                  2736,
                  "ragurmukhi",
                  2608,
                  "rahiragana",
                  12425,
                  "rakatakana",
                  12521,
                  "rakatakanahalfwidth",
                  65431,
                  "ralowerdiagonalbengali",
                  2545,
                  "ramiddlediagonalbengali",
                  2544,
                  "ramshorn",
                  612,
                  "ratio",
                  8758,
                  "rbopomofo",
                  12566,
                  "rcaron",
                  345,
                  "rcedilla",
                  343,
                  "rcircle",
                  9441,
                  "rcommaaccent",
                  343,
                  "rdblgrave",
                  529,
                  "rdotaccent",
                  7769,
                  "rdotbelow",
                  7771,
                  "rdotbelowmacron",
                  7773,
                  "referencemark",
                  8251,
                  "reflexsubset",
                  8838,
                  "reflexsuperset",
                  8839,
                  "registered",
                  174,
                  "registersans",
                  63720,
                  "registerserif",
                  63194,
                  "reharabic",
                  1585,
                  "reharmenian",
                  1408,
                  "rehfinalarabic",
                  65198,
                  "rehiragana",
                  12428,
                  "rekatakana",
                  12524,
                  "rekatakanahalfwidth",
                  65434,
                  "resh",
                  1512,
                  "reshdageshhebrew",
                  64328,
                  "reshhebrew",
                  1512,
                  "reversedtilde",
                  8765,
                  "reviahebrew",
                  1431,
                  "reviamugrashhebrew",
                  1431,
                  "revlogicalnot",
                  8976,
                  "rfishhook",
                  638,
                  "rfishhookreversed",
                  639,
                  "rhabengali",
                  2525,
                  "rhadeva",
                  2397,
                  "rho",
                  961,
                  "rhook",
                  637,
                  "rhookturned",
                  635,
                  "rhookturnedsuperior",
                  693,
                  "rhosymbolgreek",
                  1009,
                  "rhotichookmod",
                  734,
                  "rieulacirclekorean",
                  12913,
                  "rieulaparenkorean",
                  12817,
                  "rieulcirclekorean",
                  12899,
                  "rieulhieuhkorean",
                  12608,
                  "rieulkiyeokkorean",
                  12602,
                  "rieulkiyeoksioskorean",
                  12649,
                  "rieulkorean",
                  12601,
                  "rieulmieumkorean",
                  12603,
                  "rieulpansioskorean",
                  12652,
                  "rieulparenkorean",
                  12803,
                  "rieulphieuphkorean",
                  12607,
                  "rieulpieupkorean",
                  12604,
                  "rieulpieupsioskorean",
                  12651,
                  "rieulsioskorean",
                  12605,
                  "rieulthieuthkorean",
                  12606,
                  "rieultikeutkorean",
                  12650,
                  "rieulyeorinhieuhkorean",
                  12653,
                  "rightangle",
                  8735,
                  "righttackbelowcmb",
                  793,
                  "righttriangle",
                  8895,
                  "rihiragana",
                  12426,
                  "rikatakana",
                  12522,
                  "rikatakanahalfwidth",
                  65432,
                  "ring",
                  730,
                  "ringbelowcmb",
                  805,
                  "ringcmb",
                  778,
                  "ringhalfleft",
                  703,
                  "ringhalfleftarmenian",
                  1369,
                  "ringhalfleftbelowcmb",
                  796,
                  "ringhalfleftcentered",
                  723,
                  "ringhalfright",
                  702,
                  "ringhalfrightbelowcmb",
                  825,
                  "ringhalfrightcentered",
                  722,
                  "rinvertedbreve",
                  531,
                  "rittorusquare",
                  13137,
                  "rlinebelow",
                  7775,
                  "rlongleg",
                  636,
                  "rlonglegturned",
                  634,
                  "rmonospace",
                  65362,
                  "rohiragana",
                  12429,
                  "rokatakana",
                  12525,
                  "rokatakanahalfwidth",
                  65435,
                  "roruathai",
                  3619,
                  "rparen",
                  9389,
                  "rrabengali",
                  2524,
                  "rradeva",
                  2353,
                  "rragurmukhi",
                  2652,
                  "rreharabic",
                  1681,
                  "rrehfinalarabic",
                  64397,
                  "rrvocalicbengali",
                  2528,
                  "rrvocalicdeva",
                  2400,
                  "rrvocalicgujarati",
                  2784,
                  "rrvocalicvowelsignbengali",
                  2500,
                  "rrvocalicvowelsigndeva",
                  2372,
                  "rrvocalicvowelsigngujarati",
                  2756,
                  "rsuperior",
                  63217,
                  "rtblock",
                  9616,
                  "rturned",
                  633,
                  "rturnedsuperior",
                  692,
                  "ruhiragana",
                  12427,
                  "rukatakana",
                  12523,
                  "rukatakanahalfwidth",
                  65433,
                  "rupeemarkbengali",
                  2546,
                  "rupeesignbengali",
                  2547,
                  "rupiah",
                  63197,
                  "ruthai",
                  3620,
                  "rvocalicbengali",
                  2443,
                  "rvocalicdeva",
                  2315,
                  "rvocalicgujarati",
                  2699,
                  "rvocalicvowelsignbengali",
                  2499,
                  "rvocalicvowelsigndeva",
                  2371,
                  "rvocalicvowelsigngujarati",
                  2755,
                  "s",
                  115,
                  "sabengali",
                  2488,
                  "sacute",
                  347,
                  "sacutedotaccent",
                  7781,
                  "sadarabic",
                  1589,
                  "sadeva",
                  2360,
                  "sadfinalarabic",
                  65210,
                  "sadinitialarabic",
                  65211,
                  "sadmedialarabic",
                  65212,
                  "sagujarati",
                  2744,
                  "sagurmukhi",
                  2616,
                  "sahiragana",
                  12373,
                  "sakatakana",
                  12469,
                  "sakatakanahalfwidth",
                  65403,
                  "sallallahoualayhewasallamarabic",
                  65018,
                  "samekh",
                  1505,
                  "samekhdagesh",
                  64321,
                  "samekhdageshhebrew",
                  64321,
                  "samekhhebrew",
                  1505,
                  "saraaathai",
                  3634,
                  "saraaethai",
                  3649,
                  "saraaimaimalaithai",
                  3652,
                  "saraaimaimuanthai",
                  3651,
                  "saraamthai",
                  3635,
                  "saraathai",
                  3632,
                  "saraethai",
                  3648,
                  "saraiileftthai",
                  63622,
                  "saraiithai",
                  3637,
                  "saraileftthai",
                  63621,
                  "saraithai",
                  3636,
                  "saraothai",
                  3650,
                  "saraueeleftthai",
                  63624,
                  "saraueethai",
                  3639,
                  "saraueleftthai",
                  63623,
                  "sarauethai",
                  3638,
                  "sarauthai",
                  3640,
                  "sarauuthai",
                  3641,
                  "sbopomofo",
                  12569,
                  "scaron",
                  353,
                  "scarondotaccent",
                  7783,
                  "scedilla",
                  351,
                  "schwa",
                  601,
                  "schwacyrillic",
                  1241,
                  "schwadieresiscyrillic",
                  1243,
                  "schwahook",
                  602,
                  "scircle",
                  9442,
                  "scircumflex",
                  349,
                  "scommaaccent",
                  537,
                  "sdotaccent",
                  7777,
                  "sdotbelow",
                  7779,
                  "sdotbelowdotaccent",
                  7785,
                  "seagullbelowcmb",
                  828,
                  "second",
                  8243,
                  "secondtonechinese",
                  714,
                  "section",
                  167,
                  "seenarabic",
                  1587,
                  "seenfinalarabic",
                  65202,
                  "seeninitialarabic",
                  65203,
                  "seenmedialarabic",
                  65204,
                  "segol",
                  1462,
                  "segol13",
                  1462,
                  "segol1f",
                  1462,
                  "segol2c",
                  1462,
                  "segolhebrew",
                  1462,
                  "segolnarrowhebrew",
                  1462,
                  "segolquarterhebrew",
                  1462,
                  "segoltahebrew",
                  1426,
                  "segolwidehebrew",
                  1462,
                  "seharmenian",
                  1405,
                  "sehiragana",
                  12379,
                  "sekatakana",
                  12475,
                  "sekatakanahalfwidth",
                  65406,
                  "semicolon",
                  59,
                  "semicolonarabic",
                  1563,
                  "semicolonmonospace",
                  65307,
                  "semicolonsmall",
                  65108,
                  "semivoicedmarkkana",
                  12444,
                  "semivoicedmarkkanahalfwidth",
                  65439,
                  "sentisquare",
                  13090,
                  "sentosquare",
                  13091,
                  "seven",
                  55,
                  "sevenarabic",
                  1639,
                  "sevenbengali",
                  2541,
                  "sevencircle",
                  9318,
                  "sevencircleinversesansserif",
                  10128,
                  "sevendeva",
                  2413,
                  "seveneighths",
                  8542,
                  "sevengujarati",
                  2797,
                  "sevengurmukhi",
                  2669,
                  "sevenhackarabic",
                  1639,
                  "sevenhangzhou",
                  12327,
                  "sevenideographicparen",
                  12838,
                  "seveninferior",
                  8327,
                  "sevenmonospace",
                  65303,
                  "sevenoldstyle",
                  63287,
                  "sevenparen",
                  9338,
                  "sevenperiod",
                  9358,
                  "sevenpersian",
                  1783,
                  "sevenroman",
                  8566,
                  "sevensuperior",
                  8311,
                  "seventeencircle",
                  9328,
                  "seventeenparen",
                  9348,
                  "seventeenperiod",
                  9368,
                  "seventhai",
                  3671,
                  "sfthyphen",
                  173,
                  "shaarmenian",
                  1399,
                  "shabengali",
                  2486,
                  "shacyrillic",
                  1096,
                  "shaddaarabic",
                  1617,
                  "shaddadammaarabic",
                  64609,
                  "shaddadammatanarabic",
                  64606,
                  "shaddafathaarabic",
                  64608,
                  "shaddakasraarabic",
                  64610,
                  "shaddakasratanarabic",
                  64607,
                  "shade",
                  9618,
                  "shadedark",
                  9619,
                  "shadelight",
                  9617,
                  "shademedium",
                  9618,
                  "shadeva",
                  2358,
                  "shagujarati",
                  2742,
                  "shagurmukhi",
                  2614,
                  "shalshelethebrew",
                  1427,
                  "shbopomofo",
                  12565,
                  "shchacyrillic",
                  1097,
                  "sheenarabic",
                  1588,
                  "sheenfinalarabic",
                  65206,
                  "sheeninitialarabic",
                  65207,
                  "sheenmedialarabic",
                  65208,
                  "sheicoptic",
                  995,
                  "sheqel",
                  8362,
                  "sheqelhebrew",
                  8362,
                  "sheva",
                  1456,
                  "sheva115",
                  1456,
                  "sheva15",
                  1456,
                  "sheva22",
                  1456,
                  "sheva2e",
                  1456,
                  "shevahebrew",
                  1456,
                  "shevanarrowhebrew",
                  1456,
                  "shevaquarterhebrew",
                  1456,
                  "shevawidehebrew",
                  1456,
                  "shhacyrillic",
                  1211,
                  "shimacoptic",
                  1005,
                  "shin",
                  1513,
                  "shindagesh",
                  64329,
                  "shindageshhebrew",
                  64329,
                  "shindageshshindot",
                  64300,
                  "shindageshshindothebrew",
                  64300,
                  "shindageshsindot",
                  64301,
                  "shindageshsindothebrew",
                  64301,
                  "shindothebrew",
                  1473,
                  "shinhebrew",
                  1513,
                  "shinshindot",
                  64298,
                  "shinshindothebrew",
                  64298,
                  "shinsindot",
                  64299,
                  "shinsindothebrew",
                  64299,
                  "shook",
                  642,
                  "sigma",
                  963,
                  "sigma1",
                  962,
                  "sigmafinal",
                  962,
                  "sigmalunatesymbolgreek",
                  1010,
                  "sihiragana",
                  12375,
                  "sikatakana",
                  12471,
                  "sikatakanahalfwidth",
                  65404,
                  "siluqhebrew",
                  1469,
                  "siluqlefthebrew",
                  1469,
                  "similar",
                  8764,
                  "sindothebrew",
                  1474,
                  "siosacirclekorean",
                  12916,
                  "siosaparenkorean",
                  12820,
                  "sioscieuckorean",
                  12670,
                  "sioscirclekorean",
                  12902,
                  "sioskiyeokkorean",
                  12666,
                  "sioskorean",
                  12613,
                  "siosnieunkorean",
                  12667,
                  "siosparenkorean",
                  12806,
                  "siospieupkorean",
                  12669,
                  "siostikeutkorean",
                  12668,
                  "six",
                  54,
                  "sixarabic",
                  1638,
                  "sixbengali",
                  2540,
                  "sixcircle",
                  9317,
                  "sixcircleinversesansserif",
                  10127,
                  "sixdeva",
                  2412,
                  "sixgujarati",
                  2796,
                  "sixgurmukhi",
                  2668,
                  "sixhackarabic",
                  1638,
                  "sixhangzhou",
                  12326,
                  "sixideographicparen",
                  12837,
                  "sixinferior",
                  8326,
                  "sixmonospace",
                  65302,
                  "sixoldstyle",
                  63286,
                  "sixparen",
                  9337,
                  "sixperiod",
                  9357,
                  "sixpersian",
                  1782,
                  "sixroman",
                  8565,
                  "sixsuperior",
                  8310,
                  "sixteencircle",
                  9327,
                  "sixteencurrencydenominatorbengali",
                  2553,
                  "sixteenparen",
                  9347,
                  "sixteenperiod",
                  9367,
                  "sixthai",
                  3670,
                  "slash",
                  47,
                  "slashmonospace",
                  65295,
                  "slong",
                  383,
                  "slongdotaccent",
                  7835,
                  "smileface",
                  9786,
                  "smonospace",
                  65363,
                  "sofpasuqhebrew",
                  1475,
                  "softhyphen",
                  173,
                  "softsigncyrillic",
                  1100,
                  "sohiragana",
                  12381,
                  "sokatakana",
                  12477,
                  "sokatakanahalfwidth",
                  65407,
                  "soliduslongoverlaycmb",
                  824,
                  "solidusshortoverlaycmb",
                  823,
                  "sorusithai",
                  3625,
                  "sosalathai",
                  3624,
                  "sosothai",
                  3595,
                  "sosuathai",
                  3626,
                  "space",
                  32,
                  "spacehackarabic",
                  32,
                  "spade",
                  9824,
                  "spadesuitblack",
                  9824,
                  "spadesuitwhite",
                  9828,
                  "sparen",
                  9390,
                  "squarebelowcmb",
                  827,
                  "squarecc",
                  13252,
                  "squarecm",
                  13213,
                  "squarediagonalcrosshatchfill",
                  9641,
                  "squarehorizontalfill",
                  9636,
                  "squarekg",
                  13199,
                  "squarekm",
                  13214,
                  "squarekmcapital",
                  13262,
                  "squareln",
                  13265,
                  "squarelog",
                  13266,
                  "squaremg",
                  13198,
                  "squaremil",
                  13269,
                  "squaremm",
                  13212,
                  "squaremsquared",
                  13217,
                  "squareorthogonalcrosshatchfill",
                  9638,
                  "squareupperlefttolowerrightfill",
                  9639,
                  "squareupperrighttolowerleftfill",
                  9640,
                  "squareverticalfill",
                  9637,
                  "squarewhitewithsmallblack",
                  9635,
                  "srsquare",
                  13275,
                  "ssabengali",
                  2487,
                  "ssadeva",
                  2359,
                  "ssagujarati",
                  2743,
                  "ssangcieuckorean",
                  12617,
                  "ssanghieuhkorean",
                  12677,
                  "ssangieungkorean",
                  12672,
                  "ssangkiyeokkorean",
                  12594,
                  "ssangnieunkorean",
                  12645,
                  "ssangpieupkorean",
                  12611,
                  "ssangsioskorean",
                  12614,
                  "ssangtikeutkorean",
                  12600,
                  "ssuperior",
                  63218,
                  "sterling",
                  163,
                  "sterlingmonospace",
                  65505,
                  "strokelongoverlaycmb",
                  822,
                  "strokeshortoverlaycmb",
                  821,
                  "subset",
                  8834,
                  "subsetnotequal",
                  8842,
                  "subsetorequal",
                  8838,
                  "succeeds",
                  8827,
                  "suchthat",
                  8715,
                  "suhiragana",
                  12377,
                  "sukatakana",
                  12473,
                  "sukatakanahalfwidth",
                  65405,
                  "sukunarabic",
                  1618,
                  "summation",
                  8721,
                  "sun",
                  9788,
                  "superset",
                  8835,
                  "supersetnotequal",
                  8843,
                  "supersetorequal",
                  8839,
                  "svsquare",
                  13276,
                  "syouwaerasquare",
                  13180,
                  "t",
                  116,
                  "tabengali",
                  2468,
                  "tackdown",
                  8868,
                  "tackleft",
                  8867,
                  "tadeva",
                  2340,
                  "tagujarati",
                  2724,
                  "tagurmukhi",
                  2596,
                  "taharabic",
                  1591,
                  "tahfinalarabic",
                  65218,
                  "tahinitialarabic",
                  65219,
                  "tahiragana",
                  12383,
                  "tahmedialarabic",
                  65220,
                  "taisyouerasquare",
                  13181,
                  "takatakana",
                  12479,
                  "takatakanahalfwidth",
                  65408,
                  "tatweelarabic",
                  1600,
                  "tau",
                  964,
                  "tav",
                  1514,
                  "tavdages",
                  64330,
                  "tavdagesh",
                  64330,
                  "tavdageshhebrew",
                  64330,
                  "tavhebrew",
                  1514,
                  "tbar",
                  359,
                  "tbopomofo",
                  12554,
                  "tcaron",
                  357,
                  "tccurl",
                  680,
                  "tcedilla",
                  355,
                  "tcheharabic",
                  1670,
                  "tchehfinalarabic",
                  64379,
                  "tchehinitialarabic",
                  64380,
                  "tchehmedialarabic",
                  64381,
                  "tcircle",
                  9443,
                  "tcircumflexbelow",
                  7793,
                  "tcommaaccent",
                  355,
                  "tdieresis",
                  7831,
                  "tdotaccent",
                  7787,
                  "tdotbelow",
                  7789,
                  "tecyrillic",
                  1090,
                  "tedescendercyrillic",
                  1197,
                  "teharabic",
                  1578,
                  "tehfinalarabic",
                  65174,
                  "tehhahinitialarabic",
                  64674,
                  "tehhahisolatedarabic",
                  64524,
                  "tehinitialarabic",
                  65175,
                  "tehiragana",
                  12390,
                  "tehjeeminitialarabic",
                  64673,
                  "tehjeemisolatedarabic",
                  64523,
                  "tehmarbutaarabic",
                  1577,
                  "tehmarbutafinalarabic",
                  65172,
                  "tehmedialarabic",
                  65176,
                  "tehmeeminitialarabic",
                  64676,
                  "tehmeemisolatedarabic",
                  64526,
                  "tehnoonfinalarabic",
                  64627,
                  "tekatakana",
                  12486,
                  "tekatakanahalfwidth",
                  65411,
                  "telephone",
                  8481,
                  "telephoneblack",
                  9742,
                  "telishagedolahebrew",
                  1440,
                  "telishaqetanahebrew",
                  1449,
                  "tencircle",
                  9321,
                  "tenideographicparen",
                  12841,
                  "tenparen",
                  9341,
                  "tenperiod",
                  9361,
                  "tenroman",
                  8569,
                  "tesh",
                  679,
                  "tet",
                  1496,
                  "tetdagesh",
                  64312,
                  "tetdageshhebrew",
                  64312,
                  "tethebrew",
                  1496,
                  "tetsecyrillic",
                  1205,
                  "tevirhebrew",
                  1435,
                  "tevirlefthebrew",
                  1435,
                  "thabengali",
                  2469,
                  "thadeva",
                  2341,
                  "thagujarati",
                  2725,
                  "thagurmukhi",
                  2597,
                  "thalarabic",
                  1584,
                  "thalfinalarabic",
                  65196,
                  "thanthakhatlowleftthai",
                  63640,
                  "thanthakhatlowrightthai",
                  63639,
                  "thanthakhatthai",
                  3660,
                  "thanthakhatupperleftthai",
                  63638,
                  "theharabic",
                  1579,
                  "thehfinalarabic",
                  65178,
                  "thehinitialarabic",
                  65179,
                  "thehmedialarabic",
                  65180,
                  "thereexists",
                  8707,
                  "therefore",
                  8756,
                  "theta",
                  952,
                  "theta1",
                  977,
                  "thetasymbolgreek",
                  977,
                  "thieuthacirclekorean",
                  12921,
                  "thieuthaparenkorean",
                  12825,
                  "thieuthcirclekorean",
                  12907,
                  "thieuthkorean",
                  12620,
                  "thieuthparenkorean",
                  12811,
                  "thirteencircle",
                  9324,
                  "thirteenparen",
                  9344,
                  "thirteenperiod",
                  9364,
                  "thonangmonthothai",
                  3601,
                  "thook",
                  429,
                  "thophuthaothai",
                  3602,
                  "thorn",
                  254,
                  "thothahanthai",
                  3607,
                  "thothanthai",
                  3600,
                  "thothongthai",
                  3608,
                  "thothungthai",
                  3606,
                  "thousandcyrillic",
                  1154,
                  "thousandsseparatorarabic",
                  1644,
                  "thousandsseparatorpersian",
                  1644,
                  "three",
                  51,
                  "threearabic",
                  1635,
                  "threebengali",
                  2537,
                  "threecircle",
                  9314,
                  "threecircleinversesansserif",
                  10124,
                  "threedeva",
                  2409,
                  "threeeighths",
                  8540,
                  "threegujarati",
                  2793,
                  "threegurmukhi",
                  2665,
                  "threehackarabic",
                  1635,
                  "threehangzhou",
                  12323,
                  "threeideographicparen",
                  12834,
                  "threeinferior",
                  8323,
                  "threemonospace",
                  65299,
                  "threenumeratorbengali",
                  2550,
                  "threeoldstyle",
                  63283,
                  "threeparen",
                  9334,
                  "threeperiod",
                  9354,
                  "threepersian",
                  1779,
                  "threequarters",
                  190,
                  "threequartersemdash",
                  63198,
                  "threeroman",
                  8562,
                  "threesuperior",
                  179,
                  "threethai",
                  3667,
                  "thzsquare",
                  13204,
                  "tihiragana",
                  12385,
                  "tikatakana",
                  12481,
                  "tikatakanahalfwidth",
                  65409,
                  "tikeutacirclekorean",
                  12912,
                  "tikeutaparenkorean",
                  12816,
                  "tikeutcirclekorean",
                  12898,
                  "tikeutkorean",
                  12599,
                  "tikeutparenkorean",
                  12802,
                  "tilde",
                  732,
                  "tildebelowcmb",
                  816,
                  "tildecmb",
                  771,
                  "tildecomb",
                  771,
                  "tildedoublecmb",
                  864,
                  "tildeoperator",
                  8764,
                  "tildeoverlaycmb",
                  820,
                  "tildeverticalcmb",
                  830,
                  "timescircle",
                  8855,
                  "tipehahebrew",
                  1430,
                  "tipehalefthebrew",
                  1430,
                  "tippigurmukhi",
                  2672,
                  "titlocyrilliccmb",
                  1155,
                  "tiwnarmenian",
                  1407,
                  "tlinebelow",
                  7791,
                  "tmonospace",
                  65364,
                  "toarmenian",
                  1385,
                  "tohiragana",
                  12392,
                  "tokatakana",
                  12488,
                  "tokatakanahalfwidth",
                  65412,
                  "tonebarextrahighmod",
                  741,
                  "tonebarextralowmod",
                  745,
                  "tonebarhighmod",
                  742,
                  "tonebarlowmod",
                  744,
                  "tonebarmidmod",
                  743,
                  "tonefive",
                  445,
                  "tonesix",
                  389,
                  "tonetwo",
                  424,
                  "tonos",
                  900,
                  "tonsquare",
                  13095,
                  "topatakthai",
                  3599,
                  "tortoiseshellbracketleft",
                  12308,
                  "tortoiseshellbracketleftsmall",
                  65117,
                  "tortoiseshellbracketleftvertical",
                  65081,
                  "tortoiseshellbracketright",
                  12309,
                  "tortoiseshellbracketrightsmall",
                  65118,
                  "tortoiseshellbracketrightvertical",
                  65082,
                  "totaothai",
                  3605,
                  "tpalatalhook",
                  427,
                  "tparen",
                  9391,
                  "trademark",
                  8482,
                  "trademarksans",
                  63722,
                  "trademarkserif",
                  63195,
                  "tretroflexhook",
                  648,
                  "triagdn",
                  9660,
                  "triaglf",
                  9668,
                  "triagrt",
                  9658,
                  "triagup",
                  9650,
                  "ts",
                  678,
                  "tsadi",
                  1510,
                  "tsadidagesh",
                  64326,
                  "tsadidageshhebrew",
                  64326,
                  "tsadihebrew",
                  1510,
                  "tsecyrillic",
                  1094,
                  "tsere",
                  1461,
                  "tsere12",
                  1461,
                  "tsere1e",
                  1461,
                  "tsere2b",
                  1461,
                  "tserehebrew",
                  1461,
                  "tserenarrowhebrew",
                  1461,
                  "tserequarterhebrew",
                  1461,
                  "tserewidehebrew",
                  1461,
                  "tshecyrillic",
                  1115,
                  "tsuperior",
                  63219,
                  "ttabengali",
                  2463,
                  "ttadeva",
                  2335,
                  "ttagujarati",
                  2719,
                  "ttagurmukhi",
                  2591,
                  "tteharabic",
                  1657,
                  "ttehfinalarabic",
                  64359,
                  "ttehinitialarabic",
                  64360,
                  "ttehmedialarabic",
                  64361,
                  "tthabengali",
                  2464,
                  "tthadeva",
                  2336,
                  "tthagujarati",
                  2720,
                  "tthagurmukhi",
                  2592,
                  "tturned",
                  647,
                  "tuhiragana",
                  12388,
                  "tukatakana",
                  12484,
                  "tukatakanahalfwidth",
                  65410,
                  "tusmallhiragana",
                  12387,
                  "tusmallkatakana",
                  12483,
                  "tusmallkatakanahalfwidth",
                  65391,
                  "twelvecircle",
                  9323,
                  "twelveparen",
                  9343,
                  "twelveperiod",
                  9363,
                  "twelveroman",
                  8571,
                  "twentycircle",
                  9331,
                  "twentyhangzhou",
                  21316,
                  "twentyparen",
                  9351,
                  "twentyperiod",
                  9371,
                  "two",
                  50,
                  "twoarabic",
                  1634,
                  "twobengali",
                  2536,
                  "twocircle",
                  9313,
                  "twocircleinversesansserif",
                  10123,
                  "twodeva",
                  2408,
                  "twodotenleader",
                  8229,
                  "twodotleader",
                  8229,
                  "twodotleadervertical",
                  65072,
                  "twogujarati",
                  2792,
                  "twogurmukhi",
                  2664,
                  "twohackarabic",
                  1634,
                  "twohangzhou",
                  12322,
                  "twoideographicparen",
                  12833,
                  "twoinferior",
                  8322,
                  "twomonospace",
                  65298,
                  "twonumeratorbengali",
                  2549,
                  "twooldstyle",
                  63282,
                  "twoparen",
                  9333,
                  "twoperiod",
                  9353,
                  "twopersian",
                  1778,
                  "tworoman",
                  8561,
                  "twostroke",
                  443,
                  "twosuperior",
                  178,
                  "twothai",
                  3666,
                  "twothirds",
                  8532,
                  "u",
                  117,
                  "uacute",
                  250,
                  "ubar",
                  649,
                  "ubengali",
                  2441,
                  "ubopomofo",
                  12584,
                  "ubreve",
                  365,
                  "ucaron",
                  468,
                  "ucircle",
                  9444,
                  "ucircumflex",
                  251,
                  "ucircumflexbelow",
                  7799,
                  "ucyrillic",
                  1091,
                  "udattadeva",
                  2385,
                  "udblacute",
                  369,
                  "udblgrave",
                  533,
                  "udeva",
                  2313,
                  "udieresis",
                  252,
                  "udieresisacute",
                  472,
                  "udieresisbelow",
                  7795,
                  "udieresiscaron",
                  474,
                  "udieresiscyrillic",
                  1265,
                  "udieresisgrave",
                  476,
                  "udieresismacron",
                  470,
                  "udotbelow",
                  7909,
                  "ugrave",
                  249,
                  "ugujarati",
                  2697,
                  "ugurmukhi",
                  2569,
                  "uhiragana",
                  12358,
                  "uhookabove",
                  7911,
                  "uhorn",
                  432,
                  "uhornacute",
                  7913,
                  "uhorndotbelow",
                  7921,
                  "uhorngrave",
                  7915,
                  "uhornhookabove",
                  7917,
                  "uhorntilde",
                  7919,
                  "uhungarumlaut",
                  369,
                  "uhungarumlautcyrillic",
                  1267,
                  "uinvertedbreve",
                  535,
                  "ukatakana",
                  12454,
                  "ukatakanahalfwidth",
                  65395,
                  "ukcyrillic",
                  1145,
                  "ukorean",
                  12636,
                  "umacron",
                  363,
                  "umacroncyrillic",
                  1263,
                  "umacrondieresis",
                  7803,
                  "umatragurmukhi",
                  2625,
                  "umonospace",
                  65365,
                  "underscore",
                  95,
                  "underscoredbl",
                  8215,
                  "underscoremonospace",
                  65343,
                  "underscorevertical",
                  65075,
                  "underscorewavy",
                  65103,
                  "union",
                  8746,
                  "universal",
                  8704,
                  "uogonek",
                  371,
                  "uparen",
                  9392,
                  "upblock",
                  9600,
                  "upperdothebrew",
                  1476,
                  "upsilon",
                  965,
                  "upsilondieresis",
                  971,
                  "upsilondieresistonos",
                  944,
                  "upsilonlatin",
                  650,
                  "upsilontonos",
                  973,
                  "uptackbelowcmb",
                  797,
                  "uptackmod",
                  724,
                  "uragurmukhi",
                  2675,
                  "uring",
                  367,
                  "ushortcyrillic",
                  1118,
                  "usmallhiragana",
                  12357,
                  "usmallkatakana",
                  12453,
                  "usmallkatakanahalfwidth",
                  65385,
                  "ustraightcyrillic",
                  1199,
                  "ustraightstrokecyrillic",
                  1201,
                  "utilde",
                  361,
                  "utildeacute",
                  7801,
                  "utildebelow",
                  7797,
                  "uubengali",
                  2442,
                  "uudeva",
                  2314,
                  "uugujarati",
                  2698,
                  "uugurmukhi",
                  2570,
                  "uumatragurmukhi",
                  2626,
                  "uuvowelsignbengali",
                  2498,
                  "uuvowelsigndeva",
                  2370,
                  "uuvowelsigngujarati",
                  2754,
                  "uvowelsignbengali",
                  2497,
                  "uvowelsigndeva",
                  2369,
                  "uvowelsigngujarati",
                  2753,
                  "v",
                  118,
                  "vadeva",
                  2357,
                  "vagujarati",
                  2741,
                  "vagurmukhi",
                  2613,
                  "vakatakana",
                  12535,
                  "vav",
                  1493,
                  "vavdagesh",
                  64309,
                  "vavdagesh65",
                  64309,
                  "vavdageshhebrew",
                  64309,
                  "vavhebrew",
                  1493,
                  "vavholam",
                  64331,
                  "vavholamhebrew",
                  64331,
                  "vavvavhebrew",
                  1520,
                  "vavyodhebrew",
                  1521,
                  "vcircle",
                  9445,
                  "vdotbelow",
                  7807,
                  "vecyrillic",
                  1074,
                  "veharabic",
                  1700,
                  "vehfinalarabic",
                  64363,
                  "vehinitialarabic",
                  64364,
                  "vehmedialarabic",
                  64365,
                  "vekatakana",
                  12537,
                  "venus",
                  9792,
                  "verticalbar",
                  124,
                  "verticallineabovecmb",
                  781,
                  "verticallinebelowcmb",
                  809,
                  "verticallinelowmod",
                  716,
                  "verticallinemod",
                  712,
                  "vewarmenian",
                  1406,
                  "vhook",
                  651,
                  "vikatakana",
                  12536,
                  "viramabengali",
                  2509,
                  "viramadeva",
                  2381,
                  "viramagujarati",
                  2765,
                  "visargabengali",
                  2435,
                  "visargadeva",
                  2307,
                  "visargagujarati",
                  2691,
                  "vmonospace",
                  65366,
                  "voarmenian",
                  1400,
                  "voicediterationhiragana",
                  12446,
                  "voicediterationkatakana",
                  12542,
                  "voicedmarkkana",
                  12443,
                  "voicedmarkkanahalfwidth",
                  65438,
                  "vokatakana",
                  12538,
                  "vparen",
                  9393,
                  "vtilde",
                  7805,
                  "vturned",
                  652,
                  "vuhiragana",
                  12436,
                  "vukatakana",
                  12532,
                  "w",
                  119,
                  "wacute",
                  7811,
                  "waekorean",
                  12633,
                  "wahiragana",
                  12431,
                  "wakatakana",
                  12527,
                  "wakatakanahalfwidth",
                  65436,
                  "wakorean",
                  12632,
                  "wasmallhiragana",
                  12430,
                  "wasmallkatakana",
                  12526,
                  "wattosquare",
                  13143,
                  "wavedash",
                  12316,
                  "wavyunderscorevertical",
                  65076,
                  "wawarabic",
                  1608,
                  "wawfinalarabic",
                  65262,
                  "wawhamzaabovearabic",
                  1572,
                  "wawhamzaabovefinalarabic",
                  65158,
                  "wbsquare",
                  13277,
                  "wcircle",
                  9446,
                  "wcircumflex",
                  373,
                  "wdieresis",
                  7813,
                  "wdotaccent",
                  7815,
                  "wdotbelow",
                  7817,
                  "wehiragana",
                  12433,
                  "weierstrass",
                  8472,
                  "wekatakana",
                  12529,
                  "wekorean",
                  12638,
                  "weokorean",
                  12637,
                  "wgrave",
                  7809,
                  "whitebullet",
                  9702,
                  "whitecircle",
                  9675,
                  "whitecircleinverse",
                  9689,
                  "whitecornerbracketleft",
                  12302,
                  "whitecornerbracketleftvertical",
                  65091,
                  "whitecornerbracketright",
                  12303,
                  "whitecornerbracketrightvertical",
                  65092,
                  "whitediamond",
                  9671,
                  "whitediamondcontainingblacksmalldiamond",
                  9672,
                  "whitedownpointingsmalltriangle",
                  9663,
                  "whitedownpointingtriangle",
                  9661,
                  "whiteleftpointingsmalltriangle",
                  9667,
                  "whiteleftpointingtriangle",
                  9665,
                  "whitelenticularbracketleft",
                  12310,
                  "whitelenticularbracketright",
                  12311,
                  "whiterightpointingsmalltriangle",
                  9657,
                  "whiterightpointingtriangle",
                  9655,
                  "whitesmallsquare",
                  9643,
                  "whitesmilingface",
                  9786,
                  "whitesquare",
                  9633,
                  "whitestar",
                  9734,
                  "whitetelephone",
                  9743,
                  "whitetortoiseshellbracketleft",
                  12312,
                  "whitetortoiseshellbracketright",
                  12313,
                  "whiteuppointingsmalltriangle",
                  9653,
                  "whiteuppointingtriangle",
                  9651,
                  "wihiragana",
                  12432,
                  "wikatakana",
                  12528,
                  "wikorean",
                  12639,
                  "wmonospace",
                  65367,
                  "wohiragana",
                  12434,
                  "wokatakana",
                  12530,
                  "wokatakanahalfwidth",
                  65382,
                  "won",
                  8361,
                  "wonmonospace",
                  65510,
                  "wowaenthai",
                  3623,
                  "wparen",
                  9394,
                  "wring",
                  7832,
                  "wsuperior",
                  695,
                  "wturned",
                  653,
                  "wynn",
                  447,
                  "x",
                  120,
                  "xabovecmb",
                  829,
                  "xbopomofo",
                  12562,
                  "xcircle",
                  9447,
                  "xdieresis",
                  7821,
                  "xdotaccent",
                  7819,
                  "xeharmenian",
                  1389,
                  "xi",
                  958,
                  "xmonospace",
                  65368,
                  "xparen",
                  9395,
                  "xsuperior",
                  739,
                  "y",
                  121,
                  "yaadosquare",
                  13134,
                  "yabengali",
                  2479,
                  "yacute",
                  253,
                  "yadeva",
                  2351,
                  "yaekorean",
                  12626,
                  "yagujarati",
                  2735,
                  "yagurmukhi",
                  2607,
                  "yahiragana",
                  12420,
                  "yakatakana",
                  12516,
                  "yakatakanahalfwidth",
                  65428,
                  "yakorean",
                  12625,
                  "yamakkanthai",
                  3662,
                  "yasmallhiragana",
                  12419,
                  "yasmallkatakana",
                  12515,
                  "yasmallkatakanahalfwidth",
                  65388,
                  "yatcyrillic",
                  1123,
                  "ycircle",
                  9448,
                  "ycircumflex",
                  375,
                  "ydieresis",
                  255,
                  "ydotaccent",
                  7823,
                  "ydotbelow",
                  7925,
                  "yeharabic",
                  1610,
                  "yehbarreearabic",
                  1746,
                  "yehbarreefinalarabic",
                  64431,
                  "yehfinalarabic",
                  65266,
                  "yehhamzaabovearabic",
                  1574,
                  "yehhamzaabovefinalarabic",
                  65162,
                  "yehhamzaaboveinitialarabic",
                  65163,
                  "yehhamzaabovemedialarabic",
                  65164,
                  "yehinitialarabic",
                  65267,
                  "yehmedialarabic",
                  65268,
                  "yehmeeminitialarabic",
                  64733,
                  "yehmeemisolatedarabic",
                  64600,
                  "yehnoonfinalarabic",
                  64660,
                  "yehthreedotsbelowarabic",
                  1745,
                  "yekorean",
                  12630,
                  "yen",
                  165,
                  "yenmonospace",
                  65509,
                  "yeokorean",
                  12629,
                  "yeorinhieuhkorean",
                  12678,
                  "yerahbenyomohebrew",
                  1450,
                  "yerahbenyomolefthebrew",
                  1450,
                  "yericyrillic",
                  1099,
                  "yerudieresiscyrillic",
                  1273,
                  "yesieungkorean",
                  12673,
                  "yesieungpansioskorean",
                  12675,
                  "yesieungsioskorean",
                  12674,
                  "yetivhebrew",
                  1434,
                  "ygrave",
                  7923,
                  "yhook",
                  436,
                  "yhookabove",
                  7927,
                  "yiarmenian",
                  1397,
                  "yicyrillic",
                  1111,
                  "yikorean",
                  12642,
                  "yinyang",
                  9775,
                  "yiwnarmenian",
                  1410,
                  "ymonospace",
                  65369,
                  "yod",
                  1497,
                  "yoddagesh",
                  64313,
                  "yoddageshhebrew",
                  64313,
                  "yodhebrew",
                  1497,
                  "yodyodhebrew",
                  1522,
                  "yodyodpatahhebrew",
                  64287,
                  "yohiragana",
                  12424,
                  "yoikorean",
                  12681,
                  "yokatakana",
                  12520,
                  "yokatakanahalfwidth",
                  65430,
                  "yokorean",
                  12635,
                  "yosmallhiragana",
                  12423,
                  "yosmallkatakana",
                  12519,
                  "yosmallkatakanahalfwidth",
                  65390,
                  "yotgreek",
                  1011,
                  "yoyaekorean",
                  12680,
                  "yoyakorean",
                  12679,
                  "yoyakthai",
                  3618,
                  "yoyingthai",
                  3597,
                  "yparen",
                  9396,
                  "ypogegrammeni",
                  890,
                  "ypogegrammenigreekcmb",
                  837,
                  "yr",
                  422,
                  "yring",
                  7833,
                  "ysuperior",
                  696,
                  "ytilde",
                  7929,
                  "yturned",
                  654,
                  "yuhiragana",
                  12422,
                  "yuikorean",
                  12684,
                  "yukatakana",
                  12518,
                  "yukatakanahalfwidth",
                  65429,
                  "yukorean",
                  12640,
                  "yusbigcyrillic",
                  1131,
                  "yusbigiotifiedcyrillic",
                  1133,
                  "yuslittlecyrillic",
                  1127,
                  "yuslittleiotifiedcyrillic",
                  1129,
                  "yusmallhiragana",
                  12421,
                  "yusmallkatakana",
                  12517,
                  "yusmallkatakanahalfwidth",
                  65389,
                  "yuyekorean",
                  12683,
                  "yuyeokorean",
                  12682,
                  "yyabengali",
                  2527,
                  "yyadeva",
                  2399,
                  "z",
                  122,
                  "zaarmenian",
                  1382,
                  "zacute",
                  378,
                  "zadeva",
                  2395,
                  "zagurmukhi",
                  2651,
                  "zaharabic",
                  1592,
                  "zahfinalarabic",
                  65222,
                  "zahinitialarabic",
                  65223,
                  "zahiragana",
                  12374,
                  "zahmedialarabic",
                  65224,
                  "zainarabic",
                  1586,
                  "zainfinalarabic",
                  65200,
                  "zakatakana",
                  12470,
                  "zaqefgadolhebrew",
                  1429,
                  "zaqefqatanhebrew",
                  1428,
                  "zarqahebrew",
                  1432,
                  "zayin",
                  1494,
                  "zayindagesh",
                  64310,
                  "zayindageshhebrew",
                  64310,
                  "zayinhebrew",
                  1494,
                  "zbopomofo",
                  12567,
                  "zcaron",
                  382,
                  "zcircle",
                  9449,
                  "zcircumflex",
                  7825,
                  "zcurl",
                  657,
                  "zdot",
                  380,
                  "zdotaccent",
                  380,
                  "zdotbelow",
                  7827,
                  "zecyrillic",
                  1079,
                  "zedescendercyrillic",
                  1177,
                  "zedieresiscyrillic",
                  1247,
                  "zehiragana",
                  12380,
                  "zekatakana",
                  12476,
                  "zero",
                  48,
                  "zeroarabic",
                  1632,
                  "zerobengali",
                  2534,
                  "zerodeva",
                  2406,
                  "zerogujarati",
                  2790,
                  "zerogurmukhi",
                  2662,
                  "zerohackarabic",
                  1632,
                  "zeroinferior",
                  8320,
                  "zeromonospace",
                  65296,
                  "zerooldstyle",
                  63280,
                  "zeropersian",
                  1776,
                  "zerosuperior",
                  8304,
                  "zerothai",
                  3664,
                  "zerowidthjoiner",
                  65279,
                  "zerowidthnonjoiner",
                  8204,
                  "zerowidthspace",
                  8203,
                  "zeta",
                  950,
                  "zhbopomofo",
                  12563,
                  "zhearmenian",
                  1386,
                  "zhebrevecyrillic",
                  1218,
                  "zhecyrillic",
                  1078,
                  "zhedescendercyrillic",
                  1175,
                  "zhedieresiscyrillic",
                  1245,
                  "zihiragana",
                  12376,
                  "zikatakana",
                  12472,
                  "zinorhebrew",
                  1454,
                  "zlinebelow",
                  7829,
                  "zmonospace",
                  65370,
                  "zohiragana",
                  12382,
                  "zokatakana",
                  12478,
                  "zparen",
                  9397,
                  "zretroflexhook",
                  656,
                  "zstroke",
                  438,
                  "zuhiragana",
                  12378,
                  "zukatakana",
                  12474,
                  ".notdef",
                  0,
                  "angbracketleftbig",
                  9001,
                  "angbracketleftBig",
                  9001,
                  "angbracketleftbigg",
                  9001,
                  "angbracketleftBigg",
                  9001,
                  "angbracketrightBig",
                  9002,
                  "angbracketrightbig",
                  9002,
                  "angbracketrightBigg",
                  9002,
                  "angbracketrightbigg",
                  9002,
                  "arrowhookleft",
                  8618,
                  "arrowhookright",
                  8617,
                  "arrowlefttophalf",
                  8636,
                  "arrowleftbothalf",
                  8637,
                  "arrownortheast",
                  8599,
                  "arrownorthwest",
                  8598,
                  "arrowrighttophalf",
                  8640,
                  "arrowrightbothalf",
                  8641,
                  "arrowsoutheast",
                  8600,
                  "arrowsouthwest",
                  8601,
                  "backslashbig",
                  8726,
                  "backslashBig",
                  8726,
                  "backslashBigg",
                  8726,
                  "backslashbigg",
                  8726,
                  "bardbl",
                  8214,
                  "bracehtipdownleft",
                  65079,
                  "bracehtipdownright",
                  65079,
                  "bracehtipupleft",
                  65080,
                  "bracehtipupright",
                  65080,
                  "braceleftBig",
                  123,
                  "braceleftbig",
                  123,
                  "braceleftbigg",
                  123,
                  "braceleftBigg",
                  123,
                  "bracerightBig",
                  125,
                  "bracerightbig",
                  125,
                  "bracerightbigg",
                  125,
                  "bracerightBigg",
                  125,
                  "bracketleftbig",
                  91,
                  "bracketleftBig",
                  91,
                  "bracketleftbigg",
                  91,
                  "bracketleftBigg",
                  91,
                  "bracketrightBig",
                  93,
                  "bracketrightbig",
                  93,
                  "bracketrightbigg",
                  93,
                  "bracketrightBigg",
                  93,
                  "ceilingleftbig",
                  8968,
                  "ceilingleftBig",
                  8968,
                  "ceilingleftBigg",
                  8968,
                  "ceilingleftbigg",
                  8968,
                  "ceilingrightbig",
                  8969,
                  "ceilingrightBig",
                  8969,
                  "ceilingrightbigg",
                  8969,
                  "ceilingrightBigg",
                  8969,
                  "circledotdisplay",
                  8857,
                  "circledottext",
                  8857,
                  "circlemultiplydisplay",
                  8855,
                  "circlemultiplytext",
                  8855,
                  "circleplusdisplay",
                  8853,
                  "circleplustext",
                  8853,
                  "contintegraldisplay",
                  8750,
                  "contintegraltext",
                  8750,
                  "coproductdisplay",
                  8720,
                  "coproducttext",
                  8720,
                  "floorleftBig",
                  8970,
                  "floorleftbig",
                  8970,
                  "floorleftbigg",
                  8970,
                  "floorleftBigg",
                  8970,
                  "floorrightbig",
                  8971,
                  "floorrightBig",
                  8971,
                  "floorrightBigg",
                  8971,
                  "floorrightbigg",
                  8971,
                  "hatwide",
                  770,
                  "hatwider",
                  770,
                  "hatwidest",
                  770,
                  "intercal",
                  7488,
                  "integraldisplay",
                  8747,
                  "integraltext",
                  8747,
                  "intersectiondisplay",
                  8898,
                  "intersectiontext",
                  8898,
                  "logicalanddisplay",
                  8743,
                  "logicalandtext",
                  8743,
                  "logicalordisplay",
                  8744,
                  "logicalortext",
                  8744,
                  "parenleftBig",
                  40,
                  "parenleftbig",
                  40,
                  "parenleftBigg",
                  40,
                  "parenleftbigg",
                  40,
                  "parenrightBig",
                  41,
                  "parenrightbig",
                  41,
                  "parenrightBigg",
                  41,
                  "parenrightbigg",
                  41,
                  "prime",
                  8242,
                  "productdisplay",
                  8719,
                  "producttext",
                  8719,
                  "radicalbig",
                  8730,
                  "radicalBig",
                  8730,
                  "radicalBigg",
                  8730,
                  "radicalbigg",
                  8730,
                  "radicalbt",
                  8730,
                  "radicaltp",
                  8730,
                  "radicalvertex",
                  8730,
                  "slashbig",
                  47,
                  "slashBig",
                  47,
                  "slashBigg",
                  47,
                  "slashbigg",
                  47,
                  "summationdisplay",
                  8721,
                  "summationtext",
                  8721,
                  "tildewide",
                  732,
                  "tildewider",
                  732,
                  "tildewidest",
                  732,
                  "uniondisplay",
                  8899,
                  "unionmultidisplay",
                  8846,
                  "unionmultitext",
                  8846,
                  "unionsqdisplay",
                  8852,
                  "unionsqtext",
                  8852,
                  "uniontext",
                  8899,
                  "vextenddouble",
                  8741,
                  "vextendsingle",
                  8739
                ];
              });
              const getDingbatsGlyphsUnicode = (0, _core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getArrayLookupTableFactory)(function() {
                return [
                  "space",
                  32,
                  "a1",
                  9985,
                  "a2",
                  9986,
                  "a202",
                  9987,
                  "a3",
                  9988,
                  "a4",
                  9742,
                  "a5",
                  9990,
                  "a119",
                  9991,
                  "a118",
                  9992,
                  "a117",
                  9993,
                  "a11",
                  9755,
                  "a12",
                  9758,
                  "a13",
                  9996,
                  "a14",
                  9997,
                  "a15",
                  9998,
                  "a16",
                  9999,
                  "a105",
                  1e4,
                  "a17",
                  10001,
                  "a18",
                  10002,
                  "a19",
                  10003,
                  "a20",
                  10004,
                  "a21",
                  10005,
                  "a22",
                  10006,
                  "a23",
                  10007,
                  "a24",
                  10008,
                  "a25",
                  10009,
                  "a26",
                  10010,
                  "a27",
                  10011,
                  "a28",
                  10012,
                  "a6",
                  10013,
                  "a7",
                  10014,
                  "a8",
                  10015,
                  "a9",
                  10016,
                  "a10",
                  10017,
                  "a29",
                  10018,
                  "a30",
                  10019,
                  "a31",
                  10020,
                  "a32",
                  10021,
                  "a33",
                  10022,
                  "a34",
                  10023,
                  "a35",
                  9733,
                  "a36",
                  10025,
                  "a37",
                  10026,
                  "a38",
                  10027,
                  "a39",
                  10028,
                  "a40",
                  10029,
                  "a41",
                  10030,
                  "a42",
                  10031,
                  "a43",
                  10032,
                  "a44",
                  10033,
                  "a45",
                  10034,
                  "a46",
                  10035,
                  "a47",
                  10036,
                  "a48",
                  10037,
                  "a49",
                  10038,
                  "a50",
                  10039,
                  "a51",
                  10040,
                  "a52",
                  10041,
                  "a53",
                  10042,
                  "a54",
                  10043,
                  "a55",
                  10044,
                  "a56",
                  10045,
                  "a57",
                  10046,
                  "a58",
                  10047,
                  "a59",
                  10048,
                  "a60",
                  10049,
                  "a61",
                  10050,
                  "a62",
                  10051,
                  "a63",
                  10052,
                  "a64",
                  10053,
                  "a65",
                  10054,
                  "a66",
                  10055,
                  "a67",
                  10056,
                  "a68",
                  10057,
                  "a69",
                  10058,
                  "a70",
                  10059,
                  "a71",
                  9679,
                  "a72",
                  10061,
                  "a73",
                  9632,
                  "a74",
                  10063,
                  "a203",
                  10064,
                  "a75",
                  10065,
                  "a204",
                  10066,
                  "a76",
                  9650,
                  "a77",
                  9660,
                  "a78",
                  9670,
                  "a79",
                  10070,
                  "a81",
                  9687,
                  "a82",
                  10072,
                  "a83",
                  10073,
                  "a84",
                  10074,
                  "a97",
                  10075,
                  "a98",
                  10076,
                  "a99",
                  10077,
                  "a100",
                  10078,
                  "a101",
                  10081,
                  "a102",
                  10082,
                  "a103",
                  10083,
                  "a104",
                  10084,
                  "a106",
                  10085,
                  "a107",
                  10086,
                  "a108",
                  10087,
                  "a112",
                  9827,
                  "a111",
                  9830,
                  "a110",
                  9829,
                  "a109",
                  9824,
                  "a120",
                  9312,
                  "a121",
                  9313,
                  "a122",
                  9314,
                  "a123",
                  9315,
                  "a124",
                  9316,
                  "a125",
                  9317,
                  "a126",
                  9318,
                  "a127",
                  9319,
                  "a128",
                  9320,
                  "a129",
                  9321,
                  "a130",
                  10102,
                  "a131",
                  10103,
                  "a132",
                  10104,
                  "a133",
                  10105,
                  "a134",
                  10106,
                  "a135",
                  10107,
                  "a136",
                  10108,
                  "a137",
                  10109,
                  "a138",
                  10110,
                  "a139",
                  10111,
                  "a140",
                  10112,
                  "a141",
                  10113,
                  "a142",
                  10114,
                  "a143",
                  10115,
                  "a144",
                  10116,
                  "a145",
                  10117,
                  "a146",
                  10118,
                  "a147",
                  10119,
                  "a148",
                  10120,
                  "a149",
                  10121,
                  "a150",
                  10122,
                  "a151",
                  10123,
                  "a152",
                  10124,
                  "a153",
                  10125,
                  "a154",
                  10126,
                  "a155",
                  10127,
                  "a156",
                  10128,
                  "a157",
                  10129,
                  "a158",
                  10130,
                  "a159",
                  10131,
                  "a160",
                  10132,
                  "a161",
                  8594,
                  "a163",
                  8596,
                  "a164",
                  8597,
                  "a196",
                  10136,
                  "a165",
                  10137,
                  "a192",
                  10138,
                  "a166",
                  10139,
                  "a167",
                  10140,
                  "a168",
                  10141,
                  "a169",
                  10142,
                  "a170",
                  10143,
                  "a171",
                  10144,
                  "a172",
                  10145,
                  "a173",
                  10146,
                  "a162",
                  10147,
                  "a174",
                  10148,
                  "a175",
                  10149,
                  "a176",
                  10150,
                  "a177",
                  10151,
                  "a178",
                  10152,
                  "a179",
                  10153,
                  "a193",
                  10154,
                  "a180",
                  10155,
                  "a199",
                  10156,
                  "a181",
                  10157,
                  "a200",
                  10158,
                  "a182",
                  10159,
                  "a201",
                  10161,
                  "a183",
                  10162,
                  "a184",
                  10163,
                  "a197",
                  10164,
                  "a185",
                  10165,
                  "a194",
                  10166,
                  "a198",
                  10167,
                  "a186",
                  10168,
                  "a195",
                  10169,
                  "a187",
                  10170,
                  "a188",
                  10171,
                  "a189",
                  10172,
                  "a190",
                  10173,
                  "a191",
                  10174,
                  "a89",
                  10088,
                  "a90",
                  10089,
                  "a93",
                  10090,
                  "a94",
                  10091,
                  "a91",
                  10092,
                  "a92",
                  10093,
                  "a205",
                  10094,
                  "a85",
                  10095,
                  "a206",
                  10096,
                  "a86",
                  10097,
                  "a87",
                  10098,
                  "a88",
                  10099,
                  "a95",
                  10100,
                  "a96",
                  10101,
                  ".notdef",
                  0
                ];
              });
            },
            (__unused_webpack_module, __webpack_exports__2, __w_pdfjs_require__2) => {
              "use strict";
              __w_pdfjs_require__2.r(__webpack_exports__2);
              __w_pdfjs_require__2.d(__webpack_exports__2, {
                "getNormalizedUnicodes": () => getNormalizedUnicodes,
                "getUnicodeForGlyph": () => getUnicodeForGlyph,
                "getUnicodeRangeFor": () => getUnicodeRangeFor,
                "mapSpecialUnicodeValues": () => mapSpecialUnicodeValues,
                "reverseIfRtl": () => reverseIfRtl
              });
              var _core_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __w_pdfjs_require__2(139);
              const getSpecialPUASymbols = (0, _core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getLookupTableFactory)(function(t) {
                t[63721] = 169;
                t[63193] = 169;
                t[63720] = 174;
                t[63194] = 174;
                t[63722] = 8482;
                t[63195] = 8482;
                t[63729] = 9127;
                t[63730] = 9128;
                t[63731] = 9129;
                t[63740] = 9131;
                t[63741] = 9132;
                t[63742] = 9133;
                t[63726] = 9121;
                t[63727] = 9122;
                t[63728] = 9123;
                t[63737] = 9124;
                t[63738] = 9125;
                t[63739] = 9126;
                t[63723] = 9115;
                t[63724] = 9116;
                t[63725] = 9117;
                t[63734] = 9118;
                t[63735] = 9119;
                t[63736] = 9120;
              });
              function mapSpecialUnicodeValues(code) {
                if (code >= 65520 && code <= 65535) {
                  return 0;
                } else if (code >= 62976 && code <= 63743) {
                  return getSpecialPUASymbols()[code] || code;
                } else if (code === 173) {
                  return 45;
                }
                return code;
              }
              function getUnicodeForGlyph(name, glyphsUnicodeMap) {
                let unicode = glyphsUnicodeMap[name];
                if (unicode !== void 0) {
                  return unicode;
                }
                if (!name) {
                  return -1;
                }
                if (name[0] === "u") {
                  const nameLen = name.length;
                  let hexStr;
                  if (nameLen === 7 && name[1] === "n" && name[2] === "i") {
                    hexStr = name.substring(3);
                  } else if (nameLen >= 5 && nameLen <= 7) {
                    hexStr = name.substring(1);
                  } else {
                    return -1;
                  }
                  if (hexStr === hexStr.toUpperCase()) {
                    unicode = parseInt(hexStr, 16);
                    if (unicode >= 0) {
                      return unicode;
                    }
                  }
                }
                return -1;
              }
              const UnicodeRanges = [
                {
                  begin: 0,
                  end: 127
                },
                {
                  begin: 128,
                  end: 255
                },
                {
                  begin: 256,
                  end: 383
                },
                {
                  begin: 384,
                  end: 591
                },
                {
                  begin: 592,
                  end: 687
                },
                {
                  begin: 688,
                  end: 767
                },
                {
                  begin: 768,
                  end: 879
                },
                {
                  begin: 880,
                  end: 1023
                },
                {
                  begin: 11392,
                  end: 11519
                },
                {
                  begin: 1024,
                  end: 1279
                },
                {
                  begin: 1328,
                  end: 1423
                },
                {
                  begin: 1424,
                  end: 1535
                },
                {
                  begin: 42240,
                  end: 42559
                },
                {
                  begin: 1536,
                  end: 1791
                },
                {
                  begin: 1984,
                  end: 2047
                },
                {
                  begin: 2304,
                  end: 2431
                },
                {
                  begin: 2432,
                  end: 2559
                },
                {
                  begin: 2560,
                  end: 2687
                },
                {
                  begin: 2688,
                  end: 2815
                },
                {
                  begin: 2816,
                  end: 2943
                },
                {
                  begin: 2944,
                  end: 3071
                },
                {
                  begin: 3072,
                  end: 3199
                },
                {
                  begin: 3200,
                  end: 3327
                },
                {
                  begin: 3328,
                  end: 3455
                },
                {
                  begin: 3584,
                  end: 3711
                },
                {
                  begin: 3712,
                  end: 3839
                },
                {
                  begin: 4256,
                  end: 4351
                },
                {
                  begin: 6912,
                  end: 7039
                },
                {
                  begin: 4352,
                  end: 4607
                },
                {
                  begin: 7680,
                  end: 7935
                },
                {
                  begin: 7936,
                  end: 8191
                },
                {
                  begin: 8192,
                  end: 8303
                },
                {
                  begin: 8304,
                  end: 8351
                },
                {
                  begin: 8352,
                  end: 8399
                },
                {
                  begin: 8400,
                  end: 8447
                },
                {
                  begin: 8448,
                  end: 8527
                },
                {
                  begin: 8528,
                  end: 8591
                },
                {
                  begin: 8592,
                  end: 8703
                },
                {
                  begin: 8704,
                  end: 8959
                },
                {
                  begin: 8960,
                  end: 9215
                },
                {
                  begin: 9216,
                  end: 9279
                },
                {
                  begin: 9280,
                  end: 9311
                },
                {
                  begin: 9312,
                  end: 9471
                },
                {
                  begin: 9472,
                  end: 9599
                },
                {
                  begin: 9600,
                  end: 9631
                },
                {
                  begin: 9632,
                  end: 9727
                },
                {
                  begin: 9728,
                  end: 9983
                },
                {
                  begin: 9984,
                  end: 10175
                },
                {
                  begin: 12288,
                  end: 12351
                },
                {
                  begin: 12352,
                  end: 12447
                },
                {
                  begin: 12448,
                  end: 12543
                },
                {
                  begin: 12544,
                  end: 12591
                },
                {
                  begin: 12592,
                  end: 12687
                },
                {
                  begin: 43072,
                  end: 43135
                },
                {
                  begin: 12800,
                  end: 13055
                },
                {
                  begin: 13056,
                  end: 13311
                },
                {
                  begin: 44032,
                  end: 55215
                },
                {
                  begin: 55296,
                  end: 57343
                },
                {
                  begin: 67840,
                  end: 67871
                },
                {
                  begin: 19968,
                  end: 40959
                },
                {
                  begin: 57344,
                  end: 63743
                },
                {
                  begin: 12736,
                  end: 12783
                },
                {
                  begin: 64256,
                  end: 64335
                },
                {
                  begin: 64336,
                  end: 65023
                },
                {
                  begin: 65056,
                  end: 65071
                },
                {
                  begin: 65040,
                  end: 65055
                },
                {
                  begin: 65104,
                  end: 65135
                },
                {
                  begin: 65136,
                  end: 65279
                },
                {
                  begin: 65280,
                  end: 65519
                },
                {
                  begin: 65520,
                  end: 65535
                },
                {
                  begin: 3840,
                  end: 4095
                },
                {
                  begin: 1792,
                  end: 1871
                },
                {
                  begin: 1920,
                  end: 1983
                },
                {
                  begin: 3456,
                  end: 3583
                },
                {
                  begin: 4096,
                  end: 4255
                },
                {
                  begin: 4608,
                  end: 4991
                },
                {
                  begin: 5024,
                  end: 5119
                },
                {
                  begin: 5120,
                  end: 5759
                },
                {
                  begin: 5760,
                  end: 5791
                },
                {
                  begin: 5792,
                  end: 5887
                },
                {
                  begin: 6016,
                  end: 6143
                },
                {
                  begin: 6144,
                  end: 6319
                },
                {
                  begin: 10240,
                  end: 10495
                },
                {
                  begin: 40960,
                  end: 42127
                },
                {
                  begin: 5888,
                  end: 5919
                },
                {
                  begin: 66304,
                  end: 66351
                },
                {
                  begin: 66352,
                  end: 66383
                },
                {
                  begin: 66560,
                  end: 66639
                },
                {
                  begin: 118784,
                  end: 119039
                },
                {
                  begin: 119808,
                  end: 120831
                },
                {
                  begin: 1044480,
                  end: 1048573
                },
                {
                  begin: 65024,
                  end: 65039
                },
                {
                  begin: 917504,
                  end: 917631
                },
                {
                  begin: 6400,
                  end: 6479
                },
                {
                  begin: 6480,
                  end: 6527
                },
                {
                  begin: 6528,
                  end: 6623
                },
                {
                  begin: 6656,
                  end: 6687
                },
                {
                  begin: 11264,
                  end: 11359
                },
                {
                  begin: 11568,
                  end: 11647
                },
                {
                  begin: 19904,
                  end: 19967
                },
                {
                  begin: 43008,
                  end: 43055
                },
                {
                  begin: 65536,
                  end: 65663
                },
                {
                  begin: 65856,
                  end: 65935
                },
                {
                  begin: 66432,
                  end: 66463
                },
                {
                  begin: 66464,
                  end: 66527
                },
                {
                  begin: 66640,
                  end: 66687
                },
                {
                  begin: 66688,
                  end: 66735
                },
                {
                  begin: 67584,
                  end: 67647
                },
                {
                  begin: 68096,
                  end: 68191
                },
                {
                  begin: 119552,
                  end: 119647
                },
                {
                  begin: 73728,
                  end: 74751
                },
                {
                  begin: 119648,
                  end: 119679
                },
                {
                  begin: 7040,
                  end: 7103
                },
                {
                  begin: 7168,
                  end: 7247
                },
                {
                  begin: 7248,
                  end: 7295
                },
                {
                  begin: 43136,
                  end: 43231
                },
                {
                  begin: 43264,
                  end: 43311
                },
                {
                  begin: 43312,
                  end: 43359
                },
                {
                  begin: 43520,
                  end: 43615
                },
                {
                  begin: 65936,
                  end: 65999
                },
                {
                  begin: 66e3,
                  end: 66047
                },
                {
                  begin: 66208,
                  end: 66271
                },
                {
                  begin: 127024,
                  end: 127135
                }
              ];
              function getUnicodeRangeFor(value) {
                for (let i = 0, ii = UnicodeRanges.length; i < ii; i++) {
                  const range = UnicodeRanges[i];
                  if (value >= range.begin && value < range.end) {
                    return i;
                  }
                }
                return -1;
              }
              function isRTLRangeFor(value) {
                let range = UnicodeRanges[13];
                if (value >= range.begin && value < range.end) {
                  return true;
                }
                range = UnicodeRanges[11];
                if (value >= range.begin && value < range.end) {
                  return true;
                }
                return false;
              }
              const getNormalizedUnicodes = (0, _core_utils_js__WEBPACK_IMPORTED_MODULE_0__.getArrayLookupTableFactory)(function() {
                return [
                  "\xA8",
                  " \u0308",
                  "\xAF",
                  " \u0304",
                  "\xB4",
                  " \u0301",
                  "\xB5",
                  "\u03BC",
                  "\xB8",
                  " \u0327",
                  "\u0132",
                  "IJ",
                  "\u0133",
                  "ij",
                  "\u013F",
                  "L\xB7",
                  "\u0140",
                  "l\xB7",
                  "\u0149",
                  "\u02BCn",
                  "\u017F",
                  "s",
                  "\u01C4",
                  "D\u017D",
                  "\u01C5",
                  "D\u017E",
                  "\u01C6",
                  "d\u017E",
                  "\u01C7",
                  "LJ",
                  "\u01C8",
                  "Lj",
                  "\u01C9",
                  "lj",
                  "\u01CA",
                  "NJ",
                  "\u01CB",
                  "Nj",
                  "\u01CC",
                  "nj",
                  "\u01F1",
                  "DZ",
                  "\u01F2",
                  "Dz",
                  "\u01F3",
                  "dz",
                  "\u02D8",
                  " \u0306",
                  "\u02D9",
                  " \u0307",
                  "\u02DA",
                  " \u030A",
                  "\u02DB",
                  " \u0328",
                  "\u02DC",
                  " \u0303",
                  "\u02DD",
                  " \u030B",
                  "\u037A",
                  " \u0345",
                  "\u0384",
                  " \u0301",
                  "\u03D0",
                  "\u03B2",
                  "\u03D1",
                  "\u03B8",
                  "\u03D2",
                  "\u03A5",
                  "\u03D5",
                  "\u03C6",
                  "\u03D6",
                  "\u03C0",
                  "\u03F0",
                  "\u03BA",
                  "\u03F1",
                  "\u03C1",
                  "\u03F2",
                  "\u03C2",
                  "\u03F4",
                  "\u0398",
                  "\u03F5",
                  "\u03B5",
                  "\u03F9",
                  "\u03A3",
                  "\u0587",
                  "\u0565\u0582",
                  "\u0675",
                  "\u0627\u0674",
                  "\u0676",
                  "\u0648\u0674",
                  "\u0677",
                  "\u06C7\u0674",
                  "\u0678",
                  "\u064A\u0674",
                  "\u0E33",
                  "\u0E4D\u0E32",
                  "\u0EB3",
                  "\u0ECD\u0EB2",
                  "\u0EDC",
                  "\u0EAB\u0E99",
                  "\u0EDD",
                  "\u0EAB\u0EA1",
                  "\u0F77",
                  "\u0FB2\u0F81",
                  "\u0F79",
                  "\u0FB3\u0F81",
                  "\u1E9A",
                  "a\u02BE",
                  "\u1FBD",
                  " \u0313",
                  "\u1FBF",
                  " \u0313",
                  "\u1FC0",
                  " \u0342",
                  "\u1FFE",
                  " \u0314",
                  "\u2002",
                  " ",
                  "\u2003",
                  " ",
                  "\u2004",
                  " ",
                  "\u2005",
                  " ",
                  "\u2006",
                  " ",
                  "\u2008",
                  " ",
                  "\u2009",
                  " ",
                  "\u200A",
                  " ",
                  "\u2017",
                  " \u0333",
                  "\u2024",
                  ".",
                  "\u2025",
                  "..",
                  "\u2026",
                  "...",
                  "\u2033",
                  "\u2032\u2032",
                  "\u2034",
                  "\u2032\u2032\u2032",
                  "\u2036",
                  "\u2035\u2035",
                  "\u2037",
                  "\u2035\u2035\u2035",
                  "\u203C",
                  "!!",
                  "\u203E",
                  " \u0305",
                  "\u2047",
                  "??",
                  "\u2048",
                  "?!",
                  "\u2049",
                  "!?",
                  "\u2057",
                  "\u2032\u2032\u2032\u2032",
                  "\u205F",
                  " ",
                  "\u20A8",
                  "Rs",
                  "\u2100",
                  "a/c",
                  "\u2101",
                  "a/s",
                  "\u2103",
                  "\xB0C",
                  "\u2105",
                  "c/o",
                  "\u2106",
                  "c/u",
                  "\u2107",
                  "\u0190",
                  "\u2109",
                  "\xB0F",
                  "\u2116",
                  "No",
                  "\u2121",
                  "TEL",
                  "\u2135",
                  "\u05D0",
                  "\u2136",
                  "\u05D1",
                  "\u2137",
                  "\u05D2",
                  "\u2138",
                  "\u05D3",
                  "\u213B",
                  "FAX",
                  "\u2160",
                  "I",
                  "\u2161",
                  "II",
                  "\u2162",
                  "III",
                  "\u2163",
                  "IV",
                  "\u2164",
                  "V",
                  "\u2165",
                  "VI",
                  "\u2166",
                  "VII",
                  "\u2167",
                  "VIII",
                  "\u2168",
                  "IX",
                  "\u2169",
                  "X",
                  "\u216A",
                  "XI",
                  "\u216B",
                  "XII",
                  "\u216C",
                  "L",
                  "\u216D",
                  "C",
                  "\u216E",
                  "D",
                  "\u216F",
                  "M",
                  "\u2170",
                  "i",
                  "\u2171",
                  "ii",
                  "\u2172",
                  "iii",
                  "\u2173",
                  "iv",
                  "\u2174",
                  "v",
                  "\u2175",
                  "vi",
                  "\u2176",
                  "vii",
                  "\u2177",
                  "viii",
                  "\u2178",
                  "ix",
                  "\u2179",
                  "x",
                  "\u217A",
                  "xi",
                  "\u217B",
                  "xii",
                  "\u217C",
                  "l",
                  "\u217D",
                  "c",
                  "\u217E",
                  "d",
                  "\u217F",
                  "m",
                  "\u222C",
                  "\u222B\u222B",
                  "\u222D",
                  "\u222B\u222B\u222B",
                  "\u222F",
                  "\u222E\u222E",
                  "\u2230",
                  "\u222E\u222E\u222E",
                  "\u2474",
                  "(1)",
                  "\u2475",
                  "(2)",
                  "\u2476",
                  "(3)",
                  "\u2477",
                  "(4)",
                  "\u2478",
                  "(5)",
                  "\u2479",
                  "(6)",
                  "\u247A",
                  "(7)",
                  "\u247B",
                  "(8)",
                  "\u247C",
                  "(9)",
                  "\u247D",
                  "(10)",
                  "\u247E",
                  "(11)",
                  "\u247F",
                  "(12)",
                  "\u2480",
                  "(13)",
                  "\u2481",
                  "(14)",
                  "\u2482",
                  "(15)",
                  "\u2483",
                  "(16)",
                  "\u2484",
                  "(17)",
                  "\u2485",
                  "(18)",
                  "\u2486",
                  "(19)",
                  "\u2487",
                  "(20)",
                  "\u2488",
                  "1.",
                  "\u2489",
                  "2.",
                  "\u248A",
                  "3.",
                  "\u248B",
                  "4.",
                  "\u248C",
                  "5.",
                  "\u248D",
                  "6.",
                  "\u248E",
                  "7.",
                  "\u248F",
                  "8.",
                  "\u2490",
                  "9.",
                  "\u2491",
                  "10.",
                  "\u2492",
                  "11.",
                  "\u2493",
                  "12.",
                  "\u2494",
                  "13.",
                  "\u2495",
                  "14.",
                  "\u2496",
                  "15.",
                  "\u2497",
                  "16.",
                  "\u2498",
                  "17.",
                  "\u2499",
                  "18.",
                  "\u249A",
                  "19.",
                  "\u249B",
                  "20.",
                  "\u249C",
                  "(a)",
                  "\u249D",
                  "(b)",
                  "\u249E",
                  "(c)",
                  "\u249F",
                  "(d)",
                  "\u24A0",
                  "(e)",
                  "\u24A1",
                  "(f)",
                  "\u24A2",
                  "(g)",
                  "\u24A3",
                  "(h)",
                  "\u24A4",
                  "(i)",
                  "\u24A5",
                  "(j)",
                  "\u24A6",
                  "(k)",
                  "\u24A7",
                  "(l)",
                  "\u24A8",
                  "(m)",
                  "\u24A9",
                  "(n)",
                  "\u24AA",
                  "(o)",
                  "\u24AB",
                  "(p)",
                  "\u24AC",
                  "(q)",
                  "\u24AD",
                  "(r)",
                  "\u24AE",
                  "(s)",
                  "\u24AF",
                  "(t)",
                  "\u24B0",
                  "(u)",
                  "\u24B1",
                  "(v)",
                  "\u24B2",
                  "(w)",
                  "\u24B3",
                  "(x)",
                  "\u24B4",
                  "(y)",
                  "\u24B5",
                  "(z)",
                  "\u2A0C",
                  "\u222B\u222B\u222B\u222B",
                  "\u2A74",
                  "::=",
                  "\u2A75",
                  "==",
                  "\u2A76",
                  "===",
                  "\u2E9F",
                  "\u6BCD",
                  "\u2EF3",
                  "\u9F9F",
                  "\u2F00",
                  "\u4E00",
                  "\u2F01",
                  "\u4E28",
                  "\u2F02",
                  "\u4E36",
                  "\u2F03",
                  "\u4E3F",
                  "\u2F04",
                  "\u4E59",
                  "\u2F05",
                  "\u4E85",
                  "\u2F06",
                  "\u4E8C",
                  "\u2F07",
                  "\u4EA0",
                  "\u2F08",
                  "\u4EBA",
                  "\u2F09",
                  "\u513F",
                  "\u2F0A",
                  "\u5165",
                  "\u2F0B",
                  "\u516B",
                  "\u2F0C",
                  "\u5182",
                  "\u2F0D",
                  "\u5196",
                  "\u2F0E",
                  "\u51AB",
                  "\u2F0F",
                  "\u51E0",
                  "\u2F10",
                  "\u51F5",
                  "\u2F11",
                  "\u5200",
                  "\u2F12",
                  "\u529B",
                  "\u2F13",
                  "\u52F9",
                  "\u2F14",
                  "\u5315",
                  "\u2F15",
                  "\u531A",
                  "\u2F16",
                  "\u5338",
                  "\u2F17",
                  "\u5341",
                  "\u2F18",
                  "\u535C",
                  "\u2F19",
                  "\u5369",
                  "\u2F1A",
                  "\u5382",
                  "\u2F1B",
                  "\u53B6",
                  "\u2F1C",
                  "\u53C8",
                  "\u2F1D",
                  "\u53E3",
                  "\u2F1E",
                  "\u56D7",
                  "\u2F1F",
                  "\u571F",
                  "\u2F20",
                  "\u58EB",
                  "\u2F21",
                  "\u5902",
                  "\u2F22",
                  "\u590A",
                  "\u2F23",
                  "\u5915",
                  "\u2F24",
                  "\u5927",
                  "\u2F25",
                  "\u5973",
                  "\u2F26",
                  "\u5B50",
                  "\u2F27",
                  "\u5B80",
                  "\u2F28",
                  "\u5BF8",
                  "\u2F29",
                  "\u5C0F",
                  "\u2F2A",
                  "\u5C22",
                  "\u2F2B",
                  "\u5C38",
                  "\u2F2C",
                  "\u5C6E",
                  "\u2F2D",
                  "\u5C71",
                  "\u2F2E",
                  "\u5DDB",
                  "\u2F2F",
                  "\u5DE5",
                  "\u2F30",
                  "\u5DF1",
                  "\u2F31",
                  "\u5DFE",
                  "\u2F32",
                  "\u5E72",
                  "\u2F33",
                  "\u5E7A",
                  "\u2F34",
                  "\u5E7F",
                  "\u2F35",
                  "\u5EF4",
                  "\u2F36",
                  "\u5EFE",
                  "\u2F37",
                  "\u5F0B",
                  "\u2F38",
                  "\u5F13",
                  "\u2F39",
                  "\u5F50",
                  "\u2F3A",
                  "\u5F61",
                  "\u2F3B",
                  "\u5F73",
                  "\u2F3C",
                  "\u5FC3",
                  "\u2F3D",
                  "\u6208",
                  "\u2F3E",
                  "\u6236",
                  "\u2F3F",
                  "\u624B",
                  "\u2F40",
                  "\u652F",
                  "\u2F41",
                  "\u6534",
                  "\u2F42",
                  "\u6587",
                  "\u2F43",
                  "\u6597",
                  "\u2F44",
                  "\u65A4",
                  "\u2F45",
                  "\u65B9",
                  "\u2F46",
                  "\u65E0",
                  "\u2F47",
                  "\u65E5",
                  "\u2F48",
                  "\u66F0",
                  "\u2F49",
                  "\u6708",
                  "\u2F4A",
                  "\u6728",
                  "\u2F4B",
                  "\u6B20",
                  "\u2F4C",
                  "\u6B62",
                  "\u2F4D",
                  "\u6B79",
                  "\u2F4E",
                  "\u6BB3",
                  "\u2F4F",
                  "\u6BCB",
                  "\u2F50",
                  "\u6BD4",
                  "\u2F51",
                  "\u6BDB",
                  "\u2F52",
                  "\u6C0F",
                  "\u2F53",
                  "\u6C14",
                  "\u2F54",
                  "\u6C34",
                  "\u2F55",
                  "\u706B",
                  "\u2F56",
                  "\u722A",
                  "\u2F57",
                  "\u7236",
                  "\u2F58",
                  "\u723B",
                  "\u2F59",
                  "\u723F",
                  "\u2F5A",
                  "\u7247",
                  "\u2F5B",
                  "\u7259",
                  "\u2F5C",
                  "\u725B",
                  "\u2F5D",
                  "\u72AC",
                  "\u2F5E",
                  "\u7384",
                  "\u2F5F",
                  "\u7389",
                  "\u2F60",
                  "\u74DC",
                  "\u2F61",
                  "\u74E6",
                  "\u2F62",
                  "\u7518",
                  "\u2F63",
                  "\u751F",
                  "\u2F64",
                  "\u7528",
                  "\u2F65",
                  "\u7530",
                  "\u2F66",
                  "\u758B",
                  "\u2F67",
                  "\u7592",
                  "\u2F68",
                  "\u7676",
                  "\u2F69",
                  "\u767D",
                  "\u2F6A",
                  "\u76AE",
                  "\u2F6B",
                  "\u76BF",
                  "\u2F6C",
                  "\u76EE",
                  "\u2F6D",
                  "\u77DB",
                  "\u2F6E",
                  "\u77E2",
                  "\u2F6F",
                  "\u77F3",
                  "\u2F70",
                  "\u793A",
                  "\u2F71",
                  "\u79B8",
                  "\u2F72",
                  "\u79BE",
                  "\u2F73",
                  "\u7A74",
                  "\u2F74",
                  "\u7ACB",
                  "\u2F75",
                  "\u7AF9",
                  "\u2F76",
                  "\u7C73",
                  "\u2F77",
                  "\u7CF8",
                  "\u2F78",
                  "\u7F36",
                  "\u2F79",
                  "\u7F51",
                  "\u2F7A",
                  "\u7F8A",
                  "\u2F7B",
                  "\u7FBD",
                  "\u2F7C",
                  "\u8001",
                  "\u2F7D",
                  "\u800C",
                  "\u2F7E",
                  "\u8012",
                  "\u2F7F",
                  "\u8033",
                  "\u2F80",
                  "\u807F",
                  "\u2F81",
                  "\u8089",
                  "\u2F82",
                  "\u81E3",
                  "\u2F83",
                  "\u81EA",
                  "\u2F84",
                  "\u81F3",
                  "\u2F85",
                  "\u81FC",
                  "\u2F86",
                  "\u820C",
                  "\u2F87",
                  "\u821B",
                  "\u2F88",
                  "\u821F",
                  "\u2F89",
                  "\u826E",
                  "\u2F8A",
                  "\u8272",
                  "\u2F8B",
                  "\u8278",
                  "\u2F8C",
                  "\u864D",
                  "\u2F8D",
                  "\u866B",
                  "\u2F8E",
                  "\u8840",
                  "\u2F8F",
                  "\u884C",
                  "\u2F90",
                  "\u8863",
                  "\u2F91",
                  "\u897E",
                  "\u2F92",
                  "\u898B",
                  "\u2F93",
                  "\u89D2",
                  "\u2F94",
                  "\u8A00",
                  "\u2F95",
                  "\u8C37",
                  "\u2F96",
                  "\u8C46",
                  "\u2F97",
                  "\u8C55",
                  "\u2F98",
                  "\u8C78",
                  "\u2F99",
                  "\u8C9D",
                  "\u2F9A",
                  "\u8D64",
                  "\u2F9B",
                  "\u8D70",
                  "\u2F9C",
                  "\u8DB3",
                  "\u2F9D",
                  "\u8EAB",
                  "\u2F9E",
                  "\u8ECA",
                  "\u2F9F",
                  "\u8F9B",
                  "\u2FA0",
                  "\u8FB0",
                  "\u2FA1",
                  "\u8FB5",
                  "\u2FA2",
                  "\u9091",
                  "\u2FA3",
                  "\u9149",
                  "\u2FA4",
                  "\u91C6",
                  "\u2FA5",
                  "\u91CC",
                  "\u2FA6",
                  "\u91D1",
                  "\u2FA7",
                  "\u9577",
                  "\u2FA8",
                  "\u9580",
                  "\u2FA9",
                  "\u961C",
                  "\u2FAA",
                  "\u96B6",
                  "\u2FAB",
                  "\u96B9",
                  "\u2FAC",
                  "\u96E8",
                  "\u2FAD",
                  "\u9751",
                  "\u2FAE",
                  "\u975E",
                  "\u2FAF",
                  "\u9762",
                  "\u2FB0",
                  "\u9769",
                  "\u2FB1",
                  "\u97CB",
                  "\u2FB2",
                  "\u97ED",
                  "\u2FB3",
                  "\u97F3",
                  "\u2FB4",
                  "\u9801",
                  "\u2FB5",
                  "\u98A8",
                  "\u2FB6",
                  "\u98DB",
                  "\u2FB7",
                  "\u98DF",
                  "\u2FB8",
                  "\u9996",
                  "\u2FB9",
                  "\u9999",
                  "\u2FBA",
                  "\u99AC",
                  "\u2FBB",
                  "\u9AA8",
                  "\u2FBC",
                  "\u9AD8",
                  "\u2FBD",
                  "\u9ADF",
                  "\u2FBE",
                  "\u9B25",
                  "\u2FBF",
                  "\u9B2F",
                  "\u2FC0",
                  "\u9B32",
                  "\u2FC1",
                  "\u9B3C",
                  "\u2FC2",
                  "\u9B5A",
                  "\u2FC3",
                  "\u9CE5",
                  "\u2FC4",
                  "\u9E75",
                  "\u2FC5",
                  "\u9E7F",
                  "\u2FC6",
                  "\u9EA5",
                  "\u2FC7",
                  "\u9EBB",
                  "\u2FC8",
                  "\u9EC3",
                  "\u2FC9",
                  "\u9ECD",
                  "\u2FCA",
                  "\u9ED1",
                  "\u2FCB",
                  "\u9EF9",
                  "\u2FCC",
                  "\u9EFD",
                  "\u2FCD",
                  "\u9F0E",
                  "\u2FCE",
                  "\u9F13",
                  "\u2FCF",
                  "\u9F20",
                  "\u2FD0",
                  "\u9F3B",
                  "\u2FD1",
                  "\u9F4A",
                  "\u2FD2",
                  "\u9F52",
                  "\u2FD3",
                  "\u9F8D",
                  "\u2FD4",
                  "\u9F9C",
                  "\u2FD5",
                  "\u9FA0",
                  "\u3036",
                  "\u3012",
                  "\u3038",
                  "\u5341",
                  "\u3039",
                  "\u5344",
                  "\u303A",
                  "\u5345",
                  "\u309B",
                  " \u3099",
                  "\u309C",
                  " \u309A",
                  "\u3131",
                  "\u1100",
                  "\u3132",
                  "\u1101",
                  "\u3133",
                  "\u11AA",
                  "\u3134",
                  "\u1102",
                  "\u3135",
                  "\u11AC",
                  "\u3136",
                  "\u11AD",
                  "\u3137",
                  "\u1103",
                  "\u3138",
                  "\u1104",
                  "\u3139",
                  "\u1105",
                  "\u313A",
                  "\u11B0",
                  "\u313B",
                  "\u11B1",
                  "\u313C",
                  "\u11B2",
                  "\u313D",
                  "\u11B3",
                  "\u313E",
                  "\u11B4",
                  "\u313F",
                  "\u11B5",
                  "\u3140",
                  "\u111A",
                  "\u3141",
                  "\u1106",
                  "\u3142",
                  "\u1107",
                  "\u3143",
                  "\u1108",
                  "\u3144",
                  "\u1121",
                  "\u3145",
                  "\u1109",
                  "\u3146",
                  "\u110A",
                  "\u3147",
                  "\u110B",
                  "\u3148",
                  "\u110C",
                  "\u3149",
                  "\u110D",
                  "\u314A",
                  "\u110E",
                  "\u314B",
                  "\u110F",
                  "\u314C",
                  "\u1110",
                  "\u314D",
                  "\u1111",
                  "\u314E",
                  "\u1112",
                  "\u314F",
                  "\u1161",
                  "\u3150",
                  "\u1162",
                  "\u3151",
                  "\u1163",
                  "\u3152",
                  "\u1164",
                  "\u3153",
                  "\u1165",
                  "\u3154",
                  "\u1166",
                  "\u3155",
                  "\u1167",
                  "\u3156",
                  "\u1168",
                  "\u3157",
                  "\u1169",
                  "\u3158",
                  "\u116A",
                  "\u3159",
                  "\u116B",
                  "\u315A",
                  "\u116C",
                  "\u315B",
                  "\u116D",
                  "\u315C",
                  "\u116E",
                  "\u315D",
                  "\u116F",
                  "\u315E",
                  "\u1170",
                  "\u315F",
                  "\u1171",
                  "\u3160",
                  "\u1172",
                  "\u3161",
                  "\u1173",
                  "\u3162",
                  "\u1174",
                  "\u3163",
                  "\u1175",
                  "\u3164",
                  "\u1160",
                  "\u3165",
                  "\u1114",
                  "\u3166",
                  "\u1115",
                  "\u3167",
                  "\u11C7",
                  "\u3168",
                  "\u11C8",
                  "\u3169",
                  "\u11CC",
                  "\u316A",
                  "\u11CE",
                  "\u316B",
                  "\u11D3",
                  "\u316C",
                  "\u11D7",
                  "\u316D",
                  "\u11D9",
                  "\u316E",
                  "\u111C",
                  "\u316F",
                  "\u11DD",
                  "\u3170",
                  "\u11DF",
                  "\u3171",
                  "\u111D",
                  "\u3172",
                  "\u111E",
                  "\u3173",
                  "\u1120",
                  "\u3174",
                  "\u1122",
                  "\u3175",
                  "\u1123",
                  "\u3176",
                  "\u1127",
                  "\u3177",
                  "\u1129",
                  "\u3178",
                  "\u112B",
                  "\u3179",
                  "\u112C",
                  "\u317A",
                  "\u112D",
                  "\u317B",
                  "\u112E",
                  "\u317C",
                  "\u112F",
                  "\u317D",
                  "\u1132",
                  "\u317E",
                  "\u1136",
                  "\u317F",
                  "\u1140",
                  "\u3180",
                  "\u1147",
                  "\u3181",
                  "\u114C",
                  "\u3182",
                  "\u11F1",
                  "\u3183",
                  "\u11F2",
                  "\u3184",
                  "\u1157",
                  "\u3185",
                  "\u1158",
                  "\u3186",
                  "\u1159",
                  "\u3187",
                  "\u1184",
                  "\u3188",
                  "\u1185",
                  "\u3189",
                  "\u1188",
                  "\u318A",
                  "\u1191",
                  "\u318B",
                  "\u1192",
                  "\u318C",
                  "\u1194",
                  "\u318D",
                  "\u119E",
                  "\u318E",
                  "\u11A1",
                  "\u3200",
                  "(\u1100)",
                  "\u3201",
                  "(\u1102)",
                  "\u3202",
                  "(\u1103)",
                  "\u3203",
                  "(\u1105)",
                  "\u3204",
                  "(\u1106)",
                  "\u3205",
                  "(\u1107)",
                  "\u3206",
                  "(\u1109)",
                  "\u3207",
                  "(\u110B)",
                  "\u3208",
                  "(\u110C)",
                  "\u3209",
                  "(\u110E)",
                  "\u320A",
                  "(\u110F)",
                  "\u320B",
                  "(\u1110)",
                  "\u320C",
                  "(\u1111)",
                  "\u320D",
                  "(\u1112)",
                  "\u320E",
                  "(\u1100\u1161)",
                  "\u320F",
                  "(\u1102\u1161)",
                  "\u3210",
                  "(\u1103\u1161)",
                  "\u3211",
                  "(\u1105\u1161)",
                  "\u3212",
                  "(\u1106\u1161)",
                  "\u3213",
                  "(\u1107\u1161)",
                  "\u3214",
                  "(\u1109\u1161)",
                  "\u3215",
                  "(\u110B\u1161)",
                  "\u3216",
                  "(\u110C\u1161)",
                  "\u3217",
                  "(\u110E\u1161)",
                  "\u3218",
                  "(\u110F\u1161)",
                  "\u3219",
                  "(\u1110\u1161)",
                  "\u321A",
                  "(\u1111\u1161)",
                  "\u321B",
                  "(\u1112\u1161)",
                  "\u321C",
                  "(\u110C\u116E)",
                  "\u321D",
                  "(\u110B\u1169\u110C\u1165\u11AB)",
                  "\u321E",
                  "(\u110B\u1169\u1112\u116E)",
                  "\u3220",
                  "(\u4E00)",
                  "\u3221",
                  "(\u4E8C)",
                  "\u3222",
                  "(\u4E09)",
                  "\u3223",
                  "(\u56DB)",
                  "\u3224",
                  "(\u4E94)",
                  "\u3225",
                  "(\u516D)",
                  "\u3226",
                  "(\u4E03)",
                  "\u3227",
                  "(\u516B)",
                  "\u3228",
                  "(\u4E5D)",
                  "\u3229",
                  "(\u5341)",
                  "\u322A",
                  "(\u6708)",
                  "\u322B",
                  "(\u706B)",
                  "\u322C",
                  "(\u6C34)",
                  "\u322D",
                  "(\u6728)",
                  "\u322E",
                  "(\u91D1)",
                  "\u322F",
                  "(\u571F)",
                  "\u3230",
                  "(\u65E5)",
                  "\u3231",
                  "(\u682A)",
                  "\u3232",
                  "(\u6709)",
                  "\u3233",
                  "(\u793E)",
                  "\u3234",
                  "(\u540D)",
                  "\u3235",
                  "(\u7279)",
                  "\u3236",
                  "(\u8CA1)",
                  "\u3237",
                  "(\u795D)",
                  "\u3238",
                  "(\u52B4)",
                  "\u3239",
                  "(\u4EE3)",
                  "\u323A",
                  "(\u547C)",
                  "\u323B",
                  "(\u5B66)",
                  "\u323C",
                  "(\u76E3)",
                  "\u323D",
                  "(\u4F01)",
                  "\u323E",
                  "(\u8CC7)",
                  "\u323F",
                  "(\u5354)",
                  "\u3240",
                  "(\u796D)",
                  "\u3241",
                  "(\u4F11)",
                  "\u3242",
                  "(\u81EA)",
                  "\u3243",
                  "(\u81F3)",
                  "\u32C0",
                  "1\u6708",
                  "\u32C1",
                  "2\u6708",
                  "\u32C2",
                  "3\u6708",
                  "\u32C3",
                  "4\u6708",
                  "\u32C4",
                  "5\u6708",
                  "\u32C5",
                  "6\u6708",
                  "\u32C6",
                  "7\u6708",
                  "\u32C7",
                  "8\u6708",
                  "\u32C8",
                  "9\u6708",
                  "\u32C9",
                  "10\u6708",
                  "\u32CA",
                  "11\u6708",
                  "\u32CB",
                  "12\u6708",
                  "\u3358",
                  "0\u70B9",
                  "\u3359",
                  "1\u70B9",
                  "\u335A",
                  "2\u70B9",
                  "\u335B",
                  "3\u70B9",
                  "\u335C",
                  "4\u70B9",
                  "\u335D",
                  "5\u70B9",
                  "\u335E",
                  "6\u70B9",
                  "\u335F",
                  "7\u70B9",
                  "\u3360",
                  "8\u70B9",
                  "\u3361",
                  "9\u70B9",
                  "\u3362",
                  "10\u70B9",
                  "\u3363",
                  "11\u70B9",
                  "\u3364",
                  "12\u70B9",
                  "\u3365",
                  "13\u70B9",
                  "\u3366",
                  "14\u70B9",
                  "\u3367",
                  "15\u70B9",
                  "\u3368",
                  "16\u70B9",
                  "\u3369",
                  "17\u70B9",
                  "\u336A",
                  "18\u70B9",
                  "\u336B",
                  "19\u70B9",
                  "\u336C",
                  "20\u70B9",
                  "\u336D",
                  "21\u70B9",
                  "\u336E",
                  "22\u70B9",
                  "\u336F",
                  "23\u70B9",
                  "\u3370",
                  "24\u70B9",
                  "\u33E0",
                  "1\u65E5",
                  "\u33E1",
                  "2\u65E5",
                  "\u33E2",
                  "3\u65E5",
                  "\u33E3",
                  "4\u65E5",
                  "\u33E4",
                  "5\u65E5",
                  "\u33E5",
                  "6\u65E5",
                  "\u33E6",
                  "7\u65E5",
                  "\u33E7",
                  "8\u65E5",
                  "\u33E8",
                  "9\u65E5",
                  "\u33E9",
                  "10\u65E5",
                  "\u33EA",
                  "11\u65E5",
                  "\u33EB",
                  "12\u65E5",
                  "\u33EC",
                  "13\u65E5",
                  "\u33ED",
                  "14\u65E5",
                  "\u33EE",
                  "15\u65E5",
                  "\u33EF",
                  "16\u65E5",
                  "\u33F0",
                  "17\u65E5",
                  "\u33F1",
                  "18\u65E5",
                  "\u33F2",
                  "19\u65E5",
                  "\u33F3",
                  "20\u65E5",
                  "\u33F4",
                  "21\u65E5",
                  "\u33F5",
                  "22\u65E5",
                  "\u33F6",
                  "23\u65E5",
                  "\u33F7",
                  "24\u65E5",
                  "\u33F8",
                  "25\u65E5",
                  "\u33F9",
                  "26\u65E5",
                  "\u33FA",
                  "27\u65E5",
                  "\u33FB",
                  "28\u65E5",
                  "\u33FC",
                  "29\u65E5",
                  "\u33FD",
                  "30\u65E5",
                  "\u33FE",
                  "31\u65E5",
                  "\uFB00",
                  "ff",
                  "\uFB01",
                  "fi",
                  "\uFB02",
                  "fl",
                  "\uFB03",
                  "ffi",
                  "\uFB04",
                  "ffl",
                  "\uFB05",
                  "\u017Ft",
                  "\uFB06",
                  "st",
                  "\uFB13",
                  "\u0574\u0576",
                  "\uFB14",
                  "\u0574\u0565",
                  "\uFB15",
                  "\u0574\u056B",
                  "\uFB16",
                  "\u057E\u0576",
                  "\uFB17",
                  "\u0574\u056D",
                  "\uFB4F",
                  "\u05D0\u05DC",
                  "\uFB50",
                  "\u0671",
                  "\uFB51",
                  "\u0671",
                  "\uFB52",
                  "\u067B",
                  "\uFB53",
                  "\u067B",
                  "\uFB54",
                  "\u067B",
                  "\uFB55",
                  "\u067B",
                  "\uFB56",
                  "\u067E",
                  "\uFB57",
                  "\u067E",
                  "\uFB58",
                  "\u067E",
                  "\uFB59",
                  "\u067E",
                  "\uFB5A",
                  "\u0680",
                  "\uFB5B",
                  "\u0680",
                  "\uFB5C",
                  "\u0680",
                  "\uFB5D",
                  "\u0680",
                  "\uFB5E",
                  "\u067A",
                  "\uFB5F",
                  "\u067A",
                  "\uFB60",
                  "\u067A",
                  "\uFB61",
                  "\u067A",
                  "\uFB62",
                  "\u067F",
                  "\uFB63",
                  "\u067F",
                  "\uFB64",
                  "\u067F",
                  "\uFB65",
                  "\u067F",
                  "\uFB66",
                  "\u0679",
                  "\uFB67",
                  "\u0679",
                  "\uFB68",
                  "\u0679",
                  "\uFB69",
                  "\u0679",
                  "\uFB6A",
                  "\u06A4",
                  "\uFB6B",
                  "\u06A4",
                  "\uFB6C",
                  "\u06A4",
                  "\uFB6D",
                  "\u06A4",
                  "\uFB6E",
                  "\u06A6",
                  "\uFB6F",
                  "\u06A6",
                  "\uFB70",
                  "\u06A6",
                  "\uFB71",
                  "\u06A6",
                  "\uFB72",
                  "\u0684",
                  "\uFB73",
                  "\u0684",
                  "\uFB74",
                  "\u0684",
                  "\uFB75",
                  "\u0684",
                  "\uFB76",
                  "\u0683",
                  "\uFB77",
                  "\u0683",
                  "\uFB78",
                  "\u0683",
                  "\uFB79",
                  "\u0683",
                  "\uFB7A",
                  "\u0686",
                  "\uFB7B",
                  "\u0686",
                  "\uFB7C",
                  "\u0686",
                  "\uFB7D",
                  "\u0686",
                  "\uFB7E",
                  "\u0687",
                  "\uFB7F",
                  "\u0687",
                  "\uFB80",
                  "\u0687",
                  "\uFB81",
                  "\u0687",
                  "\uFB82",
                  "\u068D",
                  "\uFB83",
                  "\u068D",
                  "\uFB84",
                  "\u068C",
                  "\uFB85",
                  "\u068C",
                  "\uFB86",
                  "\u068E",
                  "\uFB87",
                  "\u068E",
                  "\uFB88",
                  "\u0688",
                  "\uFB89",
                  "\u0688",
                  "\uFB8A",
                  "\u0698",
                  "\uFB8B",
                  "\u0698",
                  "\uFB8C",
                  "\u0691",
                  "\uFB8D",
                  "\u0691",
                  "\uFB8E",
                  "\u06A9",
                  "\uFB8F",
                  "\u06A9",
                  "\uFB90",
                  "\u06A9",
                  "\uFB91",
                  "\u06A9",
                  "\uFB92",
                  "\u06AF",
                  "\uFB93",
                  "\u06AF",
                  "\uFB94",
                  "\u06AF",
                  "\uFB95",
                  "\u06AF",
                  "\uFB96",
                  "\u06B3",
                  "\uFB97",
                  "\u06B3",
                  "\uFB98",
                  "\u06B3",
                  "\uFB99",
                  "\u06B3",
                  "\uFB9A",
                  "\u06B1",
                  "\uFB9B",
                  "\u06B1",
                  "\uFB9C",
                  "\u06B1",
                  "\uFB9D",
                  "\u06B1",
                  "\uFB9E",
                  "\u06BA",
                  "\uFB9F",
                  "\u06BA",
                  "\uFBA0",
                  "\u06BB",
                  "\uFBA1",
                  "\u06BB",
                  "\uFBA2",
                  "\u06BB",
                  "\uFBA3",
                  "\u06BB",
                  "\uFBA4",
                  "\u06C0",
                  "\uFBA5",
                  "\u06C0",
                  "\uFBA6",
                  "\u06C1",
                  "\uFBA7",
                  "\u06C1",
                  "\uFBA8",
                  "\u06C1",
                  "\uFBA9",
                  "\u06C1",
                  "\uFBAA",
                  "\u06BE",
                  "\uFBAB",
                  "\u06BE",
                  "\uFBAC",
                  "\u06BE",
                  "\uFBAD",
                  "\u06BE",
                  "\uFBAE",
                  "\u06D2",
                  "\uFBAF",
                  "\u06D2",
                  "\uFBB0",
                  "\u06D3",
                  "\uFBB1",
                  "\u06D3",
                  "\uFBD3",
                  "\u06AD",
                  "\uFBD4",
                  "\u06AD",
                  "\uFBD5",
                  "\u06AD",
                  "\uFBD6",
                  "\u06AD",
                  "\uFBD7",
                  "\u06C7",
                  "\uFBD8",
                  "\u06C7",
                  "\uFBD9",
                  "\u06C6",
                  "\uFBDA",
                  "\u06C6",
                  "\uFBDB",
                  "\u06C8",
                  "\uFBDC",
                  "\u06C8",
                  "\uFBDD",
                  "\u0677",
                  "\uFBDE",
                  "\u06CB",
                  "\uFBDF",
                  "\u06CB",
                  "\uFBE0",
                  "\u06C5",
                  "\uFBE1",
                  "\u06C5",
                  "\uFBE2",
                  "\u06C9",
                  "\uFBE3",
                  "\u06C9",
                  "\uFBE4",
                  "\u06D0",
                  "\uFBE5",
                  "\u06D0",
                  "\uFBE6",
                  "\u06D0",
                  "\uFBE7",
                  "\u06D0",
                  "\uFBE8",
                  "\u0649",
                  "\uFBE9",
                  "\u0649",
                  "\uFBEA",
                  "\u0626\u0627",
                  "\uFBEB",
                  "\u0626\u0627",
                  "\uFBEC",
                  "\u0626\u06D5",
                  "\uFBED",
                  "\u0626\u06D5",
                  "\uFBEE",
                  "\u0626\u0648",
                  "\uFBEF",
                  "\u0626\u0648",
                  "\uFBF0",
                  "\u0626\u06C7",
                  "\uFBF1",
                  "\u0626\u06C7",
                  "\uFBF2",
                  "\u0626\u06C6",
                  "\uFBF3",
                  "\u0626\u06C6",
                  "\uFBF4",
                  "\u0626\u06C8",
                  "\uFBF5",
                  "\u0626\u06C8",
                  "\uFBF6",
                  "\u0626\u06D0",
                  "\uFBF7",
                  "\u0626\u06D0",
                  "\uFBF8",
                  "\u0626\u06D0",
                  "\uFBF9",
                  "\u0626\u0649",
                  "\uFBFA",
                  "\u0626\u0649",
                  "\uFBFB",
                  "\u0626\u0649",
                  "\uFBFC",
                  "\u06CC",
                  "\uFBFD",
                  "\u06CC",
                  "\uFBFE",
                  "\u06CC",
                  "\uFBFF",
                  "\u06CC",
                  "\uFC00",
                  "\u0626\u062C",
                  "\uFC01",
                  "\u0626\u062D",
                  "\uFC02",
                  "\u0626\u0645",
                  "\uFC03",
                  "\u0626\u0649",
                  "\uFC04",
                  "\u0626\u064A",
                  "\uFC05",
                  "\u0628\u062C",
                  "\uFC06",
                  "\u0628\u062D",
                  "\uFC07",
                  "\u0628\u062E",
                  "\uFC08",
                  "\u0628\u0645",
                  "\uFC09",
                  "\u0628\u0649",
                  "\uFC0A",
                  "\u0628\u064A",
                  "\uFC0B",
                  "\u062A\u062C",
                  "\uFC0C",
                  "\u062A\u062D",
                  "\uFC0D",
                  "\u062A\u062E",
                  "\uFC0E",
                  "\u062A\u0645",
                  "\uFC0F",
                  "\u062A\u0649",
                  "\uFC10",
                  "\u062A\u064A",
                  "\uFC11",
                  "\u062B\u062C",
                  "\uFC12",
                  "\u062B\u0645",
                  "\uFC13",
                  "\u062B\u0649",
                  "\uFC14",
                  "\u062B\u064A",
                  "\uFC15",
                  "\u062C\u062D",
                  "\uFC16",
                  "\u062C\u0645",
                  "\uFC17",
                  "\u062D\u062C",
                  "\uFC18",
                  "\u062D\u0645",
                  "\uFC19",
                  "\u062E\u062C",
                  "\uFC1A",
                  "\u062E\u062D",
                  "\uFC1B",
                  "\u062E\u0645",
                  "\uFC1C",
                  "\u0633\u062C",
                  "\uFC1D",
                  "\u0633\u062D",
                  "\uFC1E",
                  "\u0633\u062E",
                  "\uFC1F",
                  "\u0633\u0645",
                  "\uFC20",
                  "\u0635\u062D",
                  "\uFC21",
                  "\u0635\u0645",
                  "\uFC22",
                  "\u0636\u062C",
                  "\uFC23",
                  "\u0636\u062D",
                  "\uFC24",
                  "\u0636\u062E",
                  "\uFC25",
                  "\u0636\u0645",
                  "\uFC26",
                  "\u0637\u062D",
                  "\uFC27",
                  "\u0637\u0645",
                  "\uFC28",
                  "\u0638\u0645",
                  "\uFC29",
                  "\u0639\u062C",
                  "\uFC2A",
                  "\u0639\u0645",
                  "\uFC2B",
                  "\u063A\u062C",
                  "\uFC2C",
                  "\u063A\u0645",
                  "\uFC2D",
                  "\u0641\u062C",
                  "\uFC2E",
                  "\u0641\u062D",
                  "\uFC2F",
                  "\u0641\u062E",
                  "\uFC30",
                  "\u0641\u0645",
                  "\uFC31",
                  "\u0641\u0649",
                  "\uFC32",
                  "\u0641\u064A",
                  "\uFC33",
                  "\u0642\u062D",
                  "\uFC34",
                  "\u0642\u0645",
                  "\uFC35",
                  "\u0642\u0649",
                  "\uFC36",
                  "\u0642\u064A",
                  "\uFC37",
                  "\u0643\u0627",
                  "\uFC38",
                  "\u0643\u062C",
                  "\uFC39",
                  "\u0643\u062D",
                  "\uFC3A",
                  "\u0643\u062E",
                  "\uFC3B",
                  "\u0643\u0644",
                  "\uFC3C",
                  "\u0643\u0645",
                  "\uFC3D",
                  "\u0643\u0649",
                  "\uFC3E",
                  "\u0643\u064A",
                  "\uFC3F",
                  "\u0644\u062C",
                  "\uFC40",
                  "\u0644\u062D",
                  "\uFC41",
                  "\u0644\u062E",
                  "\uFC42",
                  "\u0644\u0645",
                  "\uFC43",
                  "\u0644\u0649",
                  "\uFC44",
                  "\u0644\u064A",
                  "\uFC45",
                  "\u0645\u062C",
                  "\uFC46",
                  "\u0645\u062D",
                  "\uFC47",
                  "\u0645\u062E",
                  "\uFC48",
                  "\u0645\u0645",
                  "\uFC49",
                  "\u0645\u0649",
                  "\uFC4A",
                  "\u0645\u064A",
                  "\uFC4B",
                  "\u0646\u062C",
                  "\uFC4C",
                  "\u0646\u062D",
                  "\uFC4D",
                  "\u0646\u062E",
                  "\uFC4E",
                  "\u0646\u0645",
                  "\uFC4F",
                  "\u0646\u0649",
                  "\uFC50",
                  "\u0646\u064A",
                  "\uFC51",
                  "\u0647\u062C",
                  "\uFC52",
                  "\u0647\u0645",
                  "\uFC53",
                  "\u0647\u0649",
                  "\uFC54",
                  "\u0647\u064A",
                  "\uFC55",
                  "\u064A\u062C",
                  "\uFC56",
                  "\u064A\u062D",
                  "\uFC57",
                  "\u064A\u062E",
                  "\uFC58",
                  "\u064A\u0645",
                  "\uFC59",
                  "\u064A\u0649",
                  "\uFC5A",
                  "\u064A\u064A",
                  "\uFC5B",
                  "\u0630\u0670",
                  "\uFC5C",
                  "\u0631\u0670",
                  "\uFC5D",
                  "\u0649\u0670",
                  "\uFC5E",
                  " \u064C\u0651",
                  "\uFC5F",
                  " \u064D\u0651",
                  "\uFC60",
                  " \u064E\u0651",
                  "\uFC61",
                  " \u064F\u0651",
                  "\uFC62",
                  " \u0650\u0651",
                  "\uFC63",
                  " \u0651\u0670",
                  "\uFC64",
                  "\u0626\u0631",
                  "\uFC65",
                  "\u0626\u0632",
                  "\uFC66",
                  "\u0626\u0645",
                  "\uFC67",
                  "\u0626\u0646",
                  "\uFC68",
                  "\u0626\u0649",
                  "\uFC69",
                  "\u0626\u064A",
                  "\uFC6A",
                  "\u0628\u0631",
                  "\uFC6B",
                  "\u0628\u0632",
                  "\uFC6C",
                  "\u0628\u0645",
                  "\uFC6D",
                  "\u0628\u0646",
                  "\uFC6E",
                  "\u0628\u0649",
                  "\uFC6F",
                  "\u0628\u064A",
                  "\uFC70",
                  "\u062A\u0631",
                  "\uFC71",
                  "\u062A\u0632",
                  "\uFC72",
                  "\u062A\u0645",
                  "\uFC73",
                  "\u062A\u0646",
                  "\uFC74",
                  "\u062A\u0649",
                  "\uFC75",
                  "\u062A\u064A",
                  "\uFC76",
                  "\u062B\u0631",
                  "\uFC77",
                  "\u062B\u0632",
                  "\uFC78",
                  "\u062B\u0645",
                  "\uFC79",
                  "\u062B\u0646",
                  "\uFC7A",
                  "\u062B\u0649",
                  "\uFC7B",
                  "\u062B\u064A",
                  "\uFC7C",
                  "\u0641\u0649",
                  "\uFC7D",
                  "\u0641\u064A",
                  "\uFC7E",
                  "\u0642\u0649",
                  "\uFC7F",
                  "\u0642\u064A",
                  "\uFC80",
                  "\u0643\u0627",
                  "\uFC81",
                  "\u0643\u0644",
                  "\uFC82",
                  "\u0643\u0645",
                  "\uFC83",
                  "\u0643\u0649",
                  "\uFC84",
                  "\u0643\u064A",
                  "\uFC85",
                  "\u0644\u0645",
                  "\uFC86",
                  "\u0644\u0649",
                  "\uFC87",
                  "\u0644\u064A",
                  "\uFC88",
                  "\u0645\u0627",
                  "\uFC89",
                  "\u0645\u0645",
                  "\uFC8A",
                  "\u0646\u0631",
                  "\uFC8B",
                  "\u0646\u0632",
                  "\uFC8C",
                  "\u0646\u0645",
                  "\uFC8D",
                  "\u0646\u0646",
                  "\uFC8E",
                  "\u0646\u0649",
                  "\uFC8F",
                  "\u0646\u064A",
                  "\uFC90",
                  "\u0649\u0670",
                  "\uFC91",
                  "\u064A\u0631",
                  "\uFC92",
                  "\u064A\u0632",
                  "\uFC93",
                  "\u064A\u0645",
                  "\uFC94",
                  "\u064A\u0646",
                  "\uFC95",
                  "\u064A\u0649",
                  "\uFC96",
                  "\u064A\u064A",
                  "\uFC97",
                  "\u0626\u062C",
                  "\uFC98",
                  "\u0626\u062D",
                  "\uFC99",
                  "\u0626\u062E",
                  "\uFC9A",
                  "\u0626\u0645",
                  "\uFC9B",
                  "\u0626\u0647",
                  "\uFC9C",
                  "\u0628\u062C",
                  "\uFC9D",
                  "\u0628\u062D",
                  "\uFC9E",
                  "\u0628\u062E",
                  "\uFC9F",
                  "\u0628\u0645",
                  "\uFCA0",
                  "\u0628\u0647",
                  "\uFCA1",
                  "\u062A\u062C",
                  "\uFCA2",
                  "\u062A\u062D",
                  "\uFCA3",
                  "\u062A\u062E",
                  "\uFCA4",
                  "\u062A\u0645",
                  "\uFCA5",
                  "\u062A\u0647",
                  "\uFCA6",
                  "\u062B\u0645",
                  "\uFCA7",
                  "\u062C\u062D",
                  "\uFCA8",
                  "\u062C\u0645",
                  "\uFCA9",
                  "\u062D\u062C",
                  "\uFCAA",
                  "\u062D\u0645",
                  "\uFCAB",
                  "\u062E\u062C",
                  "\uFCAC",
                  "\u062E\u0645",
                  "\uFCAD",
                  "\u0633\u062C",
                  "\uFCAE",
                  "\u0633\u062D",
                  "\uFCAF",
                  "\u0633\u062E",
                  "\uFCB0",
                  "\u0633\u0645",
                  "\uFCB1",
                  "\u0635\u062D",
                  "\uFCB2",
                  "\u0635\u062E",
                  "\uFCB3",
                  "\u0635\u0645",
                  "\uFCB4",
                  "\u0636\u062C",
                  "\uFCB5",
                  "\u0636\u062D",
                  "\uFCB6",
                  "\u0636\u062E",
                  "\uFCB7",
                  "\u0636\u0645",
                  "\uFCB8",
                  "\u0637\u062D",
                  "\uFCB9",
                  "\u0638\u0645",
                  "\uFCBA",
                  "\u0639\u062C",
                  "\uFCBB",
                  "\u0639\u0645",
                  "\uFCBC",
                  "\u063A\u062C",
                  "\uFCBD",
                  "\u063A\u0645",
                  "\uFCBE",
                  "\u0641\u062C",
                  "\uFCBF",
                  "\u0641\u062D",
                  "\uFCC0",
                  "\u0641\u062E",
                  "\uFCC1",
                  "\u0641\u0645",
                  "\uFCC2",
                  "\u0642\u062D",
                  "\uFCC3",
                  "\u0642\u0645",
                  "\uFCC4",
                  "\u0643\u062C",
                  "\uFCC5",
                  "\u0643\u062D",
                  "\uFCC6",
                  "\u0643\u062E",
                  "\uFCC7",
                  "\u0643\u0644",
                  "\uFCC8",
                  "\u0643\u0645",
                  "\uFCC9",
                  "\u0644\u062C",
                  "\uFCCA",
                  "\u0644\u062D",
                  "\uFCCB",
                  "\u0644\u062E",
                  "\uFCCC",
                  "\u0644\u0645",
                  "\uFCCD",
                  "\u0644\u0647",
                  "\uFCCE",
                  "\u0645\u062C",
                  "\uFCCF",
                  "\u0645\u062D",
                  "\uFCD0",
                  "\u0645\u062E",
                  "\uFCD1",
                  "\u0645\u0645",
                  "\uFCD2",
                  "\u0646\u062C",
                  "\uFCD3",
                  "\u0646\u062D",
                  "\uFCD4",
                  "\u0646\u062E",
                  "\uFCD5",
                  "\u0646\u0645",
                  "\uFCD6",
                  "\u0646\u0647",
                  "\uFCD7",
                  "\u0647\u062C",
                  "\uFCD8",
                  "\u0647\u0645",
                  "\uFCD9",
                  "\u0647\u0670",
                  "\uFCDA",
                  "\u064A\u062C",
                  "\uFCDB",
                  "\u064A\u062D",
                  "\uFCDC",
                  "\u064A\u062E",
                  "\uFCDD",
                  "\u064A\u0645",
                  "\uFCDE",
                  "\u064A\u0647",
                  "\uFCDF",
                  "\u0626\u0645",
                  "\uFCE0",
                  "\u0626\u0647",
                  "\uFCE1",
                  "\u0628\u0645",
                  "\uFCE2",
                  "\u0628\u0647",
                  "\uFCE3",
                  "\u062A\u0645",
                  "\uFCE4",
                  "\u062A\u0647",
                  "\uFCE5",
                  "\u062B\u0645",
                  "\uFCE6",
                  "\u062B\u0647",
                  "\uFCE7",
                  "\u0633\u0645",
                  "\uFCE8",
                  "\u0633\u0647",
                  "\uFCE9",
                  "\u0634\u0645",
                  "\uFCEA",
                  "\u0634\u0647",
                  "\uFCEB",
                  "\u0643\u0644",
                  "\uFCEC",
                  "\u0643\u0645",
                  "\uFCED",
                  "\u0644\u0645",
                  "\uFCEE",
                  "\u0646\u0645",
                  "\uFCEF",
                  "\u0646\u0647",
                  "\uFCF0",
                  "\u064A\u0645",
                  "\uFCF1",
                  "\u064A\u0647",
                  "\uFCF2",
                  "\u0640\u064E\u0651",
                  "\uFCF3",
                  "\u0640\u064F\u0651",
                  "\uFCF4",
                  "\u0640\u0650\u0651",
                  "\uFCF5",
                  "\u0637\u0649",
                  "\uFCF6",
                  "\u0637\u064A",
                  "\uFCF7",
                  "\u0639\u0649",
                  "\uFCF8",
                  "\u0639\u064A",
                  "\uFCF9",
                  "\u063A\u0649",
                  "\uFCFA",
                  "\u063A\u064A",
                  "\uFCFB",
                  "\u0633\u0649",
                  "\uFCFC",
                  "\u0633\u064A",
                  "\uFCFD",
                  "\u0634\u0649",
                  "\uFCFE",
                  "\u0634\u064A",
                  "\uFCFF",
                  "\u062D\u0649",
                  "\uFD00",
                  "\u062D\u064A",
                  "\uFD01",
                  "\u062C\u0649",
                  "\uFD02",
                  "\u062C\u064A",
                  "\uFD03",
                  "\u062E\u0649",
                  "\uFD04",
                  "\u062E\u064A",
                  "\uFD05",
                  "\u0635\u0649",
                  "\uFD06",
                  "\u0635\u064A",
                  "\uFD07",
                  "\u0636\u0649",
                  "\uFD08",
                  "\u0636\u064A",
                  "\uFD09",
                  "\u0634\u062C",
                  "\uFD0A",
                  "\u0634\u062D",
                  "\uFD0B",
                  "\u0634\u062E",
                  "\uFD0C",
                  "\u0634\u0645",
                  "\uFD0D",
                  "\u0634\u0631",
                  "\uFD0E",
                  "\u0633\u0631",
                  "\uFD0F",
                  "\u0635\u0631",
                  "\uFD10",
                  "\u0636\u0631",
                  "\uFD11",
                  "\u0637\u0649",
                  "\uFD12",
                  "\u0637\u064A",
                  "\uFD13",
                  "\u0639\u0649",
                  "\uFD14",
                  "\u0639\u064A",
                  "\uFD15",
                  "\u063A\u0649",
                  "\uFD16",
                  "\u063A\u064A",
                  "\uFD17",
                  "\u0633\u0649",
                  "\uFD18",
                  "\u0633\u064A",
                  "\uFD19",
                  "\u0634\u0649",
                  "\uFD1A",
                  "\u0634\u064A",
                  "\uFD1B",
                  "\u062D\u0649",
                  "\uFD1C",
                  "\u062D\u064A",
                  "\uFD1D",
                  "\u062C\u0649",
                  "\uFD1E",
                  "\u062C\u064A",
                  "\uFD1F",
                  "\u062E\u0649",
                  "\uFD20",
                  "\u062E\u064A",
                  "\uFD21",
                  "\u0635\u0649",
                  "\uFD22",
                  "\u0635\u064A",
                  "\uFD23",
                  "\u0636\u0649",
                  "\uFD24",
                  "\u0636\u064A",
                  "\uFD25",
                  "\u0634\u062C",
                  "\uFD26",
                  "\u0634\u062D",
                  "\uFD27",
                  "\u0634\u062E",
                  "\uFD28",
                  "\u0634\u0645",
                  "\uFD29",
                  "\u0634\u0631",
                  "\uFD2A",
                  "\u0633\u0631",
                  "\uFD2B",
                  "\u0635\u0631",
                  "\uFD2C",
                  "\u0636\u0631",
                  "\uFD2D",
                  "\u0634\u062C",
                  "\uFD2E",
                  "\u0634\u062D",
                  "\uFD2F",
                  "\u0634\u062E",
                  "\uFD30",
                  "\u0634\u0645",
                  "\uFD31",
                  "\u0633\u0647",
                  "\uFD32",
                  "\u0634\u0647",
                  "\uFD33",
                  "\u0637\u0645",
                  "\uFD34",
                  "\u0633\u062C",
                  "\uFD35",
                  "\u0633\u062D",
                  "\uFD36",
                  "\u0633\u062E",
                  "\uFD37",
                  "\u0634\u062C",
                  "\uFD38",
                  "\u0634\u062D",
                  "\uFD39",
                  "\u0634\u062E",
                  "\uFD3A",
                  "\u0637\u0645",
                  "\uFD3B",
                  "\u0638\u0645",
                  "\uFD3C",
                  "\u0627\u064B",
                  "\uFD3D",
                  "\u0627\u064B",
                  "\uFD50",
                  "\u062A\u062C\u0645",
                  "\uFD51",
                  "\u062A\u062D\u062C",
                  "\uFD52",
                  "\u062A\u062D\u062C",
                  "\uFD53",
                  "\u062A\u062D\u0645",
                  "\uFD54",
                  "\u062A\u062E\u0645",
                  "\uFD55",
                  "\u062A\u0645\u062C",
                  "\uFD56",
                  "\u062A\u0645\u062D",
                  "\uFD57",
                  "\u062A\u0645\u062E",
                  "\uFD58",
                  "\u062C\u0645\u062D",
                  "\uFD59",
                  "\u062C\u0645\u062D",
                  "\uFD5A",
                  "\u062D\u0645\u064A",
                  "\uFD5B",
                  "\u062D\u0645\u0649",
                  "\uFD5C",
                  "\u0633\u062D\u062C",
                  "\uFD5D",
                  "\u0633\u062C\u062D",
                  "\uFD5E",
                  "\u0633\u062C\u0649",
                  "\uFD5F",
                  "\u0633\u0645\u062D",
                  "\uFD60",
                  "\u0633\u0645\u062D",
                  "\uFD61",
                  "\u0633\u0645\u062C",
                  "\uFD62",
                  "\u0633\u0645\u0645",
                  "\uFD63",
                  "\u0633\u0645\u0645",
                  "\uFD64",
                  "\u0635\u062D\u062D",
                  "\uFD65",
                  "\u0635\u062D\u062D",
                  "\uFD66",
                  "\u0635\u0645\u0645",
                  "\uFD67",
                  "\u0634\u062D\u0645",
                  "\uFD68",
                  "\u0634\u062D\u0645",
                  "\uFD69",
                  "\u0634\u062C\u064A",
                  "\uFD6A",
                  "\u0634\u0645\u062E",
                  "\uFD6B",
                  "\u0634\u0645\u062E",
                  "\uFD6C",
                  "\u0634\u0645\u0645",
                  "\uFD6D",
                  "\u0634\u0645\u0645",
                  "\uFD6E",
                  "\u0636\u062D\u0649",
                  "\uFD6F",
                  "\u0636\u062E\u0645",
                  "\uFD70",
                  "\u0636\u062E\u0645",
                  "\uFD71",
                  "\u0637\u0645\u062D",
                  "\uFD72",
                  "\u0637\u0645\u062D",
                  "\uFD73",
                  "\u0637\u0645\u0645",
                  "\uFD74",
                  "\u0637\u0645\u064A",
                  "\uFD75",
                  "\u0639\u062C\u0645",
                  "\uFD76",
                  "\u0639\u0645\u0645",
                  "\uFD77",
                  "\u0639\u0645\u0645",
                  "\uFD78",
                  "\u0639\u0645\u0649",
                  "\uFD79",
                  "\u063A\u0645\u0645",
                  "\uFD7A",
                  "\u063A\u0645\u064A",
                  "\uFD7B",
                  "\u063A\u0645\u0649",
                  "\uFD7C",
                  "\u0641\u062E\u0645",
                  "\uFD7D",
                  "\u0641\u062E\u0645",
                  "\uFD7E",
                  "\u0642\u0645\u062D",
                  "\uFD7F",
                  "\u0642\u0645\u0645",
                  "\uFD80",
                  "\u0644\u062D\u0645",
                  "\uFD81",
                  "\u0644\u062D\u064A",
                  "\uFD82",
                  "\u0644\u062D\u0649",
                  "\uFD83",
                  "\u0644\u062C\u062C",
                  "\uFD84",
                  "\u0644\u062C\u062C",
                  "\uFD85",
                  "\u0644\u062E\u0645",
                  "\uFD86",
                  "\u0644\u062E\u0645",
                  "\uFD87",
                  "\u0644\u0645\u062D",
                  "\uFD88",
                  "\u0644\u0645\u062D",
                  "\uFD89",
                  "\u0645\u062D\u062C",
                  "\uFD8A",
                  "\u0645\u062D\u0645",
                  "\uFD8B",
                  "\u0645\u062D\u064A",
                  "\uFD8C",
                  "\u0645\u062C\u062D",
                  "\uFD8D",
                  "\u0645\u062C\u0645",
                  "\uFD8E",
                  "\u0645\u062E\u062C",
                  "\uFD8F",
                  "\u0645\u062E\u0645",
                  "\uFD92",
                  "\u0645\u062C\u062E",
                  "\uFD93",
                  "\u0647\u0645\u062C",
                  "\uFD94",
                  "\u0647\u0645\u0645",
                  "\uFD95",
                  "\u0646\u062D\u0645",
                  "\uFD96",
                  "\u0646\u062D\u0649",
                  "\uFD97",
                  "\u0646\u062C\u0645",
                  "\uFD98",
                  "\u0646\u062C\u0645",
                  "\uFD99",
                  "\u0646\u062C\u0649",
                  "\uFD9A",
                  "\u0646\u0645\u064A",
                  "\uFD9B",
                  "\u0646\u0645\u0649",
                  "\uFD9C",
                  "\u064A\u0645\u0645",
                  "\uFD9D",
                  "\u064A\u0645\u0645",
                  "\uFD9E",
                  "\u0628\u062E\u064A",
                  "\uFD9F",
                  "\u062A\u062C\u064A",
                  "\uFDA0",
                  "\u062A\u062C\u0649",
                  "\uFDA1",
                  "\u062A\u062E\u064A",
                  "\uFDA2",
                  "\u062A\u062E\u0649",
                  "\uFDA3",
                  "\u062A\u0645\u064A",
                  "\uFDA4",
                  "\u062A\u0645\u0649",
                  "\uFDA5",
                  "\u062C\u0645\u064A",
                  "\uFDA6",
                  "\u062C\u062D\u0649",
                  "\uFDA7",
                  "\u062C\u0645\u0649",
                  "\uFDA8",
                  "\u0633\u062E\u0649",
                  "\uFDA9",
                  "\u0635\u062D\u064A",
                  "\uFDAA",
                  "\u0634\u062D\u064A",
                  "\uFDAB",
                  "\u0636\u062D\u064A",
                  "\uFDAC",
                  "\u0644\u062C\u064A",
                  "\uFDAD",
                  "\u0644\u0645\u064A",
                  "\uFDAE",
                  "\u064A\u062D\u064A",
                  "\uFDAF",
                  "\u064A\u062C\u064A",
                  "\uFDB0",
                  "\u064A\u0645\u064A",
                  "\uFDB1",
                  "\u0645\u0645\u064A",
                  "\uFDB2",
                  "\u0642\u0645\u064A",
                  "\uFDB3",
                  "\u0646\u062D\u064A",
                  "\uFDB4",
                  "\u0642\u0645\u062D",
                  "\uFDB5",
                  "\u0644\u062D\u0645",
                  "\uFDB6",
                  "\u0639\u0645\u064A",
                  "\uFDB7",
                  "\u0643\u0645\u064A",
                  "\uFDB8",
                  "\u0646\u062C\u062D",
                  "\uFDB9",
                  "\u0645\u062E\u064A",
                  "\uFDBA",
                  "\u0644\u062C\u0645",
                  "\uFDBB",
                  "\u0643\u0645\u0645",
                  "\uFDBC",
                  "\u0644\u062C\u0645",
                  "\uFDBD",
                  "\u0646\u062C\u062D",
                  "\uFDBE",
                  "\u062C\u062D\u064A",
                  "\uFDBF",
                  "\u062D\u062C\u064A",
                  "\uFDC0",
                  "\u0645\u062C\u064A",
                  "\uFDC1",
                  "\u0641\u0645\u064A",
                  "\uFDC2",
                  "\u0628\u062D\u064A",
                  "\uFDC3",
                  "\u0643\u0645\u0645",
                  "\uFDC4",
                  "\u0639\u062C\u0645",
                  "\uFDC5",
                  "\u0635\u0645\u0645",
                  "\uFDC6",
                  "\u0633\u062E\u064A",
                  "\uFDC7",
                  "\u0646\u062C\u064A",
                  "\uFE49",
                  "\u203E",
                  "\uFE4A",
                  "\u203E",
                  "\uFE4B",
                  "\u203E",
                  "\uFE4C",
                  "\u203E",
                  "\uFE4D",
                  "_",
                  "\uFE4E",
                  "_",
                  "\uFE4F",
                  "_",
                  "\uFE80",
                  "\u0621",
                  "\uFE81",
                  "\u0622",
                  "\uFE82",
                  "\u0622",
                  "\uFE83",
                  "\u0623",
                  "\uFE84",
                  "\u0623",
                  "\uFE85",
                  "\u0624",
                  "\uFE86",
                  "\u0624",
                  "\uFE87",
                  "\u0625",
                  "\uFE88",
                  "\u0625",
                  "\uFE89",
                  "\u0626",
                  "\uFE8A",
                  "\u0626",
                  "\uFE8B",
                  "\u0626",
                  "\uFE8C",
                  "\u0626",
                  "\uFE8D",
                  "\u0627",
                  "\uFE8E",
                  "\u0627",
                  "\uFE8F",
                  "\u0628",
                  "\uFE90",
                  "\u0628",
                  "\uFE91",
                  "\u0628",
                  "\uFE92",
                  "\u0628",
                  "\uFE93",
                  "\u0629",
                  "\uFE94",
                  "\u0629",
                  "\uFE95",
                  "\u062A",
                  "\uFE96",
                  "\u062A",
                  "\uFE97",
                  "\u062A",
                  "\uFE98",
                  "\u062A",
                  "\uFE99",
                  "\u062B",
                  "\uFE9A",
                  "\u062B",
                  "\uFE9B",
                  "\u062B",
                  "\uFE9C",
                  "\u062B",
                  "\uFE9D",
                  "\u062C",
                  "\uFE9E",
                  "\u062C",
                  "\uFE9F",
                  "\u062C",
                  "\uFEA0",
                  "\u062C",
                  "\uFEA1",
                  "\u062D",
                  "\uFEA2",
                  "\u062D",
                  "\uFEA3",
                  "\u062D",
                  "\uFEA4",
                  "\u062D",
                  "\uFEA5",
                  "\u062E",
                  "\uFEA6",
                  "\u062E",
                  "\uFEA7",
                  "\u062E",
                  "\uFEA8",
                  "\u062E",
                  "\uFEA9",
                  "\u062F",
                  "\uFEAA",
                  "\u062F",
                  "\uFEAB",
                  "\u0630",
                  "\uFEAC",
                  "\u0630",
                  "\uFEAD",
                  "\u0631",
                  "\uFEAE",
                  "\u0631",
                  "\uFEAF",
                  "\u0632",
                  "\uFEB0",
                  "\u0632",
                  "\uFEB1",
                  "\u0633",
                  "\uFEB2",
                  "\u0633",
                  "\uFEB3",
                  "\u0633",
                  "\uFEB4",
                  "\u0633",
                  "\uFEB5",
                  "\u0634",
                  "\uFEB6",
                  "\u0634",
                  "\uFEB7",
                  "\u0634",
                  "\uFEB8",
                  "\u0634",
                  "\uFEB9",
                  "\u0635",
                  "\uFEBA",
                  "\u0635",
                  "\uFEBB",
                  "\u0635",
                  "\uFEBC",
                  "\u0635",
                  "\uFEBD",
                  "\u0636",
                  "\uFEBE",
                  "\u0636",
                  "\uFEBF",
                  "\u0636",
                  "\uFEC0",
                  "\u0636",
                  "\uFEC1",
                  "\u0637",
                  "\uFEC2",
                  "\u0637",
                  "\uFEC3",
                  "\u0637",
                  "\uFEC4",
                  "\u0637",
                  "\uFEC5",
                  "\u0638",
                  "\uFEC6",
                  "\u0638",
                  "\uFEC7",
                  "\u0638",
                  "\uFEC8",
                  "\u0638",
                  "\uFEC9",
                  "\u0639",
                  "\uFECA",
                  "\u0639",
                  "\uFECB",
                  "\u0639",
                  "\uFECC",
                  "\u0639",
                  "\uFECD",
                  "\u063A",
                  "\uFECE",
                  "\u063A",
                  "\uFECF",
                  "\u063A",
                  "\uFED0",
                  "\u063A",
                  "\uFED1",
                  "\u0641",
                  "\uFED2",
                  "\u0641",
                  "\uFED3",
                  "\u0641",
                  "\uFED4",
                  "\u0641",
                  "\uFED5",
                  "\u0642",
                  "\uFED6",
                  "\u0642",
                  "\uFED7",
                  "\u0642",
                  "\uFED8",
                  "\u0642",
                  "\uFED9",
                  "\u0643",
                  "\uFEDA",
                  "\u0643",
                  "\uFEDB",
                  "\u0643",
                  "\uFEDC",
                  "\u0643",
                  "\uFEDD",
                  "\u0644",
                  "\uFEDE",
                  "\u0644",
                  "\uFEDF",
                  "\u0644",
                  "\uFEE0",
                  "\u0644",
                  "\uFEE1",
                  "\u0645",
                  "\uFEE2",
                  "\u0645",
                  "\uFEE3",
                  "\u0645",
                  "\uFEE4",
                  "\u0645",
                  "\uFEE5",
                  "\u0646",
                  "\uFEE6",
                  "\u0646",
                  "\uFEE7",
                  "\u0646",
                  "\uFEE8",
                  "\u0646",
                  "\uFEE9",
                  "\u0647",
                  "\uFEEA",
                  "\u0647",
                  "\uFEEB",
                  "\u0647",
                  "\uFEEC",
                  "\u0647",
                  "\uFEED",
                  "\u0648",
                  "\uFEEE",
                  "\u0648",
                  "\uFEEF",
                  "\u0649",
                  "\uFEF0",
                  "\u0649",
                  "\uFEF1",
                  "\u064A",
                  "\uFEF2",
                  "\u064A",
                  "\uFEF3",
                  "\u064A",
                  "\uFEF4",
                  "\u064A",
                  "\uFEF5",
                  "\u0644\u0622",
                  "\uFEF6",
                  "\u0644\u0622",
                  "\uFEF7",
                  "\u0644\u0623",
                  "\uFEF8",
                  "\u0644\u0623",
                  "\uFEF9",
                  "\u0644\u0625",
                  "\uFEFA",
                  "\u0644\u0625",
                  "\uFEFB",
                  "\u0644\u0627",
                  "\uFEFC",
                  "\u0644\u0627"
                ];
              });
              function reverseIfRtl(chars) {
                const charsLength = chars.length;
                if (charsLength <= 1 || !isRTLRangeFor(chars.charCodeAt(0))) {
                  return chars;
                }
                const buf = [];
                for (let ii = charsLength - 1; ii >= 0; ii--) {
                  buf.push(chars[ii]);
                }
                return buf.join("");
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.MarkupAnnotation = exports2.AnnotationFactory = exports2.AnnotationBorderStyle = exports2.Annotation = void 0;
              exports2.getQuadPoints = getQuadPoints;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _core_utils = __w_pdfjs_require__2(139);
              var _default_appearance = __w_pdfjs_require__2(153);
              var _primitives = __w_pdfjs_require__2(135);
              var _bidi = __w_pdfjs_require__2(189);
              var _catalog = __w_pdfjs_require__2(194);
              var _colorspace = __w_pdfjs_require__2(154);
              var _file_spec = __w_pdfjs_require__2(196);
              var _object_loader = __w_pdfjs_require__2(200);
              var _operator_list = __w_pdfjs_require__2(192);
              var _stream = __w_pdfjs_require__2(140);
              var _writer = __w_pdfjs_require__2(201);
              var _factory = __w_pdfjs_require__2(204);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function _get(target, property, receiver) {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  _get = Reflect.get;
                } else {
                  _get = function _get2(target2, property2, receiver2) {
                    var base = _superPropBase(target2, property2);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property2);
                    if (desc.get) {
                      return desc.get.call(receiver2);
                    }
                    return desc.value;
                  };
                }
                return _get(target, property, receiver || target);
              }
              function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = _getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var AnnotationFactory = /* @__PURE__ */ function() {
                function AnnotationFactory2() {
                  _classCallCheck(this, AnnotationFactory2);
                }
                _createClass(AnnotationFactory2, null, [{
                  key: "create",
                  value: function create(xref, ref, pdfManager, idFactory, collectFields) {
                    var _this = this;
                    return Promise.all([pdfManager.ensureCatalog("acroForm"), collectFields ? this._getPageIndex(xref, ref, pdfManager) : -1]).then(function(_ref) {
                      var _ref2 = _slicedToArray(_ref, 2), acroForm = _ref2[0], pageIndex = _ref2[1];
                      return pdfManager.ensure(_this, "_create", [xref, ref, pdfManager, idFactory, acroForm, collectFields, pageIndex]);
                    });
                  }
                }, {
                  key: "_create",
                  value: function _create(xref, ref, pdfManager, idFactory, acroForm, collectFields) {
                    var pageIndex = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : -1;
                    var dict = xref.fetchIfRef(ref);
                    if (!(0, _primitives.isDict)(dict)) {
                      return void 0;
                    }
                    var id = (0, _primitives.isRef)(ref) ? ref.toString() : "annot_".concat(idFactory.createObjId());
                    var subtype = dict.get("Subtype");
                    subtype = (0, _primitives.isName)(subtype) ? subtype.name : null;
                    var parameters = {
                      xref,
                      ref,
                      dict,
                      subtype,
                      id,
                      pdfManager,
                      acroForm: acroForm instanceof _primitives.Dict ? acroForm : _primitives.Dict.empty,
                      collectFields,
                      pageIndex
                    };
                    switch (subtype) {
                      case "Link":
                        return new LinkAnnotation(parameters);
                      case "Text":
                        return new TextAnnotation(parameters);
                      case "Widget":
                        var fieldType = (0, _core_utils.getInheritableProperty)({
                          dict,
                          key: "FT"
                        });
                        fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;
                        switch (fieldType) {
                          case "Tx":
                            return new TextWidgetAnnotation(parameters);
                          case "Btn":
                            return new ButtonWidgetAnnotation(parameters);
                          case "Ch":
                            return new ChoiceWidgetAnnotation(parameters);
                          case "Sig":
                            return new SignatureWidgetAnnotation(parameters);
                        }
                        (0, _util.warn)('Unimplemented widget field type "'.concat(fieldType, '", ') + "falling back to base field type.");
                        return new WidgetAnnotation(parameters);
                      case "Popup":
                        return new PopupAnnotation(parameters);
                      case "FreeText":
                        return new FreeTextAnnotation(parameters);
                      case "Line":
                        return new LineAnnotation(parameters);
                      case "Square":
                        return new SquareAnnotation(parameters);
                      case "Circle":
                        return new CircleAnnotation(parameters);
                      case "PolyLine":
                        return new PolylineAnnotation(parameters);
                      case "Polygon":
                        return new PolygonAnnotation(parameters);
                      case "Caret":
                        return new CaretAnnotation(parameters);
                      case "Ink":
                        return new InkAnnotation(parameters);
                      case "Highlight":
                        return new HighlightAnnotation(parameters);
                      case "Underline":
                        return new UnderlineAnnotation(parameters);
                      case "Squiggly":
                        return new SquigglyAnnotation(parameters);
                      case "StrikeOut":
                        return new StrikeOutAnnotation(parameters);
                      case "Stamp":
                        return new StampAnnotation(parameters);
                      case "FileAttachment":
                        return new FileAttachmentAnnotation(parameters);
                      default:
                        if (!collectFields) {
                          if (!subtype) {
                            (0, _util.warn)("Annotation is missing the required /Subtype.");
                          } else {
                            (0, _util.warn)('Unimplemented annotation type "'.concat(subtype, '", ') + "falling back to base annotation.");
                          }
                        }
                        return new Annotation(parameters);
                    }
                  }
                }, {
                  key: "_getPageIndex",
                  value: function() {
                    var _getPageIndex2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(xref, ref, pdfManager) {
                      var annotDict, pageRef, pageIndex;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.prev = 0;
                              _context.next = 3;
                              return xref.fetchIfRefAsync(ref);
                            case 3:
                              annotDict = _context.sent;
                              if ((0, _primitives.isDict)(annotDict)) {
                                _context.next = 6;
                                break;
                              }
                              return _context.abrupt("return", -1);
                            case 6:
                              pageRef = annotDict.getRaw("P");
                              if ((0, _primitives.isRef)(pageRef)) {
                                _context.next = 9;
                                break;
                              }
                              return _context.abrupt("return", -1);
                            case 9:
                              _context.next = 11;
                              return pdfManager.ensureCatalog("getPageIndex", [pageRef]);
                            case 11:
                              pageIndex = _context.sent;
                              return _context.abrupt("return", pageIndex);
                            case 15:
                              _context.prev = 15;
                              _context.t0 = _context["catch"](0);
                              (0, _util.warn)('_getPageIndex: "'.concat(_context.t0, '".'));
                              return _context.abrupt("return", -1);
                            case 19:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, null, [[0, 15]]);
                    }));
                    function _getPageIndex(_x, _x2, _x3) {
                      return _getPageIndex2.apply(this, arguments);
                    }
                    return _getPageIndex;
                  }()
                }]);
                return AnnotationFactory2;
              }();
              exports2.AnnotationFactory = AnnotationFactory;
              function getRgbColor(color) {
                var defaultColor = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Uint8ClampedArray(3);
                if (!Array.isArray(color)) {
                  return defaultColor;
                }
                var rgbColor = defaultColor || new Uint8ClampedArray(3);
                switch (color.length) {
                  case 0:
                    return null;
                  case 1:
                    _colorspace.ColorSpace.singletons.gray.getRgbItem(color, 0, rgbColor, 0);
                    return rgbColor;
                  case 3:
                    _colorspace.ColorSpace.singletons.rgb.getRgbItem(color, 0, rgbColor, 0);
                    return rgbColor;
                  case 4:
                    _colorspace.ColorSpace.singletons.cmyk.getRgbItem(color, 0, rgbColor, 0);
                    return rgbColor;
                  default:
                    return defaultColor;
                }
              }
              function getQuadPoints(dict, rect) {
                if (!dict.has("QuadPoints")) {
                  return null;
                }
                var quadPoints = dict.getArray("QuadPoints");
                if (!Array.isArray(quadPoints) || quadPoints.length === 0 || quadPoints.length % 8 > 0) {
                  return null;
                }
                var quadPointsLists = [];
                for (var i = 0, ii = quadPoints.length / 8; i < ii; i++) {
                  quadPointsLists.push([]);
                  for (var j = i * 8, jj = i * 8 + 8; j < jj; j += 2) {
                    var x = quadPoints[j];
                    var y = quadPoints[j + 1];
                    if (rect !== null && (x < rect[0] || x > rect[2] || y < rect[1] || y > rect[3])) {
                      return null;
                    }
                    quadPointsLists[i].push({
                      x,
                      y
                    });
                  }
                }
                return quadPointsLists.map(function(quadPointsList) {
                  var _quadPointsList$reduc = quadPointsList.reduce(function(_ref3, quadPoint) {
                    var _ref4 = _slicedToArray(_ref3, 4), mX = _ref4[0], MX = _ref4[1], mY = _ref4[2], MY = _ref4[3];
                    return [Math.min(mX, quadPoint.x), Math.max(MX, quadPoint.x), Math.min(mY, quadPoint.y), Math.max(MY, quadPoint.y)];
                  }, [Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE]), _quadPointsList$reduc2 = _slicedToArray(_quadPointsList$reduc, 4), minX = _quadPointsList$reduc2[0], maxX = _quadPointsList$reduc2[1], minY = _quadPointsList$reduc2[2], maxY = _quadPointsList$reduc2[3];
                  return [{
                    x: minX,
                    y: maxY
                  }, {
                    x: maxX,
                    y: maxY
                  }, {
                    x: minX,
                    y: minY
                  }, {
                    x: maxX,
                    y: minY
                  }];
                });
              }
              function getTransformMatrix(rect, bbox, matrix) {
                var _Util$getAxialAligned = _util.Util.getAxialAlignedBoundingBox(bbox, matrix), _Util$getAxialAligned2 = _slicedToArray(_Util$getAxialAligned, 4), minX = _Util$getAxialAligned2[0], minY = _Util$getAxialAligned2[1], maxX = _Util$getAxialAligned2[2], maxY = _Util$getAxialAligned2[3];
                if (minX === maxX || minY === maxY) {
                  return [1, 0, 0, 1, rect[0], rect[1]];
                }
                var xRatio = (rect[2] - rect[0]) / (maxX - minX);
                var yRatio = (rect[3] - rect[1]) / (maxY - minY);
                return [xRatio, 0, 0, yRatio, rect[0] - minX * xRatio, rect[1] - minY * yRatio];
              }
              var Annotation = /* @__PURE__ */ function() {
                function Annotation2(params) {
                  _classCallCheck(this, Annotation2);
                  var dict = params.dict;
                  this.setTitle(dict.get("T"));
                  this.setContents(dict.get("Contents"));
                  this.setModificationDate(dict.get("M"));
                  this.setFlags(dict.get("F"));
                  this.setRectangle(dict.getArray("Rect"));
                  this.setColor(dict.getArray("C"));
                  this.setBorderStyle(dict);
                  this.setAppearance(dict);
                  this.setBorderAndBackgroundColors(dict.get("MK"));
                  this._streams = [];
                  if (this.appearance) {
                    this._streams.push(this.appearance);
                  }
                  this.data = {
                    annotationFlags: this.flags,
                    borderStyle: this.borderStyle,
                    color: this.color,
                    backgroundColor: this.backgroundColor,
                    borderColor: this.borderColor,
                    contentsObj: this._contents,
                    hasAppearance: !!this.appearance,
                    id: params.id,
                    modificationDate: this.modificationDate,
                    rect: this.rectangle,
                    subtype: params.subtype,
                    hasOwnCanvas: false
                  };
                  if (params.collectFields) {
                    var kids = dict.get("Kids");
                    if (Array.isArray(kids)) {
                      var kidIds = [];
                      var _iterator = _createForOfIteratorHelper(kids), _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                          var kid = _step.value;
                          if ((0, _primitives.isRef)(kid)) {
                            kidIds.push(kid.toString());
                          }
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                      if (kidIds.length !== 0) {
                        this.data.kidIds = kidIds;
                      }
                    }
                    this.data.actions = (0, _core_utils.collectActions)(params.xref, dict, _util.AnnotationActionEventType);
                    this.data.fieldName = this._constructFieldName(dict);
                    this.data.pageIndex = params.pageIndex;
                  }
                  this._fallbackFontDict = null;
                }
                _createClass(Annotation2, [{
                  key: "_hasFlag",
                  value: function _hasFlag(flags, flag) {
                    return !!(flags & flag);
                  }
                }, {
                  key: "_isViewable",
                  value: function _isViewable(flags) {
                    return !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, _util.AnnotationFlag.NOVIEW);
                  }
                }, {
                  key: "_isPrintable",
                  value: function _isPrintable(flags) {
                    return this._hasFlag(flags, _util.AnnotationFlag.PRINT) && !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE);
                  }
                }, {
                  key: "mustBeViewed",
                  value: function mustBeViewed(annotationStorage) {
                    var storageEntry = annotationStorage && annotationStorage.get(this.data.id);
                    if (storageEntry && storageEntry.hidden !== void 0) {
                      return !storageEntry.hidden;
                    }
                    return this.viewable && !this._hasFlag(this.flags, _util.AnnotationFlag.HIDDEN);
                  }
                }, {
                  key: "mustBePrinted",
                  value: function mustBePrinted(annotationStorage) {
                    var storageEntry = annotationStorage && annotationStorage.get(this.data.id);
                    if (storageEntry && storageEntry.print !== void 0) {
                      return storageEntry.print;
                    }
                    return this.printable;
                  }
                }, {
                  key: "viewable",
                  get: function get() {
                    if (this.data.quadPoints === null) {
                      return false;
                    }
                    if (this.flags === 0) {
                      return true;
                    }
                    return this._isViewable(this.flags);
                  }
                }, {
                  key: "printable",
                  get: function get() {
                    if (this.data.quadPoints === null) {
                      return false;
                    }
                    if (this.flags === 0) {
                      return false;
                    }
                    return this._isPrintable(this.flags);
                  }
                }, {
                  key: "_parseStringHelper",
                  value: function _parseStringHelper(data) {
                    var str = typeof data === "string" ? (0, _util.stringToPDFString)(data) : "";
                    var dir = str && (0, _bidi.bidi)(str).dir === "rtl" ? "rtl" : "ltr";
                    return {
                      str,
                      dir
                    };
                  }
                }, {
                  key: "setTitle",
                  value: function setTitle(title) {
                    this._title = this._parseStringHelper(title);
                  }
                }, {
                  key: "setContents",
                  value: function setContents(contents) {
                    this._contents = this._parseStringHelper(contents);
                  }
                }, {
                  key: "setModificationDate",
                  value: function setModificationDate(modificationDate) {
                    this.modificationDate = (0, _util.isString)(modificationDate) ? modificationDate : null;
                  }
                }, {
                  key: "setFlags",
                  value: function setFlags(flags) {
                    this.flags = Number.isInteger(flags) && flags > 0 ? flags : 0;
                  }
                }, {
                  key: "hasFlag",
                  value: function hasFlag(flag) {
                    return this._hasFlag(this.flags, flag);
                  }
                }, {
                  key: "setRectangle",
                  value: function setRectangle(rectangle) {
                    if (Array.isArray(rectangle) && rectangle.length === 4) {
                      this.rectangle = _util.Util.normalizeRect(rectangle);
                    } else {
                      this.rectangle = [0, 0, 0, 0];
                    }
                  }
                }, {
                  key: "setColor",
                  value: function setColor(color) {
                    this.color = getRgbColor(color);
                  }
                }, {
                  key: "setBorderAndBackgroundColors",
                  value: function setBorderAndBackgroundColors(mk) {
                    if (mk instanceof _primitives.Dict) {
                      this.borderColor = getRgbColor(mk.getArray("BC"), null);
                      this.backgroundColor = getRgbColor(mk.getArray("BG"), null);
                    } else {
                      this.borderColor = this.backgroundColor = null;
                    }
                  }
                }, {
                  key: "setBorderStyle",
                  value: function setBorderStyle(borderStyle) {
                    this.borderStyle = new AnnotationBorderStyle();
                    if (!(0, _primitives.isDict)(borderStyle)) {
                      return;
                    }
                    if (borderStyle.has("BS")) {
                      var dict = borderStyle.get("BS");
                      var dictType = dict.get("Type");
                      if (!dictType || (0, _primitives.isName)(dictType, "Border")) {
                        this.borderStyle.setWidth(dict.get("W"), this.rectangle);
                        this.borderStyle.setStyle(dict.get("S"));
                        this.borderStyle.setDashArray(dict.getArray("D"));
                      }
                    } else if (borderStyle.has("Border")) {
                      var array = borderStyle.getArray("Border");
                      if (Array.isArray(array) && array.length >= 3) {
                        this.borderStyle.setHorizontalCornerRadius(array[0]);
                        this.borderStyle.setVerticalCornerRadius(array[1]);
                        this.borderStyle.setWidth(array[2], this.rectangle);
                        if (array.length === 4) {
                          this.borderStyle.setDashArray(array[3], true);
                        }
                      }
                    } else {
                      this.borderStyle.setWidth(0);
                    }
                  }
                }, {
                  key: "setAppearance",
                  value: function setAppearance(dict) {
                    this.appearance = null;
                    var appearanceStates = dict.get("AP");
                    if (!(0, _primitives.isDict)(appearanceStates)) {
                      return;
                    }
                    var normalAppearanceState = appearanceStates.get("N");
                    if ((0, _primitives.isStream)(normalAppearanceState)) {
                      this.appearance = normalAppearanceState;
                      return;
                    }
                    if (!(0, _primitives.isDict)(normalAppearanceState)) {
                      return;
                    }
                    var as = dict.get("AS");
                    if (!(0, _primitives.isName)(as) || !normalAppearanceState.has(as.name)) {
                      return;
                    }
                    this.appearance = normalAppearanceState.get(as.name);
                  }
                }, {
                  key: "loadResources",
                  value: function loadResources(keys, appearance) {
                    return appearance.dict.getAsync("Resources").then(function(resources) {
                      if (!resources) {
                        return void 0;
                      }
                      var objectLoader = new _object_loader.ObjectLoader(resources, keys, resources.xref);
                      return objectLoader.load().then(function() {
                        return resources;
                      });
                    });
                  }
                }, {
                  key: "getOperatorList",
                  value: function getOperatorList(evaluator, task, intent, renderForms, annotationStorage) {
                    var _this2 = this;
                    var data = this.data;
                    var appearance = this.appearance;
                    var isUsingOwnCanvas = data.hasOwnCanvas && intent & _util.RenderingIntentFlag.DISPLAY;
                    if (!appearance) {
                      if (!isUsingOwnCanvas) {
                        return Promise.resolve(new _operator_list.OperatorList());
                      }
                      appearance = new _stream.StringStream("");
                      appearance.dict = new _primitives.Dict();
                    }
                    var appearanceDict = appearance.dict;
                    var resourcesPromise = this.loadResources(["ExtGState", "ColorSpace", "Pattern", "Shading", "XObject", "Font"], appearance);
                    var bbox = appearanceDict.getArray("BBox") || [0, 0, 1, 1];
                    var matrix = appearanceDict.getArray("Matrix") || [1, 0, 0, 1, 0, 0];
                    var transform = getTransformMatrix(data.rect, bbox, matrix);
                    return resourcesPromise.then(function(resources) {
                      var opList = new _operator_list.OperatorList();
                      opList.addOp(_util.OPS.beginAnnotation, [data.id, data.rect, transform, matrix, isUsingOwnCanvas]);
                      return evaluator.getOperatorList({
                        stream: appearance,
                        task,
                        resources,
                        operatorList: opList,
                        fallbackFontDict: _this2._fallbackFontDict
                      }).then(function() {
                        opList.addOp(_util.OPS.endAnnotation, []);
                        _this2.reset();
                        return opList;
                      });
                    });
                  }
                }, {
                  key: "save",
                  value: function() {
                    var _save = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee2(evaluator, task, annotationStorage) {
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              return _context2.abrupt("return", null);
                            case 1:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }));
                    function save(_x4, _x5, _x6) {
                      return _save.apply(this, arguments);
                    }
                    return save;
                  }()
                }, {
                  key: "getFieldObject",
                  value: function getFieldObject() {
                    if (this.data.kidIds) {
                      return {
                        id: this.data.id,
                        actions: this.data.actions,
                        name: this.data.fieldName,
                        strokeColor: this.data.borderColor,
                        fillColor: this.data.backgroundColor,
                        type: "",
                        kidIds: this.data.kidIds,
                        page: this.data.pageIndex
                      };
                    }
                    return null;
                  }
                }, {
                  key: "reset",
                  value: function reset() {
                    var _iterator2 = _createForOfIteratorHelper(this._streams), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var stream = _step2.value;
                        stream.reset();
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                  }
                }, {
                  key: "_constructFieldName",
                  value: function _constructFieldName(dict) {
                    if (!dict.has("T") && !dict.has("Parent")) {
                      (0, _util.warn)("Unknown field name, falling back to empty field name.");
                      return "";
                    }
                    if (!dict.has("Parent")) {
                      return (0, _util.stringToPDFString)(dict.get("T"));
                    }
                    var fieldName = [];
                    if (dict.has("T")) {
                      fieldName.unshift((0, _util.stringToPDFString)(dict.get("T")));
                    }
                    var loopDict = dict;
                    var visited = new _primitives.RefSet();
                    if (dict.objId) {
                      visited.put(dict.objId);
                    }
                    while (loopDict.has("Parent")) {
                      loopDict = loopDict.get("Parent");
                      if (!(loopDict instanceof _primitives.Dict) || loopDict.objId && visited.has(loopDict.objId)) {
                        break;
                      }
                      if (loopDict.objId) {
                        visited.put(loopDict.objId);
                      }
                      if (loopDict.has("T")) {
                        fieldName.unshift((0, _util.stringToPDFString)(loopDict.get("T")));
                      }
                    }
                    return fieldName.join(".");
                  }
                }]);
                return Annotation2;
              }();
              exports2.Annotation = Annotation;
              var AnnotationBorderStyle = /* @__PURE__ */ function() {
                function AnnotationBorderStyle2() {
                  _classCallCheck(this, AnnotationBorderStyle2);
                  this.width = 1;
                  this.style = _util.AnnotationBorderStyleType.SOLID;
                  this.dashArray = [3];
                  this.horizontalCornerRadius = 0;
                  this.verticalCornerRadius = 0;
                }
                _createClass(AnnotationBorderStyle2, [{
                  key: "setWidth",
                  value: function setWidth(width) {
                    var rect = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [0, 0, 0, 0];
                    if ((0, _primitives.isName)(width)) {
                      this.width = 0;
                      return;
                    }
                    if (Number.isInteger(width)) {
                      if (width > 0) {
                        var maxWidth = (rect[2] - rect[0]) / 2;
                        var maxHeight = (rect[3] - rect[1]) / 2;
                        if (maxWidth > 0 && maxHeight > 0 && (width > maxWidth || width > maxHeight)) {
                          (0, _util.warn)("AnnotationBorderStyle.setWidth - ignoring width: ".concat(width));
                          width = 1;
                        }
                      }
                      this.width = width;
                    }
                  }
                }, {
                  key: "setStyle",
                  value: function setStyle(style) {
                    if (!(0, _primitives.isName)(style)) {
                      return;
                    }
                    switch (style.name) {
                      case "S":
                        this.style = _util.AnnotationBorderStyleType.SOLID;
                        break;
                      case "D":
                        this.style = _util.AnnotationBorderStyleType.DASHED;
                        break;
                      case "B":
                        this.style = _util.AnnotationBorderStyleType.BEVELED;
                        break;
                      case "I":
                        this.style = _util.AnnotationBorderStyleType.INSET;
                        break;
                      case "U":
                        this.style = _util.AnnotationBorderStyleType.UNDERLINE;
                        break;
                      default:
                        break;
                    }
                  }
                }, {
                  key: "setDashArray",
                  value: function setDashArray(dashArray) {
                    var forceStyle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    if (Array.isArray(dashArray) && dashArray.length > 0) {
                      var isValid = true;
                      var allZeros = true;
                      var _iterator3 = _createForOfIteratorHelper(dashArray), _step3;
                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                          var element = _step3.value;
                          var validNumber = +element >= 0;
                          if (!validNumber) {
                            isValid = false;
                            break;
                          } else if (element > 0) {
                            allZeros = false;
                          }
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                      if (isValid && !allZeros) {
                        this.dashArray = dashArray;
                        if (forceStyle) {
                          this.setStyle(_primitives.Name.get("D"));
                        }
                      } else {
                        this.width = 0;
                      }
                    } else if (dashArray) {
                      this.width = 0;
                    }
                  }
                }, {
                  key: "setHorizontalCornerRadius",
                  value: function setHorizontalCornerRadius(radius) {
                    if (Number.isInteger(radius)) {
                      this.horizontalCornerRadius = radius;
                    }
                  }
                }, {
                  key: "setVerticalCornerRadius",
                  value: function setVerticalCornerRadius(radius) {
                    if (Number.isInteger(radius)) {
                      this.verticalCornerRadius = radius;
                    }
                  }
                }]);
                return AnnotationBorderStyle2;
              }();
              exports2.AnnotationBorderStyle = AnnotationBorderStyle;
              var MarkupAnnotation = /* @__PURE__ */ function(_Annotation) {
                _inherits(MarkupAnnotation2, _Annotation);
                var _super = _createSuper(MarkupAnnotation2);
                function MarkupAnnotation2(parameters) {
                  var _this3;
                  _classCallCheck(this, MarkupAnnotation2);
                  _this3 = _super.call(this, parameters);
                  var dict = parameters.dict;
                  if (dict.has("IRT")) {
                    var rawIRT = dict.getRaw("IRT");
                    _this3.data.inReplyTo = (0, _primitives.isRef)(rawIRT) ? rawIRT.toString() : null;
                    var rt = dict.get("RT");
                    _this3.data.replyType = (0, _primitives.isName)(rt) ? rt.name : _util.AnnotationReplyType.REPLY;
                  }
                  if (_this3.data.replyType === _util.AnnotationReplyType.GROUP) {
                    var parent = dict.get("IRT");
                    _this3.setTitle(parent.get("T"));
                    _this3.data.titleObj = _this3._title;
                    _this3.setContents(parent.get("Contents"));
                    _this3.data.contentsObj = _this3._contents;
                    if (!parent.has("CreationDate")) {
                      _this3.data.creationDate = null;
                    } else {
                      _this3.setCreationDate(parent.get("CreationDate"));
                      _this3.data.creationDate = _this3.creationDate;
                    }
                    if (!parent.has("M")) {
                      _this3.data.modificationDate = null;
                    } else {
                      _this3.setModificationDate(parent.get("M"));
                      _this3.data.modificationDate = _this3.modificationDate;
                    }
                    _this3.data.hasPopup = parent.has("Popup");
                    if (!parent.has("C")) {
                      _this3.data.color = null;
                    } else {
                      _this3.setColor(parent.getArray("C"));
                      _this3.data.color = _this3.color;
                    }
                  } else {
                    _this3.data.titleObj = _this3._title;
                    _this3.setCreationDate(dict.get("CreationDate"));
                    _this3.data.creationDate = _this3.creationDate;
                    _this3.data.hasPopup = dict.has("Popup");
                    if (!dict.has("C")) {
                      _this3.data.color = null;
                    }
                  }
                  if (dict.has("RC")) {
                    _this3.data.richText = _factory.XFAFactory.getRichTextAsHtml(dict.get("RC"));
                  }
                  return _this3;
                }
                _createClass(MarkupAnnotation2, [{
                  key: "setCreationDate",
                  value: function setCreationDate(creationDate) {
                    this.creationDate = (0, _util.isString)(creationDate) ? creationDate : null;
                  }
                }, {
                  key: "_setDefaultAppearance",
                  value: function _setDefaultAppearance(_ref5) {
                    var xref = _ref5.xref, extra = _ref5.extra, strokeColor = _ref5.strokeColor, fillColor = _ref5.fillColor, blendMode = _ref5.blendMode, strokeAlpha = _ref5.strokeAlpha, fillAlpha = _ref5.fillAlpha, pointsCallback = _ref5.pointsCallback;
                    var minX = Number.MAX_VALUE;
                    var minY = Number.MAX_VALUE;
                    var maxX = Number.MIN_VALUE;
                    var maxY = Number.MIN_VALUE;
                    var buffer = ["q"];
                    if (extra) {
                      buffer.push(extra);
                    }
                    if (strokeColor) {
                      buffer.push("".concat(strokeColor[0], " ").concat(strokeColor[1], " ").concat(strokeColor[2], " RG"));
                    }
                    if (fillColor) {
                      buffer.push("".concat(fillColor[0], " ").concat(fillColor[1], " ").concat(fillColor[2], " rg"));
                    }
                    var pointsArray = this.data.quadPoints;
                    if (!pointsArray) {
                      pointsArray = [[{
                        x: this.rectangle[0],
                        y: this.rectangle[3]
                      }, {
                        x: this.rectangle[2],
                        y: this.rectangle[3]
                      }, {
                        x: this.rectangle[0],
                        y: this.rectangle[1]
                      }, {
                        x: this.rectangle[2],
                        y: this.rectangle[1]
                      }]];
                    }
                    var _iterator4 = _createForOfIteratorHelper(pointsArray), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var points = _step4.value;
                        var _pointsCallback = pointsCallback(buffer, points), _pointsCallback2 = _slicedToArray(_pointsCallback, 4), mX = _pointsCallback2[0], MX = _pointsCallback2[1], mY = _pointsCallback2[2], MY = _pointsCallback2[3];
                        minX = Math.min(minX, mX);
                        maxX = Math.max(maxX, MX);
                        minY = Math.min(minY, mY);
                        maxY = Math.max(maxY, MY);
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                    buffer.push("Q");
                    var formDict = new _primitives.Dict(xref);
                    var appearanceStreamDict = new _primitives.Dict(xref);
                    appearanceStreamDict.set("Subtype", _primitives.Name.get("Form"));
                    var appearanceStream = new _stream.StringStream(buffer.join(" "));
                    appearanceStream.dict = appearanceStreamDict;
                    formDict.set("Fm0", appearanceStream);
                    var gsDict = new _primitives.Dict(xref);
                    if (blendMode) {
                      gsDict.set("BM", _primitives.Name.get(blendMode));
                    }
                    if (typeof strokeAlpha === "number") {
                      gsDict.set("CA", strokeAlpha);
                    }
                    if (typeof fillAlpha === "number") {
                      gsDict.set("ca", fillAlpha);
                    }
                    var stateDict = new _primitives.Dict(xref);
                    stateDict.set("GS0", gsDict);
                    var resources = new _primitives.Dict(xref);
                    resources.set("ExtGState", stateDict);
                    resources.set("XObject", formDict);
                    var appearanceDict = new _primitives.Dict(xref);
                    appearanceDict.set("Resources", resources);
                    var bbox = this.data.rect = [minX, minY, maxX, maxY];
                    appearanceDict.set("BBox", bbox);
                    this.appearance = new _stream.StringStream("/GS0 gs /Fm0 Do");
                    this.appearance.dict = appearanceDict;
                    this._streams.push(this.appearance, appearanceStream);
                  }
                }]);
                return MarkupAnnotation2;
              }(Annotation);
              exports2.MarkupAnnotation = MarkupAnnotation;
              var WidgetAnnotation = /* @__PURE__ */ function(_Annotation2) {
                _inherits(WidgetAnnotation2, _Annotation2);
                var _super2 = _createSuper(WidgetAnnotation2);
                function WidgetAnnotation2(params) {
                  var _this4;
                  _classCallCheck(this, WidgetAnnotation2);
                  _this4 = _super2.call(this, params);
                  var dict = params.dict;
                  var data = _this4.data;
                  _this4.ref = params.ref;
                  data.annotationType = _util.AnnotationType.WIDGET;
                  if (data.fieldName === void 0) {
                    data.fieldName = _this4._constructFieldName(dict);
                  }
                  if (data.actions === void 0) {
                    data.actions = (0, _core_utils.collectActions)(params.xref, dict, _util.AnnotationActionEventType);
                  }
                  var fieldValue = (0, _core_utils.getInheritableProperty)({
                    dict,
                    key: "V",
                    getArray: true
                  });
                  data.fieldValue = _this4._decodeFormValue(fieldValue);
                  var defaultFieldValue = (0, _core_utils.getInheritableProperty)({
                    dict,
                    key: "DV",
                    getArray: true
                  });
                  data.defaultFieldValue = _this4._decodeFormValue(defaultFieldValue);
                  if (fieldValue === void 0 && data.defaultFieldValue !== null) {
                    data.fieldValue = data.defaultFieldValue;
                  }
                  data.alternativeText = (0, _util.stringToPDFString)(dict.get("TU") || "");
                  var defaultAppearance = (0, _core_utils.getInheritableProperty)({
                    dict,
                    key: "DA"
                  }) || params.acroForm.get("DA");
                  _this4._defaultAppearance = (0, _util.isString)(defaultAppearance) ? defaultAppearance : "";
                  data.defaultAppearanceData = (0, _default_appearance.parseDefaultAppearance)(_this4._defaultAppearance);
                  var fieldType = (0, _core_utils.getInheritableProperty)({
                    dict,
                    key: "FT"
                  });
                  data.fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;
                  var localResources = (0, _core_utils.getInheritableProperty)({
                    dict,
                    key: "DR"
                  });
                  var acroFormResources = params.acroForm.get("DR");
                  var appearanceResources = _this4.appearance && _this4.appearance.dict.get("Resources");
                  _this4._fieldResources = {
                    localResources,
                    acroFormResources,
                    appearanceResources,
                    mergedResources: _primitives.Dict.merge({
                      xref: params.xref,
                      dictArray: [localResources, appearanceResources, acroFormResources],
                      mergeSubDicts: true
                    })
                  };
                  data.fieldFlags = (0, _core_utils.getInheritableProperty)({
                    dict,
                    key: "Ff"
                  });
                  if (!Number.isInteger(data.fieldFlags) || data.fieldFlags < 0) {
                    data.fieldFlags = 0;
                  }
                  data.readOnly = _this4.hasFieldFlag(_util.AnnotationFieldFlag.READONLY);
                  data.hidden = _this4._hasFlag(data.annotationFlags, _util.AnnotationFlag.HIDDEN);
                  return _this4;
                }
                _createClass(WidgetAnnotation2, [{
                  key: "_decodeFormValue",
                  value: function _decodeFormValue(formValue) {
                    if (Array.isArray(formValue)) {
                      return formValue.filter(function(item) {
                        return (0, _util.isString)(item);
                      }).map(function(item) {
                        return (0, _util.stringToPDFString)(item);
                      });
                    } else if ((0, _primitives.isName)(formValue)) {
                      return (0, _util.stringToPDFString)(formValue.name);
                    } else if ((0, _util.isString)(formValue)) {
                      return (0, _util.stringToPDFString)(formValue);
                    }
                    return null;
                  }
                }, {
                  key: "hasFieldFlag",
                  value: function hasFieldFlag(flag) {
                    return !!(this.data.fieldFlags & flag);
                  }
                }, {
                  key: "getOperatorList",
                  value: function getOperatorList(evaluator, task, intent, renderForms, annotationStorage) {
                    var _this5 = this;
                    if (renderForms && !(this instanceof SignatureWidgetAnnotation)) {
                      return Promise.resolve(new _operator_list.OperatorList());
                    }
                    if (!this._hasText) {
                      return _get(_getPrototypeOf(WidgetAnnotation2.prototype), "getOperatorList", this).call(this, evaluator, task, intent, renderForms, annotationStorage);
                    }
                    return this._getAppearance(evaluator, task, annotationStorage).then(function(content) {
                      if (_this5.appearance && content === null) {
                        return _get(_getPrototypeOf(WidgetAnnotation2.prototype), "getOperatorList", _this5).call(_this5, evaluator, task, intent, renderForms, annotationStorage);
                      }
                      var operatorList = new _operator_list.OperatorList();
                      if (!_this5._defaultAppearance || content === null) {
                        return operatorList;
                      }
                      var matrix = [1, 0, 0, 1, 0, 0];
                      var bbox = [0, 0, _this5.data.rect[2] - _this5.data.rect[0], _this5.data.rect[3] - _this5.data.rect[1]];
                      var transform = getTransformMatrix(_this5.data.rect, bbox, matrix);
                      operatorList.addOp(_util.OPS.beginAnnotation, [_this5.data.id, _this5.data.rect, transform, matrix]);
                      var stream = new _stream.StringStream(content);
                      return evaluator.getOperatorList({
                        stream,
                        task,
                        resources: _this5._fieldResources.mergedResources,
                        operatorList
                      }).then(function() {
                        operatorList.addOp(_util.OPS.endAnnotation, []);
                        return operatorList;
                      });
                    });
                  }
                }, {
                  key: "save",
                  value: function() {
                    var _save2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee3(evaluator, task, annotationStorage) {
                      var storageEntry, value, appearance, xref, dict, bbox, xfa, newRef, AP, encrypt, originalTransform, newTransform, appearanceDict, bufferOriginal, bufferNew;
                      return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              if (annotationStorage) {
                                _context3.next = 2;
                                break;
                              }
                              return _context3.abrupt("return", null);
                            case 2:
                              storageEntry = annotationStorage.get(this.data.id);
                              value = storageEntry && storageEntry.value;
                              if (!(value === this.data.fieldValue || value === void 0)) {
                                _context3.next = 6;
                                break;
                              }
                              return _context3.abrupt("return", null);
                            case 6:
                              _context3.next = 8;
                              return this._getAppearance(evaluator, task, annotationStorage);
                            case 8:
                              appearance = _context3.sent;
                              if (!(appearance === null)) {
                                _context3.next = 11;
                                break;
                              }
                              return _context3.abrupt("return", null);
                            case 11:
                              xref = evaluator.xref;
                              dict = xref.fetchIfRef(this.ref);
                              if ((0, _primitives.isDict)(dict)) {
                                _context3.next = 15;
                                break;
                              }
                              return _context3.abrupt("return", null);
                            case 15:
                              bbox = [0, 0, this.data.rect[2] - this.data.rect[0], this.data.rect[3] - this.data.rect[1]];
                              xfa = {
                                path: (0, _util.stringToPDFString)(dict.get("T") || ""),
                                value
                              };
                              newRef = xref.getNewRef();
                              AP = new _primitives.Dict(xref);
                              AP.set("N", newRef);
                              encrypt = xref.encrypt;
                              originalTransform = null;
                              newTransform = null;
                              if (encrypt) {
                                originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);
                                newTransform = encrypt.createCipherTransform(newRef.num, newRef.gen);
                                appearance = newTransform.encryptString(appearance);
                              }
                              dict.set("V", (0, _util.isAscii)(value) ? value : (0, _util.stringToUTF16BEString)(value));
                              dict.set("AP", AP);
                              dict.set("M", "D:".concat((0, _util.getModificationDate)()));
                              appearanceDict = new _primitives.Dict(xref);
                              appearanceDict.set("Length", appearance.length);
                              appearanceDict.set("Subtype", _primitives.Name.get("Form"));
                              appearanceDict.set("Resources", this._getSaveFieldResources(xref));
                              appearanceDict.set("BBox", bbox);
                              bufferOriginal = ["".concat(this.ref.num, " ").concat(this.ref.gen, " obj\n")];
                              (0, _writer.writeDict)(dict, bufferOriginal, originalTransform);
                              bufferOriginal.push("\nendobj\n");
                              bufferNew = ["".concat(newRef.num, " ").concat(newRef.gen, " obj\n")];
                              (0, _writer.writeDict)(appearanceDict, bufferNew, newTransform);
                              bufferNew.push(" stream\n", appearance, "\nendstream\nendobj\n");
                              return _context3.abrupt("return", [{
                                ref: this.ref,
                                data: bufferOriginal.join(""),
                                xfa
                              }, {
                                ref: newRef,
                                data: bufferNew.join(""),
                                xfa: null
                              }]);
                            case 39:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3, this);
                    }));
                    function save(_x7, _x8, _x9) {
                      return _save2.apply(this, arguments);
                    }
                    return save;
                  }()
                }, {
                  key: "_getAppearance",
                  value: function() {
                    var _getAppearance2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee4(evaluator, task, annotationStorage) {
                      var isPassword, storageEntry, value, lineCount, defaultPadding, hPadding, totalHeight, totalWidth, _this$_computeFontSiz, _this$_computeFontSiz2, defaultAppearance, fontSize, font, descent, vPadding, alignment, encodedString, renderedText;
                      return _regenerator["default"].wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              isPassword = this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD);
                              if (!(!annotationStorage || isPassword)) {
                                _context4.next = 3;
                                break;
                              }
                              return _context4.abrupt("return", null);
                            case 3:
                              storageEntry = annotationStorage.get(this.data.id);
                              value = storageEntry && storageEntry.value;
                              if (!(value === void 0)) {
                                _context4.next = 7;
                                break;
                              }
                              return _context4.abrupt("return", null);
                            case 7:
                              value = value.trim();
                              if (!(value === "")) {
                                _context4.next = 10;
                                break;
                              }
                              return _context4.abrupt("return", "");
                            case 10:
                              lineCount = -1;
                              if (this.data.multiLine) {
                                lineCount = value.split(/\r\n|\r|\n/).length;
                              }
                              defaultPadding = 2;
                              hPadding = defaultPadding;
                              totalHeight = this.data.rect[3] - this.data.rect[1];
                              totalWidth = this.data.rect[2] - this.data.rect[0];
                              if (!this._defaultAppearance) {
                                this.data.defaultAppearanceData = (0, _default_appearance.parseDefaultAppearance)(this._defaultAppearance = "/Helvetica 0 Tf 0 g");
                              }
                              _this$_computeFontSiz = this._computeFontSize(totalHeight, lineCount), _this$_computeFontSiz2 = _slicedToArray(_this$_computeFontSiz, 2), defaultAppearance = _this$_computeFontSiz2[0], fontSize = _this$_computeFontSiz2[1];
                              _context4.next = 20;
                              return this._getFontData(evaluator, task);
                            case 20:
                              font = _context4.sent;
                              descent = font.descent;
                              if (isNaN(descent)) {
                                descent = 0;
                              }
                              vPadding = defaultPadding + Math.abs(descent) * fontSize;
                              alignment = this.data.textAlignment;
                              if (!this.data.multiLine) {
                                _context4.next = 27;
                                break;
                              }
                              return _context4.abrupt("return", this._getMultilineAppearance(defaultAppearance, value, font, fontSize, totalWidth, totalHeight, alignment, hPadding, vPadding));
                            case 27:
                              encodedString = font.encodeString(value).join("");
                              if (!this.data.comb) {
                                _context4.next = 30;
                                break;
                              }
                              return _context4.abrupt("return", this._getCombAppearance(defaultAppearance, font, encodedString, totalWidth, hPadding, vPadding));
                            case 30:
                              if (!(alignment === 0 || alignment > 2)) {
                                _context4.next = 32;
                                break;
                              }
                              return _context4.abrupt("return", "/Tx BMC q BT " + defaultAppearance + " 1 0 0 1 ".concat(hPadding, " ").concat(vPadding, " Tm (").concat((0, _util.escapeString)(encodedString), ") Tj") + " ET Q EMC");
                            case 32:
                              renderedText = this._renderText(encodedString, font, fontSize, totalWidth, alignment, hPadding, vPadding);
                              return _context4.abrupt("return", "/Tx BMC q BT " + defaultAppearance + " 1 0 0 1 0 0 Tm ".concat(renderedText) + " ET Q EMC");
                            case 34:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4, this);
                    }));
                    function _getAppearance(_x10, _x11, _x12) {
                      return _getAppearance2.apply(this, arguments);
                    }
                    return _getAppearance;
                  }()
                }, {
                  key: "_getFontData",
                  value: function() {
                    var _getFontData2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee5(evaluator, task) {
                      var operatorList, initialState, _this$data$defaultApp, fontName, fontSize;
                      return _regenerator["default"].wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              operatorList = new _operator_list.OperatorList();
                              initialState = {
                                font: null,
                                clone: function clone() {
                                  return this;
                                }
                              };
                              _this$data$defaultApp = this.data.defaultAppearanceData, fontName = _this$data$defaultApp.fontName, fontSize = _this$data$defaultApp.fontSize;
                              _context5.next = 5;
                              return evaluator.handleSetFont(this._fieldResources.mergedResources, [fontName && _primitives.Name.get(fontName), fontSize], null, operatorList, task, initialState, null);
                            case 5:
                              return _context5.abrupt("return", initialState.font);
                            case 6:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      }, _callee5, this);
                    }));
                    function _getFontData(_x13, _x14) {
                      return _getFontData2.apply(this, arguments);
                    }
                    return _getFontData;
                  }()
                }, {
                  key: "_computeFontSize",
                  value: function _computeFontSize(height, lineCount) {
                    var fontSize = this.data.defaultAppearanceData.fontSize;
                    if (!fontSize) {
                      var roundWithOneDigit = function roundWithOneDigit2(x) {
                        return Math.round(x * 10) / 10;
                      };
                      var FONT_FACTOR = 0.8;
                      if (lineCount === -1) {
                        fontSize = roundWithOneDigit(FONT_FACTOR * height);
                      } else {
                        fontSize = 10;
                        var lineHeight = fontSize / FONT_FACTOR;
                        var numberOfLines = Math.round(height / lineHeight);
                        numberOfLines = Math.max(numberOfLines, lineCount);
                        lineHeight = height / numberOfLines;
                        fontSize = roundWithOneDigit(FONT_FACTOR * lineHeight);
                      }
                      var _this$data$defaultApp2 = this.data.defaultAppearanceData, fontName = _this$data$defaultApp2.fontName, fontColor = _this$data$defaultApp2.fontColor;
                      this._defaultAppearance = (0, _default_appearance.createDefaultAppearance)({
                        fontSize,
                        fontName,
                        fontColor
                      });
                    }
                    return [this._defaultAppearance, fontSize];
                  }
                }, {
                  key: "_renderText",
                  value: function _renderText(text, font, fontSize, totalWidth, alignment, hPadding, vPadding) {
                    var glyphs = font.charsToGlyphs(text);
                    var scale = fontSize / 1e3;
                    var width = 0;
                    var _iterator5 = _createForOfIteratorHelper(glyphs), _step5;
                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                        var glyph = _step5.value;
                        width += glyph.width * scale;
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                    var shift;
                    if (alignment === 1) {
                      shift = (totalWidth - width) / 2;
                    } else if (alignment === 2) {
                      shift = totalWidth - width - hPadding;
                    } else {
                      shift = hPadding;
                    }
                    shift = shift.toFixed(2);
                    vPadding = vPadding.toFixed(2);
                    return "".concat(shift, " ").concat(vPadding, " Td (").concat((0, _util.escapeString)(text), ") Tj");
                  }
                }, {
                  key: "_getSaveFieldResources",
                  value: function _getSaveFieldResources(xref) {
                    var _this$_fieldResources = this._fieldResources, localResources = _this$_fieldResources.localResources, appearanceResources = _this$_fieldResources.appearanceResources, acroFormResources = _this$_fieldResources.acroFormResources;
                    var fontName = this.data.defaultAppearanceData && this.data.defaultAppearanceData.fontName;
                    if (!fontName) {
                      return localResources || _primitives.Dict.empty;
                    }
                    for (var _i2 = 0, _arr2 = [localResources, appearanceResources]; _i2 < _arr2.length; _i2++) {
                      var resources = _arr2[_i2];
                      if (resources instanceof _primitives.Dict) {
                        var localFont = resources.get("Font");
                        if (localFont instanceof _primitives.Dict && localFont.has(fontName)) {
                          return resources;
                        }
                      }
                    }
                    if (acroFormResources instanceof _primitives.Dict) {
                      var acroFormFont = acroFormResources.get("Font");
                      if (acroFormFont instanceof _primitives.Dict && acroFormFont.has(fontName)) {
                        var subFontDict = new _primitives.Dict(xref);
                        subFontDict.set(fontName, acroFormFont.getRaw(fontName));
                        var subResourcesDict = new _primitives.Dict(xref);
                        subResourcesDict.set("Font", subFontDict);
                        return _primitives.Dict.merge({
                          xref,
                          dictArray: [subResourcesDict, localResources],
                          mergeSubDicts: true
                        });
                      }
                    }
                    return localResources || _primitives.Dict.empty;
                  }
                }, {
                  key: "getFieldObject",
                  value: function getFieldObject() {
                    return null;
                  }
                }]);
                return WidgetAnnotation2;
              }(Annotation);
              var TextWidgetAnnotation = /* @__PURE__ */ function(_WidgetAnnotation) {
                _inherits(TextWidgetAnnotation2, _WidgetAnnotation);
                var _super3 = _createSuper(TextWidgetAnnotation2);
                function TextWidgetAnnotation2(params) {
                  var _this6;
                  _classCallCheck(this, TextWidgetAnnotation2);
                  _this6 = _super3.call(this, params);
                  _this6._hasText = true;
                  var dict = params.dict;
                  if (!(0, _util.isString)(_this6.data.fieldValue)) {
                    _this6.data.fieldValue = "";
                  }
                  var alignment = (0, _core_utils.getInheritableProperty)({
                    dict,
                    key: "Q"
                  });
                  if (!Number.isInteger(alignment) || alignment < 0 || alignment > 2) {
                    alignment = null;
                  }
                  _this6.data.textAlignment = alignment;
                  var maximumLength = (0, _core_utils.getInheritableProperty)({
                    dict,
                    key: "MaxLen"
                  });
                  if (!Number.isInteger(maximumLength) || maximumLength < 0) {
                    maximumLength = null;
                  }
                  _this6.data.maxLen = maximumLength;
                  _this6.data.multiLine = _this6.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE);
                  _this6.data.comb = _this6.hasFieldFlag(_util.AnnotationFieldFlag.COMB) && !_this6.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE) && !_this6.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD) && !_this6.hasFieldFlag(_util.AnnotationFieldFlag.FILESELECT) && _this6.data.maxLen !== null;
                  return _this6;
                }
                _createClass(TextWidgetAnnotation2, [{
                  key: "_getCombAppearance",
                  value: function _getCombAppearance(defaultAppearance, font, text, width, hPadding, vPadding) {
                    var combWidth = (width / this.data.maxLen).toFixed(2);
                    var buf = [];
                    var positions = font.getCharPositions(text);
                    var _iterator6 = _createForOfIteratorHelper(positions), _step6;
                    try {
                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                        var _step6$value = _slicedToArray(_step6.value, 2), start = _step6$value[0], end = _step6$value[1];
                        buf.push("(".concat((0, _util.escapeString)(text.substring(start, end)), ") Tj"));
                      }
                    } catch (err) {
                      _iterator6.e(err);
                    } finally {
                      _iterator6.f();
                    }
                    var renderedComb = buf.join(" ".concat(combWidth, " 0 Td "));
                    return "/Tx BMC q BT " + defaultAppearance + " 1 0 0 1 ".concat(hPadding, " ").concat(vPadding, " Tm ").concat(renderedComb) + " ET Q EMC";
                  }
                }, {
                  key: "_getMultilineAppearance",
                  value: function _getMultilineAppearance(defaultAppearance, text, font, fontSize, width, height, alignment, hPadding, vPadding) {
                    var lines = text.split(/\r\n|\r|\n/);
                    var buf = [];
                    var totalWidth = width - 2 * hPadding;
                    var _iterator7 = _createForOfIteratorHelper(lines), _step7;
                    try {
                      for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                        var line = _step7.value;
                        var chunks = this._splitLine(line, font, fontSize, totalWidth);
                        var _iterator8 = _createForOfIteratorHelper(chunks), _step8;
                        try {
                          for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                            var chunk = _step8.value;
                            var padding = buf.length === 0 ? hPadding : 0;
                            buf.push(this._renderText(chunk, font, fontSize, width, alignment, padding, -fontSize));
                          }
                        } catch (err) {
                          _iterator8.e(err);
                        } finally {
                          _iterator8.f();
                        }
                      }
                    } catch (err) {
                      _iterator7.e(err);
                    } finally {
                      _iterator7.f();
                    }
                    var renderedText = buf.join("\n");
                    return "/Tx BMC q BT " + defaultAppearance + " 1 0 0 1 0 ".concat(height, " Tm ").concat(renderedText) + " ET Q EMC";
                  }
                }, {
                  key: "_splitLine",
                  value: function _splitLine(line, font, fontSize, width) {
                    line = font.encodeString(line).join("");
                    var glyphs = font.charsToGlyphs(line);
                    if (glyphs.length <= 1) {
                      return [line];
                    }
                    var positions = font.getCharPositions(line);
                    var scale = fontSize / 1e3;
                    var chunks = [];
                    var lastSpacePosInStringStart = -1, lastSpacePosInStringEnd = -1, lastSpacePos = -1, startChunk = 0, currentWidth = 0;
                    for (var i = 0, ii = glyphs.length; i < ii; i++) {
                      var _positions$i = _slicedToArray(positions[i], 2), start = _positions$i[0], end = _positions$i[1];
                      var glyph = glyphs[i];
                      var glyphWidth = glyph.width * scale;
                      if (glyph.unicode === " ") {
                        if (currentWidth + glyphWidth > width) {
                          chunks.push(line.substring(startChunk, start));
                          startChunk = start;
                          currentWidth = glyphWidth;
                          lastSpacePosInStringStart = -1;
                          lastSpacePos = -1;
                        } else {
                          currentWidth += glyphWidth;
                          lastSpacePosInStringStart = start;
                          lastSpacePosInStringEnd = end;
                          lastSpacePos = i;
                        }
                      } else {
                        if (currentWidth + glyphWidth > width) {
                          if (lastSpacePosInStringStart !== -1) {
                            chunks.push(line.substring(startChunk, lastSpacePosInStringEnd));
                            startChunk = lastSpacePosInStringEnd;
                            i = lastSpacePos + 1;
                            lastSpacePosInStringStart = -1;
                            currentWidth = 0;
                          } else {
                            chunks.push(line.substring(startChunk, start));
                            startChunk = start;
                            currentWidth = glyphWidth;
                          }
                        } else {
                          currentWidth += glyphWidth;
                        }
                      }
                    }
                    if (startChunk < line.length) {
                      chunks.push(line.substring(startChunk, line.length));
                    }
                    return chunks;
                  }
                }, {
                  key: "getFieldObject",
                  value: function getFieldObject() {
                    return {
                      id: this.data.id,
                      value: this.data.fieldValue,
                      defaultValue: this.data.defaultFieldValue,
                      multiline: this.data.multiLine,
                      password: this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD),
                      charLimit: this.data.maxLen,
                      comb: this.data.comb,
                      editable: !this.data.readOnly,
                      hidden: this.data.hidden,
                      name: this.data.fieldName,
                      rect: this.data.rect,
                      actions: this.data.actions,
                      page: this.data.pageIndex,
                      strokeColor: this.data.borderColor,
                      fillColor: this.data.backgroundColor,
                      type: "text"
                    };
                  }
                }]);
                return TextWidgetAnnotation2;
              }(WidgetAnnotation);
              var ButtonWidgetAnnotation = /* @__PURE__ */ function(_WidgetAnnotation2) {
                _inherits(ButtonWidgetAnnotation2, _WidgetAnnotation2);
                var _super4 = _createSuper(ButtonWidgetAnnotation2);
                function ButtonWidgetAnnotation2(params) {
                  var _this7;
                  _classCallCheck(this, ButtonWidgetAnnotation2);
                  _this7 = _super4.call(this, params);
                  _this7.checkedAppearance = null;
                  _this7.uncheckedAppearance = null;
                  _this7.data.checkBox = !_this7.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !_this7.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);
                  _this7.data.radioButton = _this7.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !_this7.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);
                  _this7.data.pushButton = _this7.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);
                  _this7.data.isTooltipOnly = false;
                  if (_this7.data.checkBox) {
                    _this7._processCheckBox(params);
                  } else if (_this7.data.radioButton) {
                    _this7._processRadioButton(params);
                  } else if (_this7.data.pushButton) {
                    _this7.data.hasOwnCanvas = true;
                    _this7._processPushButton(params);
                  } else {
                    (0, _util.warn)("Invalid field flags for button widget annotation");
                  }
                  return _this7;
                }
                _createClass(ButtonWidgetAnnotation2, [{
                  key: "getOperatorList",
                  value: function() {
                    var _getOperatorList = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee6(evaluator, task, intent, renderForms, annotationStorage) {
                      var value, storageEntry, appearance, savedAppearance, operatorList;
                      return _regenerator["default"].wrap(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              if (!this.data.pushButton) {
                                _context6.next = 2;
                                break;
                              }
                              return _context6.abrupt("return", _get(_getPrototypeOf(ButtonWidgetAnnotation2.prototype), "getOperatorList", this).call(this, evaluator, task, intent, false, annotationStorage));
                            case 2:
                              value = null;
                              if (annotationStorage) {
                                storageEntry = annotationStorage.get(this.data.id);
                                value = storageEntry ? storageEntry.value : null;
                              }
                              if (!(value === null)) {
                                _context6.next = 8;
                                break;
                              }
                              if (!this.appearance) {
                                _context6.next = 7;
                                break;
                              }
                              return _context6.abrupt("return", _get(_getPrototypeOf(ButtonWidgetAnnotation2.prototype), "getOperatorList", this).call(this, evaluator, task, intent, renderForms, annotationStorage));
                            case 7:
                              if (this.data.checkBox) {
                                value = this.data.fieldValue === this.data.exportValue;
                              } else {
                                value = this.data.fieldValue === this.data.buttonValue;
                              }
                            case 8:
                              appearance = value ? this.checkedAppearance : this.uncheckedAppearance;
                              if (!appearance) {
                                _context6.next = 15;
                                break;
                              }
                              savedAppearance = this.appearance;
                              this.appearance = appearance;
                              operatorList = _get(_getPrototypeOf(ButtonWidgetAnnotation2.prototype), "getOperatorList", this).call(this, evaluator, task, intent, renderForms, annotationStorage);
                              this.appearance = savedAppearance;
                              return _context6.abrupt("return", operatorList);
                            case 15:
                              return _context6.abrupt("return", new _operator_list.OperatorList());
                            case 16:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      }, _callee6, this);
                    }));
                    function getOperatorList(_x15, _x16, _x17, _x18, _x19) {
                      return _getOperatorList.apply(this, arguments);
                    }
                    return getOperatorList;
                  }()
                }, {
                  key: "save",
                  value: function() {
                    var _save3 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee7(evaluator, task, annotationStorage) {
                      return _regenerator["default"].wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              if (!this.data.checkBox) {
                                _context7.next = 2;
                                break;
                              }
                              return _context7.abrupt("return", this._saveCheckbox(evaluator, task, annotationStorage));
                            case 2:
                              if (!this.data.radioButton) {
                                _context7.next = 4;
                                break;
                              }
                              return _context7.abrupt("return", this._saveRadioButton(evaluator, task, annotationStorage));
                            case 4:
                              return _context7.abrupt("return", null);
                            case 5:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7, this);
                    }));
                    function save(_x20, _x21, _x22) {
                      return _save3.apply(this, arguments);
                    }
                    return save;
                  }()
                }, {
                  key: "_saveCheckbox",
                  value: function() {
                    var _saveCheckbox2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee8(evaluator, task, annotationStorage) {
                      var storageEntry, value, defaultValue, dict, xfa, name, encrypt, originalTransform, buffer;
                      return _regenerator["default"].wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              if (annotationStorage) {
                                _context8.next = 2;
                                break;
                              }
                              return _context8.abrupt("return", null);
                            case 2:
                              storageEntry = annotationStorage.get(this.data.id);
                              value = storageEntry && storageEntry.value;
                              if (!(value === void 0)) {
                                _context8.next = 6;
                                break;
                              }
                              return _context8.abrupt("return", null);
                            case 6:
                              defaultValue = this.data.fieldValue === this.data.exportValue;
                              if (!(defaultValue === value)) {
                                _context8.next = 9;
                                break;
                              }
                              return _context8.abrupt("return", null);
                            case 9:
                              dict = evaluator.xref.fetchIfRef(this.ref);
                              if ((0, _primitives.isDict)(dict)) {
                                _context8.next = 12;
                                break;
                              }
                              return _context8.abrupt("return", null);
                            case 12:
                              xfa = {
                                path: (0, _util.stringToPDFString)(dict.get("T") || ""),
                                value: value ? this.data.exportValue : ""
                              };
                              name = _primitives.Name.get(value ? this.data.exportValue : "Off");
                              dict.set("V", name);
                              dict.set("AS", name);
                              dict.set("M", "D:".concat((0, _util.getModificationDate)()));
                              encrypt = evaluator.xref.encrypt;
                              originalTransform = null;
                              if (encrypt) {
                                originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);
                              }
                              buffer = ["".concat(this.ref.num, " ").concat(this.ref.gen, " obj\n")];
                              (0, _writer.writeDict)(dict, buffer, originalTransform);
                              buffer.push("\nendobj\n");
                              return _context8.abrupt("return", [{
                                ref: this.ref,
                                data: buffer.join(""),
                                xfa
                              }]);
                            case 24:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8, this);
                    }));
                    function _saveCheckbox(_x23, _x24, _x25) {
                      return _saveCheckbox2.apply(this, arguments);
                    }
                    return _saveCheckbox;
                  }()
                }, {
                  key: "_saveRadioButton",
                  value: function() {
                    var _saveRadioButton2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee9(evaluator, task, annotationStorage) {
                      var storageEntry, value, defaultValue, dict, xfa, name, parentBuffer, encrypt, parent, parentTransform, originalTransform, buffer, newRefs;
                      return _regenerator["default"].wrap(function _callee9$(_context9) {
                        while (1) {
                          switch (_context9.prev = _context9.next) {
                            case 0:
                              if (annotationStorage) {
                                _context9.next = 2;
                                break;
                              }
                              return _context9.abrupt("return", null);
                            case 2:
                              storageEntry = annotationStorage.get(this.data.id);
                              value = storageEntry && storageEntry.value;
                              if (!(value === void 0)) {
                                _context9.next = 6;
                                break;
                              }
                              return _context9.abrupt("return", null);
                            case 6:
                              defaultValue = this.data.fieldValue === this.data.buttonValue;
                              if (!(defaultValue === value)) {
                                _context9.next = 9;
                                break;
                              }
                              return _context9.abrupt("return", null);
                            case 9:
                              dict = evaluator.xref.fetchIfRef(this.ref);
                              if ((0, _primitives.isDict)(dict)) {
                                _context9.next = 12;
                                break;
                              }
                              return _context9.abrupt("return", null);
                            case 12:
                              xfa = {
                                path: (0, _util.stringToPDFString)(dict.get("T") || ""),
                                value: value ? this.data.buttonValue : ""
                              };
                              name = _primitives.Name.get(value ? this.data.buttonValue : "Off");
                              parentBuffer = null;
                              encrypt = evaluator.xref.encrypt;
                              if (value) {
                                if ((0, _primitives.isRef)(this.parent)) {
                                  parent = evaluator.xref.fetch(this.parent);
                                  parentTransform = null;
                                  if (encrypt) {
                                    parentTransform = encrypt.createCipherTransform(this.parent.num, this.parent.gen);
                                  }
                                  parent.set("V", name);
                                  parentBuffer = ["".concat(this.parent.num, " ").concat(this.parent.gen, " obj\n")];
                                  (0, _writer.writeDict)(parent, parentBuffer, parentTransform);
                                  parentBuffer.push("\nendobj\n");
                                } else if ((0, _primitives.isDict)(this.parent)) {
                                  this.parent.set("V", name);
                                }
                              }
                              dict.set("AS", name);
                              dict.set("M", "D:".concat((0, _util.getModificationDate)()));
                              originalTransform = null;
                              if (encrypt) {
                                originalTransform = encrypt.createCipherTransform(this.ref.num, this.ref.gen);
                              }
                              buffer = ["".concat(this.ref.num, " ").concat(this.ref.gen, " obj\n")];
                              (0, _writer.writeDict)(dict, buffer, originalTransform);
                              buffer.push("\nendobj\n");
                              newRefs = [{
                                ref: this.ref,
                                data: buffer.join(""),
                                xfa
                              }];
                              if (parentBuffer !== null) {
                                newRefs.push({
                                  ref: this.parent,
                                  data: parentBuffer.join(""),
                                  xfa: null
                                });
                              }
                              return _context9.abrupt("return", newRefs);
                            case 27:
                            case "end":
                              return _context9.stop();
                          }
                        }
                      }, _callee9, this);
                    }));
                    function _saveRadioButton(_x26, _x27, _x28) {
                      return _saveRadioButton2.apply(this, arguments);
                    }
                    return _saveRadioButton;
                  }()
                }, {
                  key: "_getDefaultCheckedAppearance",
                  value: function _getDefaultCheckedAppearance(params, type) {
                    var width = this.data.rect[2] - this.data.rect[0];
                    var height = this.data.rect[3] - this.data.rect[1];
                    var bbox = [0, 0, width, height];
                    var FONT_RATIO = 0.8;
                    var fontSize = Math.min(width, height) * FONT_RATIO;
                    var metrics, _char;
                    if (type === "check") {
                      metrics = {
                        width: 0.755 * fontSize,
                        height: 0.705 * fontSize
                      };
                      _char = "3";
                    } else if (type === "disc") {
                      metrics = {
                        width: 0.791 * fontSize,
                        height: 0.705 * fontSize
                      };
                      _char = "l";
                    } else {
                      (0, _util.unreachable)("_getDefaultCheckedAppearance - unsupported type: ".concat(type));
                    }
                    var xShift = (width - metrics.width) / 2;
                    var yShift = (height - metrics.height) / 2;
                    var appearance = "q BT /PdfJsZaDb ".concat(fontSize, " Tf 0 g ").concat(xShift, " ").concat(yShift, " Td (").concat(_char, ") Tj ET Q");
                    var appearanceStreamDict = new _primitives.Dict(params.xref);
                    appearanceStreamDict.set("FormType", 1);
                    appearanceStreamDict.set("Subtype", _primitives.Name.get("Form"));
                    appearanceStreamDict.set("Type", _primitives.Name.get("XObject"));
                    appearanceStreamDict.set("BBox", bbox);
                    appearanceStreamDict.set("Matrix", [1, 0, 0, 1, 0, 0]);
                    appearanceStreamDict.set("Length", appearance.length);
                    var resources = new _primitives.Dict(params.xref);
                    var font = new _primitives.Dict(params.xref);
                    font.set("PdfJsZaDb", this.fallbackFontDict);
                    resources.set("Font", font);
                    appearanceStreamDict.set("Resources", resources);
                    this.checkedAppearance = new _stream.StringStream(appearance);
                    this.checkedAppearance.dict = appearanceStreamDict;
                    this._streams.push(this.checkedAppearance);
                  }
                }, {
                  key: "_processCheckBox",
                  value: function _processCheckBox(params) {
                    var customAppearance = params.dict.get("AP");
                    if (!(0, _primitives.isDict)(customAppearance)) {
                      return;
                    }
                    var normalAppearance = customAppearance.get("N");
                    if (!(0, _primitives.isDict)(normalAppearance)) {
                      return;
                    }
                    var asValue = this._decodeFormValue(params.dict.get("AS"));
                    if (typeof asValue === "string") {
                      this.data.fieldValue = asValue;
                    }
                    var yes = this.data.fieldValue !== null && this.data.fieldValue !== "Off" ? this.data.fieldValue : "Yes";
                    var exportValues = normalAppearance.getKeys();
                    if (exportValues.length === 0) {
                      exportValues.push("Off", yes);
                    } else if (exportValues.length === 1) {
                      if (exportValues[0] === "Off") {
                        exportValues.push(yes);
                      } else {
                        exportValues.unshift("Off");
                      }
                    } else if (exportValues.includes(yes)) {
                      exportValues.length = 0;
                      exportValues.push("Off", yes);
                    } else {
                      var otherYes = exportValues.find(function(v) {
                        return v !== "Off";
                      });
                      exportValues.length = 0;
                      exportValues.push("Off", otherYes);
                    }
                    if (!exportValues.includes(this.data.fieldValue)) {
                      this.data.fieldValue = "Off";
                    }
                    this.data.exportValue = exportValues[1];
                    this.checkedAppearance = normalAppearance.get(this.data.exportValue) || null;
                    this.uncheckedAppearance = normalAppearance.get("Off") || null;
                    if (this.checkedAppearance) {
                      this._streams.push(this.checkedAppearance);
                    } else {
                      this._getDefaultCheckedAppearance(params, "check");
                    }
                    if (this.uncheckedAppearance) {
                      this._streams.push(this.uncheckedAppearance);
                    }
                    this._fallbackFontDict = this.fallbackFontDict;
                  }
                }, {
                  key: "_processRadioButton",
                  value: function _processRadioButton(params) {
                    this.data.fieldValue = this.data.buttonValue = null;
                    var fieldParent = params.dict.get("Parent");
                    if ((0, _primitives.isDict)(fieldParent)) {
                      this.parent = params.dict.getRaw("Parent");
                      var fieldParentValue = fieldParent.get("V");
                      if ((0, _primitives.isName)(fieldParentValue)) {
                        this.data.fieldValue = this._decodeFormValue(fieldParentValue);
                      }
                    }
                    var appearanceStates = params.dict.get("AP");
                    if (!(0, _primitives.isDict)(appearanceStates)) {
                      return;
                    }
                    var normalAppearance = appearanceStates.get("N");
                    if (!(0, _primitives.isDict)(normalAppearance)) {
                      return;
                    }
                    var _iterator9 = _createForOfIteratorHelper(normalAppearance.getKeys()), _step9;
                    try {
                      for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                        var key = _step9.value;
                        if (key !== "Off") {
                          this.data.buttonValue = this._decodeFormValue(key);
                          break;
                        }
                      }
                    } catch (err) {
                      _iterator9.e(err);
                    } finally {
                      _iterator9.f();
                    }
                    this.checkedAppearance = normalAppearance.get(this.data.buttonValue) || null;
                    this.uncheckedAppearance = normalAppearance.get("Off") || null;
                    if (this.checkedAppearance) {
                      this._streams.push(this.checkedAppearance);
                    } else {
                      this._getDefaultCheckedAppearance(params, "disc");
                    }
                    if (this.uncheckedAppearance) {
                      this._streams.push(this.uncheckedAppearance);
                    }
                    this._fallbackFontDict = this.fallbackFontDict;
                  }
                }, {
                  key: "_processPushButton",
                  value: function _processPushButton(params) {
                    if (!params.dict.has("A") && !params.dict.has("AA") && !this.data.alternativeText) {
                      (0, _util.warn)("Push buttons without action dictionaries are not supported");
                      return;
                    }
                    this.data.isTooltipOnly = !params.dict.has("A") && !params.dict.has("AA");
                    _catalog.Catalog.parseDestDictionary({
                      destDict: params.dict,
                      resultObj: this.data,
                      docBaseUrl: params.pdfManager.docBaseUrl
                    });
                  }
                }, {
                  key: "getFieldObject",
                  value: function getFieldObject() {
                    var type = "button";
                    var exportValues;
                    if (this.data.checkBox) {
                      type = "checkbox";
                      exportValues = this.data.exportValue;
                    } else if (this.data.radioButton) {
                      type = "radiobutton";
                      exportValues = this.data.buttonValue;
                    }
                    return {
                      id: this.data.id,
                      value: this.data.fieldValue || "Off",
                      defaultValue: this.data.defaultFieldValue,
                      exportValues,
                      editable: !this.data.readOnly,
                      name: this.data.fieldName,
                      rect: this.data.rect,
                      hidden: this.data.hidden,
                      actions: this.data.actions,
                      page: this.data.pageIndex,
                      strokeColor: this.data.borderColor,
                      fillColor: this.data.backgroundColor,
                      type
                    };
                  }
                }, {
                  key: "fallbackFontDict",
                  get: function get() {
                    var dict = new _primitives.Dict();
                    dict.set("BaseFont", _primitives.Name.get("ZapfDingbats"));
                    dict.set("Type", _primitives.Name.get("FallbackType"));
                    dict.set("Subtype", _primitives.Name.get("FallbackType"));
                    dict.set("Encoding", _primitives.Name.get("ZapfDingbatsEncoding"));
                    return (0, _util.shadow)(this, "fallbackFontDict", dict);
                  }
                }]);
                return ButtonWidgetAnnotation2;
              }(WidgetAnnotation);
              var ChoiceWidgetAnnotation = /* @__PURE__ */ function(_WidgetAnnotation3) {
                _inherits(ChoiceWidgetAnnotation2, _WidgetAnnotation3);
                var _super5 = _createSuper(ChoiceWidgetAnnotation2);
                function ChoiceWidgetAnnotation2(params) {
                  var _this8;
                  _classCallCheck(this, ChoiceWidgetAnnotation2);
                  _this8 = _super5.call(this, params);
                  _this8.data.options = [];
                  var options = (0, _core_utils.getInheritableProperty)({
                    dict: params.dict,
                    key: "Opt"
                  });
                  if (Array.isArray(options)) {
                    var xref = params.xref;
                    for (var i = 0, ii = options.length; i < ii; i++) {
                      var option = xref.fetchIfRef(options[i]);
                      var isOptionArray = Array.isArray(option);
                      _this8.data.options[i] = {
                        exportValue: _this8._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[0]) : option),
                        displayValue: _this8._decodeFormValue(isOptionArray ? xref.fetchIfRef(option[1]) : option)
                      };
                    }
                  }
                  if ((0, _util.isString)(_this8.data.fieldValue)) {
                    _this8.data.fieldValue = [_this8.data.fieldValue];
                  } else if (!_this8.data.fieldValue) {
                    _this8.data.fieldValue = [];
                  }
                  _this8.data.combo = _this8.hasFieldFlag(_util.AnnotationFieldFlag.COMBO);
                  _this8.data.multiSelect = _this8.hasFieldFlag(_util.AnnotationFieldFlag.MULTISELECT);
                  _this8._hasText = true;
                  return _this8;
                }
                _createClass(ChoiceWidgetAnnotation2, [{
                  key: "getFieldObject",
                  value: function getFieldObject() {
                    var type = this.data.combo ? "combobox" : "listbox";
                    var value = this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : null;
                    return {
                      id: this.data.id,
                      value,
                      defaultValue: this.data.defaultFieldValue,
                      editable: !this.data.readOnly,
                      name: this.data.fieldName,
                      rect: this.data.rect,
                      numItems: this.data.fieldValue.length,
                      multipleSelection: this.data.multiSelect,
                      hidden: this.data.hidden,
                      actions: this.data.actions,
                      items: this.data.options,
                      page: this.data.pageIndex,
                      strokeColor: this.data.borderColor,
                      fillColor: this.data.backgroundColor,
                      type
                    };
                  }
                }]);
                return ChoiceWidgetAnnotation2;
              }(WidgetAnnotation);
              var SignatureWidgetAnnotation = /* @__PURE__ */ function(_WidgetAnnotation4) {
                _inherits(SignatureWidgetAnnotation2, _WidgetAnnotation4);
                var _super6 = _createSuper(SignatureWidgetAnnotation2);
                function SignatureWidgetAnnotation2(params) {
                  var _this9;
                  _classCallCheck(this, SignatureWidgetAnnotation2);
                  _this9 = _super6.call(this, params);
                  _this9.data.fieldValue = null;
                  return _this9;
                }
                _createClass(SignatureWidgetAnnotation2, [{
                  key: "getFieldObject",
                  value: function getFieldObject() {
                    return {
                      id: this.data.id,
                      value: null,
                      page: this.data.pageIndex,
                      type: "signature"
                    };
                  }
                }]);
                return SignatureWidgetAnnotation2;
              }(WidgetAnnotation);
              var TextAnnotation = /* @__PURE__ */ function(_MarkupAnnotation) {
                _inherits(TextAnnotation2, _MarkupAnnotation);
                var _super7 = _createSuper(TextAnnotation2);
                function TextAnnotation2(parameters) {
                  var _this10;
                  _classCallCheck(this, TextAnnotation2);
                  var DEFAULT_ICON_SIZE = 22;
                  _this10 = _super7.call(this, parameters);
                  var dict = parameters.dict;
                  _this10.data.annotationType = _util.AnnotationType.TEXT;
                  if (_this10.data.hasAppearance) {
                    _this10.data.name = "NoIcon";
                  } else {
                    _this10.data.rect[1] = _this10.data.rect[3] - DEFAULT_ICON_SIZE;
                    _this10.data.rect[2] = _this10.data.rect[0] + DEFAULT_ICON_SIZE;
                    _this10.data.name = dict.has("Name") ? dict.get("Name").name : "Note";
                  }
                  if (dict.has("State")) {
                    _this10.data.state = dict.get("State") || null;
                    _this10.data.stateModel = dict.get("StateModel") || null;
                  } else {
                    _this10.data.state = null;
                    _this10.data.stateModel = null;
                  }
                  return _this10;
                }
                return TextAnnotation2;
              }(MarkupAnnotation);
              var LinkAnnotation = /* @__PURE__ */ function(_Annotation3) {
                _inherits(LinkAnnotation2, _Annotation3);
                var _super8 = _createSuper(LinkAnnotation2);
                function LinkAnnotation2(params) {
                  var _this11;
                  _classCallCheck(this, LinkAnnotation2);
                  _this11 = _super8.call(this, params);
                  _this11.data.annotationType = _util.AnnotationType.LINK;
                  var quadPoints = getQuadPoints(params.dict, _this11.rectangle);
                  if (quadPoints) {
                    _this11.data.quadPoints = quadPoints;
                  }
                  _catalog.Catalog.parseDestDictionary({
                    destDict: params.dict,
                    resultObj: _this11.data,
                    docBaseUrl: params.pdfManager.docBaseUrl
                  });
                  return _this11;
                }
                return LinkAnnotation2;
              }(Annotation);
              var PopupAnnotation = /* @__PURE__ */ function(_Annotation4) {
                _inherits(PopupAnnotation2, _Annotation4);
                var _super9 = _createSuper(PopupAnnotation2);
                function PopupAnnotation2(parameters) {
                  var _this12;
                  _classCallCheck(this, PopupAnnotation2);
                  _this12 = _super9.call(this, parameters);
                  _this12.data.annotationType = _util.AnnotationType.POPUP;
                  var parentItem = parameters.dict.get("Parent");
                  if (!parentItem) {
                    (0, _util.warn)("Popup annotation has a missing or invalid parent annotation.");
                    return _possibleConstructorReturn(_this12);
                  }
                  var parentSubtype = parentItem.get("Subtype");
                  _this12.data.parentType = (0, _primitives.isName)(parentSubtype) ? parentSubtype.name : null;
                  var rawParent = parameters.dict.getRaw("Parent");
                  _this12.data.parentId = (0, _primitives.isRef)(rawParent) ? rawParent.toString() : null;
                  var parentRect = parentItem.getArray("Rect");
                  if (Array.isArray(parentRect) && parentRect.length === 4) {
                    _this12.data.parentRect = _util.Util.normalizeRect(parentRect);
                  } else {
                    _this12.data.parentRect = [0, 0, 0, 0];
                  }
                  var rt = parentItem.get("RT");
                  if ((0, _primitives.isName)(rt, _util.AnnotationReplyType.GROUP)) {
                    parentItem = parentItem.get("IRT");
                  }
                  if (!parentItem.has("M")) {
                    _this12.data.modificationDate = null;
                  } else {
                    _this12.setModificationDate(parentItem.get("M"));
                    _this12.data.modificationDate = _this12.modificationDate;
                  }
                  if (!parentItem.has("C")) {
                    _this12.data.color = null;
                  } else {
                    _this12.setColor(parentItem.getArray("C"));
                    _this12.data.color = _this12.color;
                  }
                  if (!_this12.viewable) {
                    var parentFlags = parentItem.get("F");
                    if (_this12._isViewable(parentFlags)) {
                      _this12.setFlags(parentFlags);
                    }
                  }
                  _this12.setTitle(parentItem.get("T"));
                  _this12.data.titleObj = _this12._title;
                  _this12.setContents(parentItem.get("Contents"));
                  _this12.data.contentsObj = _this12._contents;
                  if (parentItem.has("RC")) {
                    _this12.data.richText = _factory.XFAFactory.getRichTextAsHtml(parentItem.get("RC"));
                  }
                  return _this12;
                }
                return PopupAnnotation2;
              }(Annotation);
              var FreeTextAnnotation = /* @__PURE__ */ function(_MarkupAnnotation2) {
                _inherits(FreeTextAnnotation2, _MarkupAnnotation2);
                var _super10 = _createSuper(FreeTextAnnotation2);
                function FreeTextAnnotation2(parameters) {
                  var _this13;
                  _classCallCheck(this, FreeTextAnnotation2);
                  _this13 = _super10.call(this, parameters);
                  _this13.data.annotationType = _util.AnnotationType.FREETEXT;
                  return _this13;
                }
                return FreeTextAnnotation2;
              }(MarkupAnnotation);
              var LineAnnotation = /* @__PURE__ */ function(_MarkupAnnotation3) {
                _inherits(LineAnnotation2, _MarkupAnnotation3);
                var _super11 = _createSuper(LineAnnotation2);
                function LineAnnotation2(parameters) {
                  var _this14;
                  _classCallCheck(this, LineAnnotation2);
                  _this14 = _super11.call(this, parameters);
                  _this14.data.annotationType = _util.AnnotationType.LINE;
                  var lineCoordinates = parameters.dict.getArray("L");
                  _this14.data.lineCoordinates = _util.Util.normalizeRect(lineCoordinates);
                  if (!_this14.appearance) {
                    var strokeColor = _this14.color ? Array.from(_this14.color).map(function(c) {
                      return c / 255;
                    }) : [0, 0, 0];
                    var strokeAlpha = parameters.dict.get("CA");
                    var fillColor = null, interiorColor = parameters.dict.getArray("IC");
                    if (interiorColor) {
                      interiorColor = getRgbColor(interiorColor, null);
                      fillColor = interiorColor ? Array.from(interiorColor).map(function(c) {
                        return c / 255;
                      }) : null;
                    }
                    var fillAlpha = fillColor ? strokeAlpha : null;
                    var borderWidth = _this14.borderStyle.width || 1, borderAdjust = 2 * borderWidth;
                    var bbox = [_this14.data.lineCoordinates[0] - borderAdjust, _this14.data.lineCoordinates[1] - borderAdjust, _this14.data.lineCoordinates[2] + borderAdjust, _this14.data.lineCoordinates[3] + borderAdjust];
                    if (!_util.Util.intersect(_this14.rectangle, bbox)) {
                      _this14.rectangle = bbox;
                    }
                    _this14._setDefaultAppearance({
                      xref: parameters.xref,
                      extra: "".concat(borderWidth, " w"),
                      strokeColor,
                      fillColor,
                      strokeAlpha,
                      fillAlpha,
                      pointsCallback: function pointsCallback(buffer, points) {
                        buffer.push("".concat(lineCoordinates[0], " ").concat(lineCoordinates[1], " m"), "".concat(lineCoordinates[2], " ").concat(lineCoordinates[3], " l"), "S");
                        return [points[0].x - borderWidth, points[1].x + borderWidth, points[3].y - borderWidth, points[1].y + borderWidth];
                      }
                    });
                  }
                  return _this14;
                }
                return LineAnnotation2;
              }(MarkupAnnotation);
              var SquareAnnotation = /* @__PURE__ */ function(_MarkupAnnotation4) {
                _inherits(SquareAnnotation2, _MarkupAnnotation4);
                var _super12 = _createSuper(SquareAnnotation2);
                function SquareAnnotation2(parameters) {
                  var _this15;
                  _classCallCheck(this, SquareAnnotation2);
                  _this15 = _super12.call(this, parameters);
                  _this15.data.annotationType = _util.AnnotationType.SQUARE;
                  if (!_this15.appearance) {
                    var strokeColor = _this15.color ? Array.from(_this15.color).map(function(c) {
                      return c / 255;
                    }) : [0, 0, 0];
                    var strokeAlpha = parameters.dict.get("CA");
                    var fillColor = null, interiorColor = parameters.dict.getArray("IC");
                    if (interiorColor) {
                      interiorColor = getRgbColor(interiorColor, null);
                      fillColor = interiorColor ? Array.from(interiorColor).map(function(c) {
                        return c / 255;
                      }) : null;
                    }
                    var fillAlpha = fillColor ? strokeAlpha : null;
                    if (_this15.borderStyle.width === 0 && !fillColor) {
                      return _possibleConstructorReturn(_this15);
                    }
                    _this15._setDefaultAppearance({
                      xref: parameters.xref,
                      extra: "".concat(_this15.borderStyle.width, " w"),
                      strokeColor,
                      fillColor,
                      strokeAlpha,
                      fillAlpha,
                      pointsCallback: function pointsCallback(buffer, points) {
                        var x = points[2].x + _this15.borderStyle.width / 2;
                        var y = points[2].y + _this15.borderStyle.width / 2;
                        var width = points[3].x - points[2].x - _this15.borderStyle.width;
                        var height = points[1].y - points[3].y - _this15.borderStyle.width;
                        buffer.push("".concat(x, " ").concat(y, " ").concat(width, " ").concat(height, " re"));
                        if (fillColor) {
                          buffer.push("B");
                        } else {
                          buffer.push("S");
                        }
                        return [points[0].x, points[1].x, points[3].y, points[1].y];
                      }
                    });
                  }
                  return _this15;
                }
                return SquareAnnotation2;
              }(MarkupAnnotation);
              var CircleAnnotation = /* @__PURE__ */ function(_MarkupAnnotation5) {
                _inherits(CircleAnnotation2, _MarkupAnnotation5);
                var _super13 = _createSuper(CircleAnnotation2);
                function CircleAnnotation2(parameters) {
                  var _this16;
                  _classCallCheck(this, CircleAnnotation2);
                  _this16 = _super13.call(this, parameters);
                  _this16.data.annotationType = _util.AnnotationType.CIRCLE;
                  if (!_this16.appearance) {
                    var strokeColor = _this16.color ? Array.from(_this16.color).map(function(c) {
                      return c / 255;
                    }) : [0, 0, 0];
                    var strokeAlpha = parameters.dict.get("CA");
                    var fillColor = null;
                    var interiorColor = parameters.dict.getArray("IC");
                    if (interiorColor) {
                      interiorColor = getRgbColor(interiorColor, null);
                      fillColor = interiorColor ? Array.from(interiorColor).map(function(c) {
                        return c / 255;
                      }) : null;
                    }
                    var fillAlpha = fillColor ? strokeAlpha : null;
                    if (_this16.borderStyle.width === 0 && !fillColor) {
                      return _possibleConstructorReturn(_this16);
                    }
                    var controlPointsDistance = 4 / 3 * Math.tan(Math.PI / (2 * 4));
                    _this16._setDefaultAppearance({
                      xref: parameters.xref,
                      extra: "".concat(_this16.borderStyle.width, " w"),
                      strokeColor,
                      fillColor,
                      strokeAlpha,
                      fillAlpha,
                      pointsCallback: function pointsCallback(buffer, points) {
                        var x0 = points[0].x + _this16.borderStyle.width / 2;
                        var y0 = points[0].y - _this16.borderStyle.width / 2;
                        var x1 = points[3].x - _this16.borderStyle.width / 2;
                        var y1 = points[3].y + _this16.borderStyle.width / 2;
                        var xMid = x0 + (x1 - x0) / 2;
                        var yMid = y0 + (y1 - y0) / 2;
                        var xOffset = (x1 - x0) / 2 * controlPointsDistance;
                        var yOffset = (y1 - y0) / 2 * controlPointsDistance;
                        buffer.push("".concat(xMid, " ").concat(y1, " m"), "".concat(xMid + xOffset, " ").concat(y1, " ").concat(x1, " ").concat(yMid + yOffset, " ").concat(x1, " ").concat(yMid, " c"), "".concat(x1, " ").concat(yMid - yOffset, " ").concat(xMid + xOffset, " ").concat(y0, " ").concat(xMid, " ").concat(y0, " c"), "".concat(xMid - xOffset, " ").concat(y0, " ").concat(x0, " ").concat(yMid - yOffset, " ").concat(x0, " ").concat(yMid, " c"), "".concat(x0, " ").concat(yMid + yOffset, " ").concat(xMid - xOffset, " ").concat(y1, " ").concat(xMid, " ").concat(y1, " c"), "h");
                        if (fillColor) {
                          buffer.push("B");
                        } else {
                          buffer.push("S");
                        }
                        return [points[0].x, points[1].x, points[3].y, points[1].y];
                      }
                    });
                  }
                  return _this16;
                }
                return CircleAnnotation2;
              }(MarkupAnnotation);
              var PolylineAnnotation = /* @__PURE__ */ function(_MarkupAnnotation6) {
                _inherits(PolylineAnnotation2, _MarkupAnnotation6);
                var _super14 = _createSuper(PolylineAnnotation2);
                function PolylineAnnotation2(parameters) {
                  var _this17;
                  _classCallCheck(this, PolylineAnnotation2);
                  _this17 = _super14.call(this, parameters);
                  _this17.data.annotationType = _util.AnnotationType.POLYLINE;
                  _this17.data.vertices = [];
                  var rawVertices = parameters.dict.getArray("Vertices");
                  if (!Array.isArray(rawVertices)) {
                    return _possibleConstructorReturn(_this17);
                  }
                  for (var i = 0, ii = rawVertices.length; i < ii; i += 2) {
                    _this17.data.vertices.push({
                      x: rawVertices[i],
                      y: rawVertices[i + 1]
                    });
                  }
                  if (!_this17.appearance) {
                    var strokeColor = _this17.color ? Array.from(_this17.color).map(function(c) {
                      return c / 255;
                    }) : [0, 0, 0];
                    var strokeAlpha = parameters.dict.get("CA");
                    var borderWidth = _this17.borderStyle.width || 1, borderAdjust = 2 * borderWidth;
                    var bbox = [Infinity, Infinity, -Infinity, -Infinity];
                    var _iterator10 = _createForOfIteratorHelper(_this17.data.vertices), _step10;
                    try {
                      for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                        var vertex = _step10.value;
                        bbox[0] = Math.min(bbox[0], vertex.x - borderAdjust);
                        bbox[1] = Math.min(bbox[1], vertex.y - borderAdjust);
                        bbox[2] = Math.max(bbox[2], vertex.x + borderAdjust);
                        bbox[3] = Math.max(bbox[3], vertex.y + borderAdjust);
                      }
                    } catch (err) {
                      _iterator10.e(err);
                    } finally {
                      _iterator10.f();
                    }
                    if (!_util.Util.intersect(_this17.rectangle, bbox)) {
                      _this17.rectangle = bbox;
                    }
                    _this17._setDefaultAppearance({
                      xref: parameters.xref,
                      extra: "".concat(borderWidth, " w"),
                      strokeColor,
                      strokeAlpha,
                      pointsCallback: function pointsCallback(buffer, points) {
                        var vertices = _this17.data.vertices;
                        for (var _i3 = 0, _ii = vertices.length; _i3 < _ii; _i3++) {
                          buffer.push("".concat(vertices[_i3].x, " ").concat(vertices[_i3].y, " ").concat(_i3 === 0 ? "m" : "l"));
                        }
                        buffer.push("S");
                        return [points[0].x, points[1].x, points[3].y, points[1].y];
                      }
                    });
                  }
                  return _this17;
                }
                return PolylineAnnotation2;
              }(MarkupAnnotation);
              var PolygonAnnotation = /* @__PURE__ */ function(_PolylineAnnotation) {
                _inherits(PolygonAnnotation2, _PolylineAnnotation);
                var _super15 = _createSuper(PolygonAnnotation2);
                function PolygonAnnotation2(parameters) {
                  var _this18;
                  _classCallCheck(this, PolygonAnnotation2);
                  _this18 = _super15.call(this, parameters);
                  _this18.data.annotationType = _util.AnnotationType.POLYGON;
                  return _this18;
                }
                return PolygonAnnotation2;
              }(PolylineAnnotation);
              var CaretAnnotation = /* @__PURE__ */ function(_MarkupAnnotation7) {
                _inherits(CaretAnnotation2, _MarkupAnnotation7);
                var _super16 = _createSuper(CaretAnnotation2);
                function CaretAnnotation2(parameters) {
                  var _this19;
                  _classCallCheck(this, CaretAnnotation2);
                  _this19 = _super16.call(this, parameters);
                  _this19.data.annotationType = _util.AnnotationType.CARET;
                  return _this19;
                }
                return CaretAnnotation2;
              }(MarkupAnnotation);
              var InkAnnotation = /* @__PURE__ */ function(_MarkupAnnotation8) {
                _inherits(InkAnnotation2, _MarkupAnnotation8);
                var _super17 = _createSuper(InkAnnotation2);
                function InkAnnotation2(parameters) {
                  var _this20;
                  _classCallCheck(this, InkAnnotation2);
                  _this20 = _super17.call(this, parameters);
                  _this20.data.annotationType = _util.AnnotationType.INK;
                  _this20.data.inkLists = [];
                  var rawInkLists = parameters.dict.getArray("InkList");
                  if (!Array.isArray(rawInkLists)) {
                    return _possibleConstructorReturn(_this20);
                  }
                  var xref = parameters.xref;
                  for (var i = 0, ii = rawInkLists.length; i < ii; ++i) {
                    _this20.data.inkLists.push([]);
                    for (var j = 0, jj = rawInkLists[i].length; j < jj; j += 2) {
                      _this20.data.inkLists[i].push({
                        x: xref.fetchIfRef(rawInkLists[i][j]),
                        y: xref.fetchIfRef(rawInkLists[i][j + 1])
                      });
                    }
                  }
                  if (!_this20.appearance) {
                    var strokeColor = _this20.color ? Array.from(_this20.color).map(function(c) {
                      return c / 255;
                    }) : [0, 0, 0];
                    var strokeAlpha = parameters.dict.get("CA");
                    var borderWidth = _this20.borderStyle.width || 1, borderAdjust = 2 * borderWidth;
                    var bbox = [Infinity, Infinity, -Infinity, -Infinity];
                    var _iterator11 = _createForOfIteratorHelper(_this20.data.inkLists), _step11;
                    try {
                      for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                        var inkLists = _step11.value;
                        var _iterator13 = _createForOfIteratorHelper(inkLists), _step13;
                        try {
                          for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                            var vertex = _step13.value;
                            bbox[0] = Math.min(bbox[0], vertex.x - borderAdjust);
                            bbox[1] = Math.min(bbox[1], vertex.y - borderAdjust);
                            bbox[2] = Math.max(bbox[2], vertex.x + borderAdjust);
                            bbox[3] = Math.max(bbox[3], vertex.y + borderAdjust);
                          }
                        } catch (err) {
                          _iterator13.e(err);
                        } finally {
                          _iterator13.f();
                        }
                      }
                    } catch (err) {
                      _iterator11.e(err);
                    } finally {
                      _iterator11.f();
                    }
                    if (!_util.Util.intersect(_this20.rectangle, bbox)) {
                      _this20.rectangle = bbox;
                    }
                    _this20._setDefaultAppearance({
                      xref: parameters.xref,
                      extra: "".concat(borderWidth, " w"),
                      strokeColor,
                      strokeAlpha,
                      pointsCallback: function pointsCallback(buffer, points) {
                        var _iterator12 = _createForOfIteratorHelper(_this20.data.inkLists), _step12;
                        try {
                          for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                            var inkList = _step12.value;
                            for (var _i4 = 0, _ii2 = inkList.length; _i4 < _ii2; _i4++) {
                              buffer.push("".concat(inkList[_i4].x, " ").concat(inkList[_i4].y, " ").concat(_i4 === 0 ? "m" : "l"));
                            }
                            buffer.push("S");
                          }
                        } catch (err) {
                          _iterator12.e(err);
                        } finally {
                          _iterator12.f();
                        }
                        return [points[0].x, points[1].x, points[3].y, points[1].y];
                      }
                    });
                  }
                  return _this20;
                }
                return InkAnnotation2;
              }(MarkupAnnotation);
              var HighlightAnnotation = /* @__PURE__ */ function(_MarkupAnnotation9) {
                _inherits(HighlightAnnotation2, _MarkupAnnotation9);
                var _super18 = _createSuper(HighlightAnnotation2);
                function HighlightAnnotation2(parameters) {
                  var _this21;
                  _classCallCheck(this, HighlightAnnotation2);
                  _this21 = _super18.call(this, parameters);
                  _this21.data.annotationType = _util.AnnotationType.HIGHLIGHT;
                  var quadPoints = _this21.data.quadPoints = getQuadPoints(parameters.dict, null);
                  if (quadPoints) {
                    var resources = _this21.appearance && _this21.appearance.dict.get("Resources");
                    if (!_this21.appearance || !(resources && resources.has("ExtGState"))) {
                      if (_this21.appearance) {
                        (0, _util.warn)("HighlightAnnotation - ignoring built-in appearance stream.");
                      }
                      var fillColor = _this21.color ? Array.from(_this21.color).map(function(c) {
                        return c / 255;
                      }) : [1, 1, 0];
                      var fillAlpha = parameters.dict.get("CA");
                      _this21._setDefaultAppearance({
                        xref: parameters.xref,
                        fillColor,
                        blendMode: "Multiply",
                        fillAlpha,
                        pointsCallback: function pointsCallback(buffer, points) {
                          buffer.push("".concat(points[0].x, " ").concat(points[0].y, " m"), "".concat(points[1].x, " ").concat(points[1].y, " l"), "".concat(points[3].x, " ").concat(points[3].y, " l"), "".concat(points[2].x, " ").concat(points[2].y, " l"), "f");
                          return [points[0].x, points[1].x, points[3].y, points[1].y];
                        }
                      });
                    }
                  } else {
                    _this21.data.hasPopup = false;
                  }
                  return _this21;
                }
                return HighlightAnnotation2;
              }(MarkupAnnotation);
              var UnderlineAnnotation = /* @__PURE__ */ function(_MarkupAnnotation10) {
                _inherits(UnderlineAnnotation2, _MarkupAnnotation10);
                var _super19 = _createSuper(UnderlineAnnotation2);
                function UnderlineAnnotation2(parameters) {
                  var _this22;
                  _classCallCheck(this, UnderlineAnnotation2);
                  _this22 = _super19.call(this, parameters);
                  _this22.data.annotationType = _util.AnnotationType.UNDERLINE;
                  var quadPoints = _this22.data.quadPoints = getQuadPoints(parameters.dict, null);
                  if (quadPoints) {
                    if (!_this22.appearance) {
                      var strokeColor = _this22.color ? Array.from(_this22.color).map(function(c) {
                        return c / 255;
                      }) : [0, 0, 0];
                      var strokeAlpha = parameters.dict.get("CA");
                      _this22._setDefaultAppearance({
                        xref: parameters.xref,
                        extra: "[] 0 d 1 w",
                        strokeColor,
                        strokeAlpha,
                        pointsCallback: function pointsCallback(buffer, points) {
                          buffer.push("".concat(points[2].x, " ").concat(points[2].y, " m"), "".concat(points[3].x, " ").concat(points[3].y, " l"), "S");
                          return [points[0].x, points[1].x, points[3].y, points[1].y];
                        }
                      });
                    }
                  } else {
                    _this22.data.hasPopup = false;
                  }
                  return _this22;
                }
                return UnderlineAnnotation2;
              }(MarkupAnnotation);
              var SquigglyAnnotation = /* @__PURE__ */ function(_MarkupAnnotation11) {
                _inherits(SquigglyAnnotation2, _MarkupAnnotation11);
                var _super20 = _createSuper(SquigglyAnnotation2);
                function SquigglyAnnotation2(parameters) {
                  var _this23;
                  _classCallCheck(this, SquigglyAnnotation2);
                  _this23 = _super20.call(this, parameters);
                  _this23.data.annotationType = _util.AnnotationType.SQUIGGLY;
                  var quadPoints = _this23.data.quadPoints = getQuadPoints(parameters.dict, null);
                  if (quadPoints) {
                    if (!_this23.appearance) {
                      var strokeColor = _this23.color ? Array.from(_this23.color).map(function(c) {
                        return c / 255;
                      }) : [0, 0, 0];
                      var strokeAlpha = parameters.dict.get("CA");
                      _this23._setDefaultAppearance({
                        xref: parameters.xref,
                        extra: "[] 0 d 1 w",
                        strokeColor,
                        strokeAlpha,
                        pointsCallback: function pointsCallback(buffer, points) {
                          var dy = (points[0].y - points[2].y) / 6;
                          var shift = dy;
                          var x = points[2].x;
                          var y = points[2].y;
                          var xEnd = points[3].x;
                          buffer.push("".concat(x, " ").concat(y + shift, " m"));
                          do {
                            x += 2;
                            shift = shift === 0 ? dy : 0;
                            buffer.push("".concat(x, " ").concat(y + shift, " l"));
                          } while (x < xEnd);
                          buffer.push("S");
                          return [points[2].x, xEnd, y - 2 * dy, y + 2 * dy];
                        }
                      });
                    }
                  } else {
                    _this23.data.hasPopup = false;
                  }
                  return _this23;
                }
                return SquigglyAnnotation2;
              }(MarkupAnnotation);
              var StrikeOutAnnotation = /* @__PURE__ */ function(_MarkupAnnotation12) {
                _inherits(StrikeOutAnnotation2, _MarkupAnnotation12);
                var _super21 = _createSuper(StrikeOutAnnotation2);
                function StrikeOutAnnotation2(parameters) {
                  var _this24;
                  _classCallCheck(this, StrikeOutAnnotation2);
                  _this24 = _super21.call(this, parameters);
                  _this24.data.annotationType = _util.AnnotationType.STRIKEOUT;
                  var quadPoints = _this24.data.quadPoints = getQuadPoints(parameters.dict, null);
                  if (quadPoints) {
                    if (!_this24.appearance) {
                      var strokeColor = _this24.color ? Array.from(_this24.color).map(function(c) {
                        return c / 255;
                      }) : [0, 0, 0];
                      var strokeAlpha = parameters.dict.get("CA");
                      _this24._setDefaultAppearance({
                        xref: parameters.xref,
                        extra: "[] 0 d 1 w",
                        strokeColor,
                        strokeAlpha,
                        pointsCallback: function pointsCallback(buffer, points) {
                          buffer.push("".concat((points[0].x + points[2].x) / 2, " ") + "".concat((points[0].y + points[2].y) / 2, " m"), "".concat((points[1].x + points[3].x) / 2, " ") + "".concat((points[1].y + points[3].y) / 2, " l"), "S");
                          return [points[0].x, points[1].x, points[3].y, points[1].y];
                        }
                      });
                    }
                  } else {
                    _this24.data.hasPopup = false;
                  }
                  return _this24;
                }
                return StrikeOutAnnotation2;
              }(MarkupAnnotation);
              var StampAnnotation = /* @__PURE__ */ function(_MarkupAnnotation13) {
                _inherits(StampAnnotation2, _MarkupAnnotation13);
                var _super22 = _createSuper(StampAnnotation2);
                function StampAnnotation2(parameters) {
                  var _this25;
                  _classCallCheck(this, StampAnnotation2);
                  _this25 = _super22.call(this, parameters);
                  _this25.data.annotationType = _util.AnnotationType.STAMP;
                  return _this25;
                }
                return StampAnnotation2;
              }(MarkupAnnotation);
              var FileAttachmentAnnotation = /* @__PURE__ */ function(_MarkupAnnotation14) {
                _inherits(FileAttachmentAnnotation2, _MarkupAnnotation14);
                var _super23 = _createSuper(FileAttachmentAnnotation2);
                function FileAttachmentAnnotation2(parameters) {
                  var _this26;
                  _classCallCheck(this, FileAttachmentAnnotation2);
                  _this26 = _super23.call(this, parameters);
                  var file = new _file_spec.FileSpec(parameters.dict.get("FS"), parameters.xref);
                  _this26.data.annotationType = _util.AnnotationType.FILEATTACHMENT;
                  _this26.data.file = file.serializable;
                  return _this26;
                }
                return FileAttachmentAnnotation2;
              }(MarkupAnnotation);
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.createDefaultAppearance = createDefaultAppearance;
              exports2.parseDefaultAppearance = parseDefaultAppearance;
              var _util = __w_pdfjs_require__2(4);
              var _colorspace = __w_pdfjs_require__2(154);
              var _core_utils = __w_pdfjs_require__2(139);
              var _evaluator = __w_pdfjs_require__2(155);
              var _primitives = __w_pdfjs_require__2(135);
              var _stream = __w_pdfjs_require__2(140);
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var DefaultAppearanceEvaluator = /* @__PURE__ */ function(_EvaluatorPreprocesso) {
                _inherits(DefaultAppearanceEvaluator2, _EvaluatorPreprocesso);
                var _super = _createSuper(DefaultAppearanceEvaluator2);
                function DefaultAppearanceEvaluator2(str) {
                  _classCallCheck(this, DefaultAppearanceEvaluator2);
                  return _super.call(this, new _stream.StringStream(str));
                }
                _createClass(DefaultAppearanceEvaluator2, [{
                  key: "parse",
                  value: function parse() {
                    var operation = {
                      fn: 0,
                      args: []
                    };
                    var result = {
                      fontSize: 0,
                      fontName: "",
                      fontColor: new Uint8ClampedArray(3)
                    };
                    try {
                      while (true) {
                        operation.args.length = 0;
                        if (!this.read(operation)) {
                          break;
                        }
                        if (this.savedStatesDepth !== 0) {
                          continue;
                        }
                        var fn = operation.fn, args = operation.args;
                        switch (fn | 0) {
                          case _util.OPS.setFont:
                            var _args = _slicedToArray(args, 2), fontName = _args[0], fontSize = _args[1];
                            if (fontName instanceof _primitives.Name) {
                              result.fontName = fontName.name;
                            }
                            if (typeof fontSize === "number" && fontSize > 0) {
                              result.fontSize = fontSize;
                            }
                            break;
                          case _util.OPS.setFillRGBColor:
                            _colorspace.ColorSpace.singletons.rgb.getRgbItem(args, 0, result.fontColor, 0);
                            break;
                          case _util.OPS.setFillGray:
                            _colorspace.ColorSpace.singletons.gray.getRgbItem(args, 0, result.fontColor, 0);
                            break;
                          case _util.OPS.setFillColorSpace:
                            _colorspace.ColorSpace.singletons.cmyk.getRgbItem(args, 0, result.fontColor, 0);
                            break;
                        }
                      }
                    } catch (reason) {
                      (0, _util.warn)('parseDefaultAppearance - ignoring errors: "'.concat(reason, '".'));
                    }
                    return result;
                  }
                }]);
                return DefaultAppearanceEvaluator2;
              }(_evaluator.EvaluatorPreprocessor);
              function parseDefaultAppearance(str) {
                return new DefaultAppearanceEvaluator(str).parse();
              }
              function createDefaultAppearance(_ref) {
                var fontSize = _ref.fontSize, fontName = _ref.fontName, fontColor = _ref.fontColor;
                var colorCmd;
                if (fontColor.every(function(c) {
                  return c === 0;
                })) {
                  colorCmd = "0 g";
                } else {
                  colorCmd = Array.from(fontColor).map(function(c) {
                    return (c / 255).toFixed(2);
                  }).join(" ") + " rg";
                }
                return "/".concat((0, _core_utils.escapePDFName)(fontName), " ").concat(fontSize, " Tf ").concat(colorCmd);
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.ColorSpace = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _core_utils = __w_pdfjs_require__2(139);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {
                var COMPONENTS = 3;
                alpha01 = alpha01 !== 1 ? 0 : alpha01;
                var xRatio = w1 / w2;
                var yRatio = h1 / h2;
                var newIndex = 0, oldIndex;
                var xScaled = new Uint16Array(w2);
                var w1Scanline = w1 * COMPONENTS;
                for (var i = 0; i < w2; i++) {
                  xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;
                }
                for (var _i = 0; _i < h2; _i++) {
                  var py = Math.floor(_i * yRatio) * w1Scanline;
                  for (var j = 0; j < w2; j++) {
                    oldIndex = py + xScaled[j];
                    dest[newIndex++] = src[oldIndex++];
                    dest[newIndex++] = src[oldIndex++];
                    dest[newIndex++] = src[oldIndex++];
                    newIndex += alpha01;
                  }
                }
              }
              var ColorSpace = /* @__PURE__ */ function() {
                function ColorSpace2(name, numComps) {
                  _classCallCheck(this, ColorSpace2);
                  if (this.constructor === ColorSpace2) {
                    (0, _util.unreachable)("Cannot initialize ColorSpace.");
                  }
                  this.name = name;
                  this.numComps = numComps;
                }
                _createClass(ColorSpace2, [{
                  key: "getRgb",
                  value: function getRgb(src, srcOffset) {
                    var rgb = new Uint8ClampedArray(3);
                    this.getRgbItem(src, srcOffset, rgb, 0);
                    return rgb;
                  }
                }, {
                  key: "getRgbItem",
                  value: function getRgbItem(src, srcOffset, dest, destOffset) {
                    (0, _util.unreachable)("Should not call ColorSpace.getRgbItem");
                  }
                }, {
                  key: "getRgbBuffer",
                  value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
                    (0, _util.unreachable)("Should not call ColorSpace.getRgbBuffer");
                  }
                }, {
                  key: "getOutputLength",
                  value: function getOutputLength(inputLength, alpha01) {
                    (0, _util.unreachable)("Should not call ColorSpace.getOutputLength");
                  }
                }, {
                  key: "isPassthrough",
                  value: function isPassthrough(bits) {
                    return false;
                  }
                }, {
                  key: "isDefaultDecode",
                  value: function isDefaultDecode(decodeMap, bpc) {
                    return ColorSpace2.isDefaultDecode(decodeMap, this.numComps);
                  }
                }, {
                  key: "fillRgb",
                  value: function fillRgb(dest, originalWidth, originalHeight, width, height, actualHeight, bpc, comps, alpha01) {
                    var count = originalWidth * originalHeight;
                    var rgbBuf = null;
                    var numComponentColors = 1 << bpc;
                    var needsResizing = originalHeight !== height || originalWidth !== width;
                    if (this.isPassthrough(bpc)) {
                      rgbBuf = comps;
                    } else if (this.numComps === 1 && count > numComponentColors && this.name !== "DeviceGray" && this.name !== "DeviceRGB") {
                      var allColors = bpc <= 8 ? new Uint8Array(numComponentColors) : new Uint16Array(numComponentColors);
                      for (var i = 0; i < numComponentColors; i++) {
                        allColors[i] = i;
                      }
                      var colorMap = new Uint8ClampedArray(numComponentColors * 3);
                      this.getRgbBuffer(allColors, 0, numComponentColors, colorMap, 0, bpc, 0);
                      if (!needsResizing) {
                        var destPos = 0;
                        for (var _i2 = 0; _i2 < count; ++_i2) {
                          var key = comps[_i2] * 3;
                          dest[destPos++] = colorMap[key];
                          dest[destPos++] = colorMap[key + 1];
                          dest[destPos++] = colorMap[key + 2];
                          destPos += alpha01;
                        }
                      } else {
                        rgbBuf = new Uint8Array(count * 3);
                        var rgbPos = 0;
                        for (var _i3 = 0; _i3 < count; ++_i3) {
                          var _key = comps[_i3] * 3;
                          rgbBuf[rgbPos++] = colorMap[_key];
                          rgbBuf[rgbPos++] = colorMap[_key + 1];
                          rgbBuf[rgbPos++] = colorMap[_key + 2];
                        }
                      }
                    } else {
                      if (!needsResizing) {
                        this.getRgbBuffer(comps, 0, width * actualHeight, dest, 0, bpc, alpha01);
                      } else {
                        rgbBuf = new Uint8ClampedArray(count * 3);
                        this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);
                      }
                    }
                    if (rgbBuf) {
                      if (needsResizing) {
                        resizeRgbImage(rgbBuf, dest, originalWidth, originalHeight, width, height, alpha01);
                      } else {
                        var _destPos = 0, _rgbPos = 0;
                        for (var _i4 = 0, ii = width * actualHeight; _i4 < ii; _i4++) {
                          dest[_destPos++] = rgbBuf[_rgbPos++];
                          dest[_destPos++] = rgbBuf[_rgbPos++];
                          dest[_destPos++] = rgbBuf[_rgbPos++];
                          _destPos += alpha01;
                        }
                      }
                    }
                  }
                }, {
                  key: "usesZeroToOneRange",
                  get: function get() {
                    return (0, _util.shadow)(this, "usesZeroToOneRange", true);
                  }
                }], [{
                  key: "_cache",
                  value: function _cache(cacheKey, xref, localColorSpaceCache, parsedColorSpace) {
                    if (!localColorSpaceCache) {
                      throw new Error('ColorSpace._cache - expected "localColorSpaceCache" argument.');
                    }
                    if (!parsedColorSpace) {
                      throw new Error('ColorSpace._cache - expected "parsedColorSpace" argument.');
                    }
                    var csName, csRef;
                    if (cacheKey instanceof _primitives.Ref) {
                      csRef = cacheKey;
                      cacheKey = xref.fetch(cacheKey);
                    }
                    if (cacheKey instanceof _primitives.Name) {
                      csName = cacheKey.name;
                    }
                    if (csName || csRef) {
                      localColorSpaceCache.set(csName, csRef, parsedColorSpace);
                    }
                  }
                }, {
                  key: "getCached",
                  value: function getCached(cacheKey, xref, localColorSpaceCache) {
                    if (!localColorSpaceCache) {
                      throw new Error('ColorSpace.getCached - expected "localColorSpaceCache" argument.');
                    }
                    if (cacheKey instanceof _primitives.Ref) {
                      var localColorSpace = localColorSpaceCache.getByRef(cacheKey);
                      if (localColorSpace) {
                        return localColorSpace;
                      }
                      try {
                        cacheKey = xref.fetch(cacheKey);
                      } catch (ex) {
                        if (ex instanceof _core_utils.MissingDataException) {
                          throw ex;
                        }
                      }
                    }
                    if (cacheKey instanceof _primitives.Name) {
                      var _localColorSpace = localColorSpaceCache.getByName(cacheKey.name);
                      if (_localColorSpace) {
                        return _localColorSpace;
                      }
                    }
                    return null;
                  }
                }, {
                  key: "parseAsync",
                  value: function() {
                    var _parseAsync = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(_ref) {
                      var cs, xref, _ref$resources, resources, pdfFunctionFactory, localColorSpaceCache, parsedColorSpace;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              cs = _ref.cs, xref = _ref.xref, _ref$resources = _ref.resources, resources = _ref$resources === void 0 ? null : _ref$resources, pdfFunctionFactory = _ref.pdfFunctionFactory, localColorSpaceCache = _ref.localColorSpaceCache;
                              parsedColorSpace = this._parse(cs, xref, resources, pdfFunctionFactory);
                              this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);
                              return _context.abrupt("return", parsedColorSpace);
                            case 4:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));
                    function parseAsync(_x) {
                      return _parseAsync.apply(this, arguments);
                    }
                    return parseAsync;
                  }()
                }, {
                  key: "parse",
                  value: function parse(_ref2) {
                    var cs = _ref2.cs, xref = _ref2.xref, _ref2$resources = _ref2.resources, resources = _ref2$resources === void 0 ? null : _ref2$resources, pdfFunctionFactory = _ref2.pdfFunctionFactory, localColorSpaceCache = _ref2.localColorSpaceCache;
                    var cachedColorSpace = this.getCached(cs, xref, localColorSpaceCache);
                    if (cachedColorSpace) {
                      return cachedColorSpace;
                    }
                    var parsedColorSpace = this._parse(cs, xref, resources, pdfFunctionFactory);
                    this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);
                    return parsedColorSpace;
                  }
                }, {
                  key: "_parse",
                  value: function _parse(cs, xref) {
                    var resources = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                    var pdfFunctionFactory = arguments.length > 3 ? arguments[3] : void 0;
                    cs = xref.fetchIfRef(cs);
                    if ((0, _primitives.isName)(cs)) {
                      switch (cs.name) {
                        case "G":
                        case "DeviceGray":
                          return this.singletons.gray;
                        case "RGB":
                        case "DeviceRGB":
                          return this.singletons.rgb;
                        case "CMYK":
                        case "DeviceCMYK":
                          return this.singletons.cmyk;
                        case "Pattern":
                          return new PatternCS(null);
                        default:
                          if ((0, _primitives.isDict)(resources)) {
                            var colorSpaces = resources.get("ColorSpace");
                            if ((0, _primitives.isDict)(colorSpaces)) {
                              var resourcesCS = colorSpaces.get(cs.name);
                              if (resourcesCS) {
                                if ((0, _primitives.isName)(resourcesCS)) {
                                  return this._parse(resourcesCS, xref, resources, pdfFunctionFactory);
                                }
                                cs = resourcesCS;
                                break;
                              }
                            }
                          }
                          throw new _util.FormatError("Unrecognized ColorSpace: ".concat(cs.name));
                      }
                    }
                    if (Array.isArray(cs)) {
                      var mode = xref.fetchIfRef(cs[0]).name;
                      var params, numComps, baseCS, whitePoint, blackPoint, gamma;
                      switch (mode) {
                        case "G":
                        case "DeviceGray":
                          return this.singletons.gray;
                        case "RGB":
                        case "DeviceRGB":
                          return this.singletons.rgb;
                        case "CMYK":
                        case "DeviceCMYK":
                          return this.singletons.cmyk;
                        case "CalGray":
                          params = xref.fetchIfRef(cs[1]);
                          whitePoint = params.getArray("WhitePoint");
                          blackPoint = params.getArray("BlackPoint");
                          gamma = params.get("Gamma");
                          return new CalGrayCS(whitePoint, blackPoint, gamma);
                        case "CalRGB":
                          params = xref.fetchIfRef(cs[1]);
                          whitePoint = params.getArray("WhitePoint");
                          blackPoint = params.getArray("BlackPoint");
                          gamma = params.getArray("Gamma");
                          var matrix = params.getArray("Matrix");
                          return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);
                        case "ICCBased":
                          var stream = xref.fetchIfRef(cs[1]);
                          var dict = stream.dict;
                          numComps = dict.get("N");
                          var alt = dict.get("Alternate");
                          if (alt) {
                            var altCS = this._parse(alt, xref, resources, pdfFunctionFactory);
                            if (altCS.numComps === numComps) {
                              return altCS;
                            }
                            (0, _util.warn)("ICCBased color space: Ignoring incorrect /Alternate entry.");
                          }
                          if (numComps === 1) {
                            return this.singletons.gray;
                          } else if (numComps === 3) {
                            return this.singletons.rgb;
                          } else if (numComps === 4) {
                            return this.singletons.cmyk;
                          }
                          break;
                        case "Pattern":
                          baseCS = cs[1] || null;
                          if (baseCS) {
                            baseCS = this._parse(baseCS, xref, resources, pdfFunctionFactory);
                          }
                          return new PatternCS(baseCS);
                        case "I":
                        case "Indexed":
                          baseCS = this._parse(cs[1], xref, resources, pdfFunctionFactory);
                          var hiVal = xref.fetchIfRef(cs[2]) + 1;
                          var lookup = xref.fetchIfRef(cs[3]);
                          return new IndexedCS(baseCS, hiVal, lookup);
                        case "Separation":
                        case "DeviceN":
                          var name = xref.fetchIfRef(cs[1]);
                          numComps = Array.isArray(name) ? name.length : 1;
                          baseCS = this._parse(cs[2], xref, resources, pdfFunctionFactory);
                          var tintFn = pdfFunctionFactory.create(cs[3]);
                          return new AlternateCS(numComps, baseCS, tintFn);
                        case "Lab":
                          params = xref.fetchIfRef(cs[1]);
                          whitePoint = params.getArray("WhitePoint");
                          blackPoint = params.getArray("BlackPoint");
                          var range = params.getArray("Range");
                          return new LabCS(whitePoint, blackPoint, range);
                        default:
                          throw new _util.FormatError("Unimplemented ColorSpace object: ".concat(mode));
                      }
                    }
                    throw new _util.FormatError("Unrecognized ColorSpace object: ".concat(cs));
                  }
                }, {
                  key: "isDefaultDecode",
                  value: function isDefaultDecode(decode, numComps) {
                    if (!Array.isArray(decode)) {
                      return true;
                    }
                    if (numComps * 2 !== decode.length) {
                      (0, _util.warn)("The decode map is not the correct length");
                      return true;
                    }
                    for (var i = 0, ii = decode.length; i < ii; i += 2) {
                      if (decode[i] !== 0 || decode[i + 1] !== 1) {
                        return false;
                      }
                    }
                    return true;
                  }
                }, {
                  key: "singletons",
                  get: function get() {
                    return (0, _util.shadow)(this, "singletons", {
                      get gray() {
                        return (0, _util.shadow)(this, "gray", new DeviceGrayCS());
                      },
                      get rgb() {
                        return (0, _util.shadow)(this, "rgb", new DeviceRgbCS());
                      },
                      get cmyk() {
                        return (0, _util.shadow)(this, "cmyk", new DeviceCmykCS());
                      }
                    });
                  }
                }]);
                return ColorSpace2;
              }();
              exports2.ColorSpace = ColorSpace;
              var AlternateCS = /* @__PURE__ */ function(_ColorSpace) {
                _inherits(AlternateCS2, _ColorSpace);
                var _super = _createSuper(AlternateCS2);
                function AlternateCS2(numComps, base, tintFn) {
                  var _this;
                  _classCallCheck(this, AlternateCS2);
                  _this = _super.call(this, "Alternate", numComps);
                  _this.base = base;
                  _this.tintFn = tintFn;
                  _this.tmpBuf = new Float32Array(base.numComps);
                  return _this;
                }
                _createClass(AlternateCS2, [{
                  key: "getRgbItem",
                  value: function getRgbItem(src, srcOffset, dest, destOffset) {
                    var tmpBuf = this.tmpBuf;
                    this.tintFn(src, srcOffset, tmpBuf, 0);
                    this.base.getRgbItem(tmpBuf, 0, dest, destOffset);
                  }
                }, {
                  key: "getRgbBuffer",
                  value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
                    var tintFn = this.tintFn;
                    var base = this.base;
                    var scale = 1 / ((1 << bits) - 1);
                    var baseNumComps = base.numComps;
                    var usesZeroToOneRange = base.usesZeroToOneRange;
                    var isPassthrough = (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;
                    var pos = isPassthrough ? destOffset : 0;
                    var baseBuf = isPassthrough ? dest : new Uint8ClampedArray(baseNumComps * count);
                    var numComps = this.numComps;
                    var scaled = new Float32Array(numComps);
                    var tinted = new Float32Array(baseNumComps);
                    var i, j;
                    for (i = 0; i < count; i++) {
                      for (j = 0; j < numComps; j++) {
                        scaled[j] = src[srcOffset++] * scale;
                      }
                      tintFn(scaled, 0, tinted, 0);
                      if (usesZeroToOneRange) {
                        for (j = 0; j < baseNumComps; j++) {
                          baseBuf[pos++] = tinted[j] * 255;
                        }
                      } else {
                        base.getRgbItem(tinted, 0, baseBuf, pos);
                        pos += baseNumComps;
                      }
                    }
                    if (!isPassthrough) {
                      base.getRgbBuffer(baseBuf, 0, count, dest, destOffset, 8, alpha01);
                    }
                  }
                }, {
                  key: "getOutputLength",
                  value: function getOutputLength(inputLength, alpha01) {
                    return this.base.getOutputLength(inputLength * this.base.numComps / this.numComps, alpha01);
                  }
                }]);
                return AlternateCS2;
              }(ColorSpace);
              var PatternCS = /* @__PURE__ */ function(_ColorSpace2) {
                _inherits(PatternCS2, _ColorSpace2);
                var _super2 = _createSuper(PatternCS2);
                function PatternCS2(baseCS) {
                  var _this2;
                  _classCallCheck(this, PatternCS2);
                  _this2 = _super2.call(this, "Pattern", null);
                  _this2.base = baseCS;
                  return _this2;
                }
                _createClass(PatternCS2, [{
                  key: "isDefaultDecode",
                  value: function isDefaultDecode(decodeMap, bpc) {
                    (0, _util.unreachable)("Should not call PatternCS.isDefaultDecode");
                  }
                }]);
                return PatternCS2;
              }(ColorSpace);
              var IndexedCS = /* @__PURE__ */ function(_ColorSpace3) {
                _inherits(IndexedCS2, _ColorSpace3);
                var _super3 = _createSuper(IndexedCS2);
                function IndexedCS2(base, highVal, lookup) {
                  var _this3;
                  _classCallCheck(this, IndexedCS2);
                  _this3 = _super3.call(this, "Indexed", 1);
                  _this3.base = base;
                  _this3.highVal = highVal;
                  var length = base.numComps * highVal;
                  _this3.lookup = new Uint8Array(length);
                  if ((0, _primitives.isStream)(lookup)) {
                    var bytes = lookup.getBytes(length);
                    _this3.lookup.set(bytes);
                  } else if (typeof lookup === "string") {
                    for (var i = 0; i < length; ++i) {
                      _this3.lookup[i] = lookup.charCodeAt(i) & 255;
                    }
                  } else {
                    throw new _util.FormatError("IndexedCS - unrecognized lookup table: ".concat(lookup));
                  }
                  return _this3;
                }
                _createClass(IndexedCS2, [{
                  key: "getRgbItem",
                  value: function getRgbItem(src, srcOffset, dest, destOffset) {
                    var numComps = this.base.numComps;
                    var start = src[srcOffset] * numComps;
                    this.base.getRgbBuffer(this.lookup, start, 1, dest, destOffset, 8, 0);
                  }
                }, {
                  key: "getRgbBuffer",
                  value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
                    var base = this.base;
                    var numComps = base.numComps;
                    var outputDelta = base.getOutputLength(numComps, alpha01);
                    var lookup = this.lookup;
                    for (var i = 0; i < count; ++i) {
                      var lookupPos = src[srcOffset++] * numComps;
                      base.getRgbBuffer(lookup, lookupPos, 1, dest, destOffset, 8, alpha01);
                      destOffset += outputDelta;
                    }
                  }
                }, {
                  key: "getOutputLength",
                  value: function getOutputLength(inputLength, alpha01) {
                    return this.base.getOutputLength(inputLength * this.base.numComps, alpha01);
                  }
                }, {
                  key: "isDefaultDecode",
                  value: function isDefaultDecode(decodeMap, bpc) {
                    if (!Array.isArray(decodeMap)) {
                      return true;
                    }
                    if (decodeMap.length !== 2) {
                      (0, _util.warn)("Decode map length is not correct");
                      return true;
                    }
                    if (!Number.isInteger(bpc) || bpc < 1) {
                      (0, _util.warn)("Bits per component is not correct");
                      return true;
                    }
                    return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;
                  }
                }]);
                return IndexedCS2;
              }(ColorSpace);
              var DeviceGrayCS = /* @__PURE__ */ function(_ColorSpace4) {
                _inherits(DeviceGrayCS2, _ColorSpace4);
                var _super4 = _createSuper(DeviceGrayCS2);
                function DeviceGrayCS2() {
                  _classCallCheck(this, DeviceGrayCS2);
                  return _super4.call(this, "DeviceGray", 1);
                }
                _createClass(DeviceGrayCS2, [{
                  key: "getRgbItem",
                  value: function getRgbItem(src, srcOffset, dest, destOffset) {
                    var c = src[srcOffset] * 255;
                    dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;
                  }
                }, {
                  key: "getRgbBuffer",
                  value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
                    var scale = 255 / ((1 << bits) - 1);
                    var j = srcOffset, q = destOffset;
                    for (var i = 0; i < count; ++i) {
                      var c = scale * src[j++];
                      dest[q++] = c;
                      dest[q++] = c;
                      dest[q++] = c;
                      q += alpha01;
                    }
                  }
                }, {
                  key: "getOutputLength",
                  value: function getOutputLength(inputLength, alpha01) {
                    return inputLength * (3 + alpha01);
                  }
                }]);
                return DeviceGrayCS2;
              }(ColorSpace);
              var DeviceRgbCS = /* @__PURE__ */ function(_ColorSpace5) {
                _inherits(DeviceRgbCS2, _ColorSpace5);
                var _super5 = _createSuper(DeviceRgbCS2);
                function DeviceRgbCS2() {
                  _classCallCheck(this, DeviceRgbCS2);
                  return _super5.call(this, "DeviceRGB", 3);
                }
                _createClass(DeviceRgbCS2, [{
                  key: "getRgbItem",
                  value: function getRgbItem(src, srcOffset, dest, destOffset) {
                    dest[destOffset] = src[srcOffset] * 255;
                    dest[destOffset + 1] = src[srcOffset + 1] * 255;
                    dest[destOffset + 2] = src[srcOffset + 2] * 255;
                  }
                }, {
                  key: "getRgbBuffer",
                  value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
                    if (bits === 8 && alpha01 === 0) {
                      dest.set(src.subarray(srcOffset, srcOffset + count * 3), destOffset);
                      return;
                    }
                    var scale = 255 / ((1 << bits) - 1);
                    var j = srcOffset, q = destOffset;
                    for (var i = 0; i < count; ++i) {
                      dest[q++] = scale * src[j++];
                      dest[q++] = scale * src[j++];
                      dest[q++] = scale * src[j++];
                      q += alpha01;
                    }
                  }
                }, {
                  key: "getOutputLength",
                  value: function getOutputLength(inputLength, alpha01) {
                    return inputLength * (3 + alpha01) / 3 | 0;
                  }
                }, {
                  key: "isPassthrough",
                  value: function isPassthrough(bits) {
                    return bits === 8;
                  }
                }]);
                return DeviceRgbCS2;
              }(ColorSpace);
              var DeviceCmykCS = function DeviceCmykCSClosure() {
                function convertToRgb(src, srcOffset, srcScale, dest, destOffset) {
                  var c = src[srcOffset] * srcScale;
                  var m = src[srcOffset + 1] * srcScale;
                  var y = src[srcOffset + 2] * srcScale;
                  var k = src[srcOffset + 3] * srcScale;
                  dest[destOffset] = 255 + c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k + -285.2331026137004) + m * (1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 17.5119270841813) + k * (-21.86122147463605 * k - 189.48180835922747);
                  dest[destOffset + 1] = 255 + c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k + -79.2970844816548) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 190.9453302588951) + y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) + k * (-20.737325471181034 * k - 187.80453709719578);
                  dest[destOffset + 2] = 255 + c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k + -14.183576799673286) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 112.23884253719248) + y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505) + k * (-22.33816807309886 * k - 180.12613974708367);
                }
                var DeviceCmykCS2 = /* @__PURE__ */ function(_ColorSpace6) {
                  _inherits(DeviceCmykCS3, _ColorSpace6);
                  var _super6 = _createSuper(DeviceCmykCS3);
                  function DeviceCmykCS3() {
                    _classCallCheck(this, DeviceCmykCS3);
                    return _super6.call(this, "DeviceCMYK", 4);
                  }
                  _createClass(DeviceCmykCS3, [{
                    key: "getRgbItem",
                    value: function getRgbItem(src, srcOffset, dest, destOffset) {
                      convertToRgb(src, srcOffset, 1, dest, destOffset);
                    }
                  }, {
                    key: "getRgbBuffer",
                    value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
                      var scale = 1 / ((1 << bits) - 1);
                      for (var i = 0; i < count; i++) {
                        convertToRgb(src, srcOffset, scale, dest, destOffset);
                        srcOffset += 4;
                        destOffset += 3 + alpha01;
                      }
                    }
                  }, {
                    key: "getOutputLength",
                    value: function getOutputLength(inputLength, alpha01) {
                      return inputLength / 4 * (3 + alpha01) | 0;
                    }
                  }]);
                  return DeviceCmykCS3;
                }(ColorSpace);
                return DeviceCmykCS2;
              }();
              var CalGrayCS = function CalGrayCSClosure() {
                function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {
                  var A = src[srcOffset] * scale;
                  var AG = Math.pow(A, cs.G);
                  var L = cs.YW * AG;
                  var val = Math.max(295.8 * Math.pow(L, 0.3333333333333333) - 40.8, 0);
                  dest[destOffset] = val;
                  dest[destOffset + 1] = val;
                  dest[destOffset + 2] = val;
                }
                var CalGrayCS2 = /* @__PURE__ */ function(_ColorSpace7) {
                  _inherits(CalGrayCS3, _ColorSpace7);
                  var _super7 = _createSuper(CalGrayCS3);
                  function CalGrayCS3(whitePoint, blackPoint, gamma) {
                    var _this4;
                    _classCallCheck(this, CalGrayCS3);
                    _this4 = _super7.call(this, "CalGray", 1);
                    if (!whitePoint) {
                      throw new _util.FormatError("WhitePoint missing - required for color space CalGray");
                    }
                    blackPoint = blackPoint || [0, 0, 0];
                    gamma = gamma || 1;
                    _this4.XW = whitePoint[0];
                    _this4.YW = whitePoint[1];
                    _this4.ZW = whitePoint[2];
                    _this4.XB = blackPoint[0];
                    _this4.YB = blackPoint[1];
                    _this4.ZB = blackPoint[2];
                    _this4.G = gamma;
                    if (_this4.XW < 0 || _this4.ZW < 0 || _this4.YW !== 1) {
                      throw new _util.FormatError("Invalid WhitePoint components for ".concat(_this4.name) + ", no fallback available");
                    }
                    if (_this4.XB < 0 || _this4.YB < 0 || _this4.ZB < 0) {
                      (0, _util.info)("Invalid BlackPoint for ".concat(_this4.name, ", falling back to default."));
                      _this4.XB = _this4.YB = _this4.ZB = 0;
                    }
                    if (_this4.XB !== 0 || _this4.YB !== 0 || _this4.ZB !== 0) {
                      (0, _util.warn)("".concat(_this4.name, ", BlackPoint: XB: ").concat(_this4.XB, ", YB: ").concat(_this4.YB, ", ") + "ZB: ".concat(_this4.ZB, ", only default values are supported."));
                    }
                    if (_this4.G < 1) {
                      (0, _util.info)("Invalid Gamma: ".concat(_this4.G, " for ").concat(_this4.name, ", ") + "falling back to default.");
                      _this4.G = 1;
                    }
                    return _this4;
                  }
                  _createClass(CalGrayCS3, [{
                    key: "getRgbItem",
                    value: function getRgbItem(src, srcOffset, dest, destOffset) {
                      convertToRgb(this, src, srcOffset, dest, destOffset, 1);
                    }
                  }, {
                    key: "getRgbBuffer",
                    value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
                      var scale = 1 / ((1 << bits) - 1);
                      for (var i = 0; i < count; ++i) {
                        convertToRgb(this, src, srcOffset, dest, destOffset, scale);
                        srcOffset += 1;
                        destOffset += 3 + alpha01;
                      }
                    }
                  }, {
                    key: "getOutputLength",
                    value: function getOutputLength(inputLength, alpha01) {
                      return inputLength * (3 + alpha01);
                    }
                  }]);
                  return CalGrayCS3;
                }(ColorSpace);
                return CalGrayCS2;
              }();
              var CalRGBCS = function CalRGBCSClosure() {
                var BRADFORD_SCALE_MATRIX = new Float32Array([0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685, 1.0296]);
                var BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912, -85287e-7, 0.0400428, 0.9684867]);
                var SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([3.2404542, -1.5371385, -0.4985314, -0.969266, 1.8760108, 0.041556, 0.0556434, -0.2040259, 1.0572252]);
                var FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);
                var tempNormalizeMatrix = new Float32Array(3);
                var tempConvertMatrix1 = new Float32Array(3);
                var tempConvertMatrix2 = new Float32Array(3);
                var DECODE_L_CONSTANT = Math.pow((8 + 16) / 116, 3) / 8;
                function matrixProduct(a, b, result) {
                  result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
                  result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];
                  result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];
                }
                function convertToFlat(sourceWhitePoint, LMS, result) {
                  result[0] = LMS[0] * 1 / sourceWhitePoint[0];
                  result[1] = LMS[1] * 1 / sourceWhitePoint[1];
                  result[2] = LMS[2] * 1 / sourceWhitePoint[2];
                }
                function convertToD65(sourceWhitePoint, LMS, result) {
                  var D65X = 0.95047;
                  var D65Y = 1;
                  var D65Z = 1.08883;
                  result[0] = LMS[0] * D65X / sourceWhitePoint[0];
                  result[1] = LMS[1] * D65Y / sourceWhitePoint[1];
                  result[2] = LMS[2] * D65Z / sourceWhitePoint[2];
                }
                function sRGBTransferFunction(color) {
                  if (color <= 31308e-7) {
                    return adjustToRange(0, 1, 12.92 * color);
                  }
                  if (color >= 0.99554525) {
                    return 1;
                  }
                  return adjustToRange(0, 1, (1 + 0.055) * Math.pow(color, 1 / 2.4) - 0.055);
                }
                function adjustToRange(min, max, value) {
                  return Math.max(min, Math.min(max, value));
                }
                function decodeL(L) {
                  if (L < 0) {
                    return -decodeL(-L);
                  }
                  if (L > 8) {
                    return Math.pow((L + 16) / 116, 3);
                  }
                  return L * DECODE_L_CONSTANT;
                }
                function compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {
                  if (sourceBlackPoint[0] === 0 && sourceBlackPoint[1] === 0 && sourceBlackPoint[2] === 0) {
                    result[0] = XYZ_Flat[0];
                    result[1] = XYZ_Flat[1];
                    result[2] = XYZ_Flat[2];
                    return;
                  }
                  var zeroDecodeL = decodeL(0);
                  var X_DST = zeroDecodeL;
                  var X_SRC = decodeL(sourceBlackPoint[0]);
                  var Y_DST = zeroDecodeL;
                  var Y_SRC = decodeL(sourceBlackPoint[1]);
                  var Z_DST = zeroDecodeL;
                  var Z_SRC = decodeL(sourceBlackPoint[2]);
                  var X_Scale = (1 - X_DST) / (1 - X_SRC);
                  var X_Offset = 1 - X_Scale;
                  var Y_Scale = (1 - Y_DST) / (1 - Y_SRC);
                  var Y_Offset = 1 - Y_Scale;
                  var Z_Scale = (1 - Z_DST) / (1 - Z_SRC);
                  var Z_Offset = 1 - Z_Scale;
                  result[0] = XYZ_Flat[0] * X_Scale + X_Offset;
                  result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;
                  result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;
                }
                function normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {
                  if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {
                    result[0] = XYZ_In[0];
                    result[1] = XYZ_In[1];
                    result[2] = XYZ_In[2];
                    return;
                  }
                  var LMS = result;
                  matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);
                  var LMS_Flat = tempNormalizeMatrix;
                  convertToFlat(sourceWhitePoint, LMS, LMS_Flat);
                  matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_Flat, result);
                }
                function normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {
                  var LMS = result;
                  matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);
                  var LMS_D65 = tempNormalizeMatrix;
                  convertToD65(sourceWhitePoint, LMS, LMS_D65);
                  matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_D65, result);
                }
                function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {
                  var A = adjustToRange(0, 1, src[srcOffset] * scale);
                  var B = adjustToRange(0, 1, src[srcOffset + 1] * scale);
                  var C = adjustToRange(0, 1, src[srcOffset + 2] * scale);
                  var AGR = A === 1 ? 1 : Math.pow(A, cs.GR);
                  var BGG = B === 1 ? 1 : Math.pow(B, cs.GG);
                  var CGB = C === 1 ? 1 : Math.pow(C, cs.GB);
                  var X = cs.MXA * AGR + cs.MXB * BGG + cs.MXC * CGB;
                  var Y = cs.MYA * AGR + cs.MYB * BGG + cs.MYC * CGB;
                  var Z = cs.MZA * AGR + cs.MZB * BGG + cs.MZC * CGB;
                  var XYZ = tempConvertMatrix1;
                  XYZ[0] = X;
                  XYZ[1] = Y;
                  XYZ[2] = Z;
                  var XYZ_Flat = tempConvertMatrix2;
                  normalizeWhitePointToFlat(cs.whitePoint, XYZ, XYZ_Flat);
                  var XYZ_Black = tempConvertMatrix1;
                  compensateBlackPoint(cs.blackPoint, XYZ_Flat, XYZ_Black);
                  var XYZ_D65 = tempConvertMatrix2;
                  normalizeWhitePointToD65(FLAT_WHITEPOINT_MATRIX, XYZ_Black, XYZ_D65);
                  var SRGB = tempConvertMatrix1;
                  matrixProduct(SRGB_D65_XYZ_TO_RGB_MATRIX, XYZ_D65, SRGB);
                  dest[destOffset] = sRGBTransferFunction(SRGB[0]) * 255;
                  dest[destOffset + 1] = sRGBTransferFunction(SRGB[1]) * 255;
                  dest[destOffset + 2] = sRGBTransferFunction(SRGB[2]) * 255;
                }
                var CalRGBCS2 = /* @__PURE__ */ function(_ColorSpace8) {
                  _inherits(CalRGBCS3, _ColorSpace8);
                  var _super8 = _createSuper(CalRGBCS3);
                  function CalRGBCS3(whitePoint, blackPoint, gamma, matrix) {
                    var _this5;
                    _classCallCheck(this, CalRGBCS3);
                    _this5 = _super8.call(this, "CalRGB", 3);
                    if (!whitePoint) {
                      throw new _util.FormatError("WhitePoint missing - required for color space CalRGB");
                    }
                    blackPoint = blackPoint || new Float32Array(3);
                    gamma = gamma || new Float32Array([1, 1, 1]);
                    matrix = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
                    var XW = whitePoint[0];
                    var YW = whitePoint[1];
                    var ZW = whitePoint[2];
                    _this5.whitePoint = whitePoint;
                    var XB = blackPoint[0];
                    var YB = blackPoint[1];
                    var ZB = blackPoint[2];
                    _this5.blackPoint = blackPoint;
                    _this5.GR = gamma[0];
                    _this5.GG = gamma[1];
                    _this5.GB = gamma[2];
                    _this5.MXA = matrix[0];
                    _this5.MYA = matrix[1];
                    _this5.MZA = matrix[2];
                    _this5.MXB = matrix[3];
                    _this5.MYB = matrix[4];
                    _this5.MZB = matrix[5];
                    _this5.MXC = matrix[6];
                    _this5.MYC = matrix[7];
                    _this5.MZC = matrix[8];
                    if (XW < 0 || ZW < 0 || YW !== 1) {
                      throw new _util.FormatError("Invalid WhitePoint components for ".concat(_this5.name) + ", no fallback available");
                    }
                    if (XB < 0 || YB < 0 || ZB < 0) {
                      (0, _util.info)("Invalid BlackPoint for ".concat(_this5.name, " [").concat(XB, ", ").concat(YB, ", ").concat(ZB, "], ") + "falling back to default.");
                      _this5.blackPoint = new Float32Array(3);
                    }
                    if (_this5.GR < 0 || _this5.GG < 0 || _this5.GB < 0) {
                      (0, _util.info)("Invalid Gamma [".concat(_this5.GR, ", ").concat(_this5.GG, ", ").concat(_this5.GB, "] for ") + "".concat(_this5.name, ", falling back to default."));
                      _this5.GR = _this5.GG = _this5.GB = 1;
                    }
                    return _this5;
                  }
                  _createClass(CalRGBCS3, [{
                    key: "getRgbItem",
                    value: function getRgbItem(src, srcOffset, dest, destOffset) {
                      convertToRgb(this, src, srcOffset, dest, destOffset, 1);
                    }
                  }, {
                    key: "getRgbBuffer",
                    value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
                      var scale = 1 / ((1 << bits) - 1);
                      for (var i = 0; i < count; ++i) {
                        convertToRgb(this, src, srcOffset, dest, destOffset, scale);
                        srcOffset += 3;
                        destOffset += 3 + alpha01;
                      }
                    }
                  }, {
                    key: "getOutputLength",
                    value: function getOutputLength(inputLength, alpha01) {
                      return inputLength * (3 + alpha01) / 3 | 0;
                    }
                  }]);
                  return CalRGBCS3;
                }(ColorSpace);
                return CalRGBCS2;
              }();
              var LabCS = function LabCSClosure() {
                function fn_g(x) {
                  var result;
                  if (x >= 6 / 29) {
                    result = Math.pow(x, 3);
                  } else {
                    result = 108 / 841 * (x - 4 / 29);
                  }
                  return result;
                }
                function decode(value, high1, low2, high2) {
                  return low2 + value * (high2 - low2) / high1;
                }
                function convertToRgb(cs, src, srcOffset, maxVal, dest, destOffset) {
                  var Ls = src[srcOffset];
                  var as = src[srcOffset + 1];
                  var bs = src[srcOffset + 2];
                  if (maxVal !== false) {
                    Ls = decode(Ls, maxVal, 0, 100);
                    as = decode(as, maxVal, cs.amin, cs.amax);
                    bs = decode(bs, maxVal, cs.bmin, cs.bmax);
                  }
                  if (as > cs.amax) {
                    as = cs.amax;
                  } else if (as < cs.amin) {
                    as = cs.amin;
                  }
                  if (bs > cs.bmax) {
                    bs = cs.bmax;
                  } else if (bs < cs.bmin) {
                    bs = cs.bmin;
                  }
                  var M = (Ls + 16) / 116;
                  var L = M + as / 500;
                  var N = M - bs / 200;
                  var X = cs.XW * fn_g(L);
                  var Y = cs.YW * fn_g(M);
                  var Z = cs.ZW * fn_g(N);
                  var r, g, b;
                  if (cs.ZW < 1) {
                    r = X * 3.1339 + Y * -1.617 + Z * -0.4906;
                    g = X * -0.9785 + Y * 1.916 + Z * 0.0333;
                    b = X * 0.072 + Y * -0.229 + Z * 1.4057;
                  } else {
                    r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;
                    g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;
                    b = X * 0.0557 + Y * -0.204 + Z * 1.057;
                  }
                  dest[destOffset] = Math.sqrt(r) * 255;
                  dest[destOffset + 1] = Math.sqrt(g) * 255;
                  dest[destOffset + 2] = Math.sqrt(b) * 255;
                }
                var LabCS2 = /* @__PURE__ */ function(_ColorSpace9) {
                  _inherits(LabCS3, _ColorSpace9);
                  var _super9 = _createSuper(LabCS3);
                  function LabCS3(whitePoint, blackPoint, range) {
                    var _this6;
                    _classCallCheck(this, LabCS3);
                    _this6 = _super9.call(this, "Lab", 3);
                    if (!whitePoint) {
                      throw new _util.FormatError("WhitePoint missing - required for color space Lab");
                    }
                    blackPoint = blackPoint || [0, 0, 0];
                    range = range || [-100, 100, -100, 100];
                    _this6.XW = whitePoint[0];
                    _this6.YW = whitePoint[1];
                    _this6.ZW = whitePoint[2];
                    _this6.amin = range[0];
                    _this6.amax = range[1];
                    _this6.bmin = range[2];
                    _this6.bmax = range[3];
                    _this6.XB = blackPoint[0];
                    _this6.YB = blackPoint[1];
                    _this6.ZB = blackPoint[2];
                    if (_this6.XW < 0 || _this6.ZW < 0 || _this6.YW !== 1) {
                      throw new _util.FormatError("Invalid WhitePoint components, no fallback available");
                    }
                    if (_this6.XB < 0 || _this6.YB < 0 || _this6.ZB < 0) {
                      (0, _util.info)("Invalid BlackPoint, falling back to default");
                      _this6.XB = _this6.YB = _this6.ZB = 0;
                    }
                    if (_this6.amin > _this6.amax || _this6.bmin > _this6.bmax) {
                      (0, _util.info)("Invalid Range, falling back to defaults");
                      _this6.amin = -100;
                      _this6.amax = 100;
                      _this6.bmin = -100;
                      _this6.bmax = 100;
                    }
                    return _this6;
                  }
                  _createClass(LabCS3, [{
                    key: "getRgbItem",
                    value: function getRgbItem(src, srcOffset, dest, destOffset) {
                      convertToRgb(this, src, srcOffset, false, dest, destOffset);
                    }
                  }, {
                    key: "getRgbBuffer",
                    value: function getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
                      var maxVal = (1 << bits) - 1;
                      for (var i = 0; i < count; i++) {
                        convertToRgb(this, src, srcOffset, maxVal, dest, destOffset);
                        srcOffset += 3;
                        destOffset += 3 + alpha01;
                      }
                    }
                  }, {
                    key: "getOutputLength",
                    value: function getOutputLength(inputLength, alpha01) {
                      return inputLength * (3 + alpha01) / 3 | 0;
                    }
                  }, {
                    key: "isDefaultDecode",
                    value: function isDefaultDecode(decodeMap, bpc) {
                      return true;
                    }
                  }, {
                    key: "usesZeroToOneRange",
                    get: function get() {
                      return (0, _util.shadow)(this, "usesZeroToOneRange", false);
                    }
                  }]);
                  return LabCS3;
                }(ColorSpace);
                return LabCS2;
              }();
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.PartialEvaluator = exports2.EvaluatorPreprocessor = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _cmap = __w_pdfjs_require__2(156);
              var _primitives = __w_pdfjs_require__2(135);
              var _fonts = __w_pdfjs_require__2(174);
              var _fonts_utils = __w_pdfjs_require__2(148);
              var _encodings = __w_pdfjs_require__2(149);
              var _standard_fonts = __w_pdfjs_require__2(177);
              var _unicode = __w_pdfjs_require__2(151);
              var _pattern = __w_pdfjs_require__2(185);
              var _xfa_fonts = __w_pdfjs_require__2(142);
              var _to_unicode_map = __w_pdfjs_require__2(178);
              var _function = __w_pdfjs_require__2(186);
              var _parser = __w_pdfjs_require__2(157);
              var _image_utils = __w_pdfjs_require__2(188);
              var _stream = __w_pdfjs_require__2(140);
              var _base_stream = __w_pdfjs_require__2(136);
              var _bidi = __w_pdfjs_require__2(189);
              var _colorspace = __w_pdfjs_require__2(154);
              var _decode_stream = __w_pdfjs_require__2(159);
              var _glyphlist = __w_pdfjs_require__2(150);
              var _core_utils = __w_pdfjs_require__2(139);
              var _metrics = __w_pdfjs_require__2(190);
              var _murmurhash = __w_pdfjs_require__2(191);
              var _operator_list = __w_pdfjs_require__2(192);
              var _image = __w_pdfjs_require__2(193);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var DefaultPartialEvaluatorOptions = Object.freeze({
                maxImageSize: -1,
                disableFontFace: false,
                ignoreErrors: false,
                isEvalSupported: true,
                fontExtraProperties: false,
                useSystemFonts: true,
                cMapUrl: null,
                standardFontDataUrl: null
              });
              var PatternType = {
                TILING: 1,
                SHADING: 2
              };
              var TEXT_CHUNK_BATCH_SIZE = 10;
              var deferred = Promise.resolve();
              function normalizeBlendMode(value) {
                var parsingArray = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                if (Array.isArray(value)) {
                  for (var i = 0, ii = value.length; i < ii; i++) {
                    var maybeBM = normalizeBlendMode(value[i], true);
                    if (maybeBM) {
                      return maybeBM;
                    }
                  }
                  (0, _util.warn)("Unsupported blend mode Array: ".concat(value));
                  return "source-over";
                }
                if (!(0, _primitives.isName)(value)) {
                  if (parsingArray) {
                    return null;
                  }
                  return "source-over";
                }
                switch (value.name) {
                  case "Normal":
                  case "Compatible":
                    return "source-over";
                  case "Multiply":
                    return "multiply";
                  case "Screen":
                    return "screen";
                  case "Overlay":
                    return "overlay";
                  case "Darken":
                    return "darken";
                  case "Lighten":
                    return "lighten";
                  case "ColorDodge":
                    return "color-dodge";
                  case "ColorBurn":
                    return "color-burn";
                  case "HardLight":
                    return "hard-light";
                  case "SoftLight":
                    return "soft-light";
                  case "Difference":
                    return "difference";
                  case "Exclusion":
                    return "exclusion";
                  case "Hue":
                    return "hue";
                  case "Saturation":
                    return "saturation";
                  case "Color":
                    return "color";
                  case "Luminosity":
                    return "luminosity";
                }
                if (parsingArray) {
                  return null;
                }
                (0, _util.warn)("Unsupported blend mode: ".concat(value.name));
                return "source-over";
              }
              var TimeSlotManager = /* @__PURE__ */ function() {
                function TimeSlotManager2() {
                  _classCallCheck(this, TimeSlotManager2);
                  this.reset();
                }
                _createClass(TimeSlotManager2, [{
                  key: "check",
                  value: function check() {
                    if (++this.checked < TimeSlotManager2.CHECK_TIME_EVERY) {
                      return false;
                    }
                    this.checked = 0;
                    return this.endTime <= Date.now();
                  }
                }, {
                  key: "reset",
                  value: function reset() {
                    this.endTime = Date.now() + TimeSlotManager2.TIME_SLOT_DURATION_MS;
                    this.checked = 0;
                  }
                }], [{
                  key: "TIME_SLOT_DURATION_MS",
                  get: function get() {
                    return (0, _util.shadow)(this, "TIME_SLOT_DURATION_MS", 20);
                  }
                }, {
                  key: "CHECK_TIME_EVERY",
                  get: function get() {
                    return (0, _util.shadow)(this, "CHECK_TIME_EVERY", 100);
                  }
                }]);
                return TimeSlotManager2;
              }();
              var PartialEvaluator = /* @__PURE__ */ function() {
                function PartialEvaluator2(_ref) {
                  var xref = _ref.xref, handler = _ref.handler, pageIndex = _ref.pageIndex, idFactory = _ref.idFactory, fontCache = _ref.fontCache, builtInCMapCache = _ref.builtInCMapCache, standardFontDataCache = _ref.standardFontDataCache, globalImageCache = _ref.globalImageCache, _ref$options = _ref.options, options = _ref$options === void 0 ? null : _ref$options;
                  _classCallCheck(this, PartialEvaluator2);
                  this.xref = xref;
                  this.handler = handler;
                  this.pageIndex = pageIndex;
                  this.idFactory = idFactory;
                  this.fontCache = fontCache;
                  this.builtInCMapCache = builtInCMapCache;
                  this.standardFontDataCache = standardFontDataCache;
                  this.globalImageCache = globalImageCache;
                  this.options = options || DefaultPartialEvaluatorOptions;
                  this.parsingType3Font = false;
                  this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);
                }
                _createClass(PartialEvaluator2, [{
                  key: "_pdfFunctionFactory",
                  get: function get() {
                    var pdfFunctionFactory = new _function.PDFFunctionFactory({
                      xref: this.xref,
                      isEvalSupported: this.options.isEvalSupported
                    });
                    return (0, _util.shadow)(this, "_pdfFunctionFactory", pdfFunctionFactory);
                  }
                }, {
                  key: "clone",
                  value: function clone() {
                    var newOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                    var newEvaluator = Object.create(this);
                    newEvaluator.options = Object.assign(/* @__PURE__ */ Object.create(null), this.options, newOptions);
                    return newEvaluator;
                  }
                }, {
                  key: "hasBlendModes",
                  value: function hasBlendModes(resources, nonBlendModesSet) {
                    if (!(resources instanceof _primitives.Dict)) {
                      return false;
                    }
                    if (resources.objId && nonBlendModesSet.has(resources.objId)) {
                      return false;
                    }
                    var processed = new _primitives.RefSet(nonBlendModesSet);
                    if (resources.objId) {
                      processed.put(resources.objId);
                    }
                    var nodes = [resources], xref = this.xref;
                    while (nodes.length) {
                      var node = nodes.shift();
                      var graphicStates = node.get("ExtGState");
                      if (graphicStates instanceof _primitives.Dict) {
                        var _iterator = _createForOfIteratorHelper(graphicStates.getRawValues()), _step;
                        try {
                          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                            var graphicState = _step.value;
                            if (graphicState instanceof _primitives.Ref) {
                              if (processed.has(graphicState)) {
                                continue;
                              }
                              try {
                                graphicState = xref.fetch(graphicState);
                              } catch (ex) {
                                processed.put(graphicState);
                                (0, _util.info)('hasBlendModes - ignoring ExtGState: "'.concat(ex, '".'));
                                continue;
                              }
                            }
                            if (!(graphicState instanceof _primitives.Dict)) {
                              continue;
                            }
                            if (graphicState.objId) {
                              processed.put(graphicState.objId);
                            }
                            var bm = graphicState.get("BM");
                            if (bm instanceof _primitives.Name) {
                              if (bm.name !== "Normal") {
                                return true;
                              }
                              continue;
                            }
                            if (bm !== void 0 && Array.isArray(bm)) {
                              var _iterator2 = _createForOfIteratorHelper(bm), _step2;
                              try {
                                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                                  var element = _step2.value;
                                  if (element instanceof _primitives.Name && element.name !== "Normal") {
                                    return true;
                                  }
                                }
                              } catch (err) {
                                _iterator2.e(err);
                              } finally {
                                _iterator2.f();
                              }
                            }
                          }
                        } catch (err) {
                          _iterator.e(err);
                        } finally {
                          _iterator.f();
                        }
                      }
                      var xObjects = node.get("XObject");
                      if (!(xObjects instanceof _primitives.Dict)) {
                        continue;
                      }
                      var _iterator3 = _createForOfIteratorHelper(xObjects.getRawValues()), _step3;
                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                          var xObject = _step3.value;
                          if (xObject instanceof _primitives.Ref) {
                            if (processed.has(xObject)) {
                              continue;
                            }
                            try {
                              xObject = xref.fetch(xObject);
                            } catch (ex) {
                              processed.put(xObject);
                              (0, _util.info)('hasBlendModes - ignoring XObject: "'.concat(ex, '".'));
                              continue;
                            }
                          }
                          if (!(0, _primitives.isStream)(xObject)) {
                            continue;
                          }
                          if (xObject.dict.objId) {
                            processed.put(xObject.dict.objId);
                          }
                          var xResources = xObject.dict.get("Resources");
                          if (!(xResources instanceof _primitives.Dict)) {
                            continue;
                          }
                          if (xResources.objId && processed.has(xResources.objId)) {
                            continue;
                          }
                          nodes.push(xResources);
                          if (xResources.objId) {
                            processed.put(xResources.objId);
                          }
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                    }
                    processed.forEach(function(ref) {
                      nonBlendModesSet.put(ref);
                    });
                    return false;
                  }
                }, {
                  key: "fetchBuiltInCMap",
                  value: function() {
                    var _fetchBuiltInCMap = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(name) {
                      var cachedData, data, url, response;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              cachedData = this.builtInCMapCache.get(name);
                              if (!cachedData) {
                                _context.next = 3;
                                break;
                              }
                              return _context.abrupt("return", cachedData);
                            case 3:
                              if (!(this.options.cMapUrl !== null)) {
                                _context.next = 19;
                                break;
                              }
                              url = "".concat(this.options.cMapUrl).concat(name, ".bcmap");
                              _context.next = 7;
                              return fetch(url);
                            case 7:
                              response = _context.sent;
                              if (response.ok) {
                                _context.next = 10;
                                break;
                              }
                              throw new Error('fetchBuiltInCMap: failed to fetch file "'.concat(url, '" with "').concat(response.statusText, '".'));
                            case 10:
                              _context.t0 = Uint8Array;
                              _context.next = 13;
                              return response.arrayBuffer();
                            case 13:
                              _context.t1 = _context.sent;
                              _context.t2 = new _context.t0(_context.t1);
                              _context.t3 = _util.CMapCompressionType.BINARY;
                              data = {
                                cMapData: _context.t2,
                                compressionType: _context.t3
                              };
                              _context.next = 22;
                              break;
                            case 19:
                              _context.next = 21;
                              return this.handler.sendWithPromise("FetchBuiltInCMap", {
                                name
                              });
                            case 21:
                              data = _context.sent;
                            case 22:
                              if (data.compressionType !== _util.CMapCompressionType.NONE) {
                                this.builtInCMapCache.set(name, data);
                              }
                              return _context.abrupt("return", data);
                            case 24:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));
                    function fetchBuiltInCMap(_x) {
                      return _fetchBuiltInCMap.apply(this, arguments);
                    }
                    return fetchBuiltInCMap;
                  }()
                }, {
                  key: "fetchStandardFontData",
                  value: function() {
                    var _fetchStandardFontData = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee2(name) {
                      var cachedData, standardFontNameToFileName, filename, data, url, response;
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              cachedData = this.standardFontDataCache.get(name);
                              if (!cachedData) {
                                _context2.next = 3;
                                break;
                              }
                              return _context2.abrupt("return", new _stream.Stream(cachedData));
                            case 3:
                              if (!(this.options.useSystemFonts && name !== "Symbol" && name !== "ZapfDingbats")) {
                                _context2.next = 5;
                                break;
                              }
                              return _context2.abrupt("return", null);
                            case 5:
                              standardFontNameToFileName = (0, _standard_fonts.getFontNameToFileMap)(), filename = standardFontNameToFileName[name];
                              if (!(this.options.standardFontDataUrl !== null)) {
                                _context2.next = 20;
                                break;
                              }
                              url = "".concat(this.options.standardFontDataUrl).concat(filename);
                              _context2.next = 10;
                              return fetch(url);
                            case 10:
                              response = _context2.sent;
                              if (response.ok) {
                                _context2.next = 15;
                                break;
                              }
                              (0, _util.warn)('fetchStandardFontData: failed to fetch file "'.concat(url, '" with "').concat(response.statusText, '".'));
                              _context2.next = 18;
                              break;
                            case 15:
                              _context2.next = 17;
                              return response.arrayBuffer();
                            case 17:
                              data = _context2.sent;
                            case 18:
                              _context2.next = 29;
                              break;
                            case 20:
                              _context2.prev = 20;
                              _context2.next = 23;
                              return this.handler.sendWithPromise("FetchStandardFontData", {
                                filename
                              });
                            case 23:
                              data = _context2.sent;
                              _context2.next = 29;
                              break;
                            case 26:
                              _context2.prev = 26;
                              _context2.t0 = _context2["catch"](20);
                              (0, _util.warn)('fetchStandardFontData: failed to fetch file "'.concat(filename, '" with "').concat(_context2.t0, '".'));
                            case 29:
                              if (data) {
                                _context2.next = 31;
                                break;
                              }
                              return _context2.abrupt("return", null);
                            case 31:
                              this.standardFontDataCache.set(name, data);
                              return _context2.abrupt("return", new _stream.Stream(data));
                            case 33:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2, this, [[20, 26]]);
                    }));
                    function fetchStandardFontData(_x2) {
                      return _fetchStandardFontData.apply(this, arguments);
                    }
                    return fetchStandardFontData;
                  }()
                }, {
                  key: "buildFormXObject",
                  value: function() {
                    var _buildFormXObject = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee3(resources, xobj, smask, operatorList, task, initialState, localColorSpaceCache) {
                      var dict, matrix, bbox, optionalContent, groupOptions, group, groupSubtype, colorSpace, cs, cachedColorSpace, args;
                      return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              dict = xobj.dict;
                              matrix = dict.getArray("Matrix");
                              bbox = dict.getArray("BBox");
                              if (Array.isArray(bbox) && bbox.length === 4) {
                                bbox = _util.Util.normalizeRect(bbox);
                              } else {
                                bbox = null;
                              }
                              if (!dict.has("OC")) {
                                _context3.next = 8;
                                break;
                              }
                              _context3.next = 7;
                              return this.parseMarkedContentProps(dict.get("OC"), resources);
                            case 7:
                              optionalContent = _context3.sent;
                            case 8:
                              if (optionalContent !== void 0) {
                                operatorList.addOp(_util.OPS.beginMarkedContentProps, ["OC", optionalContent]);
                              }
                              group = dict.get("Group");
                              if (!group) {
                                _context3.next = 29;
                                break;
                              }
                              groupOptions = {
                                matrix,
                                bbox,
                                smask,
                                isolated: false,
                                knockout: false
                              };
                              groupSubtype = group.get("S");
                              colorSpace = null;
                              if (!(0, _primitives.isName)(groupSubtype, "Transparency")) {
                                _context3.next = 27;
                                break;
                              }
                              groupOptions.isolated = group.get("I") || false;
                              groupOptions.knockout = group.get("K") || false;
                              if (!group.has("CS")) {
                                _context3.next = 27;
                                break;
                              }
                              cs = group.getRaw("CS");
                              cachedColorSpace = _colorspace.ColorSpace.getCached(cs, this.xref, localColorSpaceCache);
                              if (!cachedColorSpace) {
                                _context3.next = 24;
                                break;
                              }
                              colorSpace = cachedColorSpace;
                              _context3.next = 27;
                              break;
                            case 24:
                              _context3.next = 26;
                              return this.parseColorSpace({
                                cs,
                                resources,
                                localColorSpaceCache
                              });
                            case 26:
                              colorSpace = _context3.sent;
                            case 27:
                              if (smask && smask.backdrop) {
                                colorSpace = colorSpace || _colorspace.ColorSpace.singletons.rgb;
                                smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);
                              }
                              operatorList.addOp(_util.OPS.beginGroup, [groupOptions]);
                            case 29:
                              args = group ? [matrix, null] : [matrix, bbox];
                              operatorList.addOp(_util.OPS.paintFormXObjectBegin, args);
                              return _context3.abrupt("return", this.getOperatorList({
                                stream: xobj,
                                task,
                                resources: dict.get("Resources") || resources,
                                operatorList,
                                initialState
                              }).then(function() {
                                operatorList.addOp(_util.OPS.paintFormXObjectEnd, []);
                                if (group) {
                                  operatorList.addOp(_util.OPS.endGroup, [groupOptions]);
                                }
                                if (optionalContent !== void 0) {
                                  operatorList.addOp(_util.OPS.endMarkedContent, []);
                                }
                              }));
                            case 32:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3, this);
                    }));
                    function buildFormXObject(_x3, _x4, _x5, _x6, _x7, _x8, _x9) {
                      return _buildFormXObject.apply(this, arguments);
                    }
                    return buildFormXObject;
                  }()
                }, {
                  key: "_sendImgData",
                  value: function _sendImgData(objId, imgData) {
                    var cacheGlobally = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                    var transfers = imgData ? [imgData.data.buffer] : null;
                    if (this.parsingType3Font || cacheGlobally) {
                      return this.handler.send("commonobj", [objId, "Image", imgData], transfers);
                    }
                    return this.handler.send("obj", [objId, this.pageIndex, "Image", imgData], transfers);
                  }
                }, {
                  key: "buildPaintImageXObject",
                  value: function() {
                    var _buildPaintImageXObject = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee4(_ref2) {
                      var _this = this;
                      var resources, image, _ref2$isInline, isInline, operatorList, cacheKey, localImageCache, localColorSpaceCache, dict, imageRef, w, h, maxImageSize, optionalContent, imageMask, interpolate, imgData, args, bitStrideLength, imgArray, decode, softMask, mask, SMALL_IMAGE_DIMENSIONS, imageObj, objId, cacheGlobally;
                      return _regenerator["default"].wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              resources = _ref2.resources, image = _ref2.image, _ref2$isInline = _ref2.isInline, isInline = _ref2$isInline === void 0 ? false : _ref2$isInline, operatorList = _ref2.operatorList, cacheKey = _ref2.cacheKey, localImageCache = _ref2.localImageCache, localColorSpaceCache = _ref2.localColorSpaceCache;
                              dict = image.dict;
                              imageRef = dict.objId;
                              w = dict.get("W", "Width");
                              h = dict.get("H", "Height");
                              if (!(!(w && (0, _util.isNum)(w)) || !(h && (0, _util.isNum)(h)))) {
                                _context4.next = 8;
                                break;
                              }
                              (0, _util.warn)("Image dimensions are missing, or not numbers.");
                              return _context4.abrupt("return");
                            case 8:
                              maxImageSize = this.options.maxImageSize;
                              if (!(maxImageSize !== -1 && w * h > maxImageSize)) {
                                _context4.next = 12;
                                break;
                              }
                              (0, _util.warn)("Image exceeded maximum allowed size and was removed.");
                              return _context4.abrupt("return");
                            case 12:
                              if (!dict.has("OC")) {
                                _context4.next = 16;
                                break;
                              }
                              _context4.next = 15;
                              return this.parseMarkedContentProps(dict.get("OC"), resources);
                            case 15:
                              optionalContent = _context4.sent;
                            case 16:
                              if (optionalContent !== void 0) {
                                operatorList.addOp(_util.OPS.beginMarkedContentProps, ["OC", optionalContent]);
                              }
                              imageMask = dict.get("IM", "ImageMask") || false;
                              interpolate = dict.get("I", "Interpolate");
                              if (!imageMask) {
                                _context4.next = 30;
                                break;
                              }
                              bitStrideLength = w + 7 >> 3;
                              imgArray = image.getBytes(bitStrideLength * h, true);
                              decode = dict.getArray("D", "Decode");
                              imgData = _image.PDFImage.createMask({
                                imgArray,
                                width: w,
                                height: h,
                                imageIsFromDecodeStream: image instanceof _decode_stream.DecodeStream,
                                inverseDecode: !!decode && decode[0] > 0,
                                interpolate
                              });
                              imgData.cached = !!cacheKey;
                              args = [imgData];
                              operatorList.addOp(_util.OPS.paintImageMaskXObject, args);
                              if (cacheKey) {
                                localImageCache.set(cacheKey, imageRef, {
                                  fn: _util.OPS.paintImageMaskXObject,
                                  args
                                });
                              }
                              if (optionalContent !== void 0) {
                                operatorList.addOp(_util.OPS.endMarkedContent, []);
                              }
                              return _context4.abrupt("return");
                            case 30:
                              softMask = dict.get("SM", "SMask") || false;
                              mask = dict.get("Mask") || false;
                              SMALL_IMAGE_DIMENSIONS = 200;
                              if (!(isInline && !softMask && !mask && w + h < SMALL_IMAGE_DIMENSIONS)) {
                                _context4.next = 39;
                                break;
                              }
                              imageObj = new _image.PDFImage({
                                xref: this.xref,
                                res: resources,
                                image,
                                isInline,
                                pdfFunctionFactory: this._pdfFunctionFactory,
                                localColorSpaceCache
                              });
                              imgData = imageObj.createImageData(true);
                              operatorList.addOp(_util.OPS.paintInlineImageXObject, [imgData]);
                              if (optionalContent !== void 0) {
                                operatorList.addOp(_util.OPS.endMarkedContent, []);
                              }
                              return _context4.abrupt("return");
                            case 39:
                              objId = "img_".concat(this.idFactory.createObjId()), cacheGlobally = false;
                              if (this.parsingType3Font) {
                                objId = "".concat(this.idFactory.getDocId(), "_type3_").concat(objId);
                              } else if (imageRef) {
                                cacheGlobally = this.globalImageCache.shouldCache(imageRef, this.pageIndex);
                                if (cacheGlobally) {
                                  objId = "".concat(this.idFactory.getDocId(), "_").concat(objId);
                                }
                              }
                              operatorList.addDependency(objId);
                              args = [objId, w, h];
                              _image.PDFImage.buildImage({
                                xref: this.xref,
                                res: resources,
                                image,
                                isInline,
                                pdfFunctionFactory: this._pdfFunctionFactory,
                                localColorSpaceCache
                              }).then(function(imageObj2) {
                                imgData = imageObj2.createImageData(false);
                                if (cacheKey && imageRef && cacheGlobally) {
                                  _this.globalImageCache.addByteSize(imageRef, imgData.data.length);
                                }
                                return _this._sendImgData(objId, imgData, cacheGlobally);
                              })["catch"](function(reason) {
                                (0, _util.warn)('Unable to decode image "'.concat(objId, '": "').concat(reason, '".'));
                                return _this._sendImgData(objId, null, cacheGlobally);
                              });
                              operatorList.addOp(_util.OPS.paintImageXObject, args);
                              if (cacheKey) {
                                localImageCache.set(cacheKey, imageRef, {
                                  fn: _util.OPS.paintImageXObject,
                                  args
                                });
                                if (imageRef) {
                                  (0, _util.assert)(!isInline, "Cannot cache an inline image globally.");
                                  this.globalImageCache.addPageIndex(imageRef, this.pageIndex);
                                  if (cacheGlobally) {
                                    this.globalImageCache.setData(imageRef, {
                                      objId,
                                      fn: _util.OPS.paintImageXObject,
                                      args,
                                      byteSize: 0
                                    });
                                  }
                                }
                              }
                              if (optionalContent !== void 0) {
                                operatorList.addOp(_util.OPS.endMarkedContent, []);
                              }
                            case 47:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4, this);
                    }));
                    function buildPaintImageXObject(_x10) {
                      return _buildPaintImageXObject.apply(this, arguments);
                    }
                    return buildPaintImageXObject;
                  }()
                }, {
                  key: "handleSMask",
                  value: function handleSMask(smask, resources, operatorList, task, stateManager, localColorSpaceCache) {
                    var smaskContent = smask.get("G");
                    var smaskOptions = {
                      subtype: smask.get("S").name,
                      backdrop: smask.get("BC")
                    };
                    var transferObj = smask.get("TR");
                    if ((0, _function.isPDFFunction)(transferObj)) {
                      var transferFn = this._pdfFunctionFactory.create(transferObj);
                      var transferMap = new Uint8Array(256);
                      var tmp = new Float32Array(1);
                      for (var i = 0; i < 256; i++) {
                        tmp[0] = i / 255;
                        transferFn(tmp, 0, tmp, 0);
                        transferMap[i] = tmp[0] * 255 | 0;
                      }
                      smaskOptions.transferMap = transferMap;
                    }
                    return this.buildFormXObject(resources, smaskContent, smaskOptions, operatorList, task, stateManager.state.clone(), localColorSpaceCache);
                  }
                }, {
                  key: "handleTransferFunction",
                  value: function handleTransferFunction(tr) {
                    var transferArray;
                    if (Array.isArray(tr)) {
                      transferArray = tr;
                    } else if ((0, _function.isPDFFunction)(tr)) {
                      transferArray = [tr];
                    } else {
                      return null;
                    }
                    var transferMaps = [];
                    var numFns = 0, numEffectfulFns = 0;
                    var _iterator4 = _createForOfIteratorHelper(transferArray), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var entry = _step4.value;
                        var transferObj = this.xref.fetchIfRef(entry);
                        numFns++;
                        if ((0, _primitives.isName)(transferObj, "Identity")) {
                          transferMaps.push(null);
                          continue;
                        } else if (!(0, _function.isPDFFunction)(transferObj)) {
                          return null;
                        }
                        var transferFn = this._pdfFunctionFactory.create(transferObj);
                        var transferMap = new Uint8Array(256), tmp = new Float32Array(1);
                        for (var j = 0; j < 256; j++) {
                          tmp[0] = j / 255;
                          transferFn(tmp, 0, tmp, 0);
                          transferMap[j] = tmp[0] * 255 | 0;
                        }
                        transferMaps.push(transferMap);
                        numEffectfulFns++;
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                    if (!(numFns === 1 || numFns === 4)) {
                      return null;
                    }
                    if (numEffectfulFns === 0) {
                      return null;
                    }
                    return transferMaps;
                  }
                }, {
                  key: "handleTilingType",
                  value: function handleTilingType(fn, color, resources, pattern, patternDict, operatorList, task, localTilingPatternCache) {
                    var _this2 = this;
                    var tilingOpList = new _operator_list.OperatorList();
                    var patternResources = _primitives.Dict.merge({
                      xref: this.xref,
                      dictArray: [patternDict.get("Resources"), resources]
                    });
                    return this.getOperatorList({
                      stream: pattern,
                      task,
                      resources: patternResources,
                      operatorList: tilingOpList
                    }).then(function() {
                      var operatorListIR = tilingOpList.getIR();
                      var tilingPatternIR = (0, _pattern.getTilingPatternIR)(operatorListIR, patternDict, color);
                      operatorList.addDependencies(tilingOpList.dependencies);
                      operatorList.addOp(fn, tilingPatternIR);
                      if (patternDict.objId) {
                        localTilingPatternCache.set(null, patternDict.objId, {
                          operatorListIR,
                          dict: patternDict
                        });
                      }
                    })["catch"](function(reason) {
                      if (reason instanceof _util.AbortException) {
                        return;
                      }
                      if (_this2.options.ignoreErrors) {
                        _this2.handler.send("UnsupportedFeature", {
                          featureId: _util.UNSUPPORTED_FEATURES.errorTilingPattern
                        });
                        (0, _util.warn)('handleTilingType - ignoring pattern: "'.concat(reason, '".'));
                        return;
                      }
                      throw reason;
                    });
                  }
                }, {
                  key: "handleSetFont",
                  value: function handleSetFont(resources, fontArgs, fontRef, operatorList, task, state) {
                    var _this3 = this;
                    var fallbackFontDict = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
                    var cssFontInfo = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
                    var fontName = fontArgs && fontArgs[0] instanceof _primitives.Name ? fontArgs[0].name : null;
                    return this.loadFont(fontName, fontRef, resources, fallbackFontDict, cssFontInfo).then(function(translated) {
                      if (!translated.font.isType3Font) {
                        return translated;
                      }
                      return translated.loadType3Data(_this3, resources, task).then(function() {
                        operatorList.addDependencies(translated.type3Dependencies);
                        return translated;
                      })["catch"](function(reason) {
                        _this3.handler.send("UnsupportedFeature", {
                          featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadType3
                        });
                        return new TranslatedFont({
                          loadedName: "g_font_error",
                          font: new _fonts.ErrorFont("Type3 font load error: ".concat(reason)),
                          dict: translated.font,
                          evaluatorOptions: _this3.options
                        });
                      });
                    }).then(function(translated) {
                      state.font = translated.font;
                      translated.send(_this3.handler);
                      return translated.loadedName;
                    });
                  }
                }, {
                  key: "handleText",
                  value: function handleText(chars, state) {
                    var font = state.font;
                    var glyphs = font.charsToGlyphs(chars);
                    if (font.data) {
                      var isAddToPathSet = !!(state.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);
                      if (isAddToPathSet || state.fillColorSpace.name === "Pattern" || font.disableFontFace || this.options.disableFontFace) {
                        PartialEvaluator2.buildFontPaths(font, glyphs, this.handler, this.options);
                      }
                    }
                    return glyphs;
                  }
                }, {
                  key: "ensureStateFont",
                  value: function ensureStateFont(state) {
                    if (state.font) {
                      return;
                    }
                    var reason = new _util.FormatError("Missing setFont (Tf) operator before text rendering operator.");
                    if (this.options.ignoreErrors) {
                      this.handler.send("UnsupportedFeature", {
                        featureId: _util.UNSUPPORTED_FEATURES.errorFontState
                      });
                      (0, _util.warn)('ensureStateFont: "'.concat(reason, '".'));
                      return;
                    }
                    throw reason;
                  }
                }, {
                  key: "setGState",
                  value: function() {
                    var _setGState = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee5(_ref3) {
                      var _this4 = this;
                      var resources, gState, operatorList, cacheKey, task, stateManager, localGStateCache, localColorSpaceCache, gStateRef, isSimpleGState, gStateObj, gStateKeys, promise, _loop, i, ii;
                      return _regenerator["default"].wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              resources = _ref3.resources, gState = _ref3.gState, operatorList = _ref3.operatorList, cacheKey = _ref3.cacheKey, task = _ref3.task, stateManager = _ref3.stateManager, localGStateCache = _ref3.localGStateCache, localColorSpaceCache = _ref3.localColorSpaceCache;
                              gStateRef = gState.objId;
                              isSimpleGState = true;
                              gStateObj = [];
                              gStateKeys = gState.getKeys();
                              promise = Promise.resolve();
                              _loop = function _loop2(i2, ii2) {
                                var key = gStateKeys[i2];
                                var value = gState.get(key);
                                switch (key) {
                                  case "Type":
                                    break;
                                  case "LW":
                                  case "LC":
                                  case "LJ":
                                  case "ML":
                                  case "D":
                                  case "RI":
                                  case "FL":
                                  case "CA":
                                  case "ca":
                                    gStateObj.push([key, value]);
                                    break;
                                  case "Font":
                                    isSimpleGState = false;
                                    promise = promise.then(function() {
                                      return _this4.handleSetFont(resources, null, value[0], operatorList, task, stateManager.state).then(function(loadedName) {
                                        operatorList.addDependency(loadedName);
                                        gStateObj.push([key, [loadedName, value[1]]]);
                                      });
                                    });
                                    break;
                                  case "BM":
                                    gStateObj.push([key, normalizeBlendMode(value)]);
                                    break;
                                  case "SMask":
                                    if ((0, _primitives.isName)(value, "None")) {
                                      gStateObj.push([key, false]);
                                      break;
                                    }
                                    if ((0, _primitives.isDict)(value)) {
                                      isSimpleGState = false;
                                      promise = promise.then(function() {
                                        return _this4.handleSMask(value, resources, operatorList, task, stateManager, localColorSpaceCache);
                                      });
                                      gStateObj.push([key, true]);
                                    } else {
                                      (0, _util.warn)("Unsupported SMask type");
                                    }
                                    break;
                                  case "TR":
                                    var transferMaps = _this4.handleTransferFunction(value);
                                    gStateObj.push([key, transferMaps]);
                                    break;
                                  case "OP":
                                  case "op":
                                  case "OPM":
                                  case "BG":
                                  case "BG2":
                                  case "UCR":
                                  case "UCR2":
                                  case "TR2":
                                  case "HT":
                                  case "SM":
                                  case "SA":
                                  case "AIS":
                                  case "TK":
                                    (0, _util.info)("graphic state operator " + key);
                                    break;
                                  default:
                                    (0, _util.info)("Unknown graphic state operator " + key);
                                    break;
                                }
                              };
                              for (i = 0, ii = gStateKeys.length; i < ii; i++) {
                                _loop(i, ii);
                              }
                              return _context5.abrupt("return", promise.then(function() {
                                if (gStateObj.length > 0) {
                                  operatorList.addOp(_util.OPS.setGState, [gStateObj]);
                                }
                                if (isSimpleGState) {
                                  localGStateCache.set(cacheKey, gStateRef, gStateObj);
                                }
                              }));
                            case 9:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      }, _callee5);
                    }));
                    function setGState(_x11) {
                      return _setGState.apply(this, arguments);
                    }
                    return setGState;
                  }()
                }, {
                  key: "loadFont",
                  value: function loadFont(fontName, font, resources) {
                    var _this5 = this;
                    var fallbackFontDict = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
                    var cssFontInfo = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
                    var errorFont = /* @__PURE__ */ function() {
                      var _ref4 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee6() {
                        return _regenerator["default"].wrap(function _callee6$(_context6) {
                          while (1) {
                            switch (_context6.prev = _context6.next) {
                              case 0:
                                return _context6.abrupt("return", new TranslatedFont({
                                  loadedName: "g_font_error",
                                  font: new _fonts.ErrorFont('Font "'.concat(fontName, '" is not available.')),
                                  dict: font,
                                  evaluatorOptions: _this5.options
                                }));
                              case 1:
                              case "end":
                                return _context6.stop();
                            }
                          }
                        }, _callee6);
                      }));
                      return function errorFont2() {
                        return _ref4.apply(this, arguments);
                      };
                    }();
                    var xref = this.xref;
                    var fontRef;
                    if (font) {
                      if (!(0, _primitives.isRef)(font)) {
                        throw new _util.FormatError('The "font" object should be a reference.');
                      }
                      fontRef = font;
                    } else {
                      var fontRes = resources.get("Font");
                      if (fontRes) {
                        fontRef = fontRes.getRaw(fontName);
                      }
                    }
                    if (!fontRef) {
                      var partialMsg = 'Font "'.concat(fontName || font && font.toString(), '" is not available');
                      if (!this.options.ignoreErrors && !this.parsingType3Font) {
                        (0, _util.warn)("".concat(partialMsg, "."));
                        return errorFont();
                      }
                      this.handler.send("UnsupportedFeature", {
                        featureId: _util.UNSUPPORTED_FEATURES.errorFontMissing
                      });
                      (0, _util.warn)("".concat(partialMsg, " -- attempting to fallback to a default font."));
                      if (fallbackFontDict) {
                        fontRef = fallbackFontDict;
                      } else {
                        fontRef = PartialEvaluator2.fallbackFontDict;
                      }
                    }
                    if (this.fontCache.has(fontRef)) {
                      return this.fontCache.get(fontRef);
                    }
                    font = xref.fetchIfRef(fontRef);
                    if (!(0, _primitives.isDict)(font)) {
                      return errorFont();
                    }
                    if (font.cacheKey && this.fontCache.has(font.cacheKey)) {
                      return this.fontCache.get(font.cacheKey);
                    }
                    var fontCapability = (0, _util.createPromiseCapability)();
                    var preEvaluatedFont;
                    try {
                      preEvaluatedFont = this.preEvaluateFont(font);
                      preEvaluatedFont.cssFontInfo = cssFontInfo;
                    } catch (reason) {
                      (0, _util.warn)('loadFont - preEvaluateFont failed: "'.concat(reason, '".'));
                      return errorFont();
                    }
                    var _preEvaluatedFont = preEvaluatedFont, descriptor = _preEvaluatedFont.descriptor, hash = _preEvaluatedFont.hash;
                    var fontRefIsRef = (0, _primitives.isRef)(fontRef);
                    var fontID;
                    if (fontRefIsRef) {
                      fontID = "f".concat(fontRef.toString());
                    }
                    if (hash && (0, _primitives.isDict)(descriptor)) {
                      if (!descriptor.fontAliases) {
                        descriptor.fontAliases = /* @__PURE__ */ Object.create(null);
                      }
                      var fontAliases = descriptor.fontAliases;
                      if (fontAliases[hash]) {
                        var aliasFontRef = fontAliases[hash].aliasRef;
                        if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {
                          this.fontCache.putAlias(fontRef, aliasFontRef);
                          return this.fontCache.get(fontRef);
                        }
                      } else {
                        fontAliases[hash] = {
                          fontID: this.idFactory.createFontId()
                        };
                      }
                      if (fontRefIsRef) {
                        fontAliases[hash].aliasRef = fontRef;
                      }
                      fontID = fontAliases[hash].fontID;
                    }
                    if (fontRefIsRef) {
                      this.fontCache.put(fontRef, fontCapability.promise);
                    } else {
                      if (!fontID) {
                        fontID = this.idFactory.createFontId();
                      }
                      font.cacheKey = "cacheKey_".concat(fontID);
                      this.fontCache.put(font.cacheKey, fontCapability.promise);
                    }
                    (0, _util.assert)(fontID && fontID.startsWith("f"), 'The "fontID" must be (correctly) defined.');
                    font.loadedName = "".concat(this.idFactory.getDocId(), "_").concat(fontID);
                    this.translateFont(preEvaluatedFont).then(function(translatedFont) {
                      if (translatedFont.fontType !== void 0) {
                        xref.stats.addFontType(translatedFont.fontType);
                      }
                      fontCapability.resolve(new TranslatedFont({
                        loadedName: font.loadedName,
                        font: translatedFont,
                        dict: font,
                        evaluatorOptions: _this5.options
                      }));
                    })["catch"](function(reason) {
                      _this5.handler.send("UnsupportedFeature", {
                        featureId: _util.UNSUPPORTED_FEATURES.errorFontTranslate
                      });
                      (0, _util.warn)('loadFont - translateFont failed: "'.concat(reason, '".'));
                      try {
                        var fontFile3 = descriptor && descriptor.get("FontFile3");
                        var subtype = fontFile3 && fontFile3.get("Subtype");
                        var fontType = (0, _fonts_utils.getFontType)(preEvaluatedFont.type, subtype && subtype.name);
                        if (fontType !== void 0) {
                          xref.stats.addFontType(fontType);
                        }
                      } catch (ex) {
                      }
                      fontCapability.resolve(new TranslatedFont({
                        loadedName: font.loadedName,
                        font: new _fonts.ErrorFont(reason instanceof Error ? reason.message : reason),
                        dict: font,
                        evaluatorOptions: _this5.options
                      }));
                    });
                    return fontCapability.promise;
                  }
                }, {
                  key: "buildPath",
                  value: function buildPath(operatorList, fn, args) {
                    var parsingText = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
                    var lastIndex = operatorList.length - 1;
                    if (!args) {
                      args = [];
                    }
                    if (lastIndex < 0 || operatorList.fnArray[lastIndex] !== _util.OPS.constructPath) {
                      if (parsingText) {
                        (0, _util.warn)('Encountered path operator "'.concat(fn, '" inside of a text object.'));
                        operatorList.addOp(_util.OPS.save, null);
                      }
                      operatorList.addOp(_util.OPS.constructPath, [[fn], args]);
                      if (parsingText) {
                        operatorList.addOp(_util.OPS.restore, null);
                      }
                    } else {
                      var opArgs = operatorList.argsArray[lastIndex];
                      opArgs[0].push(fn);
                      Array.prototype.push.apply(opArgs[1], args);
                    }
                  }
                }, {
                  key: "parseColorSpace",
                  value: function parseColorSpace(_ref5) {
                    var _this6 = this;
                    var cs = _ref5.cs, resources = _ref5.resources, localColorSpaceCache = _ref5.localColorSpaceCache;
                    return _colorspace.ColorSpace.parseAsync({
                      cs,
                      xref: this.xref,
                      resources,
                      pdfFunctionFactory: this._pdfFunctionFactory,
                      localColorSpaceCache
                    })["catch"](function(reason) {
                      if (reason instanceof _util.AbortException) {
                        return null;
                      }
                      if (_this6.options.ignoreErrors) {
                        _this6.handler.send("UnsupportedFeature", {
                          featureId: _util.UNSUPPORTED_FEATURES.errorColorSpace
                        });
                        (0, _util.warn)('parseColorSpace - ignoring ColorSpace: "'.concat(reason, '".'));
                        return null;
                      }
                      throw reason;
                    });
                  }
                }, {
                  key: "parseShading",
                  value: function parseShading(_ref6) {
                    var shading = _ref6.shading, resources = _ref6.resources, localColorSpaceCache = _ref6.localColorSpaceCache, localShadingPatternCache = _ref6.localShadingPatternCache;
                    var id = localShadingPatternCache.get(shading);
                    if (!id) {
                      var shadingFill = _pattern.Pattern.parseShading(shading, this.xref, resources, this.handler, this._pdfFunctionFactory, localColorSpaceCache);
                      var patternIR = shadingFill.getIR();
                      id = "pattern_".concat(this.idFactory.createObjId());
                      localShadingPatternCache.set(shading, id);
                      this.handler.send("obj", [id, this.pageIndex, "Pattern", patternIR]);
                    }
                    return id;
                  }
                }, {
                  key: "handleColorN",
                  value: function handleColorN(operatorList, fn, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache, localShadingPatternCache) {
                    var patternName = args.pop();
                    if (patternName instanceof _primitives.Name) {
                      var rawPattern = patterns.getRaw(patternName.name);
                      var localTilingPattern = rawPattern instanceof _primitives.Ref && localTilingPatternCache.getByRef(rawPattern);
                      if (localTilingPattern) {
                        try {
                          var color = cs.base ? cs.base.getRgb(args, 0) : null;
                          var tilingPatternIR = (0, _pattern.getTilingPatternIR)(localTilingPattern.operatorListIR, localTilingPattern.dict, color);
                          operatorList.addOp(fn, tilingPatternIR);
                          return void 0;
                        } catch (ex) {
                        }
                      }
                      var pattern = this.xref.fetchIfRef(rawPattern);
                      if (pattern) {
                        var dict = (0, _primitives.isStream)(pattern) ? pattern.dict : pattern;
                        var typeNum = dict.get("PatternType");
                        if (typeNum === PatternType.TILING) {
                          var _color = cs.base ? cs.base.getRgb(args, 0) : null;
                          return this.handleTilingType(fn, _color, resources, pattern, dict, operatorList, task, localTilingPatternCache);
                        } else if (typeNum === PatternType.SHADING) {
                          var shading = dict.get("Shading");
                          var matrix = dict.getArray("Matrix");
                          var objId = this.parseShading({
                            shading,
                            resources,
                            localColorSpaceCache,
                            localShadingPatternCache
                          });
                          operatorList.addOp(fn, ["Shading", objId, matrix]);
                          return void 0;
                        }
                        throw new _util.FormatError("Unknown PatternType: ".concat(typeNum));
                      }
                    }
                    throw new _util.FormatError("Unknown PatternName: ".concat(patternName));
                  }
                }, {
                  key: "_parseVisibilityExpression",
                  value: function _parseVisibilityExpression(array, nestingCounter, currentResult) {
                    var MAX_NESTING = 10;
                    if (++nestingCounter > MAX_NESTING) {
                      (0, _util.warn)("Visibility expression is too deeply nested");
                      return;
                    }
                    var length = array.length;
                    var operator = this.xref.fetchIfRef(array[0]);
                    if (length < 2 || !(0, _primitives.isName)(operator)) {
                      (0, _util.warn)("Invalid visibility expression");
                      return;
                    }
                    switch (operator.name) {
                      case "And":
                      case "Or":
                      case "Not":
                        currentResult.push(operator.name);
                        break;
                      default:
                        (0, _util.warn)("Invalid operator ".concat(operator.name, " in visibility expression"));
                        return;
                    }
                    for (var i = 1; i < length; i++) {
                      var raw = array[i];
                      var object = this.xref.fetchIfRef(raw);
                      if (Array.isArray(object)) {
                        var nestedResult = [];
                        currentResult.push(nestedResult);
                        this._parseVisibilityExpression(object, nestingCounter, nestedResult);
                      } else if ((0, _primitives.isRef)(raw)) {
                        currentResult.push(raw.toString());
                      }
                    }
                  }
                }, {
                  key: "parseMarkedContentProps",
                  value: function() {
                    var _parseMarkedContentProps = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee7(contentProperties, resources) {
                      var optionalContent, properties, optionalContentType, expression, result, optionalContentGroups, groupIds, _iterator5, _step5, ocg;
                      return _regenerator["default"].wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              if (!(0, _primitives.isName)(contentProperties)) {
                                _context7.next = 5;
                                break;
                              }
                              properties = resources.get("Properties");
                              optionalContent = properties.get(contentProperties.name);
                              _context7.next = 10;
                              break;
                            case 5:
                              if (!(0, _primitives.isDict)(contentProperties)) {
                                _context7.next = 9;
                                break;
                              }
                              optionalContent = contentProperties;
                              _context7.next = 10;
                              break;
                            case 9:
                              throw new _util.FormatError("Optional content properties malformed.");
                            case 10:
                              optionalContentType = optionalContent.get("Type").name;
                              if (!(optionalContentType === "OCG")) {
                                _context7.next = 15;
                                break;
                              }
                              return _context7.abrupt("return", {
                                type: optionalContentType,
                                id: optionalContent.objId
                              });
                            case 15:
                              if (!(optionalContentType === "OCMD")) {
                                _context7.next = 31;
                                break;
                              }
                              expression = optionalContent.get("VE");
                              if (!Array.isArray(expression)) {
                                _context7.next = 22;
                                break;
                              }
                              result = [];
                              this._parseVisibilityExpression(expression, 0, result);
                              if (!(result.length > 0)) {
                                _context7.next = 22;
                                break;
                              }
                              return _context7.abrupt("return", {
                                type: "OCMD",
                                expression: result
                              });
                            case 22:
                              optionalContentGroups = optionalContent.get("OCGs");
                              if (!(Array.isArray(optionalContentGroups) || (0, _primitives.isDict)(optionalContentGroups))) {
                                _context7.next = 29;
                                break;
                              }
                              groupIds = [];
                              if (Array.isArray(optionalContentGroups)) {
                                _iterator5 = _createForOfIteratorHelper(optionalContentGroups);
                                try {
                                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                                    ocg = _step5.value;
                                    groupIds.push(ocg.toString());
                                  }
                                } catch (err) {
                                  _iterator5.e(err);
                                } finally {
                                  _iterator5.f();
                                }
                              } else {
                                groupIds.push(optionalContentGroups.objId);
                              }
                              return _context7.abrupt("return", {
                                type: optionalContentType,
                                ids: groupIds,
                                policy: (0, _primitives.isName)(optionalContent.get("P")) ? optionalContent.get("P").name : null,
                                expression: null
                              });
                            case 29:
                              if (!(0, _primitives.isRef)(optionalContentGroups)) {
                                _context7.next = 31;
                                break;
                              }
                              return _context7.abrupt("return", {
                                type: optionalContentType,
                                id: optionalContentGroups.toString()
                              });
                            case 31:
                              return _context7.abrupt("return", null);
                            case 32:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7, this);
                    }));
                    function parseMarkedContentProps(_x12, _x13) {
                      return _parseMarkedContentProps.apply(this, arguments);
                    }
                    return parseMarkedContentProps;
                  }()
                }, {
                  key: "getOperatorList",
                  value: function getOperatorList(_ref7) {
                    var _this7 = this;
                    var stream = _ref7.stream, task = _ref7.task, resources = _ref7.resources, operatorList = _ref7.operatorList, _ref7$initialState = _ref7.initialState, initialState = _ref7$initialState === void 0 ? null : _ref7$initialState, _ref7$fallbackFontDic = _ref7.fallbackFontDict, fallbackFontDict = _ref7$fallbackFontDic === void 0 ? null : _ref7$fallbackFontDic;
                    resources = resources || _primitives.Dict.empty;
                    initialState = initialState || new EvalState();
                    if (!operatorList) {
                      throw new Error('getOperatorList: missing "operatorList" parameter');
                    }
                    var self2 = this;
                    var xref = this.xref;
                    var parsingText = false;
                    var localImageCache = new _image_utils.LocalImageCache();
                    var localColorSpaceCache = new _image_utils.LocalColorSpaceCache();
                    var localGStateCache = new _image_utils.LocalGStateCache();
                    var localTilingPatternCache = new _image_utils.LocalTilingPatternCache();
                    var localShadingPatternCache = /* @__PURE__ */ new Map();
                    var xobjs = resources.get("XObject") || _primitives.Dict.empty;
                    var patterns = resources.get("Pattern") || _primitives.Dict.empty;
                    var stateManager = new StateManager(initialState);
                    var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
                    var timeSlotManager = new TimeSlotManager();
                    function closePendingRestoreOPS(argument) {
                      for (var i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {
                        operatorList.addOp(_util.OPS.restore, []);
                      }
                    }
                    return new Promise(function promiseBody(resolve, reject) {
                      var next = function next2(promise) {
                        Promise.all([promise, operatorList.ready]).then(function() {
                          try {
                            promiseBody(resolve, reject);
                          } catch (ex) {
                            reject(ex);
                          }
                        }, reject);
                      };
                      task.ensureNotTerminated();
                      timeSlotManager.reset();
                      var operation = {};
                      var stop, i, ii, cs, name, isValidName;
                      while (!(stop = timeSlotManager.check())) {
                        operation.args = null;
                        if (!preprocessor.read(operation)) {
                          break;
                        }
                        var args = operation.args;
                        var fn = operation.fn;
                        switch (fn | 0) {
                          case _util.OPS.paintXObject:
                            isValidName = args[0] instanceof _primitives.Name;
                            name = args[0].name;
                            if (isValidName) {
                              var localImage = localImageCache.getByName(name);
                              if (localImage) {
                                operatorList.addOp(localImage.fn, localImage.args);
                                args = null;
                                continue;
                              }
                            }
                            next(new Promise(function(resolveXObject, rejectXObject) {
                              if (!isValidName) {
                                throw new _util.FormatError("XObject must be referred to by name.");
                              }
                              var xobj = xobjs.getRaw(name);
                              if (xobj instanceof _primitives.Ref) {
                                var _localImage = localImageCache.getByRef(xobj);
                                if (_localImage) {
                                  operatorList.addOp(_localImage.fn, _localImage.args);
                                  resolveXObject();
                                  return;
                                }
                                var globalImage = self2.globalImageCache.getData(xobj, self2.pageIndex);
                                if (globalImage) {
                                  operatorList.addDependency(globalImage.objId);
                                  operatorList.addOp(globalImage.fn, globalImage.args);
                                  resolveXObject();
                                  return;
                                }
                                xobj = xref.fetch(xobj);
                              }
                              if (!(0, _primitives.isStream)(xobj)) {
                                throw new _util.FormatError("XObject should be a stream");
                              }
                              var type = xobj.dict.get("Subtype");
                              if (!(0, _primitives.isName)(type)) {
                                throw new _util.FormatError("XObject should have a Name subtype");
                              }
                              if (type.name === "Form") {
                                stateManager.save();
                                self2.buildFormXObject(resources, xobj, null, operatorList, task, stateManager.state.clone(), localColorSpaceCache).then(function() {
                                  stateManager.restore();
                                  resolveXObject();
                                }, rejectXObject);
                                return;
                              } else if (type.name === "Image") {
                                self2.buildPaintImageXObject({
                                  resources,
                                  image: xobj,
                                  operatorList,
                                  cacheKey: name,
                                  localImageCache,
                                  localColorSpaceCache
                                }).then(resolveXObject, rejectXObject);
                                return;
                              } else if (type.name === "PS") {
                                (0, _util.info)("Ignored XObject subtype PS");
                              } else {
                                throw new _util.FormatError("Unhandled XObject subtype ".concat(type.name));
                              }
                              resolveXObject();
                            })["catch"](function(reason) {
                              if (reason instanceof _util.AbortException) {
                                return;
                              }
                              if (self2.options.ignoreErrors) {
                                self2.handler.send("UnsupportedFeature", {
                                  featureId: _util.UNSUPPORTED_FEATURES.errorXObject
                                });
                                (0, _util.warn)('getOperatorList - ignoring XObject: "'.concat(reason, '".'));
                                return;
                              }
                              throw reason;
                            }));
                            return;
                          case _util.OPS.setFont:
                            var fontSize = args[1];
                            next(self2.handleSetFont(resources, args, null, operatorList, task, stateManager.state, fallbackFontDict).then(function(loadedName) {
                              operatorList.addDependency(loadedName);
                              operatorList.addOp(_util.OPS.setFont, [loadedName, fontSize]);
                            }));
                            return;
                          case _util.OPS.beginText:
                            parsingText = true;
                            break;
                          case _util.OPS.endText:
                            parsingText = false;
                            break;
                          case _util.OPS.endInlineImage:
                            var cacheKey = args[0].cacheKey;
                            if (cacheKey) {
                              var _localImage2 = localImageCache.getByName(cacheKey);
                              if (_localImage2) {
                                operatorList.addOp(_localImage2.fn, _localImage2.args);
                                args = null;
                                continue;
                              }
                            }
                            next(self2.buildPaintImageXObject({
                              resources,
                              image: args[0],
                              isInline: true,
                              operatorList,
                              cacheKey,
                              localImageCache,
                              localColorSpaceCache
                            }));
                            return;
                          case _util.OPS.showText:
                            if (!stateManager.state.font) {
                              self2.ensureStateFont(stateManager.state);
                              continue;
                            }
                            args[0] = self2.handleText(args[0], stateManager.state);
                            break;
                          case _util.OPS.showSpacedText:
                            if (!stateManager.state.font) {
                              self2.ensureStateFont(stateManager.state);
                              continue;
                            }
                            var arr = args[0];
                            var combinedGlyphs = [];
                            var arrLength = arr.length;
                            var state = stateManager.state;
                            for (i = 0; i < arrLength; ++i) {
                              var arrItem = arr[i];
                              if ((0, _util.isString)(arrItem)) {
                                Array.prototype.push.apply(combinedGlyphs, self2.handleText(arrItem, state));
                              } else if ((0, _util.isNum)(arrItem)) {
                                combinedGlyphs.push(arrItem);
                              }
                            }
                            args[0] = combinedGlyphs;
                            fn = _util.OPS.showText;
                            break;
                          case _util.OPS.nextLineShowText:
                            if (!stateManager.state.font) {
                              self2.ensureStateFont(stateManager.state);
                              continue;
                            }
                            operatorList.addOp(_util.OPS.nextLine);
                            args[0] = self2.handleText(args[0], stateManager.state);
                            fn = _util.OPS.showText;
                            break;
                          case _util.OPS.nextLineSetSpacingShowText:
                            if (!stateManager.state.font) {
                              self2.ensureStateFont(stateManager.state);
                              continue;
                            }
                            operatorList.addOp(_util.OPS.nextLine);
                            operatorList.addOp(_util.OPS.setWordSpacing, [args.shift()]);
                            operatorList.addOp(_util.OPS.setCharSpacing, [args.shift()]);
                            args[0] = self2.handleText(args[0], stateManager.state);
                            fn = _util.OPS.showText;
                            break;
                          case _util.OPS.setTextRenderingMode:
                            stateManager.state.textRenderingMode = args[0];
                            break;
                          case _util.OPS.setFillColorSpace: {
                            var cachedColorSpace = _colorspace.ColorSpace.getCached(args[0], xref, localColorSpaceCache);
                            if (cachedColorSpace) {
                              stateManager.state.fillColorSpace = cachedColorSpace;
                              continue;
                            }
                            next(self2.parseColorSpace({
                              cs: args[0],
                              resources,
                              localColorSpaceCache
                            }).then(function(colorSpace) {
                              if (colorSpace) {
                                stateManager.state.fillColorSpace = colorSpace;
                              }
                            }));
                            return;
                          }
                          case _util.OPS.setStrokeColorSpace: {
                            var _cachedColorSpace = _colorspace.ColorSpace.getCached(args[0], xref, localColorSpaceCache);
                            if (_cachedColorSpace) {
                              stateManager.state.strokeColorSpace = _cachedColorSpace;
                              continue;
                            }
                            next(self2.parseColorSpace({
                              cs: args[0],
                              resources,
                              localColorSpaceCache
                            }).then(function(colorSpace) {
                              if (colorSpace) {
                                stateManager.state.strokeColorSpace = colorSpace;
                              }
                            }));
                            return;
                          }
                          case _util.OPS.setFillColor:
                            cs = stateManager.state.fillColorSpace;
                            args = cs.getRgb(args, 0);
                            fn = _util.OPS.setFillRGBColor;
                            break;
                          case _util.OPS.setStrokeColor:
                            cs = stateManager.state.strokeColorSpace;
                            args = cs.getRgb(args, 0);
                            fn = _util.OPS.setStrokeRGBColor;
                            break;
                          case _util.OPS.setFillGray:
                            stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.gray;
                            args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);
                            fn = _util.OPS.setFillRGBColor;
                            break;
                          case _util.OPS.setStrokeGray:
                            stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;
                            args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);
                            fn = _util.OPS.setStrokeRGBColor;
                            break;
                          case _util.OPS.setFillCMYKColor:
                            stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.cmyk;
                            args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);
                            fn = _util.OPS.setFillRGBColor;
                            break;
                          case _util.OPS.setStrokeCMYKColor:
                            stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.cmyk;
                            args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);
                            fn = _util.OPS.setStrokeRGBColor;
                            break;
                          case _util.OPS.setFillRGBColor:
                            stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.rgb;
                            args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);
                            break;
                          case _util.OPS.setStrokeRGBColor:
                            stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.rgb;
                            args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);
                            break;
                          case _util.OPS.setFillColorN:
                            cs = stateManager.state.fillColorSpace;
                            if (cs.name === "Pattern") {
                              next(self2.handleColorN(operatorList, _util.OPS.setFillColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache, localShadingPatternCache));
                              return;
                            }
                            args = cs.getRgb(args, 0);
                            fn = _util.OPS.setFillRGBColor;
                            break;
                          case _util.OPS.setStrokeColorN:
                            cs = stateManager.state.strokeColorSpace;
                            if (cs.name === "Pattern") {
                              next(self2.handleColorN(operatorList, _util.OPS.setStrokeColorN, args, cs, patterns, resources, task, localColorSpaceCache, localTilingPatternCache, localShadingPatternCache));
                              return;
                            }
                            args = cs.getRgb(args, 0);
                            fn = _util.OPS.setStrokeRGBColor;
                            break;
                          case _util.OPS.shadingFill:
                            var shadingRes = resources.get("Shading");
                            if (!shadingRes) {
                              throw new _util.FormatError("No shading resource found");
                            }
                            var shading = shadingRes.get(args[0].name);
                            if (!shading) {
                              throw new _util.FormatError("No shading object found");
                            }
                            var patternId = self2.parseShading({
                              shading,
                              resources,
                              localColorSpaceCache,
                              localShadingPatternCache
                            });
                            args = [patternId];
                            fn = _util.OPS.shadingFill;
                            break;
                          case _util.OPS.setGState:
                            isValidName = args[0] instanceof _primitives.Name;
                            name = args[0].name;
                            if (isValidName) {
                              var localGStateObj = localGStateCache.getByName(name);
                              if (localGStateObj) {
                                if (localGStateObj.length > 0) {
                                  operatorList.addOp(_util.OPS.setGState, [localGStateObj]);
                                }
                                args = null;
                                continue;
                              }
                            }
                            next(new Promise(function(resolveGState, rejectGState) {
                              if (!isValidName) {
                                throw new _util.FormatError("GState must be referred to by name.");
                              }
                              var extGState = resources.get("ExtGState");
                              if (!(extGState instanceof _primitives.Dict)) {
                                throw new _util.FormatError("ExtGState should be a dictionary.");
                              }
                              var gState = extGState.get(name);
                              if (!(gState instanceof _primitives.Dict)) {
                                throw new _util.FormatError("GState should be a dictionary.");
                              }
                              self2.setGState({
                                resources,
                                gState,
                                operatorList,
                                cacheKey: name,
                                task,
                                stateManager,
                                localGStateCache,
                                localColorSpaceCache
                              }).then(resolveGState, rejectGState);
                            })["catch"](function(reason) {
                              if (reason instanceof _util.AbortException) {
                                return;
                              }
                              if (self2.options.ignoreErrors) {
                                self2.handler.send("UnsupportedFeature", {
                                  featureId: _util.UNSUPPORTED_FEATURES.errorExtGState
                                });
                                (0, _util.warn)('getOperatorList - ignoring ExtGState: "'.concat(reason, '".'));
                                return;
                              }
                              throw reason;
                            }));
                            return;
                          case _util.OPS.moveTo:
                          case _util.OPS.lineTo:
                          case _util.OPS.curveTo:
                          case _util.OPS.curveTo2:
                          case _util.OPS.curveTo3:
                          case _util.OPS.closePath:
                          case _util.OPS.rectangle:
                            self2.buildPath(operatorList, fn, args, parsingText);
                            continue;
                          case _util.OPS.markPoint:
                          case _util.OPS.markPointProps:
                          case _util.OPS.beginCompat:
                          case _util.OPS.endCompat:
                            continue;
                          case _util.OPS.beginMarkedContentProps:
                            if (!(0, _primitives.isName)(args[0])) {
                              (0, _util.warn)("Expected name for beginMarkedContentProps arg0=".concat(args[0]));
                              continue;
                            }
                            if (args[0].name === "OC") {
                              next(self2.parseMarkedContentProps(args[1], resources).then(function(data) {
                                operatorList.addOp(_util.OPS.beginMarkedContentProps, ["OC", data]);
                              })["catch"](function(reason) {
                                if (reason instanceof _util.AbortException) {
                                  return;
                                }
                                if (self2.options.ignoreErrors) {
                                  self2.handler.send("UnsupportedFeature", {
                                    featureId: _util.UNSUPPORTED_FEATURES.errorMarkedContent
                                  });
                                  (0, _util.warn)('getOperatorList - ignoring beginMarkedContentProps: "'.concat(reason, '".'));
                                  return;
                                }
                                throw reason;
                              }));
                              return;
                            }
                            args = [args[0].name, args[1] instanceof _primitives.Dict ? args[1].get("MCID") : null];
                            break;
                          case _util.OPS.beginMarkedContent:
                          case _util.OPS.endMarkedContent:
                          default:
                            if (args !== null) {
                              for (i = 0, ii = args.length; i < ii; i++) {
                                if (args[i] instanceof _primitives.Dict) {
                                  break;
                                }
                              }
                              if (i < ii) {
                                (0, _util.warn)("getOperatorList - ignoring operator: " + fn);
                                continue;
                              }
                            }
                        }
                        operatorList.addOp(fn, args);
                      }
                      if (stop) {
                        next(deferred);
                        return;
                      }
                      closePendingRestoreOPS();
                      resolve();
                    })["catch"](function(reason) {
                      if (reason instanceof _util.AbortException) {
                        return;
                      }
                      if (_this7.options.ignoreErrors) {
                        _this7.handler.send("UnsupportedFeature", {
                          featureId: _util.UNSUPPORTED_FEATURES.errorOperatorList
                        });
                        (0, _util.warn)('getOperatorList - ignoring errors during "'.concat(task.name, '" ') + 'task: "'.concat(reason, '".'));
                        closePendingRestoreOPS();
                        return;
                      }
                      throw reason;
                    });
                  }
                }, {
                  key: "getTextContent",
                  value: function getTextContent(_ref8) {
                    var _this8 = this;
                    var stream = _ref8.stream, task = _ref8.task, resources = _ref8.resources, _ref8$stateManager = _ref8.stateManager, stateManager = _ref8$stateManager === void 0 ? null : _ref8$stateManager, _ref8$normalizeWhites = _ref8.normalizeWhitespace, normalizeWhitespace = _ref8$normalizeWhites === void 0 ? false : _ref8$normalizeWhites, _ref8$combineTextItem = _ref8.combineTextItems, combineTextItems = _ref8$combineTextItem === void 0 ? false : _ref8$combineTextItem, _ref8$includeMarkedCo = _ref8.includeMarkedContent, includeMarkedContent = _ref8$includeMarkedCo === void 0 ? false : _ref8$includeMarkedCo, sink = _ref8.sink, _ref8$seenStyles = _ref8.seenStyles, seenStyles = _ref8$seenStyles === void 0 ? /* @__PURE__ */ new Set() : _ref8$seenStyles;
                    resources = resources || _primitives.Dict.empty;
                    stateManager = stateManager || new StateManager(new TextState());
                    var WhitespaceRegexp = /\s/g;
                    var DiacriticRegExp = new RegExp("^\\p{Mn}$", "u");
                    var NormalizedUnicodes = (0, _unicode.getNormalizedUnicodes)();
                    var textContent = {
                      items: [],
                      styles: /* @__PURE__ */ Object.create(null)
                    };
                    var textContentItem = {
                      initialized: false,
                      str: [],
                      totalWidth: 0,
                      totalHeight: 0,
                      width: 0,
                      height: 0,
                      vertical: false,
                      prevTransform: null,
                      textAdvanceScale: 0,
                      spaceInFlowMin: 0,
                      spaceInFlowMax: 0,
                      trackingSpaceMin: Infinity,
                      negativeSpaceMax: -Infinity,
                      transform: null,
                      fontName: null,
                      hasEOL: false
                    };
                    var TRACKING_SPACE_FACTOR = 0.1;
                    var NEGATIVE_SPACE_FACTOR = -0.2;
                    var SPACE_IN_FLOW_MIN_FACTOR = 0.1;
                    var SPACE_IN_FLOW_MAX_FACTOR = 0.6;
                    var self2 = this;
                    var xref = this.xref;
                    var showSpacedTextBuffer = [];
                    var xobjs = null;
                    var emptyXObjectCache = new _image_utils.LocalImageCache();
                    var emptyGStateCache = new _image_utils.LocalGStateCache();
                    var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
                    var textState;
                    function getCurrentTextTransform() {
                      var font = textState.font;
                      var tsm = [textState.fontSize * textState.textHScale, 0, 0, textState.fontSize, 0, textState.textRise];
                      if (font.isType3Font && (textState.fontSize <= 1 || font.isCharBBox) && !(0, _util.isArrayEqual)(textState.fontMatrix, _util.FONT_IDENTITY_MATRIX)) {
                        var glyphHeight = font.bbox[3] - font.bbox[1];
                        if (glyphHeight > 0) {
                          tsm[3] *= glyphHeight * textState.fontMatrix[3];
                        }
                      }
                      return _util.Util.transform(textState.ctm, _util.Util.transform(textState.textMatrix, tsm));
                    }
                    function ensureTextContentItem() {
                      if (textContentItem.initialized) {
                        return textContentItem;
                      }
                      var font = textState.font, loadedName = font.loadedName;
                      if (!seenStyles.has(loadedName)) {
                        seenStyles.add(loadedName);
                        textContent.styles[loadedName] = {
                          fontFamily: font.fallbackName,
                          ascent: font.ascent,
                          descent: font.descent,
                          vertical: font.vertical
                        };
                      }
                      textContentItem.fontName = loadedName;
                      var trm = textContentItem.transform = getCurrentTextTransform();
                      if (!font.vertical) {
                        textContentItem.width = textContentItem.totalWidth = 0;
                        textContentItem.height = textContentItem.totalHeight = Math.hypot(trm[2], trm[3]);
                        textContentItem.vertical = false;
                      } else {
                        textContentItem.width = textContentItem.totalWidth = Math.hypot(trm[0], trm[1]);
                        textContentItem.height = textContentItem.totalHeight = 0;
                        textContentItem.vertical = true;
                      }
                      var scaleLineX = Math.hypot(textState.textLineMatrix[0], textState.textLineMatrix[1]);
                      var scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
                      textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;
                      textContentItem.trackingSpaceMin = textState.fontSize * TRACKING_SPACE_FACTOR;
                      textContentItem.negativeSpaceMax = textState.fontSize * NEGATIVE_SPACE_FACTOR;
                      textContentItem.spaceInFlowMin = textState.fontSize * SPACE_IN_FLOW_MIN_FACTOR;
                      textContentItem.spaceInFlowMax = textState.fontSize * SPACE_IN_FLOW_MAX_FACTOR;
                      textContentItem.hasEOL = false;
                      textContentItem.initialized = true;
                      return textContentItem;
                    }
                    function updateAdvanceScale() {
                      if (!textContentItem.initialized) {
                        return;
                      }
                      var scaleLineX = Math.hypot(textState.textLineMatrix[0], textState.textLineMatrix[1]);
                      var scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
                      var scaleFactor = scaleCtmX * scaleLineX;
                      if (scaleFactor === textContentItem.textAdvanceScale) {
                        return;
                      }
                      if (!textContentItem.vertical) {
                        textContentItem.totalWidth += textContentItem.width * textContentItem.textAdvanceScale;
                        textContentItem.width = 0;
                      } else {
                        textContentItem.totalHeight += textContentItem.height * textContentItem.textAdvanceScale;
                        textContentItem.height = 0;
                      }
                      textContentItem.textAdvanceScale = scaleFactor;
                    }
                    function replaceWhitespace(str) {
                      var ii = str.length;
                      var i = 0, code;
                      while (i < ii && (code = str.charCodeAt(i)) >= 32 && code <= 127) {
                        i++;
                      }
                      return i < ii ? str.replace(WhitespaceRegexp, " ") : str;
                    }
                    function runBidiTransform(textChunk) {
                      var text = textChunk.str.join("");
                      var bidiResult = (0, _bidi.bidi)(text, -1, textChunk.vertical);
                      var str = normalizeWhitespace ? replaceWhitespace(bidiResult.str) : bidiResult.str;
                      return {
                        str,
                        dir: bidiResult.dir,
                        width: textChunk.totalWidth,
                        height: textChunk.totalHeight,
                        transform: textChunk.transform,
                        fontName: textChunk.fontName,
                        hasEOL: textChunk.hasEOL
                      };
                    }
                    function handleSetFont(fontName, fontRef) {
                      return self2.loadFont(fontName, fontRef, resources).then(function(translated) {
                        if (!translated.font.isType3Font) {
                          return translated;
                        }
                        return translated.loadType3Data(self2, resources, task)["catch"](function() {
                        }).then(function() {
                          return translated;
                        });
                      }).then(function(translated) {
                        textState.font = translated.font;
                        textState.fontMatrix = translated.font.fontMatrix || _util.FONT_IDENTITY_MATRIX;
                      });
                    }
                    function compareWithLastPosition() {
                      if (!combineTextItems || !textState.font || !textContentItem.prevTransform) {
                        return;
                      }
                      var currentTransform = getCurrentTextTransform();
                      var posX = currentTransform[4];
                      var posY = currentTransform[5];
                      var lastPosX = textContentItem.prevTransform[4];
                      var lastPosY = textContentItem.prevTransform[5];
                      if (lastPosX === posX && lastPosY === posY) {
                        return;
                      }
                      var rotate = 0;
                      if (currentTransform[0] && currentTransform[1] === 0 && currentTransform[2] === 0) {
                        rotate = currentTransform[0] > 0 ? 0 : 180;
                      } else if (currentTransform[1] && currentTransform[0] === 0 && currentTransform[3] === 0) {
                        rotate += currentTransform[1] > 0 ? 90 : 270;
                      }
                      if (rotate !== 0) {
                        switch (rotate) {
                          case 90:
                            var _ref9 = [posY, posX];
                            posX = _ref9[0];
                            posY = _ref9[1];
                            var _ref10 = [lastPosY, lastPosX];
                            lastPosX = _ref10[0];
                            lastPosY = _ref10[1];
                            break;
                          case 180:
                            var _ref11 = [-posX, -posY, -lastPosX, -lastPosY];
                            posX = _ref11[0];
                            posY = _ref11[1];
                            lastPosX = _ref11[2];
                            lastPosY = _ref11[3];
                            break;
                          case 270:
                            var _ref12 = [-posY, -posX];
                            posX = _ref12[0];
                            posY = _ref12[1];
                            var _ref13 = [-lastPosY, -lastPosX];
                            lastPosX = _ref13[0];
                            lastPosY = _ref13[1];
                            break;
                        }
                      }
                      if (textState.font.vertical) {
                        var _advanceY = (lastPosY - posY) / textContentItem.textAdvanceScale;
                        var _advanceX = posX - lastPosX;
                        if (_advanceY < textContentItem.negativeSpaceMax) {
                          if (Math.abs(_advanceX) > 0.5 * textContentItem.width) {
                            appendEOL();
                            return;
                          }
                          flushTextContentItem();
                          return;
                        }
                        if (Math.abs(_advanceX) > textContentItem.height) {
                          appendEOL();
                          return;
                        }
                        if (_advanceY <= textContentItem.trackingSpaceMin) {
                          textContentItem.height += _advanceY;
                        } else if (!addFakeSpaces(_advanceY, textContentItem.prevTransform)) {
                          if (textContentItem.str.length === 0) {
                            textContent.items.push({
                              str: " ",
                              dir: "ltr",
                              width: 0,
                              height: _advanceY,
                              transform: textContentItem.prevTransform,
                              fontName: textContentItem.fontName,
                              hasEOL: false
                            });
                          } else {
                            textContentItem.height += _advanceY;
                          }
                        }
                        return;
                      }
                      var advanceX = (posX - lastPosX) / textContentItem.textAdvanceScale;
                      var advanceY = posY - lastPosY;
                      if (advanceX < textContentItem.negativeSpaceMax) {
                        if (Math.abs(advanceY) > 0.5 * textContentItem.height) {
                          appendEOL();
                          return;
                        }
                        flushTextContentItem();
                        return;
                      }
                      if (Math.abs(advanceY) > textContentItem.height) {
                        appendEOL();
                        return;
                      }
                      if (advanceX <= textContentItem.trackingSpaceMin) {
                        textContentItem.width += advanceX;
                      } else if (!addFakeSpaces(advanceX, textContentItem.prevTransform)) {
                        if (textContentItem.str.length === 0) {
                          textContent.items.push({
                            str: " ",
                            dir: "ltr",
                            width: advanceX,
                            height: 0,
                            transform: textContentItem.prevTransform,
                            fontName: textContentItem.fontName,
                            hasEOL: false
                          });
                        } else {
                          textContentItem.width += advanceX;
                        }
                      }
                    }
                    function buildTextContentItem(_ref14) {
                      var chars = _ref14.chars, extraSpacing = _ref14.extraSpacing;
                      var font = textState.font;
                      if (!chars) {
                        var charSpacing = textState.charSpacing + extraSpacing;
                        if (charSpacing) {
                          if (!font.vertical) {
                            textState.translateTextMatrix(charSpacing * textState.textHScale, 0);
                          } else {
                            textState.translateTextMatrix(0, -charSpacing);
                          }
                        }
                        return;
                      }
                      var glyphs = font.charsToGlyphs(chars);
                      var scale = textState.fontMatrix[0] * textState.fontSize;
                      for (var i = 0, ii = glyphs.length; i < ii; i++) {
                        var glyph = glyphs[i];
                        var _charSpacing = textState.charSpacing + (i + 1 === ii ? extraSpacing : 0);
                        var glyphWidth = glyph.width;
                        if (font.vertical) {
                          glyphWidth = glyph.vmetric ? glyph.vmetric[0] : -glyphWidth;
                        }
                        var scaledDim = glyphWidth * scale;
                        var glyphUnicode = glyph.unicode;
                        if (glyphUnicode === " " && (i === 0 || i + 1 === ii || glyphs[i - 1].unicode === " " || glyphs[i + 1].unicode === " " || extraSpacing)) {
                          if (!font.vertical) {
                            _charSpacing += scaledDim + textState.wordSpacing;
                            textState.translateTextMatrix(_charSpacing * textState.textHScale, 0);
                          } else {
                            _charSpacing += -scaledDim + textState.wordSpacing;
                            textState.translateTextMatrix(0, -_charSpacing);
                          }
                          continue;
                        }
                        compareWithLastPosition();
                        var textChunk = ensureTextContentItem();
                        if (DiacriticRegExp.test(glyph.unicode)) {
                          scaledDim = 0;
                        }
                        if (!font.vertical) {
                          scaledDim *= textState.textHScale;
                          textState.translateTextMatrix(scaledDim, 0);
                          textChunk.width += scaledDim;
                        } else {
                          textState.translateTextMatrix(0, scaledDim);
                          scaledDim = Math.abs(scaledDim);
                          textChunk.height += scaledDim;
                        }
                        if (scaledDim) {
                          textChunk.prevTransform = getCurrentTextTransform();
                        }
                        glyphUnicode = NormalizedUnicodes[glyphUnicode] || glyphUnicode;
                        glyphUnicode = (0, _unicode.reverseIfRtl)(glyphUnicode);
                        textChunk.str.push(glyphUnicode);
                        if (_charSpacing) {
                          if (!font.vertical) {
                            textState.translateTextMatrix(_charSpacing * textState.textHScale, 0);
                          } else {
                            textState.translateTextMatrix(0, -_charSpacing);
                          }
                        }
                      }
                    }
                    function appendEOL() {
                      if (textContentItem.initialized) {
                        textContentItem.hasEOL = true;
                        flushTextContentItem();
                      } else {
                        textContent.items.push({
                          str: "",
                          dir: "ltr",
                          width: 0,
                          height: 0,
                          transform: getCurrentTextTransform(),
                          fontName: textState.font.loadedName,
                          hasEOL: true
                        });
                      }
                    }
                    function addFakeSpaces(width, transf) {
                      if (textContentItem.spaceInFlowMin <= width && width <= textContentItem.spaceInFlowMax) {
                        if (textContentItem.initialized) {
                          textContentItem.str.push(" ");
                        }
                        return false;
                      }
                      var fontName = textContentItem.fontName;
                      var height = 0;
                      if (textContentItem.vertical) {
                        height = width;
                        width = 0;
                      }
                      flushTextContentItem();
                      textContent.items.push({
                        str: " ",
                        dir: "ltr",
                        width,
                        height,
                        transform: transf || getCurrentTextTransform(),
                        fontName,
                        hasEOL: false
                      });
                      return true;
                    }
                    function flushTextContentItem() {
                      if (!textContentItem.initialized || !textContentItem.str) {
                        return;
                      }
                      if (!textContentItem.vertical) {
                        textContentItem.totalWidth += textContentItem.width * textContentItem.textAdvanceScale;
                      } else {
                        textContentItem.totalHeight += textContentItem.height * textContentItem.textAdvanceScale;
                      }
                      textContent.items.push(runBidiTransform(textContentItem));
                      textContentItem.initialized = false;
                      textContentItem.str.length = 0;
                    }
                    function enqueueChunk() {
                      var batch = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                      var length = textContent.items.length;
                      if (length === 0) {
                        return;
                      }
                      if (batch && length < TEXT_CHUNK_BATCH_SIZE) {
                        return;
                      }
                      sink.enqueue(textContent, length);
                      textContent.items = [];
                      textContent.styles = /* @__PURE__ */ Object.create(null);
                    }
                    var timeSlotManager = new TimeSlotManager();
                    return new Promise(function promiseBody(resolve, reject) {
                      var next = function next2(promise) {
                        enqueueChunk(true);
                        Promise.all([promise, sink.ready]).then(function() {
                          try {
                            promiseBody(resolve, reject);
                          } catch (ex) {
                            reject(ex);
                          }
                        }, reject);
                      };
                      task.ensureNotTerminated();
                      timeSlotManager.reset();
                      var operation = {};
                      var stop, args = [];
                      while (!(stop = timeSlotManager.check())) {
                        args.length = 0;
                        operation.args = args;
                        if (!preprocessor.read(operation)) {
                          break;
                        }
                        textState = stateManager.state;
                        var fn = operation.fn;
                        args = operation.args;
                        switch (fn | 0) {
                          case _util.OPS.setFont:
                            var fontNameArg = args[0].name, fontSizeArg = args[1];
                            if (textState.font && fontNameArg === textState.fontName && fontSizeArg === textState.fontSize) {
                              break;
                            }
                            flushTextContentItem();
                            textState.fontName = fontNameArg;
                            textState.fontSize = fontSizeArg;
                            next(handleSetFont(fontNameArg, null));
                            return;
                          case _util.OPS.setTextRise:
                            textState.textRise = args[0];
                            break;
                          case _util.OPS.setHScale:
                            textState.textHScale = args[0] / 100;
                            break;
                          case _util.OPS.setLeading:
                            textState.leading = args[0];
                            break;
                          case _util.OPS.moveText:
                            textState.translateTextLineMatrix(args[0], args[1]);
                            textState.textMatrix = textState.textLineMatrix.slice();
                            break;
                          case _util.OPS.setLeadingMoveText:
                            textState.leading = -args[1];
                            textState.translateTextLineMatrix(args[0], args[1]);
                            textState.textMatrix = textState.textLineMatrix.slice();
                            break;
                          case _util.OPS.nextLine:
                            textState.carriageReturn();
                            break;
                          case _util.OPS.setTextMatrix:
                            textState.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
                            textState.setTextLineMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
                            updateAdvanceScale();
                            break;
                          case _util.OPS.setCharSpacing:
                            textState.charSpacing = args[0];
                            break;
                          case _util.OPS.setWordSpacing:
                            textState.wordSpacing = args[0];
                            break;
                          case _util.OPS.beginText:
                            textState.textMatrix = _util.IDENTITY_MATRIX.slice();
                            textState.textLineMatrix = _util.IDENTITY_MATRIX.slice();
                            break;
                          case _util.OPS.showSpacedText:
                            if (!stateManager.state.font) {
                              self2.ensureStateFont(stateManager.state);
                              continue;
                            }
                            var spaceFactor = (textState.font.vertical ? 1 : -1) * textState.fontSize / 1e3;
                            var elements = args[0];
                            for (var i = 0, ii = elements.length; i < ii - 1; i++) {
                              var _item = elements[i];
                              if (typeof _item === "string") {
                                showSpacedTextBuffer.push(_item);
                              } else if (typeof _item === "number" && _item !== 0) {
                                var str = showSpacedTextBuffer.join("");
                                showSpacedTextBuffer.length = 0;
                                buildTextContentItem({
                                  chars: str,
                                  extraSpacing: _item * spaceFactor
                                });
                              }
                            }
                            var item = elements[elements.length - 1];
                            if (typeof item === "string") {
                              showSpacedTextBuffer.push(item);
                            }
                            if (showSpacedTextBuffer.length > 0) {
                              var _str = showSpacedTextBuffer.join("");
                              showSpacedTextBuffer.length = 0;
                              buildTextContentItem({
                                chars: _str,
                                extraSpacing: 0
                              });
                            }
                            break;
                          case _util.OPS.showText:
                            if (!stateManager.state.font) {
                              self2.ensureStateFont(stateManager.state);
                              continue;
                            }
                            buildTextContentItem({
                              chars: args[0],
                              extraSpacing: 0
                            });
                            break;
                          case _util.OPS.nextLineShowText:
                            if (!stateManager.state.font) {
                              self2.ensureStateFont(stateManager.state);
                              continue;
                            }
                            textState.carriageReturn();
                            buildTextContentItem({
                              chars: args[0],
                              extraSpacing: 0
                            });
                            break;
                          case _util.OPS.nextLineSetSpacingShowText:
                            if (!stateManager.state.font) {
                              self2.ensureStateFont(stateManager.state);
                              continue;
                            }
                            textState.wordSpacing = args[0];
                            textState.charSpacing = args[1];
                            textState.carriageReturn();
                            buildTextContentItem({
                              chars: args[2],
                              extraSpacing: 0
                            });
                            break;
                          case _util.OPS.paintXObject:
                            flushTextContentItem();
                            if (!xobjs) {
                              xobjs = resources.get("XObject") || _primitives.Dict.empty;
                            }
                            var isValidName = args[0] instanceof _primitives.Name;
                            var name = args[0].name;
                            if (isValidName && emptyXObjectCache.getByName(name)) {
                              break;
                            }
                            next(new Promise(function(resolveXObject, rejectXObject) {
                              if (!isValidName) {
                                throw new _util.FormatError("XObject must be referred to by name.");
                              }
                              var xobj = xobjs.getRaw(name);
                              if (xobj instanceof _primitives.Ref) {
                                if (emptyXObjectCache.getByRef(xobj)) {
                                  resolveXObject();
                                  return;
                                }
                                var globalImage = self2.globalImageCache.getData(xobj, self2.pageIndex);
                                if (globalImage) {
                                  resolveXObject();
                                  return;
                                }
                                xobj = xref.fetch(xobj);
                              }
                              if (!(0, _primitives.isStream)(xobj)) {
                                throw new _util.FormatError("XObject should be a stream");
                              }
                              var type = xobj.dict.get("Subtype");
                              if (!(0, _primitives.isName)(type)) {
                                throw new _util.FormatError("XObject should have a Name subtype");
                              }
                              if (type.name !== "Form") {
                                emptyXObjectCache.set(name, xobj.dict.objId, true);
                                resolveXObject();
                                return;
                              }
                              var currentState = stateManager.state.clone();
                              var xObjStateManager = new StateManager(currentState);
                              var matrix = xobj.dict.getArray("Matrix");
                              if (Array.isArray(matrix) && matrix.length === 6) {
                                xObjStateManager.transform(matrix);
                              }
                              enqueueChunk();
                              var sinkWrapper = {
                                enqueueInvoked: false,
                                enqueue: function enqueue(chunk, size) {
                                  this.enqueueInvoked = true;
                                  sink.enqueue(chunk, size);
                                },
                                get desiredSize() {
                                  return sink.desiredSize;
                                },
                                get ready() {
                                  return sink.ready;
                                }
                              };
                              self2.getTextContent({
                                stream: xobj,
                                task,
                                resources: xobj.dict.get("Resources") || resources,
                                stateManager: xObjStateManager,
                                normalizeWhitespace,
                                combineTextItems,
                                includeMarkedContent,
                                sink: sinkWrapper,
                                seenStyles
                              }).then(function() {
                                if (!sinkWrapper.enqueueInvoked) {
                                  emptyXObjectCache.set(name, xobj.dict.objId, true);
                                }
                                resolveXObject();
                              }, rejectXObject);
                            })["catch"](function(reason) {
                              if (reason instanceof _util.AbortException) {
                                return;
                              }
                              if (self2.options.ignoreErrors) {
                                (0, _util.warn)('getTextContent - ignoring XObject: "'.concat(reason, '".'));
                                return;
                              }
                              throw reason;
                            }));
                            return;
                          case _util.OPS.setGState:
                            isValidName = args[0] instanceof _primitives.Name;
                            name = args[0].name;
                            if (isValidName && emptyGStateCache.getByName(name)) {
                              break;
                            }
                            next(new Promise(function(resolveGState, rejectGState) {
                              if (!isValidName) {
                                throw new _util.FormatError("GState must be referred to by name.");
                              }
                              var extGState = resources.get("ExtGState");
                              if (!(extGState instanceof _primitives.Dict)) {
                                throw new _util.FormatError("ExtGState should be a dictionary.");
                              }
                              var gState = extGState.get(name);
                              if (!(gState instanceof _primitives.Dict)) {
                                throw new _util.FormatError("GState should be a dictionary.");
                              }
                              var gStateFont = gState.get("Font");
                              if (!gStateFont) {
                                emptyGStateCache.set(name, gState.objId, true);
                                resolveGState();
                                return;
                              }
                              flushTextContentItem();
                              textState.fontName = null;
                              textState.fontSize = gStateFont[1];
                              handleSetFont(null, gStateFont[0]).then(resolveGState, rejectGState);
                            })["catch"](function(reason) {
                              if (reason instanceof _util.AbortException) {
                                return;
                              }
                              if (self2.options.ignoreErrors) {
                                (0, _util.warn)('getTextContent - ignoring ExtGState: "'.concat(reason, '".'));
                                return;
                              }
                              throw reason;
                            }));
                            return;
                          case _util.OPS.beginMarkedContent:
                            if (includeMarkedContent) {
                              textContent.items.push({
                                type: "beginMarkedContent",
                                tag: (0, _primitives.isName)(args[0]) ? args[0].name : null
                              });
                            }
                            break;
                          case _util.OPS.beginMarkedContentProps:
                            if (includeMarkedContent) {
                              flushTextContentItem();
                              var mcid = null;
                              if ((0, _primitives.isDict)(args[1])) {
                                mcid = args[1].get("MCID");
                              }
                              textContent.items.push({
                                type: "beginMarkedContentProps",
                                id: Number.isInteger(mcid) ? "".concat(self2.idFactory.getPageObjId(), "_mcid").concat(mcid) : null,
                                tag: (0, _primitives.isName)(args[0]) ? args[0].name : null
                              });
                            }
                            break;
                          case _util.OPS.endMarkedContent:
                            if (includeMarkedContent) {
                              flushTextContentItem();
                              textContent.items.push({
                                type: "endMarkedContent"
                              });
                            }
                            break;
                        }
                        if (textContent.items.length >= sink.desiredSize) {
                          stop = true;
                          break;
                        }
                      }
                      if (stop) {
                        next(deferred);
                        return;
                      }
                      flushTextContentItem();
                      enqueueChunk();
                      resolve();
                    })["catch"](function(reason) {
                      if (reason instanceof _util.AbortException) {
                        return;
                      }
                      if (_this8.options.ignoreErrors) {
                        (0, _util.warn)('getTextContent - ignoring errors during "'.concat(task.name, '" ') + 'task: "'.concat(reason, '".'));
                        flushTextContentItem();
                        enqueueChunk();
                        return;
                      }
                      throw reason;
                    });
                  }
                }, {
                  key: "extractDataStructures",
                  value: function extractDataStructures(dict, baseDict, properties) {
                    var _this9 = this;
                    var xref = this.xref;
                    var cidToGidBytes;
                    var toUnicodePromise = this.readToUnicode(properties.toUnicode || dict.get("ToUnicode") || baseDict.get("ToUnicode"));
                    if (properties.composite) {
                      var cidSystemInfo = dict.get("CIDSystemInfo");
                      if ((0, _primitives.isDict)(cidSystemInfo)) {
                        properties.cidSystemInfo = {
                          registry: (0, _util.stringToPDFString)(cidSystemInfo.get("Registry")),
                          ordering: (0, _util.stringToPDFString)(cidSystemInfo.get("Ordering")),
                          supplement: cidSystemInfo.get("Supplement")
                        };
                      }
                      var cidToGidMap = dict.get("CIDToGIDMap");
                      if (cidToGidMap instanceof _base_stream.BaseStream) {
                        cidToGidBytes = cidToGidMap.getBytes();
                      }
                    }
                    var differences = [];
                    var baseEncodingName = null;
                    var encoding;
                    if (dict.has("Encoding")) {
                      encoding = dict.get("Encoding");
                      if ((0, _primitives.isDict)(encoding)) {
                        baseEncodingName = encoding.get("BaseEncoding");
                        baseEncodingName = (0, _primitives.isName)(baseEncodingName) ? baseEncodingName.name : null;
                        if (encoding.has("Differences")) {
                          var diffEncoding = encoding.get("Differences");
                          var index = 0;
                          for (var j = 0, jj = diffEncoding.length; j < jj; j++) {
                            var data = xref.fetchIfRef(diffEncoding[j]);
                            if ((0, _util.isNum)(data)) {
                              index = data;
                            } else if ((0, _primitives.isName)(data)) {
                              differences[index++] = data.name;
                            } else {
                              throw new _util.FormatError("Invalid entry in 'Differences' array: ".concat(data));
                            }
                          }
                        }
                      } else if ((0, _primitives.isName)(encoding)) {
                        baseEncodingName = encoding.name;
                      } else {
                        throw new _util.FormatError("Encoding is not a Name nor a Dict");
                      }
                      if (baseEncodingName !== "MacRomanEncoding" && baseEncodingName !== "MacExpertEncoding" && baseEncodingName !== "WinAnsiEncoding") {
                        baseEncodingName = null;
                      }
                    }
                    if (baseEncodingName) {
                      properties.defaultEncoding = (0, _encodings.getEncoding)(baseEncodingName);
                    } else {
                      var isSymbolicFont = !!(properties.flags & _fonts_utils.FontFlags.Symbolic);
                      var isNonsymbolicFont = !!(properties.flags & _fonts_utils.FontFlags.Nonsymbolic);
                      encoding = _encodings.StandardEncoding;
                      if (properties.type === "TrueType" && !isNonsymbolicFont) {
                        encoding = _encodings.WinAnsiEncoding;
                      }
                      if (isSymbolicFont) {
                        encoding = _encodings.MacRomanEncoding;
                        if (!properties.file || properties.isInternalFont) {
                          if (/Symbol/i.test(properties.name)) {
                            encoding = _encodings.SymbolSetEncoding;
                          } else if (/Dingbats|Wingdings/i.test(properties.name)) {
                            encoding = _encodings.ZapfDingbatsEncoding;
                          }
                        }
                      }
                      properties.defaultEncoding = encoding;
                    }
                    properties.differences = differences;
                    properties.baseEncodingName = baseEncodingName;
                    properties.hasEncoding = !!baseEncodingName || differences.length > 0;
                    properties.dict = dict;
                    return toUnicodePromise.then(function(readToUnicode) {
                      properties.toUnicode = readToUnicode;
                      return _this9.buildToUnicode(properties);
                    }).then(function(builtToUnicode) {
                      properties.toUnicode = builtToUnicode;
                      if (cidToGidBytes) {
                        properties.cidToGidMap = _this9.readCidToGidMap(cidToGidBytes, builtToUnicode);
                      }
                      return properties;
                    });
                  }
                }, {
                  key: "_simpleFontToUnicode",
                  value: function _simpleFontToUnicode(properties) {
                    var forceGlyphs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    (0, _util.assert)(!properties.composite, "Must be a simple font.");
                    var toUnicode = [];
                    var encoding = properties.defaultEncoding.slice();
                    var baseEncodingName = properties.baseEncodingName;
                    var differences = properties.differences;
                    for (var charcode in differences) {
                      var glyphName = differences[charcode];
                      if (glyphName === ".notdef") {
                        continue;
                      }
                      encoding[charcode] = glyphName;
                    }
                    var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
                    for (var _charcode in encoding) {
                      var _glyphName = encoding[_charcode];
                      if (_glyphName === "") {
                        continue;
                      } else if (glyphsUnicodeMap[_glyphName] === void 0) {
                        var code = 0;
                        switch (_glyphName[0]) {
                          case "G":
                            if (_glyphName.length === 3) {
                              code = parseInt(_glyphName.substring(1), 16);
                            }
                            break;
                          case "g":
                            if (_glyphName.length === 5) {
                              code = parseInt(_glyphName.substring(1), 16);
                            }
                            break;
                          case "C":
                          case "c":
                            if (_glyphName.length >= 3 && _glyphName.length <= 4) {
                              var codeStr = _glyphName.substring(1);
                              if (forceGlyphs) {
                                code = parseInt(codeStr, 16);
                                break;
                              }
                              code = +codeStr;
                              if (Number.isNaN(code) && Number.isInteger(parseInt(codeStr, 16))) {
                                return this._simpleFontToUnicode(properties, true);
                              }
                            }
                            break;
                          default:
                            var unicode = (0, _unicode.getUnicodeForGlyph)(_glyphName, glyphsUnicodeMap);
                            if (unicode !== -1) {
                              code = unicode;
                            }
                        }
                        if (code > 0 && code <= 1114111 && Number.isInteger(code)) {
                          if (baseEncodingName && code === +_charcode) {
                            var baseEncoding = (0, _encodings.getEncoding)(baseEncodingName);
                            if (baseEncoding && (_glyphName = baseEncoding[_charcode])) {
                              toUnicode[_charcode] = String.fromCharCode(glyphsUnicodeMap[_glyphName]);
                              continue;
                            }
                          }
                          toUnicode[_charcode] = String.fromCodePoint(code);
                        }
                        continue;
                      }
                      toUnicode[_charcode] = String.fromCharCode(glyphsUnicodeMap[_glyphName]);
                    }
                    return toUnicode;
                  }
                }, {
                  key: "buildToUnicode",
                  value: function() {
                    var _buildToUnicode = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee8(properties) {
                      var _properties$cidSystem, registry, ordering, ucs2CMapName, ucs2CMap, toUnicode;
                      return _regenerator["default"].wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              properties.hasIncludedToUnicodeMap = !!properties.toUnicode && properties.toUnicode.length > 0;
                              if (!properties.hasIncludedToUnicodeMap) {
                                _context8.next = 4;
                                break;
                              }
                              if (!properties.composite && properties.hasEncoding) {
                                properties.fallbackToUnicode = this._simpleFontToUnicode(properties);
                              }
                              return _context8.abrupt("return", properties.toUnicode);
                            case 4:
                              if (properties.composite) {
                                _context8.next = 6;
                                break;
                              }
                              return _context8.abrupt("return", new _to_unicode_map.ToUnicodeMap(this._simpleFontToUnicode(properties)));
                            case 6:
                              if (!(properties.composite && (properties.cMap.builtInCMap && !(properties.cMap instanceof _cmap.IdentityCMap) || properties.cidSystemInfo.registry === "Adobe" && (properties.cidSystemInfo.ordering === "GB1" || properties.cidSystemInfo.ordering === "CNS1" || properties.cidSystemInfo.ordering === "Japan1" || properties.cidSystemInfo.ordering === "Korea1")))) {
                                _context8.next = 15;
                                break;
                              }
                              _properties$cidSystem = properties.cidSystemInfo, registry = _properties$cidSystem.registry, ordering = _properties$cidSystem.ordering;
                              ucs2CMapName = _primitives.Name.get("".concat(registry, "-").concat(ordering, "-UCS2"));
                              _context8.next = 11;
                              return _cmap.CMapFactory.create({
                                encoding: ucs2CMapName,
                                fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                                useCMap: null
                              });
                            case 11:
                              ucs2CMap = _context8.sent;
                              toUnicode = [];
                              properties.cMap.forEach(function(charcode, cid) {
                                if (cid > 65535) {
                                  throw new _util.FormatError("Max size of CID is 65,535");
                                }
                                var ucs2 = ucs2CMap.lookup(cid);
                                if (ucs2) {
                                  toUnicode[charcode] = String.fromCharCode((ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1));
                                }
                              });
                              return _context8.abrupt("return", new _to_unicode_map.ToUnicodeMap(toUnicode));
                            case 15:
                              return _context8.abrupt("return", new _to_unicode_map.IdentityToUnicodeMap(properties.firstChar, properties.lastChar));
                            case 16:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8, this);
                    }));
                    function buildToUnicode(_x14) {
                      return _buildToUnicode.apply(this, arguments);
                    }
                    return buildToUnicode;
                  }()
                }, {
                  key: "readToUnicode",
                  value: function readToUnicode(cmapObj) {
                    var _this10 = this;
                    if (!cmapObj) {
                      return Promise.resolve(null);
                    }
                    if ((0, _primitives.isName)(cmapObj)) {
                      return _cmap.CMapFactory.create({
                        encoding: cmapObj,
                        fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                        useCMap: null
                      }).then(function(cmap) {
                        if (cmap instanceof _cmap.IdentityCMap) {
                          return new _to_unicode_map.IdentityToUnicodeMap(0, 65535);
                        }
                        return new _to_unicode_map.ToUnicodeMap(cmap.getMap());
                      });
                    } else if ((0, _primitives.isStream)(cmapObj)) {
                      return _cmap.CMapFactory.create({
                        encoding: cmapObj,
                        fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                        useCMap: null
                      }).then(function(cmap) {
                        if (cmap instanceof _cmap.IdentityCMap) {
                          return new _to_unicode_map.IdentityToUnicodeMap(0, 65535);
                        }
                        var map = new Array(cmap.length);
                        cmap.forEach(function(charCode, token) {
                          if (typeof token === "number") {
                            map[charCode] = String.fromCodePoint(token);
                            return;
                          }
                          var str = [];
                          for (var k = 0; k < token.length; k += 2) {
                            var w1 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);
                            if ((w1 & 63488) !== 55296) {
                              str.push(w1);
                              continue;
                            }
                            k += 2;
                            var w2 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);
                            str.push(((w1 & 1023) << 10) + (w2 & 1023) + 65536);
                          }
                          map[charCode] = String.fromCodePoint.apply(String, str);
                        });
                        return new _to_unicode_map.ToUnicodeMap(map);
                      }, function(reason) {
                        if (reason instanceof _util.AbortException) {
                          return null;
                        }
                        if (_this10.options.ignoreErrors) {
                          _this10.handler.send("UnsupportedFeature", {
                            featureId: _util.UNSUPPORTED_FEATURES.errorFontToUnicode
                          });
                          (0, _util.warn)('readToUnicode - ignoring ToUnicode data: "'.concat(reason, '".'));
                          return null;
                        }
                        throw reason;
                      });
                    }
                    return Promise.resolve(null);
                  }
                }, {
                  key: "readCidToGidMap",
                  value: function readCidToGidMap(glyphsData, toUnicode) {
                    var result = [];
                    for (var j = 0, jj = glyphsData.length; j < jj; j++) {
                      var glyphID = glyphsData[j++] << 8 | glyphsData[j];
                      var code = j >> 1;
                      if (glyphID === 0 && !toUnicode.has(code)) {
                        continue;
                      }
                      result[code] = glyphID;
                    }
                    return result;
                  }
                }, {
                  key: "extractWidths",
                  value: function extractWidths(dict, descriptor, properties) {
                    var xref = this.xref;
                    var glyphsWidths = [];
                    var defaultWidth = 0;
                    var glyphsVMetrics = [];
                    var defaultVMetrics;
                    var i, ii, j, jj, start, code, widths;
                    if (properties.composite) {
                      defaultWidth = dict.has("DW") ? dict.get("DW") : 1e3;
                      widths = dict.get("W");
                      if (widths) {
                        for (i = 0, ii = widths.length; i < ii; i++) {
                          start = xref.fetchIfRef(widths[i++]);
                          code = xref.fetchIfRef(widths[i]);
                          if (Array.isArray(code)) {
                            for (j = 0, jj = code.length; j < jj; j++) {
                              glyphsWidths[start++] = xref.fetchIfRef(code[j]);
                            }
                          } else {
                            var width = xref.fetchIfRef(widths[++i]);
                            for (j = start; j <= code; j++) {
                              glyphsWidths[j] = width;
                            }
                          }
                        }
                      }
                      if (properties.vertical) {
                        var vmetrics = dict.getArray("DW2") || [880, -1e3];
                        defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];
                        vmetrics = dict.get("W2");
                        if (vmetrics) {
                          for (i = 0, ii = vmetrics.length; i < ii; i++) {
                            start = xref.fetchIfRef(vmetrics[i++]);
                            code = xref.fetchIfRef(vmetrics[i]);
                            if (Array.isArray(code)) {
                              for (j = 0, jj = code.length; j < jj; j++) {
                                glyphsVMetrics[start++] = [xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j])];
                              }
                            } else {
                              var vmetric = [xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i])];
                              for (j = start; j <= code; j++) {
                                glyphsVMetrics[j] = vmetric;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      var firstChar = properties.firstChar;
                      widths = dict.get("Widths");
                      if (widths) {
                        j = firstChar;
                        for (i = 0, ii = widths.length; i < ii; i++) {
                          glyphsWidths[j++] = xref.fetchIfRef(widths[i]);
                        }
                        defaultWidth = parseFloat(descriptor.get("MissingWidth")) || 0;
                      } else {
                        var baseFontName = dict.get("BaseFont");
                        if ((0, _primitives.isName)(baseFontName)) {
                          var metrics = this.getBaseFontMetrics(baseFontName.name);
                          glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);
                          defaultWidth = metrics.defaultWidth;
                        }
                      }
                    }
                    var isMonospace = true;
                    var firstWidth = defaultWidth;
                    for (var glyph in glyphsWidths) {
                      var glyphWidth = glyphsWidths[glyph];
                      if (!glyphWidth) {
                        continue;
                      }
                      if (!firstWidth) {
                        firstWidth = glyphWidth;
                        continue;
                      }
                      if (firstWidth !== glyphWidth) {
                        isMonospace = false;
                        break;
                      }
                    }
                    if (isMonospace) {
                      properties.flags |= _fonts_utils.FontFlags.FixedPitch;
                    }
                    properties.defaultWidth = defaultWidth;
                    properties.widths = glyphsWidths;
                    properties.defaultVMetrics = defaultVMetrics;
                    properties.vmetrics = glyphsVMetrics;
                  }
                }, {
                  key: "isSerifFont",
                  value: function isSerifFont(baseFontName) {
                    var fontNameWoStyle = baseFontName.split("-")[0];
                    return fontNameWoStyle in (0, _standard_fonts.getSerifFonts)() || fontNameWoStyle.search(/serif/gi) !== -1;
                  }
                }, {
                  key: "getBaseFontMetrics",
                  value: function getBaseFontMetrics(name) {
                    var defaultWidth = 0;
                    var widths = /* @__PURE__ */ Object.create(null);
                    var monospace = false;
                    var stdFontMap = (0, _standard_fonts.getStdFontMap)();
                    var lookupName = stdFontMap[name] || name;
                    var Metrics = (0, _metrics.getMetrics)();
                    if (!(lookupName in Metrics)) {
                      if (this.isSerifFont(name)) {
                        lookupName = "Times-Roman";
                      } else {
                        lookupName = "Helvetica";
                      }
                    }
                    var glyphWidths = Metrics[lookupName];
                    if ((0, _util.isNum)(glyphWidths)) {
                      defaultWidth = glyphWidths;
                      monospace = true;
                    } else {
                      widths = glyphWidths();
                    }
                    return {
                      defaultWidth,
                      monospace,
                      widths
                    };
                  }
                }, {
                  key: "buildCharCodeToWidth",
                  value: function buildCharCodeToWidth(widthsByGlyphName, properties) {
                    var widths = /* @__PURE__ */ Object.create(null);
                    var differences = properties.differences;
                    var encoding = properties.defaultEncoding;
                    for (var charCode = 0; charCode < 256; charCode++) {
                      if (charCode in differences && widthsByGlyphName[differences[charCode]]) {
                        widths[charCode] = widthsByGlyphName[differences[charCode]];
                        continue;
                      }
                      if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {
                        widths[charCode] = widthsByGlyphName[encoding[charCode]];
                        continue;
                      }
                    }
                    return widths;
                  }
                }, {
                  key: "preEvaluateFont",
                  value: function preEvaluateFont(dict) {
                    var baseDict = dict;
                    var type = dict.get("Subtype");
                    if (!(0, _primitives.isName)(type)) {
                      throw new _util.FormatError("invalid font Subtype");
                    }
                    var composite = false;
                    var hash, toUnicode;
                    if (type.name === "Type0") {
                      var df = dict.get("DescendantFonts");
                      if (!df) {
                        throw new _util.FormatError("Descendant fonts are not specified");
                      }
                      dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;
                      if (!(dict instanceof _primitives.Dict)) {
                        throw new _util.FormatError("Descendant font is not a dictionary.");
                      }
                      type = dict.get("Subtype");
                      if (!(0, _primitives.isName)(type)) {
                        throw new _util.FormatError("invalid font Subtype");
                      }
                      composite = true;
                    }
                    var firstChar = dict.get("FirstChar") || 0, lastChar = dict.get("LastChar") || (composite ? 65535 : 255);
                    var descriptor = dict.get("FontDescriptor");
                    if (descriptor) {
                      hash = new _murmurhash.MurmurHash3_64();
                      var encoding = baseDict.getRaw("Encoding");
                      if ((0, _primitives.isName)(encoding)) {
                        hash.update(encoding.name);
                      } else if ((0, _primitives.isRef)(encoding)) {
                        hash.update(encoding.toString());
                      } else if ((0, _primitives.isDict)(encoding)) {
                        var _iterator6 = _createForOfIteratorHelper(encoding.getRawValues()), _step6;
                        try {
                          for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                            var entry = _step6.value;
                            if ((0, _primitives.isName)(entry)) {
                              hash.update(entry.name);
                            } else if ((0, _primitives.isRef)(entry)) {
                              hash.update(entry.toString());
                            } else if (Array.isArray(entry)) {
                              var diffLength = entry.length, diffBuf = new Array(diffLength);
                              for (var j = 0; j < diffLength; j++) {
                                var diffEntry = entry[j];
                                if ((0, _primitives.isName)(diffEntry)) {
                                  diffBuf[j] = diffEntry.name;
                                } else if ((0, _util.isNum)(diffEntry) || (0, _primitives.isRef)(diffEntry)) {
                                  diffBuf[j] = diffEntry.toString();
                                }
                              }
                              hash.update(diffBuf.join());
                            }
                          }
                        } catch (err) {
                          _iterator6.e(err);
                        } finally {
                          _iterator6.f();
                        }
                      }
                      hash.update("".concat(firstChar, "-").concat(lastChar));
                      toUnicode = dict.get("ToUnicode") || baseDict.get("ToUnicode");
                      if ((0, _primitives.isStream)(toUnicode)) {
                        var stream = toUnicode.str || toUnicode;
                        var uint8array = stream.buffer ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength) : new Uint8Array(stream.bytes.buffer, stream.start, stream.end - stream.start);
                        hash.update(uint8array);
                      } else if ((0, _primitives.isName)(toUnicode)) {
                        hash.update(toUnicode.name);
                      }
                      var widths = dict.get("Widths") || baseDict.get("Widths");
                      if (Array.isArray(widths)) {
                        var widthsBuf = [];
                        var _iterator7 = _createForOfIteratorHelper(widths), _step7;
                        try {
                          for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                            var _entry = _step7.value;
                            if ((0, _util.isNum)(_entry) || (0, _primitives.isRef)(_entry)) {
                              widthsBuf.push(_entry.toString());
                            }
                          }
                        } catch (err) {
                          _iterator7.e(err);
                        } finally {
                          _iterator7.f();
                        }
                        hash.update(widthsBuf.join());
                      }
                      if (composite) {
                        hash.update("compositeFont");
                        var compositeWidths = dict.get("W") || baseDict.get("W");
                        if (Array.isArray(compositeWidths)) {
                          var _widthsBuf = [];
                          var _iterator8 = _createForOfIteratorHelper(compositeWidths), _step8;
                          try {
                            for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                              var _entry2 = _step8.value;
                              if ((0, _util.isNum)(_entry2) || (0, _primitives.isRef)(_entry2)) {
                                _widthsBuf.push(_entry2.toString());
                              } else if (Array.isArray(_entry2)) {
                                var subWidthsBuf = [];
                                var _iterator9 = _createForOfIteratorHelper(_entry2), _step9;
                                try {
                                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                                    var element = _step9.value;
                                    if ((0, _util.isNum)(element) || (0, _primitives.isRef)(element)) {
                                      subWidthsBuf.push(element.toString());
                                    }
                                  }
                                } catch (err) {
                                  _iterator9.e(err);
                                } finally {
                                  _iterator9.f();
                                }
                                _widthsBuf.push("[".concat(subWidthsBuf.join(), "]"));
                              }
                            }
                          } catch (err) {
                            _iterator8.e(err);
                          } finally {
                            _iterator8.f();
                          }
                          hash.update(_widthsBuf.join());
                        }
                        var cidToGidMap = dict.getRaw("CIDToGIDMap") || baseDict.getRaw("CIDToGIDMap");
                        if (cidToGidMap instanceof _primitives.Name) {
                          hash.update(cidToGidMap.name);
                        } else if (cidToGidMap instanceof _primitives.Ref) {
                          hash.update(cidToGidMap.toString());
                        } else if (cidToGidMap instanceof _base_stream.BaseStream) {
                          hash.update(cidToGidMap.peekBytes());
                        }
                      }
                    }
                    return {
                      descriptor,
                      dict,
                      baseDict,
                      composite,
                      type: type.name,
                      firstChar,
                      lastChar,
                      toUnicode,
                      hash: hash ? hash.hexdigest() : ""
                    };
                  }
                }, {
                  key: "translateFont",
                  value: function() {
                    var _translateFont = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee9(_ref15) {
                      var _this11 = this;
                      var descriptor, dict, baseDict, composite, type, firstChar, lastChar, toUnicode, cssFontInfo, isType3Font, properties, baseFontName, metrics, fontNameWoStyle, flags, widths, standardFontName, file, fontName, baseFont, fontNameStr, baseFontStr, fontFile, subtype, length1, length2, length3, isStandardFont, isInternalFont, glyphScaleFactors, subtypeEntry, _standardFontName, _standardFontName2, cidEncoding, cMap;
                      return _regenerator["default"].wrap(function _callee9$(_context9) {
                        while (1) {
                          switch (_context9.prev = _context9.next) {
                            case 0:
                              descriptor = _ref15.descriptor, dict = _ref15.dict, baseDict = _ref15.baseDict, composite = _ref15.composite, type = _ref15.type, firstChar = _ref15.firstChar, lastChar = _ref15.lastChar, toUnicode = _ref15.toUnicode, cssFontInfo = _ref15.cssFontInfo;
                              isType3Font = type === "Type3";
                              if (descriptor) {
                                _context9.next = 27;
                                break;
                              }
                              if (!isType3Font) {
                                _context9.next = 9;
                                break;
                              }
                              descriptor = new _primitives.Dict(null);
                              descriptor.set("FontName", _primitives.Name.get(type));
                              descriptor.set("FontBBox", dict.getArray("FontBBox") || [0, 0, 0, 0]);
                              _context9.next = 27;
                              break;
                            case 9:
                              baseFontName = dict.get("BaseFont");
                              if ((0, _primitives.isName)(baseFontName)) {
                                _context9.next = 12;
                                break;
                              }
                              throw new _util.FormatError("Base font is not specified");
                            case 12:
                              baseFontName = baseFontName.name.replace(/[,_]/g, "-");
                              metrics = this.getBaseFontMetrics(baseFontName);
                              fontNameWoStyle = baseFontName.split("-")[0];
                              flags = (this.isSerifFont(fontNameWoStyle) ? _fonts_utils.FontFlags.Serif : 0) | (metrics.monospace ? _fonts_utils.FontFlags.FixedPitch : 0) | ((0, _standard_fonts.getSymbolsFonts)()[fontNameWoStyle] ? _fonts_utils.FontFlags.Symbolic : _fonts_utils.FontFlags.Nonsymbolic);
                              properties = {
                                type,
                                name: baseFontName,
                                loadedName: baseDict.loadedName,
                                widths: metrics.widths,
                                defaultWidth: metrics.defaultWidth,
                                isSimulatedFlags: true,
                                flags,
                                firstChar,
                                lastChar,
                                toUnicode,
                                xHeight: 0,
                                capHeight: 0,
                                italicAngle: 0,
                                isType3Font
                              };
                              widths = dict.get("Widths");
                              standardFontName = (0, _standard_fonts.getStandardFontName)(baseFontName);
                              file = null;
                              if (!standardFontName) {
                                _context9.next = 26;
                                break;
                              }
                              properties.isStandardFont = true;
                              _context9.next = 24;
                              return this.fetchStandardFontData(standardFontName);
                            case 24:
                              file = _context9.sent;
                              properties.isInternalFont = !!file;
                            case 26:
                              return _context9.abrupt("return", this.extractDataStructures(dict, dict, properties).then(function(newProperties) {
                                if (widths) {
                                  var glyphWidths = [];
                                  var j = firstChar;
                                  for (var i = 0, ii = widths.length; i < ii; i++) {
                                    glyphWidths[j++] = _this11.xref.fetchIfRef(widths[i]);
                                  }
                                  newProperties.widths = glyphWidths;
                                } else {
                                  newProperties.widths = _this11.buildCharCodeToWidth(metrics.widths, newProperties);
                                }
                                return new _fonts.Font(baseFontName, file, newProperties);
                              }));
                            case 27:
                              fontName = descriptor.get("FontName");
                              baseFont = dict.get("BaseFont");
                              if ((0, _util.isString)(fontName)) {
                                fontName = _primitives.Name.get(fontName);
                              }
                              if ((0, _util.isString)(baseFont)) {
                                baseFont = _primitives.Name.get(baseFont);
                              }
                              if (!isType3Font) {
                                fontNameStr = fontName && fontName.name;
                                baseFontStr = baseFont && baseFont.name;
                                if (fontNameStr !== baseFontStr) {
                                  (0, _util.info)(`The FontDescriptor's FontName is "`.concat(fontNameStr, '" but ') + `should be the same as the Font's BaseFont "`.concat(baseFontStr, '".'));
                                  if (fontNameStr && baseFontStr && baseFontStr.startsWith(fontNameStr)) {
                                    fontName = baseFont;
                                  }
                                }
                              }
                              fontName = fontName || baseFont;
                              if ((0, _primitives.isName)(fontName)) {
                                _context9.next = 35;
                                break;
                              }
                              throw new _util.FormatError("invalid font name");
                            case 35:
                              _context9.prev = 35;
                              fontFile = descriptor.get("FontFile", "FontFile2", "FontFile3");
                              _context9.next = 45;
                              break;
                            case 39:
                              _context9.prev = 39;
                              _context9.t0 = _context9["catch"](35);
                              if (this.options.ignoreErrors) {
                                _context9.next = 43;
                                break;
                              }
                              throw _context9.t0;
                            case 43:
                              (0, _util.warn)('translateFont - fetching "'.concat(fontName.name, '" font file: "').concat(_context9.t0, '".'));
                              fontFile = new _stream.NullStream();
                            case 45:
                              isStandardFont = false;
                              isInternalFont = false;
                              glyphScaleFactors = null;
                              if (!fontFile) {
                                _context9.next = 52;
                                break;
                              }
                              if (fontFile.dict) {
                                subtypeEntry = fontFile.dict.get("Subtype");
                                if (subtypeEntry instanceof _primitives.Name) {
                                  subtype = subtypeEntry.name;
                                }
                                length1 = fontFile.dict.get("Length1");
                                length2 = fontFile.dict.get("Length2");
                                length3 = fontFile.dict.get("Length3");
                              }
                              _context9.next = 74;
                              break;
                            case 52:
                              if (!cssFontInfo) {
                                _context9.next = 66;
                                break;
                              }
                              _standardFontName = (0, _xfa_fonts.getXfaFontName)(fontName.name);
                              if (!_standardFontName) {
                                _context9.next = 64;
                                break;
                              }
                              cssFontInfo.fontFamily = "".concat(cssFontInfo.fontFamily, "-PdfJS-XFA");
                              cssFontInfo.metrics = _standardFontName.metrics || null;
                              glyphScaleFactors = _standardFontName.factors || null;
                              _context9.next = 60;
                              return this.fetchStandardFontData(_standardFontName.name);
                            case 60:
                              fontFile = _context9.sent;
                              isInternalFont = !!fontFile;
                              baseDict = dict = (0, _xfa_fonts.getXfaFontDict)(fontName.name);
                              composite = true;
                            case 64:
                              _context9.next = 74;
                              break;
                            case 66:
                              if (isType3Font) {
                                _context9.next = 74;
                                break;
                              }
                              _standardFontName2 = (0, _standard_fonts.getStandardFontName)(fontName.name);
                              if (!_standardFontName2) {
                                _context9.next = 74;
                                break;
                              }
                              isStandardFont = true;
                              _context9.next = 72;
                              return this.fetchStandardFontData(_standardFontName2);
                            case 72:
                              fontFile = _context9.sent;
                              isInternalFont = !!fontFile;
                            case 74:
                              properties = {
                                type,
                                name: fontName.name,
                                subtype,
                                file: fontFile,
                                length1,
                                length2,
                                length3,
                                isStandardFont,
                                isInternalFont,
                                loadedName: baseDict.loadedName,
                                composite,
                                fixedPitch: false,
                                fontMatrix: dict.getArray("FontMatrix") || _util.FONT_IDENTITY_MATRIX,
                                firstChar,
                                lastChar,
                                toUnicode,
                                bbox: descriptor.getArray("FontBBox") || dict.getArray("FontBBox"),
                                ascent: descriptor.get("Ascent"),
                                descent: descriptor.get("Descent"),
                                xHeight: descriptor.get("XHeight") || 0,
                                capHeight: descriptor.get("CapHeight") || 0,
                                flags: descriptor.get("Flags"),
                                italicAngle: descriptor.get("ItalicAngle") || 0,
                                isType3Font,
                                cssFontInfo,
                                scaleFactors: glyphScaleFactors
                              };
                              if (!composite) {
                                _context9.next = 83;
                                break;
                              }
                              cidEncoding = baseDict.get("Encoding");
                              if ((0, _primitives.isName)(cidEncoding)) {
                                properties.cidEncoding = cidEncoding.name;
                              }
                              _context9.next = 80;
                              return _cmap.CMapFactory.create({
                                encoding: cidEncoding,
                                fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                                useCMap: null
                              });
                            case 80:
                              cMap = _context9.sent;
                              properties.cMap = cMap;
                              properties.vertical = properties.cMap.vertical;
                            case 83:
                              return _context9.abrupt("return", this.extractDataStructures(dict, baseDict, properties).then(function(newProperties) {
                                _this11.extractWidths(dict, descriptor, newProperties);
                                return new _fonts.Font(fontName.name, fontFile, newProperties);
                              }));
                            case 84:
                            case "end":
                              return _context9.stop();
                          }
                        }
                      }, _callee9, this, [[35, 39]]);
                    }));
                    function translateFont(_x15) {
                      return _translateFont.apply(this, arguments);
                    }
                    return translateFont;
                  }()
                }], [{
                  key: "buildFontPaths",
                  value: function buildFontPaths(font, glyphs, handler, evaluatorOptions) {
                    function buildPath(fontChar) {
                      var glyphName = "".concat(font.loadedName, "_path_").concat(fontChar);
                      try {
                        if (font.renderer.hasBuiltPath(fontChar)) {
                          return;
                        }
                        handler.send("commonobj", [glyphName, "FontPath", font.renderer.getPathJs(fontChar)]);
                      } catch (reason) {
                        if (evaluatorOptions.ignoreErrors) {
                          handler.send("UnsupportedFeature", {
                            featureId: _util.UNSUPPORTED_FEATURES.errorFontBuildPath
                          });
                          (0, _util.warn)("buildFontPaths - ignoring ".concat(glyphName, ' glyph: "').concat(reason, '".'));
                          return;
                        }
                        throw reason;
                      }
                    }
                    var _iterator10 = _createForOfIteratorHelper(glyphs), _step10;
                    try {
                      for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                        var glyph = _step10.value;
                        buildPath(glyph.fontChar);
                        var accent = glyph.accent;
                        if (accent && accent.fontChar) {
                          buildPath(accent.fontChar);
                        }
                      }
                    } catch (err) {
                      _iterator10.e(err);
                    } finally {
                      _iterator10.f();
                    }
                  }
                }, {
                  key: "fallbackFontDict",
                  get: function get() {
                    var dict = new _primitives.Dict();
                    dict.set("BaseFont", _primitives.Name.get("PDFJS-FallbackFont"));
                    dict.set("Type", _primitives.Name.get("FallbackType"));
                    dict.set("Subtype", _primitives.Name.get("FallbackType"));
                    dict.set("Encoding", _primitives.Name.get("WinAnsiEncoding"));
                    return (0, _util.shadow)(this, "fallbackFontDict", dict);
                  }
                }]);
                return PartialEvaluator2;
              }();
              exports2.PartialEvaluator = PartialEvaluator;
              var TranslatedFont = /* @__PURE__ */ function() {
                function TranslatedFont2(_ref16) {
                  var loadedName = _ref16.loadedName, font = _ref16.font, dict = _ref16.dict, evaluatorOptions = _ref16.evaluatorOptions;
                  _classCallCheck(this, TranslatedFont2);
                  this.loadedName = loadedName;
                  this.font = font;
                  this.dict = dict;
                  this._evaluatorOptions = evaluatorOptions || DefaultPartialEvaluatorOptions;
                  this.type3Loaded = null;
                  this.type3Dependencies = font.isType3Font ? /* @__PURE__ */ new Set() : null;
                  this.sent = false;
                }
                _createClass(TranslatedFont2, [{
                  key: "send",
                  value: function send(handler) {
                    if (this.sent) {
                      return;
                    }
                    this.sent = true;
                    handler.send("commonobj", [this.loadedName, "Font", this.font.exportData(this._evaluatorOptions.fontExtraProperties)]);
                  }
                }, {
                  key: "fallback",
                  value: function fallback(handler) {
                    if (!this.font.data) {
                      return;
                    }
                    this.font.disableFontFace = true;
                    PartialEvaluator.buildFontPaths(this.font, this.font.glyphCacheValues, handler, this._evaluatorOptions);
                  }
                }, {
                  key: "loadType3Data",
                  value: function loadType3Data(evaluator, resources, task) {
                    var _this12 = this;
                    if (this.type3Loaded) {
                      return this.type3Loaded;
                    }
                    if (!this.font.isType3Font) {
                      throw new Error("Must be a Type3 font.");
                    }
                    var type3Evaluator = evaluator.clone({
                      ignoreErrors: false
                    });
                    type3Evaluator.parsingType3Font = true;
                    var translatedFont = this.font, type3Dependencies = this.type3Dependencies;
                    var loadCharProcsPromise = Promise.resolve();
                    var charProcs = this.dict.get("CharProcs");
                    var fontResources = this.dict.get("Resources") || resources;
                    var charProcOperatorList = /* @__PURE__ */ Object.create(null);
                    var isEmptyBBox = !translatedFont.bbox || (0, _util.isArrayEqual)(translatedFont.bbox, [0, 0, 0, 0]);
                    var _iterator11 = _createForOfIteratorHelper(charProcs.getKeys()), _step11;
                    try {
                      var _loop2 = function _loop22() {
                        var key = _step11.value;
                        loadCharProcsPromise = loadCharProcsPromise.then(function() {
                          var glyphStream = charProcs.get(key);
                          var operatorList = new _operator_list.OperatorList();
                          return type3Evaluator.getOperatorList({
                            stream: glyphStream,
                            task,
                            resources: fontResources,
                            operatorList
                          }).then(function() {
                            if (operatorList.fnArray[0] === _util.OPS.setCharWidthAndBounds) {
                              _this12._removeType3ColorOperators(operatorList, isEmptyBBox);
                            }
                            charProcOperatorList[key] = operatorList.getIR();
                            var _iterator12 = _createForOfIteratorHelper(operatorList.dependencies), _step12;
                            try {
                              for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                                var dependency = _step12.value;
                                type3Dependencies.add(dependency);
                              }
                            } catch (err) {
                              _iterator12.e(err);
                            } finally {
                              _iterator12.f();
                            }
                          })["catch"](function(reason) {
                            (0, _util.warn)('Type3 font resource "'.concat(key, '" is not available.'));
                            var dummyOperatorList = new _operator_list.OperatorList();
                            charProcOperatorList[key] = dummyOperatorList.getIR();
                          });
                        });
                      };
                      for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                        _loop2();
                      }
                    } catch (err) {
                      _iterator11.e(err);
                    } finally {
                      _iterator11.f();
                    }
                    this.type3Loaded = loadCharProcsPromise.then(function() {
                      translatedFont.charProcOperatorList = charProcOperatorList;
                      if (_this12._bbox) {
                        translatedFont.isCharBBox = true;
                        translatedFont.bbox = _this12._bbox;
                      }
                    });
                    return this.type3Loaded;
                  }
                }, {
                  key: "_removeType3ColorOperators",
                  value: function _removeType3ColorOperators(operatorList) {
                    var isEmptyBBox = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    if (isEmptyBBox) {
                      if (!this._bbox) {
                        this._bbox = [Infinity, Infinity, -Infinity, -Infinity];
                      }
                      var charBBox = _util.Util.normalizeRect(operatorList.argsArray[0].slice(2));
                      this._bbox[0] = Math.min(this._bbox[0], charBBox[0]);
                      this._bbox[1] = Math.min(this._bbox[1], charBBox[1]);
                      this._bbox[2] = Math.max(this._bbox[2], charBBox[2]);
                      this._bbox[3] = Math.max(this._bbox[3], charBBox[3]);
                    }
                    var i = 1, ii = operatorList.length;
                    while (i < ii) {
                      switch (operatorList.fnArray[i]) {
                        case _util.OPS.setStrokeColorSpace:
                        case _util.OPS.setFillColorSpace:
                        case _util.OPS.setStrokeColor:
                        case _util.OPS.setStrokeColorN:
                        case _util.OPS.setFillColor:
                        case _util.OPS.setFillColorN:
                        case _util.OPS.setStrokeGray:
                        case _util.OPS.setFillGray:
                        case _util.OPS.setStrokeRGBColor:
                        case _util.OPS.setFillRGBColor:
                        case _util.OPS.setStrokeCMYKColor:
                        case _util.OPS.setFillCMYKColor:
                        case _util.OPS.shadingFill:
                        case _util.OPS.setRenderingIntent:
                          operatorList.fnArray.splice(i, 1);
                          operatorList.argsArray.splice(i, 1);
                          ii--;
                          continue;
                        case _util.OPS.setGState:
                          var _operatorList$argsArr = _slicedToArray(operatorList.argsArray[i], 1), _gStateObj = _operatorList$argsArr[0];
                          var j = 0, jj = _gStateObj.length;
                          while (j < jj) {
                            var _gStateObj$j = _slicedToArray(_gStateObj[j], 1), gStateKey = _gStateObj$j[0];
                            switch (gStateKey) {
                              case "TR":
                              case "TR2":
                              case "HT":
                              case "BG":
                              case "BG2":
                              case "UCR":
                              case "UCR2":
                                _gStateObj.splice(j, 1);
                                jj--;
                                continue;
                            }
                            j++;
                          }
                          break;
                      }
                      i++;
                    }
                  }
                }]);
                return TranslatedFont2;
              }();
              var StateManager = /* @__PURE__ */ function() {
                function StateManager2() {
                  var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new EvalState();
                  _classCallCheck(this, StateManager2);
                  this.state = initialState;
                  this.stateStack = [];
                }
                _createClass(StateManager2, [{
                  key: "save",
                  value: function save() {
                    var old = this.state;
                    this.stateStack.push(this.state);
                    this.state = old.clone();
                  }
                }, {
                  key: "restore",
                  value: function restore() {
                    var prev = this.stateStack.pop();
                    if (prev) {
                      this.state = prev;
                    }
                  }
                }, {
                  key: "transform",
                  value: function transform(args) {
                    this.state.ctm = _util.Util.transform(this.state.ctm, args);
                  }
                }]);
                return StateManager2;
              }();
              var TextState = /* @__PURE__ */ function() {
                function TextState2() {
                  _classCallCheck(this, TextState2);
                  this.ctm = new Float32Array(_util.IDENTITY_MATRIX);
                  this.fontName = null;
                  this.fontSize = 0;
                  this.font = null;
                  this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
                  this.textMatrix = _util.IDENTITY_MATRIX.slice();
                  this.textLineMatrix = _util.IDENTITY_MATRIX.slice();
                  this.charSpacing = 0;
                  this.wordSpacing = 0;
                  this.leading = 0;
                  this.textHScale = 1;
                  this.textRise = 0;
                }
                _createClass(TextState2, [{
                  key: "setTextMatrix",
                  value: function setTextMatrix(a, b, c, d, e, f) {
                    var m = this.textMatrix;
                    m[0] = a;
                    m[1] = b;
                    m[2] = c;
                    m[3] = d;
                    m[4] = e;
                    m[5] = f;
                  }
                }, {
                  key: "setTextLineMatrix",
                  value: function setTextLineMatrix(a, b, c, d, e, f) {
                    var m = this.textLineMatrix;
                    m[0] = a;
                    m[1] = b;
                    m[2] = c;
                    m[3] = d;
                    m[4] = e;
                    m[5] = f;
                  }
                }, {
                  key: "translateTextMatrix",
                  value: function translateTextMatrix(x, y) {
                    var m = this.textMatrix;
                    m[4] = m[0] * x + m[2] * y + m[4];
                    m[5] = m[1] * x + m[3] * y + m[5];
                  }
                }, {
                  key: "translateTextLineMatrix",
                  value: function translateTextLineMatrix(x, y) {
                    var m = this.textLineMatrix;
                    m[4] = m[0] * x + m[2] * y + m[4];
                    m[5] = m[1] * x + m[3] * y + m[5];
                  }
                }, {
                  key: "carriageReturn",
                  value: function carriageReturn() {
                    this.translateTextLineMatrix(0, -this.leading);
                    this.textMatrix = this.textLineMatrix.slice();
                  }
                }, {
                  key: "clone",
                  value: function clone() {
                    var clone2 = Object.create(this);
                    clone2.textMatrix = this.textMatrix.slice();
                    clone2.textLineMatrix = this.textLineMatrix.slice();
                    clone2.fontMatrix = this.fontMatrix.slice();
                    return clone2;
                  }
                }]);
                return TextState2;
              }();
              var EvalState = /* @__PURE__ */ function() {
                function EvalState2() {
                  _classCallCheck(this, EvalState2);
                  this.ctm = new Float32Array(_util.IDENTITY_MATRIX);
                  this.font = null;
                  this.textRenderingMode = _util.TextRenderingMode.FILL;
                  this.fillColorSpace = _colorspace.ColorSpace.singletons.gray;
                  this.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;
                }
                _createClass(EvalState2, [{
                  key: "clone",
                  value: function clone() {
                    return Object.create(this);
                  }
                }]);
                return EvalState2;
              }();
              var EvaluatorPreprocessor = /* @__PURE__ */ function() {
                function EvaluatorPreprocessor2(stream, xref) {
                  var stateManager = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new StateManager();
                  _classCallCheck(this, EvaluatorPreprocessor2);
                  this.parser = new _parser.Parser({
                    lexer: new _parser.Lexer(stream, EvaluatorPreprocessor2.opMap),
                    xref
                  });
                  this.stateManager = stateManager;
                  this.nonProcessedArgs = [];
                  this._numInvalidPathOPS = 0;
                }
                _createClass(EvaluatorPreprocessor2, [{
                  key: "savedStatesDepth",
                  get: function get() {
                    return this.stateManager.stateStack.length;
                  }
                }, {
                  key: "read",
                  value: function read(operation) {
                    var args = operation.args;
                    while (true) {
                      var obj = this.parser.getObj();
                      if (obj instanceof _primitives.Cmd) {
                        var cmd = obj.cmd;
                        var opSpec = EvaluatorPreprocessor2.opMap[cmd];
                        if (!opSpec) {
                          (0, _util.warn)('Unknown command "'.concat(cmd, '".'));
                          continue;
                        }
                        var fn = opSpec.id;
                        var numArgs = opSpec.numArgs;
                        var argsLength = args !== null ? args.length : 0;
                        if (!opSpec.variableArgs) {
                          if (argsLength !== numArgs) {
                            var nonProcessedArgs = this.nonProcessedArgs;
                            while (argsLength > numArgs) {
                              nonProcessedArgs.push(args.shift());
                              argsLength--;
                            }
                            while (argsLength < numArgs && nonProcessedArgs.length !== 0) {
                              if (args === null) {
                                args = [];
                              }
                              args.unshift(nonProcessedArgs.pop());
                              argsLength++;
                            }
                          }
                          if (argsLength < numArgs) {
                            var partialMsg = "command ".concat(cmd, ": expected ").concat(numArgs, " args, ") + "but received ".concat(argsLength, " args.");
                            if (fn >= _util.OPS.moveTo && fn <= _util.OPS.endPath && ++this._numInvalidPathOPS > EvaluatorPreprocessor2.MAX_INVALID_PATH_OPS) {
                              throw new _util.FormatError("Invalid ".concat(partialMsg));
                            }
                            (0, _util.warn)("Skipping ".concat(partialMsg));
                            if (args !== null) {
                              args.length = 0;
                            }
                            continue;
                          }
                        } else if (argsLength > numArgs) {
                          (0, _util.info)("Command ".concat(cmd, ": expected [0, ").concat(numArgs, "] args, ") + "but received ".concat(argsLength, " args."));
                        }
                        this.preprocessCommand(fn, args);
                        operation.fn = fn;
                        operation.args = args;
                        return true;
                      }
                      if (obj === _primitives.EOF) {
                        return false;
                      }
                      if (obj !== null) {
                        if (args === null) {
                          args = [];
                        }
                        args.push(obj);
                        if (args.length > 33) {
                          throw new _util.FormatError("Too many arguments");
                        }
                      }
                    }
                  }
                }, {
                  key: "preprocessCommand",
                  value: function preprocessCommand(fn, args) {
                    switch (fn | 0) {
                      case _util.OPS.save:
                        this.stateManager.save();
                        break;
                      case _util.OPS.restore:
                        this.stateManager.restore();
                        break;
                      case _util.OPS.transform:
                        this.stateManager.transform(args);
                        break;
                    }
                  }
                }], [{
                  key: "opMap",
                  get: function get() {
                    var getOPMap = (0, _core_utils.getLookupTableFactory)(function(t) {
                      t.w = {
                        id: _util.OPS.setLineWidth,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.J = {
                        id: _util.OPS.setLineCap,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.j = {
                        id: _util.OPS.setLineJoin,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.M = {
                        id: _util.OPS.setMiterLimit,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.d = {
                        id: _util.OPS.setDash,
                        numArgs: 2,
                        variableArgs: false
                      };
                      t.ri = {
                        id: _util.OPS.setRenderingIntent,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.i = {
                        id: _util.OPS.setFlatness,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.gs = {
                        id: _util.OPS.setGState,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.q = {
                        id: _util.OPS.save,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.Q = {
                        id: _util.OPS.restore,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.cm = {
                        id: _util.OPS.transform,
                        numArgs: 6,
                        variableArgs: false
                      };
                      t.m = {
                        id: _util.OPS.moveTo,
                        numArgs: 2,
                        variableArgs: false
                      };
                      t.l = {
                        id: _util.OPS.lineTo,
                        numArgs: 2,
                        variableArgs: false
                      };
                      t.c = {
                        id: _util.OPS.curveTo,
                        numArgs: 6,
                        variableArgs: false
                      };
                      t.v = {
                        id: _util.OPS.curveTo2,
                        numArgs: 4,
                        variableArgs: false
                      };
                      t.y = {
                        id: _util.OPS.curveTo3,
                        numArgs: 4,
                        variableArgs: false
                      };
                      t.h = {
                        id: _util.OPS.closePath,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.re = {
                        id: _util.OPS.rectangle,
                        numArgs: 4,
                        variableArgs: false
                      };
                      t.S = {
                        id: _util.OPS.stroke,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.s = {
                        id: _util.OPS.closeStroke,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.f = {
                        id: _util.OPS.fill,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.F = {
                        id: _util.OPS.fill,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t["f*"] = {
                        id: _util.OPS.eoFill,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.B = {
                        id: _util.OPS.fillStroke,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t["B*"] = {
                        id: _util.OPS.eoFillStroke,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.b = {
                        id: _util.OPS.closeFillStroke,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t["b*"] = {
                        id: _util.OPS.closeEOFillStroke,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.n = {
                        id: _util.OPS.endPath,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.W = {
                        id: _util.OPS.clip,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t["W*"] = {
                        id: _util.OPS.eoClip,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.BT = {
                        id: _util.OPS.beginText,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.ET = {
                        id: _util.OPS.endText,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.Tc = {
                        id: _util.OPS.setCharSpacing,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.Tw = {
                        id: _util.OPS.setWordSpacing,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.Tz = {
                        id: _util.OPS.setHScale,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.TL = {
                        id: _util.OPS.setLeading,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.Tf = {
                        id: _util.OPS.setFont,
                        numArgs: 2,
                        variableArgs: false
                      };
                      t.Tr = {
                        id: _util.OPS.setTextRenderingMode,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.Ts = {
                        id: _util.OPS.setTextRise,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.Td = {
                        id: _util.OPS.moveText,
                        numArgs: 2,
                        variableArgs: false
                      };
                      t.TD = {
                        id: _util.OPS.setLeadingMoveText,
                        numArgs: 2,
                        variableArgs: false
                      };
                      t.Tm = {
                        id: _util.OPS.setTextMatrix,
                        numArgs: 6,
                        variableArgs: false
                      };
                      t["T*"] = {
                        id: _util.OPS.nextLine,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.Tj = {
                        id: _util.OPS.showText,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.TJ = {
                        id: _util.OPS.showSpacedText,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t["'"] = {
                        id: _util.OPS.nextLineShowText,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t['"'] = {
                        id: _util.OPS.nextLineSetSpacingShowText,
                        numArgs: 3,
                        variableArgs: false
                      };
                      t.d0 = {
                        id: _util.OPS.setCharWidth,
                        numArgs: 2,
                        variableArgs: false
                      };
                      t.d1 = {
                        id: _util.OPS.setCharWidthAndBounds,
                        numArgs: 6,
                        variableArgs: false
                      };
                      t.CS = {
                        id: _util.OPS.setStrokeColorSpace,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.cs = {
                        id: _util.OPS.setFillColorSpace,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.SC = {
                        id: _util.OPS.setStrokeColor,
                        numArgs: 4,
                        variableArgs: true
                      };
                      t.SCN = {
                        id: _util.OPS.setStrokeColorN,
                        numArgs: 33,
                        variableArgs: true
                      };
                      t.sc = {
                        id: _util.OPS.setFillColor,
                        numArgs: 4,
                        variableArgs: true
                      };
                      t.scn = {
                        id: _util.OPS.setFillColorN,
                        numArgs: 33,
                        variableArgs: true
                      };
                      t.G = {
                        id: _util.OPS.setStrokeGray,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.g = {
                        id: _util.OPS.setFillGray,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.RG = {
                        id: _util.OPS.setStrokeRGBColor,
                        numArgs: 3,
                        variableArgs: false
                      };
                      t.rg = {
                        id: _util.OPS.setFillRGBColor,
                        numArgs: 3,
                        variableArgs: false
                      };
                      t.K = {
                        id: _util.OPS.setStrokeCMYKColor,
                        numArgs: 4,
                        variableArgs: false
                      };
                      t.k = {
                        id: _util.OPS.setFillCMYKColor,
                        numArgs: 4,
                        variableArgs: false
                      };
                      t.sh = {
                        id: _util.OPS.shadingFill,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.BI = {
                        id: _util.OPS.beginInlineImage,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.ID = {
                        id: _util.OPS.beginImageData,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.EI = {
                        id: _util.OPS.endInlineImage,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.Do = {
                        id: _util.OPS.paintXObject,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.MP = {
                        id: _util.OPS.markPoint,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.DP = {
                        id: _util.OPS.markPointProps,
                        numArgs: 2,
                        variableArgs: false
                      };
                      t.BMC = {
                        id: _util.OPS.beginMarkedContent,
                        numArgs: 1,
                        variableArgs: false
                      };
                      t.BDC = {
                        id: _util.OPS.beginMarkedContentProps,
                        numArgs: 2,
                        variableArgs: false
                      };
                      t.EMC = {
                        id: _util.OPS.endMarkedContent,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.BX = {
                        id: _util.OPS.beginCompat,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.EX = {
                        id: _util.OPS.endCompat,
                        numArgs: 0,
                        variableArgs: false
                      };
                      t.BM = null;
                      t.BD = null;
                      t["true"] = null;
                      t.fa = null;
                      t.fal = null;
                      t.fals = null;
                      t["false"] = null;
                      t.nu = null;
                      t.nul = null;
                      t["null"] = null;
                    });
                    return (0, _util.shadow)(this, "opMap", getOPMap());
                  }
                }, {
                  key: "MAX_INVALID_PATH_OPS",
                  get: function get() {
                    return (0, _util.shadow)(this, "MAX_INVALID_PATH_OPS", 20);
                  }
                }]);
                return EvaluatorPreprocessor2;
              }();
              exports2.EvaluatorPreprocessor = EvaluatorPreprocessor;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.IdentityCMap = exports2.CMapFactory = exports2.CMap = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _parser = __w_pdfjs_require__2(157);
              var _core_utils = __w_pdfjs_require__2(139);
              var _stream = __w_pdfjs_require__2(140);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var BUILT_IN_CMAPS = ["Adobe-GB1-UCS2", "Adobe-CNS1-UCS2", "Adobe-Japan1-UCS2", "Adobe-Korea1-UCS2", "78-EUC-H", "78-EUC-V", "78-H", "78-RKSJ-H", "78-RKSJ-V", "78-V", "78ms-RKSJ-H", "78ms-RKSJ-V", "83pv-RKSJ-H", "90ms-RKSJ-H", "90ms-RKSJ-V", "90msp-RKSJ-H", "90msp-RKSJ-V", "90pv-RKSJ-H", "90pv-RKSJ-V", "Add-H", "Add-RKSJ-H", "Add-RKSJ-V", "Add-V", "Adobe-CNS1-0", "Adobe-CNS1-1", "Adobe-CNS1-2", "Adobe-CNS1-3", "Adobe-CNS1-4", "Adobe-CNS1-5", "Adobe-CNS1-6", "Adobe-GB1-0", "Adobe-GB1-1", "Adobe-GB1-2", "Adobe-GB1-3", "Adobe-GB1-4", "Adobe-GB1-5", "Adobe-Japan1-0", "Adobe-Japan1-1", "Adobe-Japan1-2", "Adobe-Japan1-3", "Adobe-Japan1-4", "Adobe-Japan1-5", "Adobe-Japan1-6", "Adobe-Korea1-0", "Adobe-Korea1-1", "Adobe-Korea1-2", "B5-H", "B5-V", "B5pc-H", "B5pc-V", "CNS-EUC-H", "CNS-EUC-V", "CNS1-H", "CNS1-V", "CNS2-H", "CNS2-V", "ETHK-B5-H", "ETHK-B5-V", "ETen-B5-H", "ETen-B5-V", "ETenms-B5-H", "ETenms-B5-V", "EUC-H", "EUC-V", "Ext-H", "Ext-RKSJ-H", "Ext-RKSJ-V", "Ext-V", "GB-EUC-H", "GB-EUC-V", "GB-H", "GB-V", "GBK-EUC-H", "GBK-EUC-V", "GBK2K-H", "GBK2K-V", "GBKp-EUC-H", "GBKp-EUC-V", "GBT-EUC-H", "GBT-EUC-V", "GBT-H", "GBT-V", "GBTpc-EUC-H", "GBTpc-EUC-V", "GBpc-EUC-H", "GBpc-EUC-V", "H", "HKdla-B5-H", "HKdla-B5-V", "HKdlb-B5-H", "HKdlb-B5-V", "HKgccs-B5-H", "HKgccs-B5-V", "HKm314-B5-H", "HKm314-B5-V", "HKm471-B5-H", "HKm471-B5-V", "HKscs-B5-H", "HKscs-B5-V", "Hankaku", "Hiragana", "KSC-EUC-H", "KSC-EUC-V", "KSC-H", "KSC-Johab-H", "KSC-Johab-V", "KSC-V", "KSCms-UHC-H", "KSCms-UHC-HW-H", "KSCms-UHC-HW-V", "KSCms-UHC-V", "KSCpc-EUC-H", "KSCpc-EUC-V", "Katakana", "NWP-H", "NWP-V", "RKSJ-H", "RKSJ-V", "Roman", "UniCNS-UCS2-H", "UniCNS-UCS2-V", "UniCNS-UTF16-H", "UniCNS-UTF16-V", "UniCNS-UTF32-H", "UniCNS-UTF32-V", "UniCNS-UTF8-H", "UniCNS-UTF8-V", "UniGB-UCS2-H", "UniGB-UCS2-V", "UniGB-UTF16-H", "UniGB-UTF16-V", "UniGB-UTF32-H", "UniGB-UTF32-V", "UniGB-UTF8-H", "UniGB-UTF8-V", "UniJIS-UCS2-H", "UniJIS-UCS2-HW-H", "UniJIS-UCS2-HW-V", "UniJIS-UCS2-V", "UniJIS-UTF16-H", "UniJIS-UTF16-V", "UniJIS-UTF32-H", "UniJIS-UTF32-V", "UniJIS-UTF8-H", "UniJIS-UTF8-V", "UniJIS2004-UTF16-H", "UniJIS2004-UTF16-V", "UniJIS2004-UTF32-H", "UniJIS2004-UTF32-V", "UniJIS2004-UTF8-H", "UniJIS2004-UTF8-V", "UniJISPro-UCS2-HW-V", "UniJISPro-UCS2-V", "UniJISPro-UTF8-V", "UniJISX0213-UTF32-H", "UniJISX0213-UTF32-V", "UniJISX02132004-UTF32-H", "UniJISX02132004-UTF32-V", "UniKS-UCS2-H", "UniKS-UCS2-V", "UniKS-UTF16-H", "UniKS-UTF16-V", "UniKS-UTF32-H", "UniKS-UTF32-V", "UniKS-UTF8-H", "UniKS-UTF8-V", "V", "WP-Symbol"];
              var MAX_MAP_RANGE = Math.pow(2, 24) - 1;
              var CMap = /* @__PURE__ */ function() {
                function CMap2() {
                  var builtInCMap = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  _classCallCheck(this, CMap2);
                  this.codespaceRanges = [[], [], [], []];
                  this.numCodespaceRanges = 0;
                  this._map = [];
                  this.name = "";
                  this.vertical = false;
                  this.useCMap = null;
                  this.builtInCMap = builtInCMap;
                }
                _createClass(CMap2, [{
                  key: "addCodespaceRange",
                  value: function addCodespaceRange(n, low, high) {
                    this.codespaceRanges[n - 1].push(low, high);
                    this.numCodespaceRanges++;
                  }
                }, {
                  key: "mapCidRange",
                  value: function mapCidRange(low, high, dstLow) {
                    if (high - low > MAX_MAP_RANGE) {
                      throw new Error("mapCidRange - ignoring data above MAX_MAP_RANGE.");
                    }
                    while (low <= high) {
                      this._map[low++] = dstLow++;
                    }
                  }
                }, {
                  key: "mapBfRange",
                  value: function mapBfRange(low, high, dstLow) {
                    if (high - low > MAX_MAP_RANGE) {
                      throw new Error("mapBfRange - ignoring data above MAX_MAP_RANGE.");
                    }
                    var lastByte = dstLow.length - 1;
                    while (low <= high) {
                      this._map[low++] = dstLow;
                      var nextCharCode = dstLow.charCodeAt(lastByte) + 1;
                      if (nextCharCode > 255) {
                        dstLow = dstLow.substring(0, lastByte - 1) + String.fromCharCode(dstLow.charCodeAt(lastByte - 1) + 1) + "\0";
                        continue;
                      }
                      dstLow = dstLow.substring(0, lastByte) + String.fromCharCode(nextCharCode);
                    }
                  }
                }, {
                  key: "mapBfRangeToArray",
                  value: function mapBfRangeToArray(low, high, array) {
                    if (high - low > MAX_MAP_RANGE) {
                      throw new Error("mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.");
                    }
                    var ii = array.length;
                    var i = 0;
                    while (low <= high && i < ii) {
                      this._map[low] = array[i++];
                      ++low;
                    }
                  }
                }, {
                  key: "mapOne",
                  value: function mapOne(src, dst) {
                    this._map[src] = dst;
                  }
                }, {
                  key: "lookup",
                  value: function lookup(code) {
                    return this._map[code];
                  }
                }, {
                  key: "contains",
                  value: function contains(code) {
                    return this._map[code] !== void 0;
                  }
                }, {
                  key: "forEach",
                  value: function forEach(callback) {
                    var map = this._map;
                    var length = map.length;
                    if (length <= 65536) {
                      for (var i = 0; i < length; i++) {
                        if (map[i] !== void 0) {
                          callback(i, map[i]);
                        }
                      }
                    } else {
                      for (var _i in map) {
                        callback(_i, map[_i]);
                      }
                    }
                  }
                }, {
                  key: "charCodeOf",
                  value: function charCodeOf(value) {
                    var map = this._map;
                    if (map.length <= 65536) {
                      return map.indexOf(value);
                    }
                    for (var charCode in map) {
                      if (map[charCode] === value) {
                        return charCode | 0;
                      }
                    }
                    return -1;
                  }
                }, {
                  key: "getMap",
                  value: function getMap() {
                    return this._map;
                  }
                }, {
                  key: "readCharCode",
                  value: function readCharCode(str, offset, out) {
                    var c = 0;
                    var codespaceRanges = this.codespaceRanges;
                    for (var n = 0, nn = codespaceRanges.length; n < nn; n++) {
                      c = (c << 8 | str.charCodeAt(offset + n)) >>> 0;
                      var codespaceRange = codespaceRanges[n];
                      for (var k = 0, kk = codespaceRange.length; k < kk; ) {
                        var low = codespaceRange[k++];
                        var high = codespaceRange[k++];
                        if (c >= low && c <= high) {
                          out.charcode = c;
                          out.length = n + 1;
                          return;
                        }
                      }
                    }
                    out.charcode = 0;
                    out.length = 1;
                  }
                }, {
                  key: "getCharCodeLength",
                  value: function getCharCodeLength(charCode) {
                    var codespaceRanges = this.codespaceRanges;
                    for (var n = 0, nn = codespaceRanges.length; n < nn; n++) {
                      var codespaceRange = codespaceRanges[n];
                      for (var k = 0, kk = codespaceRange.length; k < kk; ) {
                        var low = codespaceRange[k++];
                        var high = codespaceRange[k++];
                        if (charCode >= low && charCode <= high) {
                          return n + 1;
                        }
                      }
                    }
                    return 1;
                  }
                }, {
                  key: "length",
                  get: function get() {
                    return this._map.length;
                  }
                }, {
                  key: "isIdentityCMap",
                  get: function get() {
                    if (!(this.name === "Identity-H" || this.name === "Identity-V")) {
                      return false;
                    }
                    if (this._map.length !== 65536) {
                      return false;
                    }
                    for (var i = 0; i < 65536; i++) {
                      if (this._map[i] !== i) {
                        return false;
                      }
                    }
                    return true;
                  }
                }]);
                return CMap2;
              }();
              exports2.CMap = CMap;
              var IdentityCMap = /* @__PURE__ */ function(_CMap) {
                _inherits(IdentityCMap2, _CMap);
                var _super = _createSuper(IdentityCMap2);
                function IdentityCMap2(vertical, n) {
                  var _this;
                  _classCallCheck(this, IdentityCMap2);
                  _this = _super.call(this);
                  _this.vertical = vertical;
                  _this.addCodespaceRange(n, 0, 65535);
                  return _this;
                }
                _createClass(IdentityCMap2, [{
                  key: "mapCidRange",
                  value: function mapCidRange(low, high, dstLow) {
                    (0, _util.unreachable)("should not call mapCidRange");
                  }
                }, {
                  key: "mapBfRange",
                  value: function mapBfRange(low, high, dstLow) {
                    (0, _util.unreachable)("should not call mapBfRange");
                  }
                }, {
                  key: "mapBfRangeToArray",
                  value: function mapBfRangeToArray(low, high, array) {
                    (0, _util.unreachable)("should not call mapBfRangeToArray");
                  }
                }, {
                  key: "mapOne",
                  value: function mapOne(src, dst) {
                    (0, _util.unreachable)("should not call mapCidOne");
                  }
                }, {
                  key: "lookup",
                  value: function lookup(code) {
                    return Number.isInteger(code) && code <= 65535 ? code : void 0;
                  }
                }, {
                  key: "contains",
                  value: function contains(code) {
                    return Number.isInteger(code) && code <= 65535;
                  }
                }, {
                  key: "forEach",
                  value: function forEach(callback) {
                    for (var i = 0; i <= 65535; i++) {
                      callback(i, i);
                    }
                  }
                }, {
                  key: "charCodeOf",
                  value: function charCodeOf(value) {
                    return Number.isInteger(value) && value <= 65535 ? value : -1;
                  }
                }, {
                  key: "getMap",
                  value: function getMap() {
                    var map = new Array(65536);
                    for (var i = 0; i <= 65535; i++) {
                      map[i] = i;
                    }
                    return map;
                  }
                }, {
                  key: "length",
                  get: function get() {
                    return 65536;
                  }
                }, {
                  key: "isIdentityCMap",
                  get: function get() {
                    (0, _util.unreachable)("should not access .isIdentityCMap");
                  }
                }]);
                return IdentityCMap2;
              }(CMap);
              exports2.IdentityCMap = IdentityCMap;
              var BinaryCMapReader = function BinaryCMapReaderClosure() {
                function hexToInt(a, size) {
                  var n = 0;
                  for (var i = 0; i <= size; i++) {
                    n = n << 8 | a[i];
                  }
                  return n >>> 0;
                }
                function hexToStr(a, size) {
                  if (size === 1) {
                    return String.fromCharCode(a[0], a[1]);
                  }
                  if (size === 3) {
                    return String.fromCharCode(a[0], a[1], a[2], a[3]);
                  }
                  return String.fromCharCode.apply(null, a.subarray(0, size + 1));
                }
                function addHex(a, b, size) {
                  var c = 0;
                  for (var i = size; i >= 0; i--) {
                    c += a[i] + b[i];
                    a[i] = c & 255;
                    c >>= 8;
                  }
                }
                function incHex(a, size) {
                  var c = 1;
                  for (var i = size; i >= 0 && c > 0; i--) {
                    c += a[i];
                    a[i] = c & 255;
                    c >>= 8;
                  }
                }
                var MAX_NUM_SIZE = 16;
                var MAX_ENCODED_NUM_SIZE = 19;
                var BinaryCMapStream = /* @__PURE__ */ function() {
                  function BinaryCMapStream2(data) {
                    _classCallCheck(this, BinaryCMapStream2);
                    this.buffer = data;
                    this.pos = 0;
                    this.end = data.length;
                    this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);
                  }
                  _createClass(BinaryCMapStream2, [{
                    key: "readByte",
                    value: function readByte() {
                      if (this.pos >= this.end) {
                        return -1;
                      }
                      return this.buffer[this.pos++];
                    }
                  }, {
                    key: "readNumber",
                    value: function readNumber() {
                      var n = 0;
                      var last;
                      do {
                        var b = this.readByte();
                        if (b < 0) {
                          throw new _util.FormatError("unexpected EOF in bcmap");
                        }
                        last = !(b & 128);
                        n = n << 7 | b & 127;
                      } while (!last);
                      return n;
                    }
                  }, {
                    key: "readSigned",
                    value: function readSigned() {
                      var n = this.readNumber();
                      return n & 1 ? ~(n >>> 1) : n >>> 1;
                    }
                  }, {
                    key: "readHex",
                    value: function readHex(num, size) {
                      num.set(this.buffer.subarray(this.pos, this.pos + size + 1));
                      this.pos += size + 1;
                    }
                  }, {
                    key: "readHexNumber",
                    value: function readHexNumber(num, size) {
                      var last;
                      var stack = this.tmpBuf;
                      var sp = 0;
                      do {
                        var b = this.readByte();
                        if (b < 0) {
                          throw new _util.FormatError("unexpected EOF in bcmap");
                        }
                        last = !(b & 128);
                        stack[sp++] = b & 127;
                      } while (!last);
                      var i = size, buffer = 0, bufferSize = 0;
                      while (i >= 0) {
                        while (bufferSize < 8 && stack.length > 0) {
                          buffer |= stack[--sp] << bufferSize;
                          bufferSize += 7;
                        }
                        num[i] = buffer & 255;
                        i--;
                        buffer >>= 8;
                        bufferSize -= 8;
                      }
                    }
                  }, {
                    key: "readHexSigned",
                    value: function readHexSigned(num, size) {
                      this.readHexNumber(num, size);
                      var sign = num[size] & 1 ? 255 : 0;
                      var c = 0;
                      for (var i = 0; i <= size; i++) {
                        c = (c & 1) << 8 | num[i];
                        num[i] = c >> 1 ^ sign;
                      }
                    }
                  }, {
                    key: "readString",
                    value: function readString() {
                      var len = this.readNumber();
                      var s = "";
                      for (var i = 0; i < len; i++) {
                        s += String.fromCharCode(this.readNumber());
                      }
                      return s;
                    }
                  }]);
                  return BinaryCMapStream2;
                }();
                var BinaryCMapReader2 = /* @__PURE__ */ function() {
                  function BinaryCMapReader3() {
                    _classCallCheck(this, BinaryCMapReader3);
                  }
                  _createClass(BinaryCMapReader3, [{
                    key: "process",
                    value: function() {
                      var _process = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(data, cMap, extend) {
                        var stream, header, useCMap, start, end, _char, charCode, tmp, code, b, type, sequence, dataSize, ucs2DataSize, subitemsCount, i, _i2, _i3, _i4, _i5, _i6;
                        return _regenerator["default"].wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                stream = new BinaryCMapStream(data);
                                header = stream.readByte();
                                cMap.vertical = !!(header & 1);
                                useCMap = null;
                                start = new Uint8Array(MAX_NUM_SIZE);
                                end = new Uint8Array(MAX_NUM_SIZE);
                                _char = new Uint8Array(MAX_NUM_SIZE);
                                charCode = new Uint8Array(MAX_NUM_SIZE);
                                tmp = new Uint8Array(MAX_NUM_SIZE);
                              case 9:
                                if (!((b = stream.readByte()) >= 0)) {
                                  _context.next = 68;
                                  break;
                                }
                                type = b >> 5;
                                if (!(type === 7)) {
                                  _context.next = 20;
                                  break;
                                }
                                _context.t0 = b & 31;
                                _context.next = _context.t0 === 0 ? 15 : _context.t0 === 1 ? 17 : 19;
                                break;
                              case 15:
                                stream.readString();
                                return _context.abrupt("break", 19);
                              case 17:
                                useCMap = stream.readString();
                                return _context.abrupt("break", 19);
                              case 19:
                                return _context.abrupt("continue", 9);
                              case 20:
                                sequence = !!(b & 16);
                                dataSize = b & 15;
                                if (!(dataSize + 1 > MAX_NUM_SIZE)) {
                                  _context.next = 24;
                                  break;
                                }
                                throw new Error("BinaryCMapReader.process: Invalid dataSize.");
                              case 24:
                                ucs2DataSize = 1;
                                subitemsCount = stream.readNumber();
                                _context.t1 = type;
                                _context.next = _context.t1 === 0 ? 29 : _context.t1 === 1 ? 35 : _context.t1 === 2 ? 41 : _context.t1 === 3 ? 46 : _context.t1 === 4 ? 53 : _context.t1 === 5 ? 58 : 65;
                                break;
                              case 29:
                                stream.readHex(start, dataSize);
                                stream.readHexNumber(end, dataSize);
                                addHex(end, start, dataSize);
                                cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));
                                for (i = 1; i < subitemsCount; i++) {
                                  incHex(end, dataSize);
                                  stream.readHexNumber(start, dataSize);
                                  addHex(start, end, dataSize);
                                  stream.readHexNumber(end, dataSize);
                                  addHex(end, start, dataSize);
                                  cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));
                                }
                                return _context.abrupt("break", 66);
                              case 35:
                                stream.readHex(start, dataSize);
                                stream.readHexNumber(end, dataSize);
                                addHex(end, start, dataSize);
                                stream.readNumber();
                                for (_i2 = 1; _i2 < subitemsCount; _i2++) {
                                  incHex(end, dataSize);
                                  stream.readHexNumber(start, dataSize);
                                  addHex(start, end, dataSize);
                                  stream.readHexNumber(end, dataSize);
                                  addHex(end, start, dataSize);
                                  stream.readNumber();
                                }
                                return _context.abrupt("break", 66);
                              case 41:
                                stream.readHex(_char, dataSize);
                                code = stream.readNumber();
                                cMap.mapOne(hexToInt(_char, dataSize), code);
                                for (_i3 = 1; _i3 < subitemsCount; _i3++) {
                                  incHex(_char, dataSize);
                                  if (!sequence) {
                                    stream.readHexNumber(tmp, dataSize);
                                    addHex(_char, tmp, dataSize);
                                  }
                                  code = stream.readSigned() + (code + 1);
                                  cMap.mapOne(hexToInt(_char, dataSize), code);
                                }
                                return _context.abrupt("break", 66);
                              case 46:
                                stream.readHex(start, dataSize);
                                stream.readHexNumber(end, dataSize);
                                addHex(end, start, dataSize);
                                code = stream.readNumber();
                                cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);
                                for (_i4 = 1; _i4 < subitemsCount; _i4++) {
                                  incHex(end, dataSize);
                                  if (!sequence) {
                                    stream.readHexNumber(start, dataSize);
                                    addHex(start, end, dataSize);
                                  } else {
                                    start.set(end);
                                  }
                                  stream.readHexNumber(end, dataSize);
                                  addHex(end, start, dataSize);
                                  code = stream.readNumber();
                                  cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);
                                }
                                return _context.abrupt("break", 66);
                              case 53:
                                stream.readHex(_char, ucs2DataSize);
                                stream.readHex(charCode, dataSize);
                                cMap.mapOne(hexToInt(_char, ucs2DataSize), hexToStr(charCode, dataSize));
                                for (_i5 = 1; _i5 < subitemsCount; _i5++) {
                                  incHex(_char, ucs2DataSize);
                                  if (!sequence) {
                                    stream.readHexNumber(tmp, ucs2DataSize);
                                    addHex(_char, tmp, ucs2DataSize);
                                  }
                                  incHex(charCode, dataSize);
                                  stream.readHexSigned(tmp, dataSize);
                                  addHex(charCode, tmp, dataSize);
                                  cMap.mapOne(hexToInt(_char, ucs2DataSize), hexToStr(charCode, dataSize));
                                }
                                return _context.abrupt("break", 66);
                              case 58:
                                stream.readHex(start, ucs2DataSize);
                                stream.readHexNumber(end, ucs2DataSize);
                                addHex(end, start, ucs2DataSize);
                                stream.readHex(charCode, dataSize);
                                cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));
                                for (_i6 = 1; _i6 < subitemsCount; _i6++) {
                                  incHex(end, ucs2DataSize);
                                  if (!sequence) {
                                    stream.readHexNumber(start, ucs2DataSize);
                                    addHex(start, end, ucs2DataSize);
                                  } else {
                                    start.set(end);
                                  }
                                  stream.readHexNumber(end, ucs2DataSize);
                                  addHex(end, start, ucs2DataSize);
                                  stream.readHex(charCode, dataSize);
                                  cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));
                                }
                                return _context.abrupt("break", 66);
                              case 65:
                                throw new Error("BinaryCMapReader.process - unknown type: ".concat(type));
                              case 66:
                                _context.next = 9;
                                break;
                              case 68:
                                if (!useCMap) {
                                  _context.next = 70;
                                  break;
                                }
                                return _context.abrupt("return", extend(useCMap));
                              case 70:
                                return _context.abrupt("return", cMap);
                              case 71:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _callee);
                      }));
                      function process2(_x, _x2, _x3) {
                        return _process.apply(this, arguments);
                      }
                      return process2;
                    }()
                  }]);
                  return BinaryCMapReader3;
                }();
                return BinaryCMapReader2;
              }();
              var CMapFactory = function CMapFactoryClosure() {
                function strToInt(str) {
                  var a = 0;
                  for (var i = 0; i < str.length; i++) {
                    a = a << 8 | str.charCodeAt(i);
                  }
                  return a >>> 0;
                }
                function expectString(obj) {
                  if (!(0, _util.isString)(obj)) {
                    throw new _util.FormatError("Malformed CMap: expected string.");
                  }
                }
                function expectInt(obj) {
                  if (!Number.isInteger(obj)) {
                    throw new _util.FormatError("Malformed CMap: expected int.");
                  }
                }
                function parseBfChar(cMap, lexer) {
                  while (true) {
                    var obj = lexer.getObj();
                    if (obj === _primitives.EOF) {
                      break;
                    }
                    if ((0, _primitives.isCmd)(obj, "endbfchar")) {
                      return;
                    }
                    expectString(obj);
                    var src = strToInt(obj);
                    obj = lexer.getObj();
                    expectString(obj);
                    var dst = obj;
                    cMap.mapOne(src, dst);
                  }
                }
                function parseBfRange(cMap, lexer) {
                  while (true) {
                    var obj = lexer.getObj();
                    if (obj === _primitives.EOF) {
                      break;
                    }
                    if ((0, _primitives.isCmd)(obj, "endbfrange")) {
                      return;
                    }
                    expectString(obj);
                    var low = strToInt(obj);
                    obj = lexer.getObj();
                    expectString(obj);
                    var high = strToInt(obj);
                    obj = lexer.getObj();
                    if (Number.isInteger(obj) || (0, _util.isString)(obj)) {
                      var dstLow = Number.isInteger(obj) ? String.fromCharCode(obj) : obj;
                      cMap.mapBfRange(low, high, dstLow);
                    } else if ((0, _primitives.isCmd)(obj, "[")) {
                      obj = lexer.getObj();
                      var array = [];
                      while (!(0, _primitives.isCmd)(obj, "]") && obj !== _primitives.EOF) {
                        array.push(obj);
                        obj = lexer.getObj();
                      }
                      cMap.mapBfRangeToArray(low, high, array);
                    } else {
                      break;
                    }
                  }
                  throw new _util.FormatError("Invalid bf range.");
                }
                function parseCidChar(cMap, lexer) {
                  while (true) {
                    var obj = lexer.getObj();
                    if (obj === _primitives.EOF) {
                      break;
                    }
                    if ((0, _primitives.isCmd)(obj, "endcidchar")) {
                      return;
                    }
                    expectString(obj);
                    var src = strToInt(obj);
                    obj = lexer.getObj();
                    expectInt(obj);
                    var dst = obj;
                    cMap.mapOne(src, dst);
                  }
                }
                function parseCidRange(cMap, lexer) {
                  while (true) {
                    var obj = lexer.getObj();
                    if (obj === _primitives.EOF) {
                      break;
                    }
                    if ((0, _primitives.isCmd)(obj, "endcidrange")) {
                      return;
                    }
                    expectString(obj);
                    var low = strToInt(obj);
                    obj = lexer.getObj();
                    expectString(obj);
                    var high = strToInt(obj);
                    obj = lexer.getObj();
                    expectInt(obj);
                    var dstLow = obj;
                    cMap.mapCidRange(low, high, dstLow);
                  }
                }
                function parseCodespaceRange(cMap, lexer) {
                  while (true) {
                    var obj = lexer.getObj();
                    if (obj === _primitives.EOF) {
                      break;
                    }
                    if ((0, _primitives.isCmd)(obj, "endcodespacerange")) {
                      return;
                    }
                    if (!(0, _util.isString)(obj)) {
                      break;
                    }
                    var low = strToInt(obj);
                    obj = lexer.getObj();
                    if (!(0, _util.isString)(obj)) {
                      break;
                    }
                    var high = strToInt(obj);
                    cMap.addCodespaceRange(obj.length, low, high);
                  }
                  throw new _util.FormatError("Invalid codespace range.");
                }
                function parseWMode(cMap, lexer) {
                  var obj = lexer.getObj();
                  if (Number.isInteger(obj)) {
                    cMap.vertical = !!obj;
                  }
                }
                function parseCMapName(cMap, lexer) {
                  var obj = lexer.getObj();
                  if ((0, _primitives.isName)(obj) && (0, _util.isString)(obj.name)) {
                    cMap.name = obj.name;
                  }
                }
                function parseCMap(_x4, _x5, _x6, _x7) {
                  return _parseCMap.apply(this, arguments);
                }
                function _parseCMap() {
                  _parseCMap = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee3(cMap, lexer, fetchBuiltInCMap, useCMap) {
                    var previous, embeddedUseCMap, obj;
                    return _regenerator["default"].wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            if (false) {
                            }
                            _context3.prev = 1;
                            obj = lexer.getObj();
                            if (!(obj === _primitives.EOF)) {
                              _context3.next = 7;
                              break;
                            }
                            return _context3.abrupt("break", 39);
                          case 7:
                            if (!(0, _primitives.isName)(obj)) {
                              _context3.next = 12;
                              break;
                            }
                            if (obj.name === "WMode") {
                              parseWMode(cMap, lexer);
                            } else if (obj.name === "CMapName") {
                              parseCMapName(cMap, lexer);
                            }
                            previous = obj;
                            _context3.next = 29;
                            break;
                          case 12:
                            if (!(0, _primitives.isCmd)(obj)) {
                              _context3.next = 29;
                              break;
                            }
                            _context3.t0 = obj.cmd;
                            _context3.next = _context3.t0 === "endcmap" ? 16 : _context3.t0 === "usecmap" ? 17 : _context3.t0 === "begincodespacerange" ? 19 : _context3.t0 === "beginbfchar" ? 21 : _context3.t0 === "begincidchar" ? 23 : _context3.t0 === "beginbfrange" ? 25 : _context3.t0 === "begincidrange" ? 27 : 29;
                            break;
                          case 16:
                            return _context3.abrupt("break", 39);
                          case 17:
                            if ((0, _primitives.isName)(previous)) {
                              embeddedUseCMap = previous.name;
                            }
                            return _context3.abrupt("break", 29);
                          case 19:
                            parseCodespaceRange(cMap, lexer);
                            return _context3.abrupt("break", 29);
                          case 21:
                            parseBfChar(cMap, lexer);
                            return _context3.abrupt("break", 29);
                          case 23:
                            parseCidChar(cMap, lexer);
                            return _context3.abrupt("break", 29);
                          case 25:
                            parseBfRange(cMap, lexer);
                            return _context3.abrupt("break", 29);
                          case 27:
                            parseCidRange(cMap, lexer);
                            return _context3.abrupt("break", 29);
                          case 29:
                            _context3.next = 37;
                            break;
                          case 31:
                            _context3.prev = 31;
                            _context3.t1 = _context3["catch"](1);
                            if (!(_context3.t1 instanceof _core_utils.MissingDataException)) {
                              _context3.next = 35;
                              break;
                            }
                            throw _context3.t1;
                          case 35:
                            (0, _util.warn)("Invalid cMap data: " + _context3.t1);
                            return _context3.abrupt("continue", 0);
                          case 37:
                            _context3.next = 0;
                            break;
                          case 39:
                            if (!useCMap && embeddedUseCMap) {
                              useCMap = embeddedUseCMap;
                            }
                            if (!useCMap) {
                              _context3.next = 42;
                              break;
                            }
                            return _context3.abrupt("return", extendCMap(cMap, fetchBuiltInCMap, useCMap));
                          case 42:
                            return _context3.abrupt("return", cMap);
                          case 43:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3, null, [[1, 31]]);
                  }));
                  return _parseCMap.apply(this, arguments);
                }
                function extendCMap(_x8, _x9, _x10) {
                  return _extendCMap.apply(this, arguments);
                }
                function _extendCMap() {
                  _extendCMap = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee4(cMap, fetchBuiltInCMap, useCMap) {
                    var useCodespaceRanges, i;
                    return _regenerator["default"].wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            _context4.next = 2;
                            return createBuiltInCMap(useCMap, fetchBuiltInCMap);
                          case 2:
                            cMap.useCMap = _context4.sent;
                            if (cMap.numCodespaceRanges === 0) {
                              useCodespaceRanges = cMap.useCMap.codespaceRanges;
                              for (i = 0; i < useCodespaceRanges.length; i++) {
                                cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();
                              }
                              cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;
                            }
                            cMap.useCMap.forEach(function(key, value) {
                              if (!cMap.contains(key)) {
                                cMap.mapOne(key, cMap.useCMap.lookup(key));
                              }
                            });
                            return _context4.abrupt("return", cMap);
                          case 6:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  }));
                  return _extendCMap.apply(this, arguments);
                }
                function createBuiltInCMap(_x11, _x12) {
                  return _createBuiltInCMap.apply(this, arguments);
                }
                function _createBuiltInCMap() {
                  _createBuiltInCMap = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee5(name, fetchBuiltInCMap) {
                    var _yield$fetchBuiltInCM, cMapData, compressionType, cMap, lexer;
                    return _regenerator["default"].wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            if (!(name === "Identity-H")) {
                              _context5.next = 4;
                              break;
                            }
                            return _context5.abrupt("return", new IdentityCMap(false, 2));
                          case 4:
                            if (!(name === "Identity-V")) {
                              _context5.next = 6;
                              break;
                            }
                            return _context5.abrupt("return", new IdentityCMap(true, 2));
                          case 6:
                            if (BUILT_IN_CMAPS.includes(name)) {
                              _context5.next = 8;
                              break;
                            }
                            throw new Error("Unknown CMap name: " + name);
                          case 8:
                            if (fetchBuiltInCMap) {
                              _context5.next = 10;
                              break;
                            }
                            throw new Error("Built-in CMap parameters are not provided.");
                          case 10:
                            _context5.next = 12;
                            return fetchBuiltInCMap(name);
                          case 12:
                            _yield$fetchBuiltInCM = _context5.sent;
                            cMapData = _yield$fetchBuiltInCM.cMapData;
                            compressionType = _yield$fetchBuiltInCM.compressionType;
                            cMap = new CMap(true);
                            if (!(compressionType === _util.CMapCompressionType.BINARY)) {
                              _context5.next = 18;
                              break;
                            }
                            return _context5.abrupt("return", new BinaryCMapReader().process(cMapData, cMap, function(useCMap) {
                              return extendCMap(cMap, fetchBuiltInCMap, useCMap);
                            }));
                          case 18:
                            if (!(compressionType === _util.CMapCompressionType.NONE)) {
                              _context5.next = 21;
                              break;
                            }
                            lexer = new _parser.Lexer(new _stream.Stream(cMapData));
                            return _context5.abrupt("return", parseCMap(cMap, lexer, fetchBuiltInCMap, null));
                          case 21:
                            throw new Error("TODO: Only BINARY/NONE CMap compression is currently supported.");
                          case 22:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5);
                  }));
                  return _createBuiltInCMap.apply(this, arguments);
                }
                return {
                  create: function create(params) {
                    return _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee2() {
                      var encoding, fetchBuiltInCMap, useCMap, parsedCMap;
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              encoding = params.encoding;
                              fetchBuiltInCMap = params.fetchBuiltInCMap;
                              useCMap = params.useCMap;
                              if (!(0, _primitives.isName)(encoding)) {
                                _context2.next = 7;
                                break;
                              }
                              return _context2.abrupt("return", createBuiltInCMap(encoding.name, fetchBuiltInCMap));
                            case 7:
                              if (!(0, _primitives.isStream)(encoding)) {
                                _context2.next = 14;
                                break;
                              }
                              _context2.next = 10;
                              return parseCMap(new CMap(), new _parser.Lexer(encoding), fetchBuiltInCMap, useCMap);
                            case 10:
                              parsedCMap = _context2.sent;
                              if (!parsedCMap.isIdentityCMap) {
                                _context2.next = 13;
                                break;
                              }
                              return _context2.abrupt("return", createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap));
                            case 13:
                              return _context2.abrupt("return", parsedCMap);
                            case 14:
                              throw new Error("Encoding required.");
                            case 15:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }))();
                  }
                };
              }();
              exports2.CMapFactory = CMapFactory;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Parser = exports2.Linearization = exports2.Lexer = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _core_utils = __w_pdfjs_require__2(139);
              var _ascii_85_stream = __w_pdfjs_require__2(158);
              var _ascii_hex_stream = __w_pdfjs_require__2(160);
              var _ccitt_stream = __w_pdfjs_require__2(161);
              var _flate_stream = __w_pdfjs_require__2(163);
              var _jbig2_stream = __w_pdfjs_require__2(164);
              var _jpeg_stream = __w_pdfjs_require__2(167);
              var _jpx_stream = __w_pdfjs_require__2(169);
              var _lzw_stream = __w_pdfjs_require__2(171);
              var _stream = __w_pdfjs_require__2(140);
              var _predictor_stream = __w_pdfjs_require__2(172);
              var _run_length_stream = __w_pdfjs_require__2(173);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var MAX_LENGTH_TO_CACHE = 1e3;
              var MAX_ADLER32_LENGTH = 5552;
              function computeAdler32(bytes) {
                var bytesLength = bytes.length;
                var a = 1, b = 0;
                for (var i = 0; i < bytesLength; ++i) {
                  a += bytes[i] & 255;
                  b += a;
                }
                return b % 65521 << 16 | a % 65521;
              }
              var Parser = /* @__PURE__ */ function() {
                function Parser2(_ref) {
                  var lexer = _ref.lexer, xref = _ref.xref, _ref$allowStreams = _ref.allowStreams, allowStreams = _ref$allowStreams === void 0 ? false : _ref$allowStreams, _ref$recoveryMode = _ref.recoveryMode, recoveryMode = _ref$recoveryMode === void 0 ? false : _ref$recoveryMode;
                  _classCallCheck(this, Parser2);
                  this.lexer = lexer;
                  this.xref = xref;
                  this.allowStreams = allowStreams;
                  this.recoveryMode = recoveryMode;
                  this.imageCache = /* @__PURE__ */ Object.create(null);
                  this.refill();
                }
                _createClass(Parser2, [{
                  key: "refill",
                  value: function refill() {
                    this.buf1 = this.lexer.getObj();
                    this.buf2 = this.lexer.getObj();
                  }
                }, {
                  key: "shift",
                  value: function shift() {
                    if (this.buf2 instanceof _primitives.Cmd && this.buf2.cmd === "ID") {
                      this.buf1 = this.buf2;
                      this.buf2 = null;
                    } else {
                      this.buf1 = this.buf2;
                      this.buf2 = this.lexer.getObj();
                    }
                  }
                }, {
                  key: "tryShift",
                  value: function tryShift() {
                    try {
                      this.shift();
                      return true;
                    } catch (e) {
                      if (e instanceof _core_utils.MissingDataException) {
                        throw e;
                      }
                      return false;
                    }
                  }
                }, {
                  key: "getObj",
                  value: function getObj() {
                    var cipherTransform = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                    var buf1 = this.buf1;
                    this.shift();
                    if (buf1 instanceof _primitives.Cmd) {
                      switch (buf1.cmd) {
                        case "BI":
                          return this.makeInlineImage(cipherTransform);
                        case "[":
                          var array = [];
                          while (!(0, _primitives.isCmd)(this.buf1, "]") && this.buf1 !== _primitives.EOF) {
                            array.push(this.getObj(cipherTransform));
                          }
                          if (this.buf1 === _primitives.EOF) {
                            if (this.recoveryMode) {
                              return array;
                            }
                            throw new _core_utils.ParserEOFException("End of file inside array.");
                          }
                          this.shift();
                          return array;
                        case "<<":
                          var dict = new _primitives.Dict(this.xref);
                          while (!(0, _primitives.isCmd)(this.buf1, ">>") && this.buf1 !== _primitives.EOF) {
                            if (!(0, _primitives.isName)(this.buf1)) {
                              (0, _util.info)("Malformed dictionary: key must be a name object");
                              this.shift();
                              continue;
                            }
                            var key = this.buf1.name;
                            this.shift();
                            if (this.buf1 === _primitives.EOF) {
                              break;
                            }
                            dict.set(key, this.getObj(cipherTransform));
                          }
                          if (this.buf1 === _primitives.EOF) {
                            if (this.recoveryMode) {
                              return dict;
                            }
                            throw new _core_utils.ParserEOFException("End of file inside dictionary.");
                          }
                          if ((0, _primitives.isCmd)(this.buf2, "stream")) {
                            return this.allowStreams ? this.makeStream(dict, cipherTransform) : dict;
                          }
                          this.shift();
                          return dict;
                        default:
                          return buf1;
                      }
                    }
                    if (Number.isInteger(buf1)) {
                      if (Number.isInteger(this.buf1) && (0, _primitives.isCmd)(this.buf2, "R")) {
                        var ref = _primitives.Ref.get(buf1, this.buf1);
                        this.shift();
                        this.shift();
                        return ref;
                      }
                      return buf1;
                    }
                    if (typeof buf1 === "string") {
                      if (cipherTransform) {
                        return cipherTransform.decryptString(buf1);
                      }
                      return buf1;
                    }
                    return buf1;
                  }
                }, {
                  key: "findDefaultInlineStreamEnd",
                  value: function findDefaultInlineStreamEnd(stream) {
                    var E = 69, I = 73, SPACE = 32, LF = 10, CR = 13, NUL = 0;
                    var lexer = this.lexer, startPos = stream.pos, n = 10;
                    var state = 0, ch, maybeEIPos;
                    while ((ch = stream.getByte()) !== -1) {
                      if (state === 0) {
                        state = ch === E ? 1 : 0;
                      } else if (state === 1) {
                        state = ch === I ? 2 : 0;
                      } else {
                        (0, _util.assert)(state === 2, "findDefaultInlineStreamEnd - invalid state.");
                        if (ch === SPACE || ch === LF || ch === CR) {
                          maybeEIPos = stream.pos;
                          var followingBytes = stream.peekBytes(n);
                          for (var i = 0, ii = followingBytes.length; i < ii; i++) {
                            ch = followingBytes[i];
                            if (ch === NUL && followingBytes[i + 1] !== NUL) {
                              continue;
                            }
                            if (ch !== LF && ch !== CR && (ch < SPACE || ch > 127)) {
                              state = 0;
                              break;
                            }
                          }
                          if (state !== 2) {
                            continue;
                          }
                          if (lexer.knownCommands) {
                            var nextObj = lexer.peekObj();
                            if (nextObj instanceof _primitives.Cmd && !lexer.knownCommands[nextObj.cmd]) {
                              state = 0;
                            }
                          } else {
                            (0, _util.warn)("findDefaultInlineStreamEnd - `lexer.knownCommands` is undefined.");
                          }
                          if (state === 2) {
                            break;
                          }
                        } else {
                          state = 0;
                        }
                      }
                    }
                    if (ch === -1) {
                      (0, _util.warn)("findDefaultInlineStreamEnd: Reached the end of the stream without finding a valid EI marker");
                      if (maybeEIPos) {
                        (0, _util.warn)('... trying to recover by using the last "EI" occurrence.');
                        stream.skip(-(stream.pos - maybeEIPos));
                      }
                    }
                    var endOffset = 4;
                    stream.skip(-endOffset);
                    ch = stream.peekByte();
                    stream.skip(endOffset);
                    if (!(0, _core_utils.isWhiteSpace)(ch)) {
                      endOffset--;
                    }
                    return stream.pos - endOffset - startPos;
                  }
                }, {
                  key: "findDCTDecodeInlineStreamEnd",
                  value: function findDCTDecodeInlineStreamEnd(stream) {
                    var startPos = stream.pos;
                    var foundEOI = false, b, markerLength;
                    while ((b = stream.getByte()) !== -1) {
                      if (b !== 255) {
                        continue;
                      }
                      switch (stream.getByte()) {
                        case 0:
                          break;
                        case 255:
                          stream.skip(-1);
                          break;
                        case 217:
                          foundEOI = true;
                          break;
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 197:
                        case 198:
                        case 199:
                        case 201:
                        case 202:
                        case 203:
                        case 205:
                        case 206:
                        case 207:
                        case 196:
                        case 204:
                        case 218:
                        case 219:
                        case 220:
                        case 221:
                        case 222:
                        case 223:
                        case 224:
                        case 225:
                        case 226:
                        case 227:
                        case 228:
                        case 229:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 234:
                        case 235:
                        case 236:
                        case 237:
                        case 238:
                        case 239:
                        case 254:
                          markerLength = stream.getUint16();
                          if (markerLength > 2) {
                            stream.skip(markerLength - 2);
                          } else {
                            stream.skip(-2);
                          }
                          break;
                      }
                      if (foundEOI) {
                        break;
                      }
                    }
                    var length = stream.pos - startPos;
                    if (b === -1) {
                      (0, _util.warn)("Inline DCTDecode image stream: EOI marker not found, searching for /EI/ instead.");
                      stream.skip(-length);
                      return this.findDefaultInlineStreamEnd(stream);
                    }
                    this.inlineStreamSkipEI(stream);
                    return length;
                  }
                }, {
                  key: "findASCII85DecodeInlineStreamEnd",
                  value: function findASCII85DecodeInlineStreamEnd(stream) {
                    var TILDE = 126, GT = 62;
                    var startPos = stream.pos;
                    var ch;
                    while ((ch = stream.getByte()) !== -1) {
                      if (ch === TILDE) {
                        var tildePos = stream.pos;
                        ch = stream.peekByte();
                        while ((0, _core_utils.isWhiteSpace)(ch)) {
                          stream.skip();
                          ch = stream.peekByte();
                        }
                        if (ch === GT) {
                          stream.skip();
                          break;
                        }
                        if (stream.pos > tildePos) {
                          var maybeEI = stream.peekBytes(2);
                          if (maybeEI[0] === 69 && maybeEI[1] === 73) {
                            break;
                          }
                        }
                      }
                    }
                    var length = stream.pos - startPos;
                    if (ch === -1) {
                      (0, _util.warn)("Inline ASCII85Decode image stream: EOD marker not found, searching for /EI/ instead.");
                      stream.skip(-length);
                      return this.findDefaultInlineStreamEnd(stream);
                    }
                    this.inlineStreamSkipEI(stream);
                    return length;
                  }
                }, {
                  key: "findASCIIHexDecodeInlineStreamEnd",
                  value: function findASCIIHexDecodeInlineStreamEnd(stream) {
                    var GT = 62;
                    var startPos = stream.pos;
                    var ch;
                    while ((ch = stream.getByte()) !== -1) {
                      if (ch === GT) {
                        break;
                      }
                    }
                    var length = stream.pos - startPos;
                    if (ch === -1) {
                      (0, _util.warn)("Inline ASCIIHexDecode image stream: EOD marker not found, searching for /EI/ instead.");
                      stream.skip(-length);
                      return this.findDefaultInlineStreamEnd(stream);
                    }
                    this.inlineStreamSkipEI(stream);
                    return length;
                  }
                }, {
                  key: "inlineStreamSkipEI",
                  value: function inlineStreamSkipEI(stream) {
                    var E = 69, I = 73;
                    var state = 0, ch;
                    while ((ch = stream.getByte()) !== -1) {
                      if (state === 0) {
                        state = ch === E ? 1 : 0;
                      } else if (state === 1) {
                        state = ch === I ? 2 : 0;
                      } else if (state === 2) {
                        break;
                      }
                    }
                  }
                }, {
                  key: "makeInlineImage",
                  value: function makeInlineImage(cipherTransform) {
                    var lexer = this.lexer;
                    var stream = lexer.stream;
                    var dict = new _primitives.Dict(this.xref);
                    var dictLength;
                    while (!(0, _primitives.isCmd)(this.buf1, "ID") && this.buf1 !== _primitives.EOF) {
                      if (!(0, _primitives.isName)(this.buf1)) {
                        throw new _util.FormatError("Dictionary key must be a name object");
                      }
                      var key = this.buf1.name;
                      this.shift();
                      if (this.buf1 === _primitives.EOF) {
                        break;
                      }
                      dict.set(key, this.getObj(cipherTransform));
                    }
                    if (lexer.beginInlineImagePos !== -1) {
                      dictLength = stream.pos - lexer.beginInlineImagePos;
                    }
                    var filter = dict.get("F", "Filter");
                    var filterName;
                    if ((0, _primitives.isName)(filter)) {
                      filterName = filter.name;
                    } else if (Array.isArray(filter)) {
                      var filterZero = this.xref.fetchIfRef(filter[0]);
                      if ((0, _primitives.isName)(filterZero)) {
                        filterName = filterZero.name;
                      }
                    }
                    var startPos = stream.pos;
                    var length;
                    switch (filterName) {
                      case "DCT":
                      case "DCTDecode":
                        length = this.findDCTDecodeInlineStreamEnd(stream);
                        break;
                      case "A85":
                      case "ASCII85Decode":
                        length = this.findASCII85DecodeInlineStreamEnd(stream);
                        break;
                      case "AHx":
                      case "ASCIIHexDecode":
                        length = this.findASCIIHexDecodeInlineStreamEnd(stream);
                        break;
                      default:
                        length = this.findDefaultInlineStreamEnd(stream);
                    }
                    var imageStream = stream.makeSubStream(startPos, length, dict);
                    var cacheKey;
                    if (length < MAX_LENGTH_TO_CACHE && dictLength < MAX_ADLER32_LENGTH) {
                      var imageBytes = imageStream.getBytes();
                      imageStream.reset();
                      var initialStreamPos = stream.pos;
                      stream.pos = lexer.beginInlineImagePos;
                      var dictBytes = stream.getBytes(dictLength);
                      stream.pos = initialStreamPos;
                      cacheKey = computeAdler32(imageBytes) + "_" + computeAdler32(dictBytes);
                      var cacheEntry = this.imageCache[cacheKey];
                      if (cacheEntry !== void 0) {
                        this.buf2 = _primitives.Cmd.get("EI");
                        this.shift();
                        cacheEntry.reset();
                        return cacheEntry;
                      }
                    }
                    if (cipherTransform) {
                      imageStream = cipherTransform.createStream(imageStream, length);
                    }
                    imageStream = this.filter(imageStream, dict, length);
                    imageStream.dict = dict;
                    if (cacheKey !== void 0) {
                      imageStream.cacheKey = "inline_".concat(length, "_").concat(cacheKey);
                      this.imageCache[cacheKey] = imageStream;
                    }
                    this.buf2 = _primitives.Cmd.get("EI");
                    this.shift();
                    return imageStream;
                  }
                }, {
                  key: "_findStreamLength",
                  value: function _findStreamLength(startPos, signature) {
                    var stream = this.lexer.stream;
                    stream.pos = startPos;
                    var SCAN_BLOCK_LENGTH = 2048;
                    var signatureLength = signature.length;
                    while (stream.pos < stream.end) {
                      var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);
                      var scanLength = scanBytes.length - signatureLength;
                      if (scanLength <= 0) {
                        break;
                      }
                      var pos = 0;
                      while (pos < scanLength) {
                        var j = 0;
                        while (j < signatureLength && scanBytes[pos + j] === signature[j]) {
                          j++;
                        }
                        if (j >= signatureLength) {
                          stream.pos += pos;
                          return stream.pos - startPos;
                        }
                        pos++;
                      }
                      stream.pos += scanLength;
                    }
                    return -1;
                  }
                }, {
                  key: "makeStream",
                  value: function makeStream(dict, cipherTransform) {
                    var lexer = this.lexer;
                    var stream = lexer.stream;
                    lexer.skipToNextLine();
                    var startPos = stream.pos - 1;
                    var length = dict.get("Length");
                    if (!Number.isInteger(length)) {
                      (0, _util.info)('Bad length "'.concat(length && length.toString(), '" in stream.'));
                      length = 0;
                    }
                    stream.pos = startPos + length;
                    lexer.nextChar();
                    if (this.tryShift() && (0, _primitives.isCmd)(this.buf2, "endstream")) {
                      this.shift();
                    } else {
                      var ENDSTREAM_SIGNATURE = new Uint8Array([101, 110, 100, 115, 116, 114, 101, 97, 109]);
                      var actualLength = this._findStreamLength(startPos, ENDSTREAM_SIGNATURE);
                      if (actualLength < 0) {
                        var MAX_TRUNCATION = 1;
                        for (var i = 1; i <= MAX_TRUNCATION; i++) {
                          var end = ENDSTREAM_SIGNATURE.length - i;
                          var TRUNCATED_SIGNATURE = ENDSTREAM_SIGNATURE.slice(0, end);
                          var maybeLength = this._findStreamLength(startPos, TRUNCATED_SIGNATURE);
                          if (maybeLength >= 0) {
                            var lastByte = stream.peekBytes(end + 1)[end];
                            if (!(0, _core_utils.isWhiteSpace)(lastByte)) {
                              break;
                            }
                            (0, _util.info)('Found "'.concat((0, _util.bytesToString)(TRUNCATED_SIGNATURE), '" when ') + "searching for endstream command.");
                            actualLength = maybeLength;
                            break;
                          }
                        }
                        if (actualLength < 0) {
                          throw new _util.FormatError("Missing endstream command.");
                        }
                      }
                      length = actualLength;
                      lexer.nextChar();
                      this.shift();
                      this.shift();
                    }
                    this.shift();
                    stream = stream.makeSubStream(startPos, length, dict);
                    if (cipherTransform) {
                      stream = cipherTransform.createStream(stream, length);
                    }
                    stream = this.filter(stream, dict, length);
                    stream.dict = dict;
                    return stream;
                  }
                }, {
                  key: "filter",
                  value: function filter(stream, dict, length) {
                    var filter2 = dict.get("F", "Filter");
                    var params = dict.get("DP", "DecodeParms");
                    if ((0, _primitives.isName)(filter2)) {
                      if (Array.isArray(params)) {
                        (0, _util.warn)("/DecodeParms should not be an Array, when /Filter is a Name.");
                      }
                      return this.makeFilter(stream, filter2.name, length, params);
                    }
                    var maybeLength = length;
                    if (Array.isArray(filter2)) {
                      var filterArray = filter2;
                      var paramsArray = params;
                      for (var i = 0, ii = filterArray.length; i < ii; ++i) {
                        filter2 = this.xref.fetchIfRef(filterArray[i]);
                        if (!(0, _primitives.isName)(filter2)) {
                          throw new _util.FormatError('Bad filter name "'.concat(filter2, '"'));
                        }
                        params = null;
                        if (Array.isArray(paramsArray) && i in paramsArray) {
                          params = this.xref.fetchIfRef(paramsArray[i]);
                        }
                        stream = this.makeFilter(stream, filter2.name, maybeLength, params);
                        maybeLength = null;
                      }
                    }
                    return stream;
                  }
                }, {
                  key: "makeFilter",
                  value: function makeFilter(stream, name, maybeLength, params) {
                    if (maybeLength === 0) {
                      (0, _util.warn)('Empty "'.concat(name, '" stream.'));
                      return new _stream.NullStream();
                    }
                    var xrefStats = this.xref.stats;
                    try {
                      switch (name) {
                        case "Fl":
                        case "FlateDecode":
                          xrefStats.addStreamType(_util.StreamType.FLATE);
                          if (params) {
                            return new _predictor_stream.PredictorStream(new _flate_stream.FlateStream(stream, maybeLength), maybeLength, params);
                          }
                          return new _flate_stream.FlateStream(stream, maybeLength);
                        case "LZW":
                        case "LZWDecode":
                          xrefStats.addStreamType(_util.StreamType.LZW);
                          var earlyChange = 1;
                          if (params) {
                            if (params.has("EarlyChange")) {
                              earlyChange = params.get("EarlyChange");
                            }
                            return new _predictor_stream.PredictorStream(new _lzw_stream.LZWStream(stream, maybeLength, earlyChange), maybeLength, params);
                          }
                          return new _lzw_stream.LZWStream(stream, maybeLength, earlyChange);
                        case "DCT":
                        case "DCTDecode":
                          xrefStats.addStreamType(_util.StreamType.DCT);
                          return new _jpeg_stream.JpegStream(stream, maybeLength, params);
                        case "JPX":
                        case "JPXDecode":
                          xrefStats.addStreamType(_util.StreamType.JPX);
                          return new _jpx_stream.JpxStream(stream, maybeLength, params);
                        case "A85":
                        case "ASCII85Decode":
                          xrefStats.addStreamType(_util.StreamType.A85);
                          return new _ascii_85_stream.Ascii85Stream(stream, maybeLength);
                        case "AHx":
                        case "ASCIIHexDecode":
                          xrefStats.addStreamType(_util.StreamType.AHX);
                          return new _ascii_hex_stream.AsciiHexStream(stream, maybeLength);
                        case "CCF":
                        case "CCITTFaxDecode":
                          xrefStats.addStreamType(_util.StreamType.CCF);
                          return new _ccitt_stream.CCITTFaxStream(stream, maybeLength, params);
                        case "RL":
                        case "RunLengthDecode":
                          xrefStats.addStreamType(_util.StreamType.RLX);
                          return new _run_length_stream.RunLengthStream(stream, maybeLength);
                        case "JBIG2Decode":
                          xrefStats.addStreamType(_util.StreamType.JBIG);
                          return new _jbig2_stream.Jbig2Stream(stream, maybeLength, params);
                      }
                      (0, _util.warn)('Filter "'.concat(name, '" is not supported.'));
                      return stream;
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)('Invalid stream: "'.concat(ex, '"'));
                      return new _stream.NullStream();
                    }
                  }
                }]);
                return Parser2;
              }();
              exports2.Parser = Parser;
              var specialChars = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              function toHexDigit(ch) {
                if (ch >= 48 && ch <= 57) {
                  return ch & 15;
                }
                if (ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102) {
                  return (ch & 15) + 9;
                }
                return -1;
              }
              var Lexer = /* @__PURE__ */ function() {
                function Lexer2(stream) {
                  var knownCommands = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  _classCallCheck(this, Lexer2);
                  this.stream = stream;
                  this.nextChar();
                  this.strBuf = [];
                  this.knownCommands = knownCommands;
                  this._hexStringNumWarn = 0;
                  this.beginInlineImagePos = -1;
                }
                _createClass(Lexer2, [{
                  key: "nextChar",
                  value: function nextChar() {
                    return this.currentChar = this.stream.getByte();
                  }
                }, {
                  key: "peekChar",
                  value: function peekChar() {
                    return this.stream.peekByte();
                  }
                }, {
                  key: "getNumber",
                  value: function getNumber() {
                    var ch = this.currentChar;
                    var eNotation = false;
                    var divideBy = 0;
                    var sign = 0;
                    if (ch === 45) {
                      sign = -1;
                      ch = this.nextChar();
                      if (ch === 45) {
                        ch = this.nextChar();
                      }
                    } else if (ch === 43) {
                      sign = 1;
                      ch = this.nextChar();
                    }
                    if (ch === 10 || ch === 13) {
                      do {
                        ch = this.nextChar();
                      } while (ch === 10 || ch === 13);
                    }
                    if (ch === 46) {
                      divideBy = 10;
                      ch = this.nextChar();
                    }
                    if (ch < 48 || ch > 57) {
                      if (divideBy === 10 && sign === 0 && ((0, _core_utils.isWhiteSpace)(ch) || ch === -1)) {
                        (0, _util.warn)("Lexer.getNumber - treating a single decimal point as zero.");
                        return 0;
                      }
                      throw new _util.FormatError("Invalid number: ".concat(String.fromCharCode(ch), " (charCode ").concat(ch, ")"));
                    }
                    sign = sign || 1;
                    var baseValue = ch - 48;
                    var powerValue = 0;
                    var powerValueSign = 1;
                    while ((ch = this.nextChar()) >= 0) {
                      if (ch >= 48 && ch <= 57) {
                        var currentDigit = ch - 48;
                        if (eNotation) {
                          powerValue = powerValue * 10 + currentDigit;
                        } else {
                          if (divideBy !== 0) {
                            divideBy *= 10;
                          }
                          baseValue = baseValue * 10 + currentDigit;
                        }
                      } else if (ch === 46) {
                        if (divideBy === 0) {
                          divideBy = 1;
                        } else {
                          break;
                        }
                      } else if (ch === 45) {
                        (0, _util.warn)("Badly formatted number: minus sign in the middle");
                      } else if (ch === 69 || ch === 101) {
                        ch = this.peekChar();
                        if (ch === 43 || ch === 45) {
                          powerValueSign = ch === 45 ? -1 : 1;
                          this.nextChar();
                        } else if (ch < 48 || ch > 57) {
                          break;
                        }
                        eNotation = true;
                      } else {
                        break;
                      }
                    }
                    if (divideBy !== 0) {
                      baseValue /= divideBy;
                    }
                    if (eNotation) {
                      baseValue *= Math.pow(10, powerValueSign * powerValue);
                    }
                    return sign * baseValue;
                  }
                }, {
                  key: "getString",
                  value: function getString() {
                    var numParen = 1;
                    var done = false;
                    var strBuf = this.strBuf;
                    strBuf.length = 0;
                    var ch = this.nextChar();
                    while (true) {
                      var charBuffered = false;
                      switch (ch | 0) {
                        case -1:
                          (0, _util.warn)("Unterminated string");
                          done = true;
                          break;
                        case 40:
                          ++numParen;
                          strBuf.push("(");
                          break;
                        case 41:
                          if (--numParen === 0) {
                            this.nextChar();
                            done = true;
                          } else {
                            strBuf.push(")");
                          }
                          break;
                        case 92:
                          ch = this.nextChar();
                          switch (ch) {
                            case -1:
                              (0, _util.warn)("Unterminated string");
                              done = true;
                              break;
                            case 110:
                              strBuf.push("\n");
                              break;
                            case 114:
                              strBuf.push("\r");
                              break;
                            case 116:
                              strBuf.push("	");
                              break;
                            case 98:
                              strBuf.push("\b");
                              break;
                            case 102:
                              strBuf.push("\f");
                              break;
                            case 92:
                            case 40:
                            case 41:
                              strBuf.push(String.fromCharCode(ch));
                              break;
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                              var x = ch & 15;
                              ch = this.nextChar();
                              charBuffered = true;
                              if (ch >= 48 && ch <= 55) {
                                x = (x << 3) + (ch & 15);
                                ch = this.nextChar();
                                if (ch >= 48 && ch <= 55) {
                                  charBuffered = false;
                                  x = (x << 3) + (ch & 15);
                                }
                              }
                              strBuf.push(String.fromCharCode(x));
                              break;
                            case 13:
                              if (this.peekChar() === 10) {
                                this.nextChar();
                              }
                              break;
                            case 10:
                              break;
                            default:
                              strBuf.push(String.fromCharCode(ch));
                              break;
                          }
                          break;
                        default:
                          strBuf.push(String.fromCharCode(ch));
                          break;
                      }
                      if (done) {
                        break;
                      }
                      if (!charBuffered) {
                        ch = this.nextChar();
                      }
                    }
                    return strBuf.join("");
                  }
                }, {
                  key: "getName",
                  value: function getName() {
                    var ch, previousCh;
                    var strBuf = this.strBuf;
                    strBuf.length = 0;
                    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
                      if (ch === 35) {
                        ch = this.nextChar();
                        if (specialChars[ch]) {
                          (0, _util.warn)("Lexer_getName: NUMBER SIGN (#) should be followed by a hexadecimal number.");
                          strBuf.push("#");
                          break;
                        }
                        var x = toHexDigit(ch);
                        if (x !== -1) {
                          previousCh = ch;
                          ch = this.nextChar();
                          var x2 = toHexDigit(ch);
                          if (x2 === -1) {
                            (0, _util.warn)("Lexer_getName: Illegal digit (".concat(String.fromCharCode(ch), ") ") + "in hexadecimal number.");
                            strBuf.push("#", String.fromCharCode(previousCh));
                            if (specialChars[ch]) {
                              break;
                            }
                            strBuf.push(String.fromCharCode(ch));
                            continue;
                          }
                          strBuf.push(String.fromCharCode(x << 4 | x2));
                        } else {
                          strBuf.push("#", String.fromCharCode(ch));
                        }
                      } else {
                        strBuf.push(String.fromCharCode(ch));
                      }
                    }
                    if (strBuf.length > 127) {
                      (0, _util.warn)("Name token is longer than allowed by the spec: ".concat(strBuf.length));
                    }
                    return _primitives.Name.get(strBuf.join(""));
                  }
                }, {
                  key: "_hexStringWarn",
                  value: function _hexStringWarn(ch) {
                    var MAX_HEX_STRING_NUM_WARN = 5;
                    if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {
                      (0, _util.warn)("getHexString - ignoring additional invalid characters.");
                      return;
                    }
                    if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {
                      return;
                    }
                    (0, _util.warn)("getHexString - ignoring invalid character: ".concat(ch));
                  }
                }, {
                  key: "getHexString",
                  value: function getHexString() {
                    var strBuf = this.strBuf;
                    strBuf.length = 0;
                    var ch = this.currentChar;
                    var isFirstHex = true;
                    var firstDigit, secondDigit;
                    this._hexStringNumWarn = 0;
                    while (true) {
                      if (ch < 0) {
                        (0, _util.warn)("Unterminated hex string");
                        break;
                      } else if (ch === 62) {
                        this.nextChar();
                        break;
                      } else if (specialChars[ch] === 1) {
                        ch = this.nextChar();
                        continue;
                      } else {
                        if (isFirstHex) {
                          firstDigit = toHexDigit(ch);
                          if (firstDigit === -1) {
                            this._hexStringWarn(ch);
                            ch = this.nextChar();
                            continue;
                          }
                        } else {
                          secondDigit = toHexDigit(ch);
                          if (secondDigit === -1) {
                            this._hexStringWarn(ch);
                            ch = this.nextChar();
                            continue;
                          }
                          strBuf.push(String.fromCharCode(firstDigit << 4 | secondDigit));
                        }
                        isFirstHex = !isFirstHex;
                        ch = this.nextChar();
                      }
                    }
                    return strBuf.join("");
                  }
                }, {
                  key: "getObj",
                  value: function getObj() {
                    var comment = false;
                    var ch = this.currentChar;
                    while (true) {
                      if (ch < 0) {
                        return _primitives.EOF;
                      }
                      if (comment) {
                        if (ch === 10 || ch === 13) {
                          comment = false;
                        }
                      } else if (ch === 37) {
                        comment = true;
                      } else if (specialChars[ch] !== 1) {
                        break;
                      }
                      ch = this.nextChar();
                    }
                    switch (ch | 0) {
                      case 48:
                      case 49:
                      case 50:
                      case 51:
                      case 52:
                      case 53:
                      case 54:
                      case 55:
                      case 56:
                      case 57:
                      case 43:
                      case 45:
                      case 46:
                        return this.getNumber();
                      case 40:
                        return this.getString();
                      case 47:
                        return this.getName();
                      case 91:
                        this.nextChar();
                        return _primitives.Cmd.get("[");
                      case 93:
                        this.nextChar();
                        return _primitives.Cmd.get("]");
                      case 60:
                        ch = this.nextChar();
                        if (ch === 60) {
                          this.nextChar();
                          return _primitives.Cmd.get("<<");
                        }
                        return this.getHexString();
                      case 62:
                        ch = this.nextChar();
                        if (ch === 62) {
                          this.nextChar();
                          return _primitives.Cmd.get(">>");
                        }
                        return _primitives.Cmd.get(">");
                      case 123:
                        this.nextChar();
                        return _primitives.Cmd.get("{");
                      case 125:
                        this.nextChar();
                        return _primitives.Cmd.get("}");
                      case 41:
                        this.nextChar();
                        throw new _util.FormatError("Illegal character: ".concat(ch));
                    }
                    var str = String.fromCharCode(ch);
                    if (ch < 32 || ch > 127) {
                      var nextCh = this.peekChar();
                      if (nextCh >= 32 && nextCh <= 127) {
                        this.nextChar();
                        return _primitives.Cmd.get(str);
                      }
                    }
                    var knownCommands = this.knownCommands;
                    var knownCommandFound = knownCommands && knownCommands[str] !== void 0;
                    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
                      var possibleCommand = str + String.fromCharCode(ch);
                      if (knownCommandFound && knownCommands[possibleCommand] === void 0) {
                        break;
                      }
                      if (str.length === 128) {
                        throw new _util.FormatError("Command token too long: ".concat(str.length));
                      }
                      str = possibleCommand;
                      knownCommandFound = knownCommands && knownCommands[str] !== void 0;
                    }
                    if (str === "true") {
                      return true;
                    }
                    if (str === "false") {
                      return false;
                    }
                    if (str === "null") {
                      return null;
                    }
                    if (str === "BI") {
                      this.beginInlineImagePos = this.stream.pos;
                    }
                    return _primitives.Cmd.get(str);
                  }
                }, {
                  key: "peekObj",
                  value: function peekObj() {
                    var streamPos = this.stream.pos, currentChar = this.currentChar, beginInlineImagePos = this.beginInlineImagePos;
                    var nextObj;
                    try {
                      nextObj = this.getObj();
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)("peekObj: ".concat(ex));
                    }
                    this.stream.pos = streamPos;
                    this.currentChar = currentChar;
                    this.beginInlineImagePos = beginInlineImagePos;
                    return nextObj;
                  }
                }, {
                  key: "skipToNextLine",
                  value: function skipToNextLine() {
                    var ch = this.currentChar;
                    while (ch >= 0) {
                      if (ch === 13) {
                        ch = this.nextChar();
                        if (ch === 10) {
                          this.nextChar();
                        }
                        break;
                      } else if (ch === 10) {
                        this.nextChar();
                        break;
                      }
                      ch = this.nextChar();
                    }
                  }
                }]);
                return Lexer2;
              }();
              exports2.Lexer = Lexer;
              var Linearization = /* @__PURE__ */ function() {
                function Linearization2() {
                  _classCallCheck(this, Linearization2);
                }
                _createClass(Linearization2, null, [{
                  key: "create",
                  value: function create(stream) {
                    function getInt(linDict2, name) {
                      var allowZeroValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                      var obj4 = linDict2.get(name);
                      if (Number.isInteger(obj4) && (allowZeroValue ? obj4 >= 0 : obj4 > 0)) {
                        return obj4;
                      }
                      throw new Error('The "'.concat(name, '" parameter in the linearization ') + "dictionary is invalid.");
                    }
                    function getHints(linDict2) {
                      var hints = linDict2.get("H");
                      var hintsLength;
                      if (Array.isArray(hints) && ((hintsLength = hints.length) === 2 || hintsLength === 4)) {
                        for (var index = 0; index < hintsLength; index++) {
                          var hint = hints[index];
                          if (!(Number.isInteger(hint) && hint > 0)) {
                            throw new Error("Hint (".concat(index, ") in the linearization dictionary is invalid."));
                          }
                        }
                        return hints;
                      }
                      throw new Error("Hint array in the linearization dictionary is invalid.");
                    }
                    var parser = new Parser({
                      lexer: new Lexer(stream),
                      xref: null
                    });
                    var obj1 = parser.getObj();
                    var obj2 = parser.getObj();
                    var obj3 = parser.getObj();
                    var linDict = parser.getObj();
                    var obj, length;
                    if (!(Number.isInteger(obj1) && Number.isInteger(obj2) && (0, _primitives.isCmd)(obj3, "obj") && (0, _primitives.isDict)(linDict) && (0, _util.isNum)(obj = linDict.get("Linearized")) && obj > 0)) {
                      return null;
                    } else if ((length = getInt(linDict, "L")) !== stream.length) {
                      throw new Error('The "L" parameter in the linearization dictionary does not equal the stream length.');
                    }
                    return {
                      length,
                      hints: getHints(linDict),
                      objectNumberFirst: getInt(linDict, "O"),
                      endFirst: getInt(linDict, "E"),
                      numPages: getInt(linDict, "N"),
                      mainXRefEntriesOffset: getInt(linDict, "T"),
                      pageFirst: linDict.has("P") ? getInt(linDict, "P", true) : 0
                    };
                  }
                }]);
                return Linearization2;
              }();
              exports2.Linearization = Linearization;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Ascii85Stream = void 0;
              var _decode_stream = __w_pdfjs_require__2(159);
              var _core_utils = __w_pdfjs_require__2(139);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var Ascii85Stream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(Ascii85Stream2, _DecodeStream);
                var _super = _createSuper(Ascii85Stream2);
                function Ascii85Stream2(str, maybeLength) {
                  var _this;
                  _classCallCheck(this, Ascii85Stream2);
                  if (maybeLength) {
                    maybeLength *= 0.8;
                  }
                  _this = _super.call(this, maybeLength);
                  _this.str = str;
                  _this.dict = str.dict;
                  _this.input = new Uint8Array(5);
                  return _this;
                }
                _createClass(Ascii85Stream2, [{
                  key: "readBlock",
                  value: function readBlock() {
                    var TILDA_CHAR = 126;
                    var Z_LOWER_CHAR = 122;
                    var EOF = -1;
                    var str = this.str;
                    var c = str.getByte();
                    while ((0, _core_utils.isWhiteSpace)(c)) {
                      c = str.getByte();
                    }
                    if (c === EOF || c === TILDA_CHAR) {
                      this.eof = true;
                      return;
                    }
                    var bufferLength = this.bufferLength;
                    var buffer, i;
                    if (c === Z_LOWER_CHAR) {
                      buffer = this.ensureBuffer(bufferLength + 4);
                      for (i = 0; i < 4; ++i) {
                        buffer[bufferLength + i] = 0;
                      }
                      this.bufferLength += 4;
                    } else {
                      var input = this.input;
                      input[0] = c;
                      for (i = 1; i < 5; ++i) {
                        c = str.getByte();
                        while ((0, _core_utils.isWhiteSpace)(c)) {
                          c = str.getByte();
                        }
                        input[i] = c;
                        if (c === EOF || c === TILDA_CHAR) {
                          break;
                        }
                      }
                      buffer = this.ensureBuffer(bufferLength + i - 1);
                      this.bufferLength += i - 1;
                      if (i < 5) {
                        for (; i < 5; ++i) {
                          input[i] = 33 + 84;
                        }
                        this.eof = true;
                      }
                      var t = 0;
                      for (i = 0; i < 5; ++i) {
                        t = t * 85 + (input[i] - 33);
                      }
                      for (i = 3; i >= 0; --i) {
                        buffer[bufferLength + i] = t & 255;
                        t >>= 8;
                      }
                    }
                  }
                }]);
                return Ascii85Stream2;
              }(_decode_stream.DecodeStream);
              exports2.Ascii85Stream = Ascii85Stream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.StreamsSequenceStream = exports2.DecodeStream = void 0;
              var _base_stream = __w_pdfjs_require__2(136);
              var _stream = __w_pdfjs_require__2(140);
              function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
              }
              function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                  return Array.from(iter);
              }
              function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr))
                  return _arrayLikeToArray(arr);
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var emptyBuffer = new Uint8Array(0);
              var DecodeStream = /* @__PURE__ */ function(_BaseStream) {
                _inherits(DecodeStream2, _BaseStream);
                var _super = _createSuper(DecodeStream2);
                function DecodeStream2(maybeMinBufferLength) {
                  var _this;
                  _classCallCheck(this, DecodeStream2);
                  _this = _super.call(this);
                  _this._rawMinBufferLength = maybeMinBufferLength || 0;
                  _this.pos = 0;
                  _this.bufferLength = 0;
                  _this.eof = false;
                  _this.buffer = emptyBuffer;
                  _this.minBufferLength = 512;
                  if (maybeMinBufferLength) {
                    while (_this.minBufferLength < maybeMinBufferLength) {
                      _this.minBufferLength *= 2;
                    }
                  }
                  return _this;
                }
                _createClass(DecodeStream2, [{
                  key: "isEmpty",
                  get: function get() {
                    while (!this.eof && this.bufferLength === 0) {
                      this.readBlock();
                    }
                    return this.bufferLength === 0;
                  }
                }, {
                  key: "ensureBuffer",
                  value: function ensureBuffer(requested) {
                    var buffer = this.buffer;
                    if (requested <= buffer.byteLength) {
                      return buffer;
                    }
                    var size = this.minBufferLength;
                    while (size < requested) {
                      size *= 2;
                    }
                    var buffer2 = new Uint8Array(size);
                    buffer2.set(buffer);
                    return this.buffer = buffer2;
                  }
                }, {
                  key: "getByte",
                  value: function getByte() {
                    var pos = this.pos;
                    while (this.bufferLength <= pos) {
                      if (this.eof) {
                        return -1;
                      }
                      this.readBlock();
                    }
                    return this.buffer[this.pos++];
                  }
                }, {
                  key: "getBytes",
                  value: function getBytes(length) {
                    var forceClamped = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    var pos = this.pos;
                    var end;
                    if (length) {
                      this.ensureBuffer(pos + length);
                      end = pos + length;
                      while (!this.eof && this.bufferLength < end) {
                        this.readBlock();
                      }
                      var bufEnd = this.bufferLength;
                      if (end > bufEnd) {
                        end = bufEnd;
                      }
                    } else {
                      while (!this.eof) {
                        this.readBlock();
                      }
                      end = this.bufferLength;
                    }
                    this.pos = end;
                    var subarray = this.buffer.subarray(pos, end);
                    return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;
                  }
                }, {
                  key: "reset",
                  value: function reset() {
                    this.pos = 0;
                  }
                }, {
                  key: "makeSubStream",
                  value: function makeSubStream(start, length) {
                    var dict = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                    if (length === void 0) {
                      while (!this.eof) {
                        this.readBlock();
                      }
                    } else {
                      var end = start + length;
                      while (this.bufferLength <= end && !this.eof) {
                        this.readBlock();
                      }
                    }
                    return new _stream.Stream(this.buffer, start, length, dict);
                  }
                }, {
                  key: "getBaseStreams",
                  value: function getBaseStreams() {
                    return this.str ? this.str.getBaseStreams() : null;
                  }
                }]);
                return DecodeStream2;
              }(_base_stream.BaseStream);
              exports2.DecodeStream = DecodeStream;
              var StreamsSequenceStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(StreamsSequenceStream2, _DecodeStream);
                var _super2 = _createSuper(StreamsSequenceStream2);
                function StreamsSequenceStream2(streams) {
                  var _this2;
                  var onError = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  _classCallCheck(this, StreamsSequenceStream2);
                  var maybeLength = 0;
                  var _iterator = _createForOfIteratorHelper(streams), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var stream = _step.value;
                      maybeLength += stream instanceof DecodeStream ? stream._rawMinBufferLength : stream.length;
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  _this2 = _super2.call(this, maybeLength);
                  _this2.streams = streams;
                  _this2._onError = onError;
                  return _this2;
                }
                _createClass(StreamsSequenceStream2, [{
                  key: "readBlock",
                  value: function readBlock() {
                    var streams = this.streams;
                    if (streams.length === 0) {
                      this.eof = true;
                      return;
                    }
                    var stream = streams.shift();
                    var chunk;
                    try {
                      chunk = stream.getBytes();
                    } catch (reason) {
                      if (this._onError) {
                        this._onError(reason, stream.dict && stream.dict.objId);
                        return;
                      }
                      throw reason;
                    }
                    var bufferLength = this.bufferLength;
                    var newLength = bufferLength + chunk.length;
                    var buffer = this.ensureBuffer(newLength);
                    buffer.set(chunk, bufferLength);
                    this.bufferLength = newLength;
                  }
                }, {
                  key: "getBaseStreams",
                  value: function getBaseStreams() {
                    var baseStreamsBuf = [];
                    var _iterator2 = _createForOfIteratorHelper(this.streams), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var stream = _step2.value;
                        var baseStreams = stream.getBaseStreams();
                        if (baseStreams) {
                          baseStreamsBuf.push.apply(baseStreamsBuf, _toConsumableArray(baseStreams));
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    return baseStreamsBuf.length > 0 ? baseStreamsBuf : null;
                  }
                }]);
                return StreamsSequenceStream2;
              }(DecodeStream);
              exports2.StreamsSequenceStream = StreamsSequenceStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.AsciiHexStream = void 0;
              var _decode_stream = __w_pdfjs_require__2(159);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var AsciiHexStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(AsciiHexStream2, _DecodeStream);
                var _super = _createSuper(AsciiHexStream2);
                function AsciiHexStream2(str, maybeLength) {
                  var _this;
                  _classCallCheck(this, AsciiHexStream2);
                  if (maybeLength) {
                    maybeLength *= 0.5;
                  }
                  _this = _super.call(this, maybeLength);
                  _this.str = str;
                  _this.dict = str.dict;
                  _this.firstDigit = -1;
                  return _this;
                }
                _createClass(AsciiHexStream2, [{
                  key: "readBlock",
                  value: function readBlock() {
                    var UPSTREAM_BLOCK_SIZE = 8e3;
                    var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);
                    if (!bytes.length) {
                      this.eof = true;
                      return;
                    }
                    var maxDecodeLength = bytes.length + 1 >> 1;
                    var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);
                    var bufferLength = this.bufferLength;
                    var firstDigit = this.firstDigit;
                    var _iterator = _createForOfIteratorHelper(bytes), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var ch = _step.value;
                        var digit = void 0;
                        if (ch >= 48 && ch <= 57) {
                          digit = ch & 15;
                        } else if (ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102) {
                          digit = (ch & 15) + 9;
                        } else if (ch === 62) {
                          this.eof = true;
                          break;
                        } else {
                          continue;
                        }
                        if (firstDigit < 0) {
                          firstDigit = digit;
                        } else {
                          buffer[bufferLength++] = firstDigit << 4 | digit;
                          firstDigit = -1;
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    if (firstDigit >= 0 && this.eof) {
                      buffer[bufferLength++] = firstDigit << 4;
                      firstDigit = -1;
                    }
                    this.firstDigit = firstDigit;
                    this.bufferLength = bufferLength;
                  }
                }]);
                return AsciiHexStream2;
              }(_decode_stream.DecodeStream);
              exports2.AsciiHexStream = AsciiHexStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.CCITTFaxStream = void 0;
              var _primitives = __w_pdfjs_require__2(135);
              var _ccitt = __w_pdfjs_require__2(162);
              var _decode_stream = __w_pdfjs_require__2(159);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var CCITTFaxStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(CCITTFaxStream2, _DecodeStream);
                var _super = _createSuper(CCITTFaxStream2);
                function CCITTFaxStream2(str, maybeLength, params) {
                  var _this;
                  _classCallCheck(this, CCITTFaxStream2);
                  _this = _super.call(this, maybeLength);
                  _this.str = str;
                  _this.dict = str.dict;
                  if (!(0, _primitives.isDict)(params)) {
                    params = _primitives.Dict.empty;
                  }
                  var source = {
                    next: function next() {
                      return str.getByte();
                    }
                  };
                  _this.ccittFaxDecoder = new _ccitt.CCITTFaxDecoder(source, {
                    K: params.get("K"),
                    EndOfLine: params.get("EndOfLine"),
                    EncodedByteAlign: params.get("EncodedByteAlign"),
                    Columns: params.get("Columns"),
                    Rows: params.get("Rows"),
                    EndOfBlock: params.get("EndOfBlock"),
                    BlackIs1: params.get("BlackIs1")
                  });
                  return _this;
                }
                _createClass(CCITTFaxStream2, [{
                  key: "readBlock",
                  value: function readBlock() {
                    while (!this.eof) {
                      var c = this.ccittFaxDecoder.readNextChar();
                      if (c === -1) {
                        this.eof = true;
                        return;
                      }
                      this.ensureBuffer(this.bufferLength + 1);
                      this.buffer[this.bufferLength++] = c;
                    }
                  }
                }]);
                return CCITTFaxStream2;
              }(_decode_stream.DecodeStream);
              exports2.CCITTFaxStream = CCITTFaxStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.CCITTFaxDecoder = void 0;
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var ccittEOL = -2;
              var ccittEOF = -1;
              var twoDimPass = 0;
              var twoDimHoriz = 1;
              var twoDimVert0 = 2;
              var twoDimVertR1 = 3;
              var twoDimVertL1 = 4;
              var twoDimVertR2 = 5;
              var twoDimVertL2 = 6;
              var twoDimVertR3 = 7;
              var twoDimVertL3 = 8;
              var twoDimTable = [[-1, -1], [-1, -1], [7, twoDimVertL3], [7, twoDimVertR3], [6, twoDimVertL2], [6, twoDimVertL2], [6, twoDimVertR2], [6, twoDimVertR2], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0]];
              var whiteTable1 = [[-1, -1], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]];
              var whiteTable2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]];
              var blackTable1 = [[-1, -1], [-1, -1], [12, ccittEOL], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]];
              var blackTable2 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]];
              var blackTable3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];
              var CCITTFaxDecoder = /* @__PURE__ */ function() {
                function CCITTFaxDecoder2(source) {
                  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  _classCallCheck(this, CCITTFaxDecoder2);
                  if (!source || typeof source.next !== "function") {
                    throw new Error('CCITTFaxDecoder - invalid "source" parameter.');
                  }
                  this.source = source;
                  this.eof = false;
                  this.encoding = options.K || 0;
                  this.eoline = options.EndOfLine || false;
                  this.byteAlign = options.EncodedByteAlign || false;
                  this.columns = options.Columns || 1728;
                  this.rows = options.Rows || 0;
                  var eoblock = options.EndOfBlock;
                  if (eoblock === null || eoblock === void 0) {
                    eoblock = true;
                  }
                  this.eoblock = eoblock;
                  this.black = options.BlackIs1 || false;
                  this.codingLine = new Uint32Array(this.columns + 1);
                  this.refLine = new Uint32Array(this.columns + 2);
                  this.codingLine[0] = this.columns;
                  this.codingPos = 0;
                  this.row = 0;
                  this.nextLine2D = this.encoding < 0;
                  this.inputBits = 0;
                  this.inputBuf = 0;
                  this.outputBits = 0;
                  this.rowsDone = false;
                  var code1;
                  while ((code1 = this._lookBits(12)) === 0) {
                    this._eatBits(1);
                  }
                  if (code1 === 1) {
                    this._eatBits(12);
                  }
                  if (this.encoding > 0) {
                    this.nextLine2D = !this._lookBits(1);
                    this._eatBits(1);
                  }
                }
                _createClass(CCITTFaxDecoder2, [{
                  key: "readNextChar",
                  value: function readNextChar() {
                    if (this.eof) {
                      return -1;
                    }
                    var refLine = this.refLine;
                    var codingLine = this.codingLine;
                    var columns = this.columns;
                    var refPos, blackPixels, bits, i;
                    if (this.outputBits === 0) {
                      if (this.rowsDone) {
                        this.eof = true;
                      }
                      if (this.eof) {
                        return -1;
                      }
                      this.err = false;
                      var code1, code2, code3;
                      if (this.nextLine2D) {
                        for (i = 0; codingLine[i] < columns; ++i) {
                          refLine[i] = codingLine[i];
                        }
                        refLine[i++] = columns;
                        refLine[i] = columns;
                        codingLine[0] = 0;
                        this.codingPos = 0;
                        refPos = 0;
                        blackPixels = 0;
                        while (codingLine[this.codingPos] < columns) {
                          code1 = this._getTwoDimCode();
                          switch (code1) {
                            case twoDimPass:
                              this._addPixels(refLine[refPos + 1], blackPixels);
                              if (refLine[refPos + 1] < columns) {
                                refPos += 2;
                              }
                              break;
                            case twoDimHoriz:
                              code1 = code2 = 0;
                              if (blackPixels) {
                                do {
                                  code1 += code3 = this._getBlackCode();
                                } while (code3 >= 64);
                                do {
                                  code2 += code3 = this._getWhiteCode();
                                } while (code3 >= 64);
                              } else {
                                do {
                                  code1 += code3 = this._getWhiteCode();
                                } while (code3 >= 64);
                                do {
                                  code2 += code3 = this._getBlackCode();
                                } while (code3 >= 64);
                              }
                              this._addPixels(codingLine[this.codingPos] + code1, blackPixels);
                              if (codingLine[this.codingPos] < columns) {
                                this._addPixels(codingLine[this.codingPos] + code2, blackPixels ^ 1);
                              }
                              while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                                refPos += 2;
                              }
                              break;
                            case twoDimVertR3:
                              this._addPixels(refLine[refPos] + 3, blackPixels);
                              blackPixels ^= 1;
                              if (codingLine[this.codingPos] < columns) {
                                ++refPos;
                                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                                  refPos += 2;
                                }
                              }
                              break;
                            case twoDimVertR2:
                              this._addPixels(refLine[refPos] + 2, blackPixels);
                              blackPixels ^= 1;
                              if (codingLine[this.codingPos] < columns) {
                                ++refPos;
                                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                                  refPos += 2;
                                }
                              }
                              break;
                            case twoDimVertR1:
                              this._addPixels(refLine[refPos] + 1, blackPixels);
                              blackPixels ^= 1;
                              if (codingLine[this.codingPos] < columns) {
                                ++refPos;
                                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                                  refPos += 2;
                                }
                              }
                              break;
                            case twoDimVert0:
                              this._addPixels(refLine[refPos], blackPixels);
                              blackPixels ^= 1;
                              if (codingLine[this.codingPos] < columns) {
                                ++refPos;
                                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                                  refPos += 2;
                                }
                              }
                              break;
                            case twoDimVertL3:
                              this._addPixelsNeg(refLine[refPos] - 3, blackPixels);
                              blackPixels ^= 1;
                              if (codingLine[this.codingPos] < columns) {
                                if (refPos > 0) {
                                  --refPos;
                                } else {
                                  ++refPos;
                                }
                                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                                  refPos += 2;
                                }
                              }
                              break;
                            case twoDimVertL2:
                              this._addPixelsNeg(refLine[refPos] - 2, blackPixels);
                              blackPixels ^= 1;
                              if (codingLine[this.codingPos] < columns) {
                                if (refPos > 0) {
                                  --refPos;
                                } else {
                                  ++refPos;
                                }
                                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                                  refPos += 2;
                                }
                              }
                              break;
                            case twoDimVertL1:
                              this._addPixelsNeg(refLine[refPos] - 1, blackPixels);
                              blackPixels ^= 1;
                              if (codingLine[this.codingPos] < columns) {
                                if (refPos > 0) {
                                  --refPos;
                                } else {
                                  ++refPos;
                                }
                                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
                                  refPos += 2;
                                }
                              }
                              break;
                            case ccittEOF:
                              this._addPixels(columns, 0);
                              this.eof = true;
                              break;
                            default:
                              (0, _util.info)("bad 2d code");
                              this._addPixels(columns, 0);
                              this.err = true;
                          }
                        }
                      } else {
                        codingLine[0] = 0;
                        this.codingPos = 0;
                        blackPixels = 0;
                        while (codingLine[this.codingPos] < columns) {
                          code1 = 0;
                          if (blackPixels) {
                            do {
                              code1 += code3 = this._getBlackCode();
                            } while (code3 >= 64);
                          } else {
                            do {
                              code1 += code3 = this._getWhiteCode();
                            } while (code3 >= 64);
                          }
                          this._addPixels(codingLine[this.codingPos] + code1, blackPixels);
                          blackPixels ^= 1;
                        }
                      }
                      var gotEOL = false;
                      if (this.byteAlign) {
                        this.inputBits &= ~7;
                      }
                      if (!this.eoblock && this.row === this.rows - 1) {
                        this.rowsDone = true;
                      } else {
                        code1 = this._lookBits(12);
                        if (this.eoline) {
                          while (code1 !== ccittEOF && code1 !== 1) {
                            this._eatBits(1);
                            code1 = this._lookBits(12);
                          }
                        } else {
                          while (code1 === 0) {
                            this._eatBits(1);
                            code1 = this._lookBits(12);
                          }
                        }
                        if (code1 === 1) {
                          this._eatBits(12);
                          gotEOL = true;
                        } else if (code1 === ccittEOF) {
                          this.eof = true;
                        }
                      }
                      if (!this.eof && this.encoding > 0 && !this.rowsDone) {
                        this.nextLine2D = !this._lookBits(1);
                        this._eatBits(1);
                      }
                      if (this.eoblock && gotEOL && this.byteAlign) {
                        code1 = this._lookBits(12);
                        if (code1 === 1) {
                          this._eatBits(12);
                          if (this.encoding > 0) {
                            this._lookBits(1);
                            this._eatBits(1);
                          }
                          if (this.encoding >= 0) {
                            for (i = 0; i < 4; ++i) {
                              code1 = this._lookBits(12);
                              if (code1 !== 1) {
                                (0, _util.info)("bad rtc code: " + code1);
                              }
                              this._eatBits(12);
                              if (this.encoding > 0) {
                                this._lookBits(1);
                                this._eatBits(1);
                              }
                            }
                          }
                          this.eof = true;
                        }
                      } else if (this.err && this.eoline) {
                        while (true) {
                          code1 = this._lookBits(13);
                          if (code1 === ccittEOF) {
                            this.eof = true;
                            return -1;
                          }
                          if (code1 >> 1 === 1) {
                            break;
                          }
                          this._eatBits(1);
                        }
                        this._eatBits(12);
                        if (this.encoding > 0) {
                          this._eatBits(1);
                          this.nextLine2D = !(code1 & 1);
                        }
                      }
                      if (codingLine[0] > 0) {
                        this.outputBits = codingLine[this.codingPos = 0];
                      } else {
                        this.outputBits = codingLine[this.codingPos = 1];
                      }
                      this.row++;
                    }
                    var c;
                    if (this.outputBits >= 8) {
                      c = this.codingPos & 1 ? 0 : 255;
                      this.outputBits -= 8;
                      if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {
                        this.codingPos++;
                        this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];
                      }
                    } else {
                      bits = 8;
                      c = 0;
                      do {
                        if (typeof this.outputBits !== "number") {
                          throw new _util.FormatError('Invalid /CCITTFaxDecode data, "outputBits" must be a number.');
                        }
                        if (this.outputBits > bits) {
                          c <<= bits;
                          if (!(this.codingPos & 1)) {
                            c |= 255 >> 8 - bits;
                          }
                          this.outputBits -= bits;
                          bits = 0;
                        } else {
                          c <<= this.outputBits;
                          if (!(this.codingPos & 1)) {
                            c |= 255 >> 8 - this.outputBits;
                          }
                          bits -= this.outputBits;
                          this.outputBits = 0;
                          if (codingLine[this.codingPos] < columns) {
                            this.codingPos++;
                            this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];
                          } else if (bits > 0) {
                            c <<= bits;
                            bits = 0;
                          }
                        }
                      } while (bits);
                    }
                    if (this.black) {
                      c ^= 255;
                    }
                    return c;
                  }
                }, {
                  key: "_addPixels",
                  value: function _addPixels(a1, blackPixels) {
                    var codingLine = this.codingLine;
                    var codingPos = this.codingPos;
                    if (a1 > codingLine[codingPos]) {
                      if (a1 > this.columns) {
                        (0, _util.info)("row is wrong length");
                        this.err = true;
                        a1 = this.columns;
                      }
                      if (codingPos & 1 ^ blackPixels) {
                        ++codingPos;
                      }
                      codingLine[codingPos] = a1;
                    }
                    this.codingPos = codingPos;
                  }
                }, {
                  key: "_addPixelsNeg",
                  value: function _addPixelsNeg(a1, blackPixels) {
                    var codingLine = this.codingLine;
                    var codingPos = this.codingPos;
                    if (a1 > codingLine[codingPos]) {
                      if (a1 > this.columns) {
                        (0, _util.info)("row is wrong length");
                        this.err = true;
                        a1 = this.columns;
                      }
                      if (codingPos & 1 ^ blackPixels) {
                        ++codingPos;
                      }
                      codingLine[codingPos] = a1;
                    } else if (a1 < codingLine[codingPos]) {
                      if (a1 < 0) {
                        (0, _util.info)("invalid code");
                        this.err = true;
                        a1 = 0;
                      }
                      while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {
                        --codingPos;
                      }
                      codingLine[codingPos] = a1;
                    }
                    this.codingPos = codingPos;
                  }
                }, {
                  key: "_findTableCode",
                  value: function _findTableCode(start, end, table, limit) {
                    var limitValue = limit || 0;
                    for (var i = start; i <= end; ++i) {
                      var code = this._lookBits(i);
                      if (code === ccittEOF) {
                        return [true, 1, false];
                      }
                      if (i < end) {
                        code <<= end - i;
                      }
                      if (!limitValue || code >= limitValue) {
                        var p = table[code - limitValue];
                        if (p[0] === i) {
                          this._eatBits(i);
                          return [true, p[1], true];
                        }
                      }
                    }
                    return [false, 0, false];
                  }
                }, {
                  key: "_getTwoDimCode",
                  value: function _getTwoDimCode() {
                    var code = 0;
                    var p;
                    if (this.eoblock) {
                      code = this._lookBits(7);
                      p = twoDimTable[code];
                      if (p && p[0] > 0) {
                        this._eatBits(p[0]);
                        return p[1];
                      }
                    } else {
                      var result = this._findTableCode(1, 7, twoDimTable);
                      if (result[0] && result[2]) {
                        return result[1];
                      }
                    }
                    (0, _util.info)("Bad two dim code");
                    return ccittEOF;
                  }
                }, {
                  key: "_getWhiteCode",
                  value: function _getWhiteCode() {
                    var code = 0;
                    var p;
                    if (this.eoblock) {
                      code = this._lookBits(12);
                      if (code === ccittEOF) {
                        return 1;
                      }
                      if (code >> 5 === 0) {
                        p = whiteTable1[code];
                      } else {
                        p = whiteTable2[code >> 3];
                      }
                      if (p[0] > 0) {
                        this._eatBits(p[0]);
                        return p[1];
                      }
                    } else {
                      var result = this._findTableCode(1, 9, whiteTable2);
                      if (result[0]) {
                        return result[1];
                      }
                      result = this._findTableCode(11, 12, whiteTable1);
                      if (result[0]) {
                        return result[1];
                      }
                    }
                    (0, _util.info)("bad white code");
                    this._eatBits(1);
                    return 1;
                  }
                }, {
                  key: "_getBlackCode",
                  value: function _getBlackCode() {
                    var code, p;
                    if (this.eoblock) {
                      code = this._lookBits(13);
                      if (code === ccittEOF) {
                        return 1;
                      }
                      if (code >> 7 === 0) {
                        p = blackTable1[code];
                      } else if (code >> 9 === 0 && code >> 7 !== 0) {
                        p = blackTable2[(code >> 1) - 64];
                      } else {
                        p = blackTable3[code >> 7];
                      }
                      if (p[0] > 0) {
                        this._eatBits(p[0]);
                        return p[1];
                      }
                    } else {
                      var result = this._findTableCode(2, 6, blackTable3);
                      if (result[0]) {
                        return result[1];
                      }
                      result = this._findTableCode(7, 12, blackTable2, 64);
                      if (result[0]) {
                        return result[1];
                      }
                      result = this._findTableCode(10, 13, blackTable1);
                      if (result[0]) {
                        return result[1];
                      }
                    }
                    (0, _util.info)("bad black code");
                    this._eatBits(1);
                    return 1;
                  }
                }, {
                  key: "_lookBits",
                  value: function _lookBits(n) {
                    var c;
                    while (this.inputBits < n) {
                      if ((c = this.source.next()) === -1) {
                        if (this.inputBits === 0) {
                          return ccittEOF;
                        }
                        return this.inputBuf << n - this.inputBits & 65535 >> 16 - n;
                      }
                      this.inputBuf = this.inputBuf << 8 | c;
                      this.inputBits += 8;
                    }
                    return this.inputBuf >> this.inputBits - n & 65535 >> 16 - n;
                  }
                }, {
                  key: "_eatBits",
                  value: function _eatBits(n) {
                    if ((this.inputBits -= n) < 0) {
                      this.inputBits = 0;
                    }
                  }
                }]);
                return CCITTFaxDecoder2;
              }();
              exports2.CCITTFaxDecoder = CCITTFaxDecoder;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.FlateStream = void 0;
              var _decode_stream = __w_pdfjs_require__2(159);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var codeLenCodeMap = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
              var lengthDecode = new Int32Array([3, 4, 5, 6, 7, 8, 9, 10, 65547, 65549, 65551, 65553, 131091, 131095, 131099, 131103, 196643, 196651, 196659, 196667, 262211, 262227, 262243, 262259, 327811, 327843, 327875, 327907, 258, 258, 258]);
              var distDecode = new Int32Array([1, 2, 3, 4, 65541, 65543, 131081, 131085, 196625, 196633, 262177, 262193, 327745, 327777, 393345, 393409, 459009, 459137, 524801, 525057, 590849, 591361, 657409, 658433, 724993, 727041, 794625, 798721, 868353, 876545]);
              var fixedLitCodeTab = [new Int32Array([459008, 524368, 524304, 524568, 459024, 524400, 524336, 590016, 459016, 524384, 524320, 589984, 524288, 524416, 524352, 590048, 459012, 524376, 524312, 589968, 459028, 524408, 524344, 590032, 459020, 524392, 524328, 59e4, 524296, 524424, 524360, 590064, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590024, 459018, 524388, 524324, 589992, 524292, 524420, 524356, 590056, 459014, 524380, 524316, 589976, 459030, 524412, 524348, 590040, 459022, 524396, 524332, 590008, 524300, 524428, 524364, 590072, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590020, 459017, 524386, 524322, 589988, 524290, 524418, 524354, 590052, 459013, 524378, 524314, 589972, 459029, 524410, 524346, 590036, 459021, 524394, 524330, 590004, 524298, 524426, 524362, 590068, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590028, 459019, 524390, 524326, 589996, 524294, 524422, 524358, 590060, 459015, 524382, 524318, 589980, 459031, 524414, 524350, 590044, 459023, 524398, 524334, 590012, 524302, 524430, 524366, 590076, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590018, 459016, 524385, 524321, 589986, 524289, 524417, 524353, 590050, 459012, 524377, 524313, 589970, 459028, 524409, 524345, 590034, 459020, 524393, 524329, 590002, 524297, 524425, 524361, 590066, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590026, 459018, 524389, 524325, 589994, 524293, 524421, 524357, 590058, 459014, 524381, 524317, 589978, 459030, 524413, 524349, 590042, 459022, 524397, 524333, 590010, 524301, 524429, 524365, 590074, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590022, 459017, 524387, 524323, 589990, 524291, 524419, 524355, 590054, 459013, 524379, 524315, 589974, 459029, 524411, 524347, 590038, 459021, 524395, 524331, 590006, 524299, 524427, 524363, 590070, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590030, 459019, 524391, 524327, 589998, 524295, 524423, 524359, 590062, 459015, 524383, 524319, 589982, 459031, 524415, 524351, 590046, 459023, 524399, 524335, 590014, 524303, 524431, 524367, 590078, 459008, 524368, 524304, 524568, 459024, 524400, 524336, 590017, 459016, 524384, 524320, 589985, 524288, 524416, 524352, 590049, 459012, 524376, 524312, 589969, 459028, 524408, 524344, 590033, 459020, 524392, 524328, 590001, 524296, 524424, 524360, 590065, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590025, 459018, 524388, 524324, 589993, 524292, 524420, 524356, 590057, 459014, 524380, 524316, 589977, 459030, 524412, 524348, 590041, 459022, 524396, 524332, 590009, 524300, 524428, 524364, 590073, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590021, 459017, 524386, 524322, 589989, 524290, 524418, 524354, 590053, 459013, 524378, 524314, 589973, 459029, 524410, 524346, 590037, 459021, 524394, 524330, 590005, 524298, 524426, 524362, 590069, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590029, 459019, 524390, 524326, 589997, 524294, 524422, 524358, 590061, 459015, 524382, 524318, 589981, 459031, 524414, 524350, 590045, 459023, 524398, 524334, 590013, 524302, 524430, 524366, 590077, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590019, 459016, 524385, 524321, 589987, 524289, 524417, 524353, 590051, 459012, 524377, 524313, 589971, 459028, 524409, 524345, 590035, 459020, 524393, 524329, 590003, 524297, 524425, 524361, 590067, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590027, 459018, 524389, 524325, 589995, 524293, 524421, 524357, 590059, 459014, 524381, 524317, 589979, 459030, 524413, 524349, 590043, 459022, 524397, 524333, 590011, 524301, 524429, 524365, 590075, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590023, 459017, 524387, 524323, 589991, 524291, 524419, 524355, 590055, 459013, 524379, 524315, 589975, 459029, 524411, 524347, 590039, 459021, 524395, 524331, 590007, 524299, 524427, 524363, 590071, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590031, 459019, 524391, 524327, 589999, 524295, 524423, 524359, 590063, 459015, 524383, 524319, 589983, 459031, 524415, 524351, 590047, 459023, 524399, 524335, 590015, 524303, 524431, 524367, 590079]), 9];
              var fixedDistCodeTab = [new Int32Array([327680, 327696, 327688, 327704, 327684, 327700, 327692, 327708, 327682, 327698, 327690, 327706, 327686, 327702, 327694, 0, 327681, 327697, 327689, 327705, 327685, 327701, 327693, 327709, 327683, 327699, 327691, 327707, 327687, 327703, 327695, 0]), 5];
              var FlateStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(FlateStream2, _DecodeStream);
                var _super = _createSuper(FlateStream2);
                function FlateStream2(str, maybeLength) {
                  var _this;
                  _classCallCheck(this, FlateStream2);
                  _this = _super.call(this, maybeLength);
                  _this.str = str;
                  _this.dict = str.dict;
                  var cmf = str.getByte();
                  var flg = str.getByte();
                  if (cmf === -1 || flg === -1) {
                    throw new _util.FormatError("Invalid header in flate stream: ".concat(cmf, ", ").concat(flg));
                  }
                  if ((cmf & 15) !== 8) {
                    throw new _util.FormatError("Unknown compression method in flate stream: ".concat(cmf, ", ").concat(flg));
                  }
                  if (((cmf << 8) + flg) % 31 !== 0) {
                    throw new _util.FormatError("Bad FCHECK in flate stream: ".concat(cmf, ", ").concat(flg));
                  }
                  if (flg & 32) {
                    throw new _util.FormatError("FDICT bit set in flate stream: ".concat(cmf, ", ").concat(flg));
                  }
                  _this.codeSize = 0;
                  _this.codeBuf = 0;
                  return _this;
                }
                _createClass(FlateStream2, [{
                  key: "getBits",
                  value: function getBits(bits) {
                    var str = this.str;
                    var codeSize = this.codeSize;
                    var codeBuf = this.codeBuf;
                    var b;
                    while (codeSize < bits) {
                      if ((b = str.getByte()) === -1) {
                        throw new _util.FormatError("Bad encoding in flate stream");
                      }
                      codeBuf |= b << codeSize;
                      codeSize += 8;
                    }
                    b = codeBuf & (1 << bits) - 1;
                    this.codeBuf = codeBuf >> bits;
                    this.codeSize = codeSize -= bits;
                    return b;
                  }
                }, {
                  key: "getCode",
                  value: function getCode(table) {
                    var str = this.str;
                    var codes = table[0];
                    var maxLen = table[1];
                    var codeSize = this.codeSize;
                    var codeBuf = this.codeBuf;
                    var b;
                    while (codeSize < maxLen) {
                      if ((b = str.getByte()) === -1) {
                        break;
                      }
                      codeBuf |= b << codeSize;
                      codeSize += 8;
                    }
                    var code = codes[codeBuf & (1 << maxLen) - 1];
                    var codeLen = code >> 16;
                    var codeVal = code & 65535;
                    if (codeLen < 1 || codeSize < codeLen) {
                      throw new _util.FormatError("Bad encoding in flate stream");
                    }
                    this.codeBuf = codeBuf >> codeLen;
                    this.codeSize = codeSize - codeLen;
                    return codeVal;
                  }
                }, {
                  key: "generateHuffmanTable",
                  value: function generateHuffmanTable(lengths) {
                    var n = lengths.length;
                    var maxLen = 0;
                    var i;
                    for (i = 0; i < n; ++i) {
                      if (lengths[i] > maxLen) {
                        maxLen = lengths[i];
                      }
                    }
                    var size = 1 << maxLen;
                    var codes = new Int32Array(size);
                    for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {
                      for (var val = 0; val < n; ++val) {
                        if (lengths[val] === len) {
                          var code2 = 0;
                          var t = code;
                          for (i = 0; i < len; ++i) {
                            code2 = code2 << 1 | t & 1;
                            t >>= 1;
                          }
                          for (i = code2; i < size; i += skip) {
                            codes[i] = len << 16 | val;
                          }
                          ++code;
                        }
                      }
                    }
                    return [codes, maxLen];
                  }
                }, {
                  key: "readBlock",
                  value: function readBlock() {
                    var buffer, len;
                    var str = this.str;
                    var hdr = this.getBits(3);
                    if (hdr & 1) {
                      this.eof = true;
                    }
                    hdr >>= 1;
                    if (hdr === 0) {
                      var b;
                      if ((b = str.getByte()) === -1) {
                        throw new _util.FormatError("Bad block header in flate stream");
                      }
                      var blockLen = b;
                      if ((b = str.getByte()) === -1) {
                        throw new _util.FormatError("Bad block header in flate stream");
                      }
                      blockLen |= b << 8;
                      if ((b = str.getByte()) === -1) {
                        throw new _util.FormatError("Bad block header in flate stream");
                      }
                      var check = b;
                      if ((b = str.getByte()) === -1) {
                        throw new _util.FormatError("Bad block header in flate stream");
                      }
                      check |= b << 8;
                      if (check !== (~blockLen & 65535) && (blockLen !== 0 || check !== 0)) {
                        throw new _util.FormatError("Bad uncompressed block length in flate stream");
                      }
                      this.codeBuf = 0;
                      this.codeSize = 0;
                      var bufferLength = this.bufferLength, end = bufferLength + blockLen;
                      buffer = this.ensureBuffer(end);
                      this.bufferLength = end;
                      if (blockLen === 0) {
                        if (str.peekByte() === -1) {
                          this.eof = true;
                        }
                      } else {
                        var block = str.getBytes(blockLen);
                        buffer.set(block, bufferLength);
                        if (block.length < blockLen) {
                          this.eof = true;
                        }
                      }
                      return;
                    }
                    var litCodeTable;
                    var distCodeTable;
                    if (hdr === 1) {
                      litCodeTable = fixedLitCodeTab;
                      distCodeTable = fixedDistCodeTab;
                    } else if (hdr === 2) {
                      var numLitCodes = this.getBits(5) + 257;
                      var numDistCodes = this.getBits(5) + 1;
                      var numCodeLenCodes = this.getBits(4) + 4;
                      var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);
                      var i;
                      for (i = 0; i < numCodeLenCodes; ++i) {
                        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);
                      }
                      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);
                      len = 0;
                      i = 0;
                      var codes = numLitCodes + numDistCodes;
                      var codeLengths = new Uint8Array(codes);
                      var bitsLength, bitsOffset, what;
                      while (i < codes) {
                        var code = this.getCode(codeLenCodeTab);
                        if (code === 16) {
                          bitsLength = 2;
                          bitsOffset = 3;
                          what = len;
                        } else if (code === 17) {
                          bitsLength = 3;
                          bitsOffset = 3;
                          what = len = 0;
                        } else if (code === 18) {
                          bitsLength = 7;
                          bitsOffset = 11;
                          what = len = 0;
                        } else {
                          codeLengths[i++] = len = code;
                          continue;
                        }
                        var repeatLength = this.getBits(bitsLength) + bitsOffset;
                        while (repeatLength-- > 0) {
                          codeLengths[i++] = what;
                        }
                      }
                      litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));
                      distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));
                    } else {
                      throw new _util.FormatError("Unknown block type in flate stream");
                    }
                    buffer = this.buffer;
                    var limit = buffer ? buffer.length : 0;
                    var pos = this.bufferLength;
                    while (true) {
                      var code1 = this.getCode(litCodeTable);
                      if (code1 < 256) {
                        if (pos + 1 >= limit) {
                          buffer = this.ensureBuffer(pos + 1);
                          limit = buffer.length;
                        }
                        buffer[pos++] = code1;
                        continue;
                      }
                      if (code1 === 256) {
                        this.bufferLength = pos;
                        return;
                      }
                      code1 -= 257;
                      code1 = lengthDecode[code1];
                      var code2 = code1 >> 16;
                      if (code2 > 0) {
                        code2 = this.getBits(code2);
                      }
                      len = (code1 & 65535) + code2;
                      code1 = this.getCode(distCodeTable);
                      code1 = distDecode[code1];
                      code2 = code1 >> 16;
                      if (code2 > 0) {
                        code2 = this.getBits(code2);
                      }
                      var dist = (code1 & 65535) + code2;
                      if (pos + len >= limit) {
                        buffer = this.ensureBuffer(pos + len);
                        limit = buffer.length;
                      }
                      for (var k = 0; k < len; ++k, ++pos) {
                        buffer[pos] = buffer[pos - dist];
                      }
                    }
                  }
                }]);
                return FlateStream2;
              }(_decode_stream.DecodeStream);
              exports2.FlateStream = FlateStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Jbig2Stream = void 0;
              var _primitives = __w_pdfjs_require__2(135);
              var _decode_stream = __w_pdfjs_require__2(159);
              var _jbig = __w_pdfjs_require__2(165);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var Jbig2Stream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(Jbig2Stream2, _DecodeStream);
                var _super = _createSuper(Jbig2Stream2);
                function Jbig2Stream2(stream, maybeLength, params) {
                  var _this;
                  _classCallCheck(this, Jbig2Stream2);
                  _this = _super.call(this, maybeLength);
                  _this.stream = stream;
                  _this.dict = stream.dict;
                  _this.maybeLength = maybeLength;
                  _this.params = params;
                  return _this;
                }
                _createClass(Jbig2Stream2, [{
                  key: "bytes",
                  get: function get() {
                    return (0, _util.shadow)(this, "bytes", this.stream.getBytes(this.maybeLength));
                  }
                }, {
                  key: "ensureBuffer",
                  value: function ensureBuffer(requested) {
                  }
                }, {
                  key: "readBlock",
                  value: function readBlock() {
                    if (this.eof) {
                      return;
                    }
                    var jbig2Image = new _jbig.Jbig2Image();
                    var chunks = [];
                    if ((0, _primitives.isDict)(this.params)) {
                      var globalsStream = this.params.get("JBIG2Globals");
                      if ((0, _primitives.isStream)(globalsStream)) {
                        var globals = globalsStream.getBytes();
                        chunks.push({
                          data: globals,
                          start: 0,
                          end: globals.length
                        });
                      }
                    }
                    chunks.push({
                      data: this.bytes,
                      start: 0,
                      end: this.bytes.length
                    });
                    var data = jbig2Image.parseChunks(chunks);
                    var dataLength = data.length;
                    for (var i = 0; i < dataLength; i++) {
                      data[i] ^= 255;
                    }
                    this.buffer = data;
                    this.bufferLength = dataLength;
                    this.eof = true;
                  }
                }]);
                return Jbig2Stream2;
              }(_decode_stream.DecodeStream);
              exports2.Jbig2Stream = Jbig2Stream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Jbig2Image = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _core_utils = __w_pdfjs_require__2(139);
              var _arithmetic_decoder = __w_pdfjs_require__2(166);
              var _ccitt = __w_pdfjs_require__2(162);
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var Jbig2Error = /* @__PURE__ */ function(_BaseException) {
                _inherits(Jbig2Error2, _BaseException);
                var _super = _createSuper(Jbig2Error2);
                function Jbig2Error2(msg) {
                  _classCallCheck(this, Jbig2Error2);
                  return _super.call(this, "JBIG2 error: ".concat(msg), "Jbig2Error");
                }
                return Jbig2Error2;
              }(_util.BaseException);
              var ContextCache = /* @__PURE__ */ function() {
                function ContextCache2() {
                  _classCallCheck(this, ContextCache2);
                }
                _createClass(ContextCache2, [{
                  key: "getContexts",
                  value: function getContexts(id) {
                    if (id in this) {
                      return this[id];
                    }
                    return this[id] = new Int8Array(1 << 16);
                  }
                }]);
                return ContextCache2;
              }();
              var DecodingContext = /* @__PURE__ */ function() {
                function DecodingContext2(data, start, end) {
                  _classCallCheck(this, DecodingContext2);
                  this.data = data;
                  this.start = start;
                  this.end = end;
                }
                _createClass(DecodingContext2, [{
                  key: "decoder",
                  get: function get() {
                    var decoder = new _arithmetic_decoder.ArithmeticDecoder(this.data, this.start, this.end);
                    return (0, _util.shadow)(this, "decoder", decoder);
                  }
                }, {
                  key: "contextCache",
                  get: function get() {
                    var cache = new ContextCache();
                    return (0, _util.shadow)(this, "contextCache", cache);
                  }
                }]);
                return DecodingContext2;
              }();
              function decodeInteger(contextCache, procedure, decoder) {
                var contexts = contextCache.getContexts(procedure);
                var prev = 1;
                function readBits(length) {
                  var v = 0;
                  for (var i = 0; i < length; i++) {
                    var bit = decoder.readBit(contexts, prev);
                    prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;
                    v = v << 1 | bit;
                  }
                  return v >>> 0;
                }
                var sign = readBits(1);
                var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);
                if (sign === 0) {
                  return value;
                } else if (value > 0) {
                  return -value;
                }
                return null;
              }
              function decodeIAID(contextCache, decoder, codeLength) {
                var contexts = contextCache.getContexts("IAID");
                var prev = 1;
                for (var i = 0; i < codeLength; i++) {
                  var bit = decoder.readBit(contexts, prev);
                  prev = prev << 1 | bit;
                }
                if (codeLength < 31) {
                  return prev & (1 << codeLength) - 1;
                }
                return prev & 2147483647;
              }
              var SegmentTypes = ["SymbolDictionary", null, null, null, "IntermediateTextRegion", null, "ImmediateTextRegion", "ImmediateLosslessTextRegion", null, null, null, null, null, null, null, null, "PatternDictionary", null, null, null, "IntermediateHalftoneRegion", null, "ImmediateHalftoneRegion", "ImmediateLosslessHalftoneRegion", null, null, null, null, null, null, null, null, null, null, null, null, "IntermediateGenericRegion", null, "ImmediateGenericRegion", "ImmediateLosslessGenericRegion", "IntermediateGenericRefinementRegion", null, "ImmediateGenericRefinementRegion", "ImmediateLosslessGenericRefinementRegion", null, null, null, null, "PageInformation", "EndOfPage", "EndOfStripe", "EndOfFile", "Profiles", "Tables", null, null, null, null, null, null, null, null, "Extension"];
              var CodingTemplates = [[{
                x: -1,
                y: -2
              }, {
                x: 0,
                y: -2
              }, {
                x: 1,
                y: -2
              }, {
                x: -2,
                y: -1
              }, {
                x: -1,
                y: -1
              }, {
                x: 0,
                y: -1
              }, {
                x: 1,
                y: -1
              }, {
                x: 2,
                y: -1
              }, {
                x: -4,
                y: 0
              }, {
                x: -3,
                y: 0
              }, {
                x: -2,
                y: 0
              }, {
                x: -1,
                y: 0
              }], [{
                x: -1,
                y: -2
              }, {
                x: 0,
                y: -2
              }, {
                x: 1,
                y: -2
              }, {
                x: 2,
                y: -2
              }, {
                x: -2,
                y: -1
              }, {
                x: -1,
                y: -1
              }, {
                x: 0,
                y: -1
              }, {
                x: 1,
                y: -1
              }, {
                x: 2,
                y: -1
              }, {
                x: -3,
                y: 0
              }, {
                x: -2,
                y: 0
              }, {
                x: -1,
                y: 0
              }], [{
                x: -1,
                y: -2
              }, {
                x: 0,
                y: -2
              }, {
                x: 1,
                y: -2
              }, {
                x: -2,
                y: -1
              }, {
                x: -1,
                y: -1
              }, {
                x: 0,
                y: -1
              }, {
                x: 1,
                y: -1
              }, {
                x: -2,
                y: 0
              }, {
                x: -1,
                y: 0
              }], [{
                x: -3,
                y: -1
              }, {
                x: -2,
                y: -1
              }, {
                x: -1,
                y: -1
              }, {
                x: 0,
                y: -1
              }, {
                x: 1,
                y: -1
              }, {
                x: -4,
                y: 0
              }, {
                x: -3,
                y: 0
              }, {
                x: -2,
                y: 0
              }, {
                x: -1,
                y: 0
              }]];
              var RefinementTemplates = [{
                coding: [{
                  x: 0,
                  y: -1
                }, {
                  x: 1,
                  y: -1
                }, {
                  x: -1,
                  y: 0
                }],
                reference: [{
                  x: 0,
                  y: -1
                }, {
                  x: 1,
                  y: -1
                }, {
                  x: -1,
                  y: 0
                }, {
                  x: 0,
                  y: 0
                }, {
                  x: 1,
                  y: 0
                }, {
                  x: -1,
                  y: 1
                }, {
                  x: 0,
                  y: 1
                }, {
                  x: 1,
                  y: 1
                }]
              }, {
                coding: [{
                  x: -1,
                  y: -1
                }, {
                  x: 0,
                  y: -1
                }, {
                  x: 1,
                  y: -1
                }, {
                  x: -1,
                  y: 0
                }],
                reference: [{
                  x: 0,
                  y: -1
                }, {
                  x: -1,
                  y: 0
                }, {
                  x: 0,
                  y: 0
                }, {
                  x: 1,
                  y: 0
                }, {
                  x: 0,
                  y: 1
                }, {
                  x: 1,
                  y: 1
                }]
              }];
              var ReusedContexts = [39717, 1941, 229, 405];
              var RefinementReusedContexts = [32, 8];
              function decodeBitmapTemplate0(width, height, decodingContext) {
                var decoder = decodingContext.decoder;
                var contexts = decodingContext.contextCache.getContexts("GB");
                var bitmap = [];
                var contextLabel, i, j, pixel, row, row1, row2;
                var OLD_PIXEL_MASK = 31735;
                for (i = 0; i < height; i++) {
                  row = bitmap[i] = new Uint8Array(width);
                  row1 = i < 1 ? row : bitmap[i - 1];
                  row2 = i < 2 ? row : bitmap[i - 2];
                  contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;
                  for (j = 0; j < width; j++) {
                    row[j] = pixel = decoder.readBit(contexts, contextLabel);
                    contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;
                  }
                }
                return bitmap;
              }
              function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {
                if (mmr) {
                  var input = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);
                  return decodeMMRBitmap(input, width, height, false);
                }
                if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {
                  return decodeBitmapTemplate0(width, height, decodingContext);
                }
                var useskip = !!skip;
                var template = CodingTemplates[templateIndex].concat(at);
                template.sort(function(a, b) {
                  return a.y - b.y || a.x - b.x;
                });
                var templateLength = template.length;
                var templateX = new Int8Array(templateLength);
                var templateY = new Int8Array(templateLength);
                var changingTemplateEntries = [];
                var reuseMask = 0, minX = 0, maxX = 0, minY = 0;
                var c, k;
                for (k = 0; k < templateLength; k++) {
                  templateX[k] = template[k].x;
                  templateY[k] = template[k].y;
                  minX = Math.min(minX, template[k].x);
                  maxX = Math.max(maxX, template[k].x);
                  minY = Math.min(minY, template[k].y);
                  if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {
                    reuseMask |= 1 << templateLength - 1 - k;
                  } else {
                    changingTemplateEntries.push(k);
                  }
                }
                var changingEntriesLength = changingTemplateEntries.length;
                var changingTemplateX = new Int8Array(changingEntriesLength);
                var changingTemplateY = new Int8Array(changingEntriesLength);
                var changingTemplateBit = new Uint16Array(changingEntriesLength);
                for (c = 0; c < changingEntriesLength; c++) {
                  k = changingTemplateEntries[c];
                  changingTemplateX[c] = template[k].x;
                  changingTemplateY[c] = template[k].y;
                  changingTemplateBit[c] = 1 << templateLength - 1 - k;
                }
                var sbb_left = -minX;
                var sbb_top = -minY;
                var sbb_right = width - maxX;
                var pseudoPixelContext = ReusedContexts[templateIndex];
                var row = new Uint8Array(width);
                var bitmap = [];
                var decoder = decodingContext.decoder;
                var contexts = decodingContext.contextCache.getContexts("GB");
                var ltp = 0, j, i0, j0, contextLabel = 0, bit, shift;
                for (var i = 0; i < height; i++) {
                  if (prediction) {
                    var sltp = decoder.readBit(contexts, pseudoPixelContext);
                    ltp ^= sltp;
                    if (ltp) {
                      bitmap.push(row);
                      continue;
                    }
                  }
                  row = new Uint8Array(row);
                  bitmap.push(row);
                  for (j = 0; j < width; j++) {
                    if (useskip && skip[i][j]) {
                      row[j] = 0;
                      continue;
                    }
                    if (j >= sbb_left && j < sbb_right && i >= sbb_top) {
                      contextLabel = contextLabel << 1 & reuseMask;
                      for (k = 0; k < changingEntriesLength; k++) {
                        i0 = i + changingTemplateY[k];
                        j0 = j + changingTemplateX[k];
                        bit = bitmap[i0][j0];
                        if (bit) {
                          bit = changingTemplateBit[k];
                          contextLabel |= bit;
                        }
                      }
                    } else {
                      contextLabel = 0;
                      shift = templateLength - 1;
                      for (k = 0; k < templateLength; k++, shift--) {
                        j0 = j + templateX[k];
                        if (j0 >= 0 && j0 < width) {
                          i0 = i + templateY[k];
                          if (i0 >= 0) {
                            bit = bitmap[i0][j0];
                            if (bit) {
                              contextLabel |= bit << shift;
                            }
                          }
                        }
                      }
                    }
                    var pixel = decoder.readBit(contexts, contextLabel);
                    row[j] = pixel;
                  }
                }
                return bitmap;
              }
              function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {
                var codingTemplate = RefinementTemplates[templateIndex].coding;
                if (templateIndex === 0) {
                  codingTemplate = codingTemplate.concat([at[0]]);
                }
                var codingTemplateLength = codingTemplate.length;
                var codingTemplateX = new Int32Array(codingTemplateLength);
                var codingTemplateY = new Int32Array(codingTemplateLength);
                var k;
                for (k = 0; k < codingTemplateLength; k++) {
                  codingTemplateX[k] = codingTemplate[k].x;
                  codingTemplateY[k] = codingTemplate[k].y;
                }
                var referenceTemplate = RefinementTemplates[templateIndex].reference;
                if (templateIndex === 0) {
                  referenceTemplate = referenceTemplate.concat([at[1]]);
                }
                var referenceTemplateLength = referenceTemplate.length;
                var referenceTemplateX = new Int32Array(referenceTemplateLength);
                var referenceTemplateY = new Int32Array(referenceTemplateLength);
                for (k = 0; k < referenceTemplateLength; k++) {
                  referenceTemplateX[k] = referenceTemplate[k].x;
                  referenceTemplateY[k] = referenceTemplate[k].y;
                }
                var referenceWidth = referenceBitmap[0].length;
                var referenceHeight = referenceBitmap.length;
                var pseudoPixelContext = RefinementReusedContexts[templateIndex];
                var bitmap = [];
                var decoder = decodingContext.decoder;
                var contexts = decodingContext.contextCache.getContexts("GR");
                var ltp = 0;
                for (var i = 0; i < height; i++) {
                  if (prediction) {
                    var sltp = decoder.readBit(contexts, pseudoPixelContext);
                    ltp ^= sltp;
                    if (ltp) {
                      throw new Jbig2Error("prediction is not supported");
                    }
                  }
                  var row = new Uint8Array(width);
                  bitmap.push(row);
                  for (var j = 0; j < width; j++) {
                    var i0 = void 0, j0 = void 0;
                    var contextLabel = 0;
                    for (k = 0; k < codingTemplateLength; k++) {
                      i0 = i + codingTemplateY[k];
                      j0 = j + codingTemplateX[k];
                      if (i0 < 0 || j0 < 0 || j0 >= width) {
                        contextLabel <<= 1;
                      } else {
                        contextLabel = contextLabel << 1 | bitmap[i0][j0];
                      }
                    }
                    for (k = 0; k < referenceTemplateLength; k++) {
                      i0 = i + referenceTemplateY[k] - offsetY;
                      j0 = j + referenceTemplateX[k] - offsetX;
                      if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {
                        contextLabel <<= 1;
                      } else {
                        contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];
                      }
                    }
                    var pixel = decoder.readBit(contexts, contextLabel);
                    row[j] = pixel;
                  }
                }
                return bitmap;
              }
              function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext, huffmanInput) {
                if (huffman && refinement) {
                  throw new Jbig2Error("symbol refinement with Huffman is not supported");
                }
                var newSymbols = [];
                var currentHeight = 0;
                var symbolCodeLength = (0, _core_utils.log2)(symbols.length + numberOfNewSymbols);
                var decoder = decodingContext.decoder;
                var contextCache = decodingContext.contextCache;
                var tableB1, symbolWidths;
                if (huffman) {
                  tableB1 = getStandardTable(1);
                  symbolWidths = [];
                  symbolCodeLength = Math.max(symbolCodeLength, 1);
                }
                while (newSymbols.length < numberOfNewSymbols) {
                  var deltaHeight = huffman ? huffmanTables.tableDeltaHeight.decode(huffmanInput) : decodeInteger(contextCache, "IADH", decoder);
                  currentHeight += deltaHeight;
                  var currentWidth = 0, totalWidth = 0;
                  var firstSymbol = huffman ? symbolWidths.length : 0;
                  while (true) {
                    var deltaWidth = huffman ? huffmanTables.tableDeltaWidth.decode(huffmanInput) : decodeInteger(contextCache, "IADW", decoder);
                    if (deltaWidth === null) {
                      break;
                    }
                    currentWidth += deltaWidth;
                    totalWidth += currentWidth;
                    var bitmap = void 0;
                    if (refinement) {
                      var numberOfInstances = decodeInteger(contextCache, "IAAI", decoder);
                      if (numberOfInstances > 1) {
                        bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, 0, huffmanInput);
                      } else {
                        var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);
                        var rdx = decodeInteger(contextCache, "IARDX", decoder);
                        var rdy = decodeInteger(contextCache, "IARDY", decoder);
                        var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];
                        bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);
                      }
                      newSymbols.push(bitmap);
                    } else if (huffman) {
                      symbolWidths.push(currentWidth);
                    } else {
                      bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);
                      newSymbols.push(bitmap);
                    }
                  }
                  if (huffman && !refinement) {
                    var bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);
                    huffmanInput.byteAlign();
                    var collectiveBitmap = void 0;
                    if (bitmapSize === 0) {
                      collectiveBitmap = readUncompressedBitmap(huffmanInput, totalWidth, currentHeight);
                    } else {
                      var originalEnd = huffmanInput.end;
                      var bitmapEnd = huffmanInput.position + bitmapSize;
                      huffmanInput.end = bitmapEnd;
                      collectiveBitmap = decodeMMRBitmap(huffmanInput, totalWidth, currentHeight, false);
                      huffmanInput.end = originalEnd;
                      huffmanInput.position = bitmapEnd;
                    }
                    var numberOfSymbolsDecoded = symbolWidths.length;
                    if (firstSymbol === numberOfSymbolsDecoded - 1) {
                      newSymbols.push(collectiveBitmap);
                    } else {
                      var _i = void 0, y = void 0, xMin = 0, xMax = void 0, bitmapWidth = void 0, symbolBitmap = void 0;
                      for (_i = firstSymbol; _i < numberOfSymbolsDecoded; _i++) {
                        bitmapWidth = symbolWidths[_i];
                        xMax = xMin + bitmapWidth;
                        symbolBitmap = [];
                        for (y = 0; y < currentHeight; y++) {
                          symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));
                        }
                        newSymbols.push(symbolBitmap);
                        xMin = xMax;
                      }
                    }
                  }
                }
                var exportedSymbols = [], flags = [];
                var currentFlag = false, i, ii;
                var totalSymbolsLength = symbols.length + numberOfNewSymbols;
                while (flags.length < totalSymbolsLength) {
                  var runLength = huffman ? tableB1.decode(huffmanInput) : decodeInteger(contextCache, "IAEX", decoder);
                  while (runLength--) {
                    flags.push(currentFlag);
                  }
                  currentFlag = !currentFlag;
                }
                for (i = 0, ii = symbols.length; i < ii; i++) {
                  if (flags[i]) {
                    exportedSymbols.push(symbols[i]);
                  }
                }
                for (var j = 0; j < numberOfNewSymbols; i++, j++) {
                  if (flags[i]) {
                    exportedSymbols.push(newSymbols[j]);
                  }
                }
                return exportedSymbols;
              }
              function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, logStripSize, huffmanInput) {
                if (huffman && refinement) {
                  throw new Jbig2Error("refinement with Huffman is not supported");
                }
                var bitmap = [];
                var i, row;
                for (i = 0; i < height; i++) {
                  row = new Uint8Array(width);
                  if (defaultPixelValue) {
                    for (var j = 0; j < width; j++) {
                      row[j] = defaultPixelValue;
                    }
                  }
                  bitmap.push(row);
                }
                var decoder = decodingContext.decoder;
                var contextCache = decodingContext.contextCache;
                var stripT = huffman ? -huffmanTables.tableDeltaT.decode(huffmanInput) : -decodeInteger(contextCache, "IADT", decoder);
                var firstS = 0;
                i = 0;
                while (i < numberOfSymbolInstances) {
                  var deltaT = huffman ? huffmanTables.tableDeltaT.decode(huffmanInput) : decodeInteger(contextCache, "IADT", decoder);
                  stripT += deltaT;
                  var deltaFirstS = huffman ? huffmanTables.tableFirstS.decode(huffmanInput) : decodeInteger(contextCache, "IAFS", decoder);
                  firstS += deltaFirstS;
                  var currentS = firstS;
                  do {
                    var currentT = 0;
                    if (stripSize > 1) {
                      currentT = huffman ? huffmanInput.readBits(logStripSize) : decodeInteger(contextCache, "IAIT", decoder);
                    }
                    var t = stripSize * stripT + currentT;
                    var symbolId = huffman ? huffmanTables.symbolIDTable.decode(huffmanInput) : decodeIAID(contextCache, decoder, symbolCodeLength);
                    var applyRefinement = refinement && (huffman ? huffmanInput.readBit() : decodeInteger(contextCache, "IARI", decoder));
                    var symbolBitmap = inputSymbols[symbolId];
                    var symbolWidth = symbolBitmap[0].length;
                    var symbolHeight = symbolBitmap.length;
                    if (applyRefinement) {
                      var rdw = decodeInteger(contextCache, "IARDW", decoder);
                      var rdh = decodeInteger(contextCache, "IARDH", decoder);
                      var rdx = decodeInteger(contextCache, "IARDX", decoder);
                      var rdy = decodeInteger(contextCache, "IARDY", decoder);
                      symbolWidth += rdw;
                      symbolHeight += rdh;
                      symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);
                    }
                    var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);
                    var offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);
                    var s2 = void 0, t2 = void 0, symbolRow = void 0;
                    if (transposed) {
                      for (s2 = 0; s2 < symbolHeight; s2++) {
                        row = bitmap[offsetS + s2];
                        if (!row) {
                          continue;
                        }
                        symbolRow = symbolBitmap[s2];
                        var maxWidth = Math.min(width - offsetT, symbolWidth);
                        switch (combinationOperator) {
                          case 0:
                            for (t2 = 0; t2 < maxWidth; t2++) {
                              row[offsetT + t2] |= symbolRow[t2];
                            }
                            break;
                          case 2:
                            for (t2 = 0; t2 < maxWidth; t2++) {
                              row[offsetT + t2] ^= symbolRow[t2];
                            }
                            break;
                          default:
                            throw new Jbig2Error("operator ".concat(combinationOperator, " is not supported"));
                        }
                      }
                      currentS += symbolHeight - 1;
                    } else {
                      for (t2 = 0; t2 < symbolHeight; t2++) {
                        row = bitmap[offsetT + t2];
                        if (!row) {
                          continue;
                        }
                        symbolRow = symbolBitmap[t2];
                        switch (combinationOperator) {
                          case 0:
                            for (s2 = 0; s2 < symbolWidth; s2++) {
                              row[offsetS + s2] |= symbolRow[s2];
                            }
                            break;
                          case 2:
                            for (s2 = 0; s2 < symbolWidth; s2++) {
                              row[offsetS + s2] ^= symbolRow[s2];
                            }
                            break;
                          default:
                            throw new Jbig2Error("operator ".concat(combinationOperator, " is not supported"));
                        }
                      }
                      currentS += symbolWidth - 1;
                    }
                    i++;
                    var deltaS = huffman ? huffmanTables.tableDeltaS.decode(huffmanInput) : decodeInteger(contextCache, "IADS", decoder);
                    if (deltaS === null) {
                      break;
                    }
                    currentS += deltaS + dsOffset;
                  } while (true);
                }
                return bitmap;
              }
              function decodePatternDictionary(mmr, patternWidth, patternHeight, maxPatternIndex, template, decodingContext) {
                var at = [];
                if (!mmr) {
                  at.push({
                    x: -patternWidth,
                    y: 0
                  });
                  if (template === 0) {
                    at.push({
                      x: -3,
                      y: -1
                    }, {
                      x: 2,
                      y: -2
                    }, {
                      x: -2,
                      y: -2
                    });
                  }
                }
                var collectiveWidth = (maxPatternIndex + 1) * patternWidth;
                var collectiveBitmap = decodeBitmap(mmr, collectiveWidth, patternHeight, template, false, null, at, decodingContext);
                var patterns = [];
                for (var i = 0; i <= maxPatternIndex; i++) {
                  var patternBitmap = [];
                  var xMin = patternWidth * i;
                  var xMax = xMin + patternWidth;
                  for (var y = 0; y < patternHeight; y++) {
                    patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));
                  }
                  patterns.push(patternBitmap);
                }
                return patterns;
              }
              function decodeHalftoneRegion(mmr, patterns, template, regionWidth, regionHeight, defaultPixelValue, enableSkip, combinationOperator, gridWidth, gridHeight, gridOffsetX, gridOffsetY, gridVectorX, gridVectorY, decodingContext) {
                var skip = null;
                if (enableSkip) {
                  throw new Jbig2Error("skip is not supported");
                }
                if (combinationOperator !== 0) {
                  throw new Jbig2Error('operator "'.concat(combinationOperator, '" is not supported in halftone region'));
                }
                var regionBitmap = [];
                var i, j, row;
                for (i = 0; i < regionHeight; i++) {
                  row = new Uint8Array(regionWidth);
                  if (defaultPixelValue) {
                    for (j = 0; j < regionWidth; j++) {
                      row[j] = defaultPixelValue;
                    }
                  }
                  regionBitmap.push(row);
                }
                var numberOfPatterns = patterns.length;
                var pattern0 = patterns[0];
                var patternWidth = pattern0[0].length, patternHeight = pattern0.length;
                var bitsPerValue = (0, _core_utils.log2)(numberOfPatterns);
                var at = [];
                if (!mmr) {
                  at.push({
                    x: template <= 1 ? 3 : 2,
                    y: -1
                  });
                  if (template === 0) {
                    at.push({
                      x: -3,
                      y: -1
                    }, {
                      x: 2,
                      y: -2
                    }, {
                      x: -2,
                      y: -2
                    });
                  }
                }
                var grayScaleBitPlanes = [];
                var mmrInput, bitmap;
                if (mmr) {
                  mmrInput = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);
                }
                for (i = bitsPerValue - 1; i >= 0; i--) {
                  if (mmr) {
                    bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);
                  } else {
                    bitmap = decodeBitmap(false, gridWidth, gridHeight, template, false, skip, at, decodingContext);
                  }
                  grayScaleBitPlanes[i] = bitmap;
                }
                var mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;
                for (mg = 0; mg < gridHeight; mg++) {
                  for (ng = 0; ng < gridWidth; ng++) {
                    bit = 0;
                    patternIndex = 0;
                    for (j = bitsPerValue - 1; j >= 0; j--) {
                      bit ^= grayScaleBitPlanes[j][mg][ng];
                      patternIndex |= bit << j;
                    }
                    patternBitmap = patterns[patternIndex];
                    x = gridOffsetX + mg * gridVectorY + ng * gridVectorX >> 8;
                    y = gridOffsetY + mg * gridVectorX - ng * gridVectorY >> 8;
                    if (x >= 0 && x + patternWidth <= regionWidth && y >= 0 && y + patternHeight <= regionHeight) {
                      for (i = 0; i < patternHeight; i++) {
                        regionRow = regionBitmap[y + i];
                        patternRow = patternBitmap[i];
                        for (j = 0; j < patternWidth; j++) {
                          regionRow[x + j] |= patternRow[j];
                        }
                      }
                    } else {
                      var regionX = void 0, regionY = void 0;
                      for (i = 0; i < patternHeight; i++) {
                        regionY = y + i;
                        if (regionY < 0 || regionY >= regionHeight) {
                          continue;
                        }
                        regionRow = regionBitmap[regionY];
                        patternRow = patternBitmap[i];
                        for (j = 0; j < patternWidth; j++) {
                          regionX = x + j;
                          if (regionX >= 0 && regionX < regionWidth) {
                            regionRow[regionX] |= patternRow[j];
                          }
                        }
                      }
                    }
                  }
                }
                return regionBitmap;
              }
              function readSegmentHeader(data, start) {
                var segmentHeader = {};
                segmentHeader.number = (0, _core_utils.readUint32)(data, start);
                var flags = data[start + 4];
                var segmentType = flags & 63;
                if (!SegmentTypes[segmentType]) {
                  throw new Jbig2Error("invalid segment type: " + segmentType);
                }
                segmentHeader.type = segmentType;
                segmentHeader.typeName = SegmentTypes[segmentType];
                segmentHeader.deferredNonRetain = !!(flags & 128);
                var pageAssociationFieldSize = !!(flags & 64);
                var referredFlags = data[start + 5];
                var referredToCount = referredFlags >> 5 & 7;
                var retainBits = [referredFlags & 31];
                var position = start + 6;
                if (referredFlags === 7) {
                  referredToCount = (0, _core_utils.readUint32)(data, position - 1) & 536870911;
                  position += 3;
                  var bytes = referredToCount + 7 >> 3;
                  retainBits[0] = data[position++];
                  while (--bytes > 0) {
                    retainBits.push(data[position++]);
                  }
                } else if (referredFlags === 5 || referredFlags === 6) {
                  throw new Jbig2Error("invalid referred-to flags");
                }
                segmentHeader.retainBits = retainBits;
                var referredToSegmentNumberSize = 4;
                if (segmentHeader.number <= 256) {
                  referredToSegmentNumberSize = 1;
                } else if (segmentHeader.number <= 65536) {
                  referredToSegmentNumberSize = 2;
                }
                var referredTo = [];
                var i, ii;
                for (i = 0; i < referredToCount; i++) {
                  var number = void 0;
                  if (referredToSegmentNumberSize === 1) {
                    number = data[position];
                  } else if (referredToSegmentNumberSize === 2) {
                    number = (0, _core_utils.readUint16)(data, position);
                  } else {
                    number = (0, _core_utils.readUint32)(data, position);
                  }
                  referredTo.push(number);
                  position += referredToSegmentNumberSize;
                }
                segmentHeader.referredTo = referredTo;
                if (!pageAssociationFieldSize) {
                  segmentHeader.pageAssociation = data[position++];
                } else {
                  segmentHeader.pageAssociation = (0, _core_utils.readUint32)(data, position);
                  position += 4;
                }
                segmentHeader.length = (0, _core_utils.readUint32)(data, position);
                position += 4;
                if (segmentHeader.length === 4294967295) {
                  if (segmentType === 38) {
                    var genericRegionInfo = readRegionSegmentInformation(data, position);
                    var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];
                    var genericRegionMmr = !!(genericRegionSegmentFlags & 1);
                    var searchPatternLength = 6;
                    var searchPattern = new Uint8Array(searchPatternLength);
                    if (!genericRegionMmr) {
                      searchPattern[0] = 255;
                      searchPattern[1] = 172;
                    }
                    searchPattern[2] = genericRegionInfo.height >>> 24 & 255;
                    searchPattern[3] = genericRegionInfo.height >> 16 & 255;
                    searchPattern[4] = genericRegionInfo.height >> 8 & 255;
                    searchPattern[5] = genericRegionInfo.height & 255;
                    for (i = position, ii = data.length; i < ii; i++) {
                      var j = 0;
                      while (j < searchPatternLength && searchPattern[j] === data[i + j]) {
                        j++;
                      }
                      if (j === searchPatternLength) {
                        segmentHeader.length = i + searchPatternLength;
                        break;
                      }
                    }
                    if (segmentHeader.length === 4294967295) {
                      throw new Jbig2Error("segment end was not found");
                    }
                  } else {
                    throw new Jbig2Error("invalid unknown segment length");
                  }
                }
                segmentHeader.headerEnd = position;
                return segmentHeader;
              }
              function readSegments(header, data, start, end) {
                var segments = [];
                var position = start;
                while (position < end) {
                  var segmentHeader = readSegmentHeader(data, position);
                  position = segmentHeader.headerEnd;
                  var segment = {
                    header: segmentHeader,
                    data
                  };
                  if (!header.randomAccess) {
                    segment.start = position;
                    position += segmentHeader.length;
                    segment.end = position;
                  }
                  segments.push(segment);
                  if (segmentHeader.type === 51) {
                    break;
                  }
                }
                if (header.randomAccess) {
                  for (var i = 0, ii = segments.length; i < ii; i++) {
                    segments[i].start = position;
                    position += segments[i].header.length;
                    segments[i].end = position;
                  }
                }
                return segments;
              }
              function readRegionSegmentInformation(data, start) {
                return {
                  width: (0, _core_utils.readUint32)(data, start),
                  height: (0, _core_utils.readUint32)(data, start + 4),
                  x: (0, _core_utils.readUint32)(data, start + 8),
                  y: (0, _core_utils.readUint32)(data, start + 12),
                  combinationOperator: data[start + 16] & 7
                };
              }
              var RegionSegmentInformationFieldLength = 17;
              function processSegment(segment, visitor) {
                var header = segment.header;
                var data = segment.data, end = segment.end;
                var position = segment.start;
                var args, at, i, atLength;
                switch (header.type) {
                  case 0:
                    var dictionary = {};
                    var dictionaryFlags = (0, _core_utils.readUint16)(data, position);
                    dictionary.huffman = !!(dictionaryFlags & 1);
                    dictionary.refinement = !!(dictionaryFlags & 2);
                    dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;
                    dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;
                    dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;
                    dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;
                    dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);
                    dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);
                    dictionary.template = dictionaryFlags >> 10 & 3;
                    dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;
                    position += 2;
                    if (!dictionary.huffman) {
                      atLength = dictionary.template === 0 ? 4 : 1;
                      at = [];
                      for (i = 0; i < atLength; i++) {
                        at.push({
                          x: (0, _core_utils.readInt8)(data, position),
                          y: (0, _core_utils.readInt8)(data, position + 1)
                        });
                        position += 2;
                      }
                      dictionary.at = at;
                    }
                    if (dictionary.refinement && !dictionary.refinementTemplate) {
                      at = [];
                      for (i = 0; i < 2; i++) {
                        at.push({
                          x: (0, _core_utils.readInt8)(data, position),
                          y: (0, _core_utils.readInt8)(data, position + 1)
                        });
                        position += 2;
                      }
                      dictionary.refinementAt = at;
                    }
                    dictionary.numberOfExportedSymbols = (0, _core_utils.readUint32)(data, position);
                    position += 4;
                    dictionary.numberOfNewSymbols = (0, _core_utils.readUint32)(data, position);
                    position += 4;
                    args = [dictionary, header.number, header.referredTo, data, position, end];
                    break;
                  case 6:
                  case 7:
                    var textRegion = {};
                    textRegion.info = readRegionSegmentInformation(data, position);
                    position += RegionSegmentInformationFieldLength;
                    var textRegionSegmentFlags = (0, _core_utils.readUint16)(data, position);
                    position += 2;
                    textRegion.huffman = !!(textRegionSegmentFlags & 1);
                    textRegion.refinement = !!(textRegionSegmentFlags & 2);
                    textRegion.logStripSize = textRegionSegmentFlags >> 2 & 3;
                    textRegion.stripSize = 1 << textRegion.logStripSize;
                    textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;
                    textRegion.transposed = !!(textRegionSegmentFlags & 64);
                    textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;
                    textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;
                    textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;
                    textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;
                    if (textRegion.huffman) {
                      var textRegionHuffmanFlags = (0, _core_utils.readUint16)(data, position);
                      position += 2;
                      textRegion.huffmanFS = textRegionHuffmanFlags & 3;
                      textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;
                      textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;
                      textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;
                      textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;
                      textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;
                      textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;
                      textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 16384);
                    }
                    if (textRegion.refinement && !textRegion.refinementTemplate) {
                      at = [];
                      for (i = 0; i < 2; i++) {
                        at.push({
                          x: (0, _core_utils.readInt8)(data, position),
                          y: (0, _core_utils.readInt8)(data, position + 1)
                        });
                        position += 2;
                      }
                      textRegion.refinementAt = at;
                    }
                    textRegion.numberOfSymbolInstances = (0, _core_utils.readUint32)(data, position);
                    position += 4;
                    args = [textRegion, header.referredTo, data, position, end];
                    break;
                  case 16:
                    var patternDictionary = {};
                    var patternDictionaryFlags = data[position++];
                    patternDictionary.mmr = !!(patternDictionaryFlags & 1);
                    patternDictionary.template = patternDictionaryFlags >> 1 & 3;
                    patternDictionary.patternWidth = data[position++];
                    patternDictionary.patternHeight = data[position++];
                    patternDictionary.maxPatternIndex = (0, _core_utils.readUint32)(data, position);
                    position += 4;
                    args = [patternDictionary, header.number, data, position, end];
                    break;
                  case 22:
                  case 23:
                    var halftoneRegion = {};
                    halftoneRegion.info = readRegionSegmentInformation(data, position);
                    position += RegionSegmentInformationFieldLength;
                    var halftoneRegionFlags = data[position++];
                    halftoneRegion.mmr = !!(halftoneRegionFlags & 1);
                    halftoneRegion.template = halftoneRegionFlags >> 1 & 3;
                    halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);
                    halftoneRegion.combinationOperator = halftoneRegionFlags >> 4 & 7;
                    halftoneRegion.defaultPixelValue = halftoneRegionFlags >> 7 & 1;
                    halftoneRegion.gridWidth = (0, _core_utils.readUint32)(data, position);
                    position += 4;
                    halftoneRegion.gridHeight = (0, _core_utils.readUint32)(data, position);
                    position += 4;
                    halftoneRegion.gridOffsetX = (0, _core_utils.readUint32)(data, position) & 4294967295;
                    position += 4;
                    halftoneRegion.gridOffsetY = (0, _core_utils.readUint32)(data, position) & 4294967295;
                    position += 4;
                    halftoneRegion.gridVectorX = (0, _core_utils.readUint16)(data, position);
                    position += 2;
                    halftoneRegion.gridVectorY = (0, _core_utils.readUint16)(data, position);
                    position += 2;
                    args = [halftoneRegion, header.referredTo, data, position, end];
                    break;
                  case 38:
                  case 39:
                    var genericRegion = {};
                    genericRegion.info = readRegionSegmentInformation(data, position);
                    position += RegionSegmentInformationFieldLength;
                    var genericRegionSegmentFlags = data[position++];
                    genericRegion.mmr = !!(genericRegionSegmentFlags & 1);
                    genericRegion.template = genericRegionSegmentFlags >> 1 & 3;
                    genericRegion.prediction = !!(genericRegionSegmentFlags & 8);
                    if (!genericRegion.mmr) {
                      atLength = genericRegion.template === 0 ? 4 : 1;
                      at = [];
                      for (i = 0; i < atLength; i++) {
                        at.push({
                          x: (0, _core_utils.readInt8)(data, position),
                          y: (0, _core_utils.readInt8)(data, position + 1)
                        });
                        position += 2;
                      }
                      genericRegion.at = at;
                    }
                    args = [genericRegion, data, position, end];
                    break;
                  case 48:
                    var pageInfo = {
                      width: (0, _core_utils.readUint32)(data, position),
                      height: (0, _core_utils.readUint32)(data, position + 4),
                      resolutionX: (0, _core_utils.readUint32)(data, position + 8),
                      resolutionY: (0, _core_utils.readUint32)(data, position + 12)
                    };
                    if (pageInfo.height === 4294967295) {
                      delete pageInfo.height;
                    }
                    var pageSegmentFlags = data[position + 16];
                    (0, _core_utils.readUint16)(data, position + 17);
                    pageInfo.lossless = !!(pageSegmentFlags & 1);
                    pageInfo.refinement = !!(pageSegmentFlags & 2);
                    pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;
                    pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;
                    pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);
                    pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);
                    args = [pageInfo];
                    break;
                  case 49:
                    break;
                  case 50:
                    break;
                  case 51:
                    break;
                  case 53:
                    args = [header.number, data, position, end];
                    break;
                  case 62:
                    break;
                  default:
                    throw new Jbig2Error("segment type ".concat(header.typeName, "(").concat(header.type, ")") + " is not implemented");
                }
                var callbackName = "on" + header.typeName;
                if (callbackName in visitor) {
                  visitor[callbackName].apply(visitor, args);
                }
              }
              function processSegments(segments, visitor) {
                for (var i = 0, ii = segments.length; i < ii; i++) {
                  processSegment(segments[i], visitor);
                }
              }
              function parseJbig2Chunks(chunks) {
                var visitor = new SimpleSegmentVisitor();
                for (var i = 0, ii = chunks.length; i < ii; i++) {
                  var chunk = chunks[i];
                  var segments = readSegments({}, chunk.data, chunk.start, chunk.end);
                  processSegments(segments, visitor);
                }
                return visitor.buffer;
              }
              function parseJbig2(data) {
                var end = data.length;
                var position = 0;
                if (data[position] !== 151 || data[position + 1] !== 74 || data[position + 2] !== 66 || data[position + 3] !== 50 || data[position + 4] !== 13 || data[position + 5] !== 10 || data[position + 6] !== 26 || data[position + 7] !== 10) {
                  throw new Jbig2Error("parseJbig2 - invalid header.");
                }
                var header = /* @__PURE__ */ Object.create(null);
                position += 8;
                var flags = data[position++];
                header.randomAccess = !(flags & 1);
                if (!(flags & 2)) {
                  header.numberOfPages = (0, _core_utils.readUint32)(data, position);
                  position += 4;
                }
                var segments = readSegments(header, data, position, end);
                var visitor = new SimpleSegmentVisitor();
                processSegments(segments, visitor);
                var _visitor$currentPageI = visitor.currentPageInfo, width = _visitor$currentPageI.width, height = _visitor$currentPageI.height;
                var bitPacked = visitor.buffer;
                var imgData = new Uint8ClampedArray(width * height);
                var q = 0, k = 0;
                for (var i = 0; i < height; i++) {
                  var mask = 0, buffer = void 0;
                  for (var j = 0; j < width; j++) {
                    if (!mask) {
                      mask = 128;
                      buffer = bitPacked[k++];
                    }
                    imgData[q++] = buffer & mask ? 0 : 255;
                    mask >>= 1;
                  }
                }
                return {
                  imgData,
                  width,
                  height
                };
              }
              var SimpleSegmentVisitor = /* @__PURE__ */ function() {
                function SimpleSegmentVisitor2() {
                  _classCallCheck(this, SimpleSegmentVisitor2);
                }
                _createClass(SimpleSegmentVisitor2, [{
                  key: "onPageInformation",
                  value: function onPageInformation(info) {
                    this.currentPageInfo = info;
                    var rowSize = info.width + 7 >> 3;
                    var buffer = new Uint8ClampedArray(rowSize * info.height);
                    if (info.defaultPixelValue) {
                      for (var i = 0, ii = buffer.length; i < ii; i++) {
                        buffer[i] = 255;
                      }
                    }
                    this.buffer = buffer;
                  }
                }, {
                  key: "drawBitmap",
                  value: function drawBitmap(regionInfo, bitmap) {
                    var pageInfo = this.currentPageInfo;
                    var width = regionInfo.width, height = regionInfo.height;
                    var rowSize = pageInfo.width + 7 >> 3;
                    var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;
                    var buffer = this.buffer;
                    var mask0 = 128 >> (regionInfo.x & 7);
                    var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);
                    var i, j, mask, offset;
                    switch (combinationOperator) {
                      case 0:
                        for (i = 0; i < height; i++) {
                          mask = mask0;
                          offset = offset0;
                          for (j = 0; j < width; j++) {
                            if (bitmap[i][j]) {
                              buffer[offset] |= mask;
                            }
                            mask >>= 1;
                            if (!mask) {
                              mask = 128;
                              offset++;
                            }
                          }
                          offset0 += rowSize;
                        }
                        break;
                      case 2:
                        for (i = 0; i < height; i++) {
                          mask = mask0;
                          offset = offset0;
                          for (j = 0; j < width; j++) {
                            if (bitmap[i][j]) {
                              buffer[offset] ^= mask;
                            }
                            mask >>= 1;
                            if (!mask) {
                              mask = 128;
                              offset++;
                            }
                          }
                          offset0 += rowSize;
                        }
                        break;
                      default:
                        throw new Jbig2Error("operator ".concat(combinationOperator, " is not supported"));
                    }
                  }
                }, {
                  key: "onImmediateGenericRegion",
                  value: function onImmediateGenericRegion(region, data, start, end) {
                    var regionInfo = region.info;
                    var decodingContext = new DecodingContext(data, start, end);
                    var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);
                    this.drawBitmap(regionInfo, bitmap);
                  }
                }, {
                  key: "onImmediateLosslessGenericRegion",
                  value: function onImmediateLosslessGenericRegion() {
                    this.onImmediateGenericRegion.apply(this, arguments);
                  }
                }, {
                  key: "onSymbolDictionary",
                  value: function onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {
                    var huffmanTables, huffmanInput;
                    if (dictionary.huffman) {
                      huffmanTables = getSymbolDictionaryHuffmanTables(dictionary, referredSegments, this.customTables);
                      huffmanInput = new Reader(data, start, end);
                    }
                    var symbols = this.symbols;
                    if (!symbols) {
                      this.symbols = symbols = {};
                    }
                    var inputSymbols = [];
                    for (var i = 0, ii = referredSegments.length; i < ii; i++) {
                      var referredSymbols = symbols[referredSegments[i]];
                      if (referredSymbols) {
                        inputSymbols = inputSymbols.concat(referredSymbols);
                      }
                    }
                    var decodingContext = new DecodingContext(data, start, end);
                    symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext, huffmanInput);
                  }
                }, {
                  key: "onImmediateTextRegion",
                  value: function onImmediateTextRegion(region, referredSegments, data, start, end) {
                    var regionInfo = region.info;
                    var huffmanTables, huffmanInput;
                    var symbols = this.symbols;
                    var inputSymbols = [];
                    for (var i = 0, ii = referredSegments.length; i < ii; i++) {
                      var referredSymbols = symbols[referredSegments[i]];
                      if (referredSymbols) {
                        inputSymbols = inputSymbols.concat(referredSymbols);
                      }
                    }
                    var symbolCodeLength = (0, _core_utils.log2)(inputSymbols.length);
                    if (region.huffman) {
                      huffmanInput = new Reader(data, start, end);
                      huffmanTables = getTextRegionHuffmanTables(region, referredSegments, this.customTables, inputSymbols.length, huffmanInput);
                    }
                    var decodingContext = new DecodingContext(data, start, end);
                    var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext, region.logStripSize, huffmanInput);
                    this.drawBitmap(regionInfo, bitmap);
                  }
                }, {
                  key: "onImmediateLosslessTextRegion",
                  value: function onImmediateLosslessTextRegion() {
                    this.onImmediateTextRegion.apply(this, arguments);
                  }
                }, {
                  key: "onPatternDictionary",
                  value: function onPatternDictionary(dictionary, currentSegment, data, start, end) {
                    var patterns = this.patterns;
                    if (!patterns) {
                      this.patterns = patterns = {};
                    }
                    var decodingContext = new DecodingContext(data, start, end);
                    patterns[currentSegment] = decodePatternDictionary(dictionary.mmr, dictionary.patternWidth, dictionary.patternHeight, dictionary.maxPatternIndex, dictionary.template, decodingContext);
                  }
                }, {
                  key: "onImmediateHalftoneRegion",
                  value: function onImmediateHalftoneRegion(region, referredSegments, data, start, end) {
                    var patterns = this.patterns[referredSegments[0]];
                    var regionInfo = region.info;
                    var decodingContext = new DecodingContext(data, start, end);
                    var bitmap = decodeHalftoneRegion(region.mmr, patterns, region.template, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.enableSkip, region.combinationOperator, region.gridWidth, region.gridHeight, region.gridOffsetX, region.gridOffsetY, region.gridVectorX, region.gridVectorY, decodingContext);
                    this.drawBitmap(regionInfo, bitmap);
                  }
                }, {
                  key: "onImmediateLosslessHalftoneRegion",
                  value: function onImmediateLosslessHalftoneRegion() {
                    this.onImmediateHalftoneRegion.apply(this, arguments);
                  }
                }, {
                  key: "onTables",
                  value: function onTables(currentSegment, data, start, end) {
                    var customTables = this.customTables;
                    if (!customTables) {
                      this.customTables = customTables = {};
                    }
                    customTables[currentSegment] = decodeTablesSegment(data, start, end);
                  }
                }]);
                return SimpleSegmentVisitor2;
              }();
              var HuffmanLine = function HuffmanLine2(lineData) {
                _classCallCheck(this, HuffmanLine2);
                if (lineData.length === 2) {
                  this.isOOB = true;
                  this.rangeLow = 0;
                  this.prefixLength = lineData[0];
                  this.rangeLength = 0;
                  this.prefixCode = lineData[1];
                  this.isLowerRange = false;
                } else {
                  this.isOOB = false;
                  this.rangeLow = lineData[0];
                  this.prefixLength = lineData[1];
                  this.rangeLength = lineData[2];
                  this.prefixCode = lineData[3];
                  this.isLowerRange = lineData[4] === "lower";
                }
              };
              var HuffmanTreeNode = /* @__PURE__ */ function() {
                function HuffmanTreeNode2(line) {
                  _classCallCheck(this, HuffmanTreeNode2);
                  this.children = [];
                  if (line) {
                    this.isLeaf = true;
                    this.rangeLength = line.rangeLength;
                    this.rangeLow = line.rangeLow;
                    this.isLowerRange = line.isLowerRange;
                    this.isOOB = line.isOOB;
                  } else {
                    this.isLeaf = false;
                  }
                }
                _createClass(HuffmanTreeNode2, [{
                  key: "buildTree",
                  value: function buildTree(line, shift) {
                    var bit = line.prefixCode >> shift & 1;
                    if (shift <= 0) {
                      this.children[bit] = new HuffmanTreeNode2(line);
                    } else {
                      var node = this.children[bit];
                      if (!node) {
                        this.children[bit] = node = new HuffmanTreeNode2(null);
                      }
                      node.buildTree(line, shift - 1);
                    }
                  }
                }, {
                  key: "decodeNode",
                  value: function decodeNode(reader) {
                    if (this.isLeaf) {
                      if (this.isOOB) {
                        return null;
                      }
                      var htOffset = reader.readBits(this.rangeLength);
                      return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);
                    }
                    var node = this.children[reader.readBit()];
                    if (!node) {
                      throw new Jbig2Error("invalid Huffman data");
                    }
                    return node.decodeNode(reader);
                  }
                }]);
                return HuffmanTreeNode2;
              }();
              var HuffmanTable = /* @__PURE__ */ function() {
                function HuffmanTable2(lines, prefixCodesDone) {
                  _classCallCheck(this, HuffmanTable2);
                  if (!prefixCodesDone) {
                    this.assignPrefixCodes(lines);
                  }
                  this.rootNode = new HuffmanTreeNode(null);
                  for (var i = 0, ii = lines.length; i < ii; i++) {
                    var line = lines[i];
                    if (line.prefixLength > 0) {
                      this.rootNode.buildTree(line, line.prefixLength - 1);
                    }
                  }
                }
                _createClass(HuffmanTable2, [{
                  key: "decode",
                  value: function decode(reader) {
                    return this.rootNode.decodeNode(reader);
                  }
                }, {
                  key: "assignPrefixCodes",
                  value: function assignPrefixCodes(lines) {
                    var linesLength = lines.length;
                    var prefixLengthMax = 0;
                    for (var i = 0; i < linesLength; i++) {
                      prefixLengthMax = Math.max(prefixLengthMax, lines[i].prefixLength);
                    }
                    var histogram = new Uint32Array(prefixLengthMax + 1);
                    for (var _i2 = 0; _i2 < linesLength; _i2++) {
                      histogram[lines[_i2].prefixLength]++;
                    }
                    var currentLength = 1, firstCode = 0, currentCode, currentTemp, line;
                    histogram[0] = 0;
                    while (currentLength <= prefixLengthMax) {
                      firstCode = firstCode + histogram[currentLength - 1] << 1;
                      currentCode = firstCode;
                      currentTemp = 0;
                      while (currentTemp < linesLength) {
                        line = lines[currentTemp];
                        if (line.prefixLength === currentLength) {
                          line.prefixCode = currentCode;
                          currentCode++;
                        }
                        currentTemp++;
                      }
                      currentLength++;
                    }
                  }
                }]);
                return HuffmanTable2;
              }();
              function decodeTablesSegment(data, start, end) {
                var flags = data[start];
                var lowestValue = (0, _core_utils.readUint32)(data, start + 1) & 4294967295;
                var highestValue = (0, _core_utils.readUint32)(data, start + 5) & 4294967295;
                var reader = new Reader(data, start + 9, end);
                var prefixSizeBits = (flags >> 1 & 7) + 1;
                var rangeSizeBits = (flags >> 4 & 7) + 1;
                var lines = [];
                var prefixLength, rangeLength, currentRangeLow = lowestValue;
                do {
                  prefixLength = reader.readBits(prefixSizeBits);
                  rangeLength = reader.readBits(rangeSizeBits);
                  lines.push(new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0]));
                  currentRangeLow += 1 << rangeLength;
                } while (currentRangeLow < highestValue);
                prefixLength = reader.readBits(prefixSizeBits);
                lines.push(new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, "lower"]));
                prefixLength = reader.readBits(prefixSizeBits);
                lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));
                if (flags & 1) {
                  prefixLength = reader.readBits(prefixSizeBits);
                  lines.push(new HuffmanLine([prefixLength, 0]));
                }
                return new HuffmanTable(lines, false);
              }
              var standardTablesCache = {};
              function getStandardTable(number) {
                var table = standardTablesCache[number];
                if (table) {
                  return table;
                }
                var lines;
                switch (number) {
                  case 1:
                    lines = [[0, 1, 4, 0], [16, 2, 8, 2], [272, 3, 16, 6], [65808, 3, 32, 7]];
                    break;
                  case 2:
                    lines = [[0, 1, 0, 0], [1, 2, 0, 2], [2, 3, 0, 6], [3, 4, 3, 14], [11, 5, 6, 30], [75, 6, 32, 62], [6, 63]];
                    break;
                  case 3:
                    lines = [[-256, 8, 8, 254], [0, 1, 0, 0], [1, 2, 0, 2], [2, 3, 0, 6], [3, 4, 3, 14], [11, 5, 6, 30], [-257, 8, 32, 255, "lower"], [75, 7, 32, 126], [6, 62]];
                    break;
                  case 4:
                    lines = [[1, 1, 0, 0], [2, 2, 0, 2], [3, 3, 0, 6], [4, 4, 3, 14], [12, 5, 6, 30], [76, 5, 32, 31]];
                    break;
                  case 5:
                    lines = [[-255, 7, 8, 126], [1, 1, 0, 0], [2, 2, 0, 2], [3, 3, 0, 6], [4, 4, 3, 14], [12, 5, 6, 30], [-256, 7, 32, 127, "lower"], [76, 6, 32, 62]];
                    break;
                  case 6:
                    lines = [[-2048, 5, 10, 28], [-1024, 4, 9, 8], [-512, 4, 8, 9], [-256, 4, 7, 10], [-128, 5, 6, 29], [-64, 5, 5, 30], [-32, 4, 5, 11], [0, 2, 7, 0], [128, 3, 7, 2], [256, 3, 8, 3], [512, 4, 9, 12], [1024, 4, 10, 13], [-2049, 6, 32, 62, "lower"], [2048, 6, 32, 63]];
                    break;
                  case 7:
                    lines = [[-1024, 4, 9, 8], [-512, 3, 8, 0], [-256, 4, 7, 9], [-128, 5, 6, 26], [-64, 5, 5, 27], [-32, 4, 5, 10], [0, 4, 5, 11], [32, 5, 5, 28], [64, 5, 6, 29], [128, 4, 7, 12], [256, 3, 8, 1], [512, 3, 9, 2], [1024, 3, 10, 3], [-1025, 5, 32, 30, "lower"], [2048, 5, 32, 31]];
                    break;
                  case 8:
                    lines = [[-15, 8, 3, 252], [-7, 9, 1, 508], [-5, 8, 1, 253], [-3, 9, 0, 509], [-2, 7, 0, 124], [-1, 4, 0, 10], [0, 2, 1, 0], [2, 5, 0, 26], [3, 6, 0, 58], [4, 3, 4, 4], [20, 6, 1, 59], [22, 4, 4, 11], [38, 4, 5, 12], [70, 5, 6, 27], [134, 5, 7, 28], [262, 6, 7, 60], [390, 7, 8, 125], [646, 6, 10, 61], [-16, 9, 32, 510, "lower"], [1670, 9, 32, 511], [2, 1]];
                    break;
                  case 9:
                    lines = [[-31, 8, 4, 252], [-15, 9, 2, 508], [-11, 8, 2, 253], [-7, 9, 1, 509], [-5, 7, 1, 124], [-3, 4, 1, 10], [-1, 3, 1, 2], [1, 3, 1, 3], [3, 5, 1, 26], [5, 6, 1, 58], [7, 3, 5, 4], [39, 6, 2, 59], [43, 4, 5, 11], [75, 4, 6, 12], [139, 5, 7, 27], [267, 5, 8, 28], [523, 6, 8, 60], [779, 7, 9, 125], [1291, 6, 11, 61], [-32, 9, 32, 510, "lower"], [3339, 9, 32, 511], [2, 0]];
                    break;
                  case 10:
                    lines = [[-21, 7, 4, 122], [-5, 8, 0, 252], [-4, 7, 0, 123], [-3, 5, 0, 24], [-2, 2, 2, 0], [2, 5, 0, 25], [3, 6, 0, 54], [4, 7, 0, 124], [5, 8, 0, 253], [6, 2, 6, 1], [70, 5, 5, 26], [102, 6, 5, 55], [134, 6, 6, 56], [198, 6, 7, 57], [326, 6, 8, 58], [582, 6, 9, 59], [1094, 6, 10, 60], [2118, 7, 11, 125], [-22, 8, 32, 254, "lower"], [4166, 8, 32, 255], [2, 2]];
                    break;
                  case 11:
                    lines = [[1, 1, 0, 0], [2, 2, 1, 2], [4, 4, 0, 12], [5, 4, 1, 13], [7, 5, 1, 28], [9, 5, 2, 29], [13, 6, 2, 60], [17, 7, 2, 122], [21, 7, 3, 123], [29, 7, 4, 124], [45, 7, 5, 125], [77, 7, 6, 126], [141, 7, 32, 127]];
                    break;
                  case 12:
                    lines = [[1, 1, 0, 0], [2, 2, 0, 2], [3, 3, 1, 6], [5, 5, 0, 28], [6, 5, 1, 29], [8, 6, 1, 60], [10, 7, 0, 122], [11, 7, 1, 123], [13, 7, 2, 124], [17, 7, 3, 125], [25, 7, 4, 126], [41, 8, 5, 254], [73, 8, 32, 255]];
                    break;
                  case 13:
                    lines = [[1, 1, 0, 0], [2, 3, 0, 4], [3, 4, 0, 12], [4, 5, 0, 28], [5, 4, 1, 13], [7, 3, 3, 5], [15, 6, 1, 58], [17, 6, 2, 59], [21, 6, 3, 60], [29, 6, 4, 61], [45, 6, 5, 62], [77, 7, 6, 126], [141, 7, 32, 127]];
                    break;
                  case 14:
                    lines = [[-2, 3, 0, 4], [-1, 3, 0, 5], [0, 1, 0, 0], [1, 3, 0, 6], [2, 3, 0, 7]];
                    break;
                  case 15:
                    lines = [[-24, 7, 4, 124], [-8, 6, 2, 60], [-4, 5, 1, 28], [-2, 4, 0, 12], [-1, 3, 0, 4], [0, 1, 0, 0], [1, 3, 0, 5], [2, 4, 0, 13], [3, 5, 1, 29], [5, 6, 2, 61], [9, 7, 4, 125], [-25, 7, 32, 126, "lower"], [25, 7, 32, 127]];
                    break;
                  default:
                    throw new Jbig2Error("standard table B.".concat(number, " does not exist"));
                }
                for (var i = 0, ii = lines.length; i < ii; i++) {
                  lines[i] = new HuffmanLine(lines[i]);
                }
                table = new HuffmanTable(lines, true);
                standardTablesCache[number] = table;
                return table;
              }
              var Reader = /* @__PURE__ */ function() {
                function Reader2(data, start, end) {
                  _classCallCheck(this, Reader2);
                  this.data = data;
                  this.start = start;
                  this.end = end;
                  this.position = start;
                  this.shift = -1;
                  this.currentByte = 0;
                }
                _createClass(Reader2, [{
                  key: "readBit",
                  value: function readBit() {
                    if (this.shift < 0) {
                      if (this.position >= this.end) {
                        throw new Jbig2Error("end of data while reading bit");
                      }
                      this.currentByte = this.data[this.position++];
                      this.shift = 7;
                    }
                    var bit = this.currentByte >> this.shift & 1;
                    this.shift--;
                    return bit;
                  }
                }, {
                  key: "readBits",
                  value: function readBits(numBits) {
                    var result = 0, i;
                    for (i = numBits - 1; i >= 0; i--) {
                      result |= this.readBit() << i;
                    }
                    return result;
                  }
                }, {
                  key: "byteAlign",
                  value: function byteAlign() {
                    this.shift = -1;
                  }
                }, {
                  key: "next",
                  value: function next() {
                    if (this.position >= this.end) {
                      return -1;
                    }
                    return this.data[this.position++];
                  }
                }]);
                return Reader2;
              }();
              function getCustomHuffmanTable(index, referredTo, customTables) {
                var currentIndex = 0;
                for (var i = 0, ii = referredTo.length; i < ii; i++) {
                  var table = customTables[referredTo[i]];
                  if (table) {
                    if (index === currentIndex) {
                      return table;
                    }
                    currentIndex++;
                  }
                }
                throw new Jbig2Error("can't find custom Huffman table");
              }
              function getTextRegionHuffmanTables(textRegion, referredTo, customTables, numberOfSymbols, reader) {
                var codes = [];
                for (var i = 0; i <= 34; i++) {
                  var codeLength = reader.readBits(4);
                  codes.push(new HuffmanLine([i, codeLength, 0, 0]));
                }
                var runCodesTable = new HuffmanTable(codes, false);
                codes.length = 0;
                for (var _i3 = 0; _i3 < numberOfSymbols; ) {
                  var _codeLength = runCodesTable.decode(reader);
                  if (_codeLength >= 32) {
                    var repeatedLength = void 0, numberOfRepeats = void 0, j = void 0;
                    switch (_codeLength) {
                      case 32:
                        if (_i3 === 0) {
                          throw new Jbig2Error("no previous value in symbol ID table");
                        }
                        numberOfRepeats = reader.readBits(2) + 3;
                        repeatedLength = codes[_i3 - 1].prefixLength;
                        break;
                      case 33:
                        numberOfRepeats = reader.readBits(3) + 3;
                        repeatedLength = 0;
                        break;
                      case 34:
                        numberOfRepeats = reader.readBits(7) + 11;
                        repeatedLength = 0;
                        break;
                      default:
                        throw new Jbig2Error("invalid code length in symbol ID table");
                    }
                    for (j = 0; j < numberOfRepeats; j++) {
                      codes.push(new HuffmanLine([_i3, repeatedLength, 0, 0]));
                      _i3++;
                    }
                  } else {
                    codes.push(new HuffmanLine([_i3, _codeLength, 0, 0]));
                    _i3++;
                  }
                }
                reader.byteAlign();
                var symbolIDTable = new HuffmanTable(codes, false);
                var customIndex = 0, tableFirstS, tableDeltaS, tableDeltaT;
                switch (textRegion.huffmanFS) {
                  case 0:
                  case 1:
                    tableFirstS = getStandardTable(textRegion.huffmanFS + 6);
                    break;
                  case 3:
                    tableFirstS = getCustomHuffmanTable(customIndex, referredTo, customTables);
                    customIndex++;
                    break;
                  default:
                    throw new Jbig2Error("invalid Huffman FS selector");
                }
                switch (textRegion.huffmanDS) {
                  case 0:
                  case 1:
                  case 2:
                    tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);
                    break;
                  case 3:
                    tableDeltaS = getCustomHuffmanTable(customIndex, referredTo, customTables);
                    customIndex++;
                    break;
                  default:
                    throw new Jbig2Error("invalid Huffman DS selector");
                }
                switch (textRegion.huffmanDT) {
                  case 0:
                  case 1:
                  case 2:
                    tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);
                    break;
                  case 3:
                    tableDeltaT = getCustomHuffmanTable(customIndex, referredTo, customTables);
                    customIndex++;
                    break;
                  default:
                    throw new Jbig2Error("invalid Huffman DT selector");
                }
                if (textRegion.refinement) {
                  throw new Jbig2Error("refinement with Huffman is not supported");
                }
                return {
                  symbolIDTable,
                  tableFirstS,
                  tableDeltaS,
                  tableDeltaT
                };
              }
              function getSymbolDictionaryHuffmanTables(dictionary, referredTo, customTables) {
                var customIndex = 0, tableDeltaHeight, tableDeltaWidth;
                switch (dictionary.huffmanDHSelector) {
                  case 0:
                  case 1:
                    tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);
                    break;
                  case 3:
                    tableDeltaHeight = getCustomHuffmanTable(customIndex, referredTo, customTables);
                    customIndex++;
                    break;
                  default:
                    throw new Jbig2Error("invalid Huffman DH selector");
                }
                switch (dictionary.huffmanDWSelector) {
                  case 0:
                  case 1:
                    tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);
                    break;
                  case 3:
                    tableDeltaWidth = getCustomHuffmanTable(customIndex, referredTo, customTables);
                    customIndex++;
                    break;
                  default:
                    throw new Jbig2Error("invalid Huffman DW selector");
                }
                var tableBitmapSize, tableAggregateInstances;
                if (dictionary.bitmapSizeSelector) {
                  tableBitmapSize = getCustomHuffmanTable(customIndex, referredTo, customTables);
                  customIndex++;
                } else {
                  tableBitmapSize = getStandardTable(1);
                }
                if (dictionary.aggregationInstancesSelector) {
                  tableAggregateInstances = getCustomHuffmanTable(customIndex, referredTo, customTables);
                } else {
                  tableAggregateInstances = getStandardTable(1);
                }
                return {
                  tableDeltaHeight,
                  tableDeltaWidth,
                  tableBitmapSize,
                  tableAggregateInstances
                };
              }
              function readUncompressedBitmap(reader, width, height) {
                var bitmap = [];
                for (var y = 0; y < height; y++) {
                  var row = new Uint8Array(width);
                  bitmap.push(row);
                  for (var x = 0; x < width; x++) {
                    row[x] = reader.readBit();
                  }
                  reader.byteAlign();
                }
                return bitmap;
              }
              function decodeMMRBitmap(input, width, height, endOfBlock) {
                var params = {
                  K: -1,
                  Columns: width,
                  Rows: height,
                  BlackIs1: true,
                  EndOfBlock: endOfBlock
                };
                var decoder = new _ccitt.CCITTFaxDecoder(input, params);
                var bitmap = [];
                var currentByte, eof = false;
                for (var y = 0; y < height; y++) {
                  var row = new Uint8Array(width);
                  bitmap.push(row);
                  var shift = -1;
                  for (var x = 0; x < width; x++) {
                    if (shift < 0) {
                      currentByte = decoder.readNextChar();
                      if (currentByte === -1) {
                        currentByte = 0;
                        eof = true;
                      }
                      shift = 7;
                    }
                    row[x] = currentByte >> shift & 1;
                    shift--;
                  }
                }
                if (endOfBlock && !eof) {
                  var lookForEOFLimit = 5;
                  for (var i = 0; i < lookForEOFLimit; i++) {
                    if (decoder.readNextChar() === -1) {
                      break;
                    }
                  }
                }
                return bitmap;
              }
              var Jbig2Image = /* @__PURE__ */ function() {
                function Jbig2Image2() {
                  _classCallCheck(this, Jbig2Image2);
                }
                _createClass(Jbig2Image2, [{
                  key: "parseChunks",
                  value: function parseChunks(chunks) {
                    return parseJbig2Chunks(chunks);
                  }
                }, {
                  key: "parse",
                  value: function parse(data) {
                    var _parseJbig = parseJbig2(data), imgData = _parseJbig.imgData, width = _parseJbig.width, height = _parseJbig.height;
                    this.width = width;
                    this.height = height;
                    return imgData;
                  }
                }]);
                return Jbig2Image2;
              }();
              exports2.Jbig2Image = Jbig2Image;
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.ArithmeticDecoder = void 0;
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var QeTable = [{
                qe: 22017,
                nmps: 1,
                nlps: 1,
                switchFlag: 1
              }, {
                qe: 13313,
                nmps: 2,
                nlps: 6,
                switchFlag: 0
              }, {
                qe: 6145,
                nmps: 3,
                nlps: 9,
                switchFlag: 0
              }, {
                qe: 2753,
                nmps: 4,
                nlps: 12,
                switchFlag: 0
              }, {
                qe: 1313,
                nmps: 5,
                nlps: 29,
                switchFlag: 0
              }, {
                qe: 545,
                nmps: 38,
                nlps: 33,
                switchFlag: 0
              }, {
                qe: 22017,
                nmps: 7,
                nlps: 6,
                switchFlag: 1
              }, {
                qe: 21505,
                nmps: 8,
                nlps: 14,
                switchFlag: 0
              }, {
                qe: 18433,
                nmps: 9,
                nlps: 14,
                switchFlag: 0
              }, {
                qe: 14337,
                nmps: 10,
                nlps: 14,
                switchFlag: 0
              }, {
                qe: 12289,
                nmps: 11,
                nlps: 17,
                switchFlag: 0
              }, {
                qe: 9217,
                nmps: 12,
                nlps: 18,
                switchFlag: 0
              }, {
                qe: 7169,
                nmps: 13,
                nlps: 20,
                switchFlag: 0
              }, {
                qe: 5633,
                nmps: 29,
                nlps: 21,
                switchFlag: 0
              }, {
                qe: 22017,
                nmps: 15,
                nlps: 14,
                switchFlag: 1
              }, {
                qe: 21505,
                nmps: 16,
                nlps: 14,
                switchFlag: 0
              }, {
                qe: 20737,
                nmps: 17,
                nlps: 15,
                switchFlag: 0
              }, {
                qe: 18433,
                nmps: 18,
                nlps: 16,
                switchFlag: 0
              }, {
                qe: 14337,
                nmps: 19,
                nlps: 17,
                switchFlag: 0
              }, {
                qe: 13313,
                nmps: 20,
                nlps: 18,
                switchFlag: 0
              }, {
                qe: 12289,
                nmps: 21,
                nlps: 19,
                switchFlag: 0
              }, {
                qe: 10241,
                nmps: 22,
                nlps: 19,
                switchFlag: 0
              }, {
                qe: 9217,
                nmps: 23,
                nlps: 20,
                switchFlag: 0
              }, {
                qe: 8705,
                nmps: 24,
                nlps: 21,
                switchFlag: 0
              }, {
                qe: 7169,
                nmps: 25,
                nlps: 22,
                switchFlag: 0
              }, {
                qe: 6145,
                nmps: 26,
                nlps: 23,
                switchFlag: 0
              }, {
                qe: 5633,
                nmps: 27,
                nlps: 24,
                switchFlag: 0
              }, {
                qe: 5121,
                nmps: 28,
                nlps: 25,
                switchFlag: 0
              }, {
                qe: 4609,
                nmps: 29,
                nlps: 26,
                switchFlag: 0
              }, {
                qe: 4353,
                nmps: 30,
                nlps: 27,
                switchFlag: 0
              }, {
                qe: 2753,
                nmps: 31,
                nlps: 28,
                switchFlag: 0
              }, {
                qe: 2497,
                nmps: 32,
                nlps: 29,
                switchFlag: 0
              }, {
                qe: 2209,
                nmps: 33,
                nlps: 30,
                switchFlag: 0
              }, {
                qe: 1313,
                nmps: 34,
                nlps: 31,
                switchFlag: 0
              }, {
                qe: 1089,
                nmps: 35,
                nlps: 32,
                switchFlag: 0
              }, {
                qe: 673,
                nmps: 36,
                nlps: 33,
                switchFlag: 0
              }, {
                qe: 545,
                nmps: 37,
                nlps: 34,
                switchFlag: 0
              }, {
                qe: 321,
                nmps: 38,
                nlps: 35,
                switchFlag: 0
              }, {
                qe: 273,
                nmps: 39,
                nlps: 36,
                switchFlag: 0
              }, {
                qe: 133,
                nmps: 40,
                nlps: 37,
                switchFlag: 0
              }, {
                qe: 73,
                nmps: 41,
                nlps: 38,
                switchFlag: 0
              }, {
                qe: 37,
                nmps: 42,
                nlps: 39,
                switchFlag: 0
              }, {
                qe: 21,
                nmps: 43,
                nlps: 40,
                switchFlag: 0
              }, {
                qe: 9,
                nmps: 44,
                nlps: 41,
                switchFlag: 0
              }, {
                qe: 5,
                nmps: 45,
                nlps: 42,
                switchFlag: 0
              }, {
                qe: 1,
                nmps: 45,
                nlps: 43,
                switchFlag: 0
              }, {
                qe: 22017,
                nmps: 46,
                nlps: 46,
                switchFlag: 0
              }];
              var ArithmeticDecoder = /* @__PURE__ */ function() {
                function ArithmeticDecoder2(data, start, end) {
                  _classCallCheck(this, ArithmeticDecoder2);
                  this.data = data;
                  this.bp = start;
                  this.dataEnd = end;
                  this.chigh = data[start];
                  this.clow = 0;
                  this.byteIn();
                  this.chigh = this.chigh << 7 & 65535 | this.clow >> 9 & 127;
                  this.clow = this.clow << 7 & 65535;
                  this.ct -= 7;
                  this.a = 32768;
                }
                _createClass(ArithmeticDecoder2, [{
                  key: "byteIn",
                  value: function byteIn() {
                    var data = this.data;
                    var bp = this.bp;
                    if (data[bp] === 255) {
                      if (data[bp + 1] > 143) {
                        this.clow += 65280;
                        this.ct = 8;
                      } else {
                        bp++;
                        this.clow += data[bp] << 9;
                        this.ct = 7;
                        this.bp = bp;
                      }
                    } else {
                      bp++;
                      this.clow += bp < this.dataEnd ? data[bp] << 8 : 65280;
                      this.ct = 8;
                      this.bp = bp;
                    }
                    if (this.clow > 65535) {
                      this.chigh += this.clow >> 16;
                      this.clow &= 65535;
                    }
                  }
                }, {
                  key: "readBit",
                  value: function readBit(contexts, pos) {
                    var cx_index = contexts[pos] >> 1, cx_mps = contexts[pos] & 1;
                    var qeTableIcx = QeTable[cx_index];
                    var qeIcx = qeTableIcx.qe;
                    var d;
                    var a = this.a - qeIcx;
                    if (this.chigh < qeIcx) {
                      if (a < qeIcx) {
                        a = qeIcx;
                        d = cx_mps;
                        cx_index = qeTableIcx.nmps;
                      } else {
                        a = qeIcx;
                        d = 1 ^ cx_mps;
                        if (qeTableIcx.switchFlag === 1) {
                          cx_mps = d;
                        }
                        cx_index = qeTableIcx.nlps;
                      }
                    } else {
                      this.chigh -= qeIcx;
                      if ((a & 32768) !== 0) {
                        this.a = a;
                        return cx_mps;
                      }
                      if (a < qeIcx) {
                        d = 1 ^ cx_mps;
                        if (qeTableIcx.switchFlag === 1) {
                          cx_mps = d;
                        }
                        cx_index = qeTableIcx.nlps;
                      } else {
                        d = cx_mps;
                        cx_index = qeTableIcx.nmps;
                      }
                    }
                    do {
                      if (this.ct === 0) {
                        this.byteIn();
                      }
                      a <<= 1;
                      this.chigh = this.chigh << 1 & 65535 | this.clow >> 15 & 1;
                      this.clow = this.clow << 1 & 65535;
                      this.ct--;
                    } while ((a & 32768) === 0);
                    this.a = a;
                    contexts[pos] = cx_index << 1 | cx_mps;
                    return d;
                  }
                }]);
                return ArithmeticDecoder2;
              }();
              exports2.ArithmeticDecoder = ArithmeticDecoder;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.JpegStream = void 0;
              var _decode_stream = __w_pdfjs_require__2(159);
              var _primitives = __w_pdfjs_require__2(135);
              var _jpg = __w_pdfjs_require__2(168);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var JpegStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(JpegStream2, _DecodeStream);
                var _super = _createSuper(JpegStream2);
                function JpegStream2(stream, maybeLength, params) {
                  var _this;
                  _classCallCheck(this, JpegStream2);
                  var ch;
                  while ((ch = stream.getByte()) !== -1) {
                    if (ch === 255) {
                      stream.skip(-1);
                      break;
                    }
                  }
                  _this = _super.call(this, maybeLength);
                  _this.stream = stream;
                  _this.dict = stream.dict;
                  _this.maybeLength = maybeLength;
                  _this.params = params;
                  return _this;
                }
                _createClass(JpegStream2, [{
                  key: "bytes",
                  get: function get() {
                    return (0, _util.shadow)(this, "bytes", this.stream.getBytes(this.maybeLength));
                  }
                }, {
                  key: "ensureBuffer",
                  value: function ensureBuffer(requested) {
                  }
                }, {
                  key: "readBlock",
                  value: function readBlock() {
                    if (this.eof) {
                      return;
                    }
                    var jpegOptions = {
                      decodeTransform: void 0,
                      colorTransform: void 0
                    };
                    var decodeArr = this.dict.getArray("D", "Decode");
                    if (this.forceRGB && Array.isArray(decodeArr)) {
                      var bitsPerComponent = this.dict.get("BPC", "BitsPerComponent") || 8;
                      var decodeArrLength = decodeArr.length;
                      var transform = new Int32Array(decodeArrLength);
                      var transformNeeded = false;
                      var maxValue = (1 << bitsPerComponent) - 1;
                      for (var i = 0; i < decodeArrLength; i += 2) {
                        transform[i] = (decodeArr[i + 1] - decodeArr[i]) * 256 | 0;
                        transform[i + 1] = decodeArr[i] * maxValue | 0;
                        if (transform[i] !== 256 || transform[i + 1] !== 0) {
                          transformNeeded = true;
                        }
                      }
                      if (transformNeeded) {
                        jpegOptions.decodeTransform = transform;
                      }
                    }
                    if ((0, _primitives.isDict)(this.params)) {
                      var colorTransform = this.params.get("ColorTransform");
                      if (Number.isInteger(colorTransform)) {
                        jpegOptions.colorTransform = colorTransform;
                      }
                    }
                    var jpegImage = new _jpg.JpegImage(jpegOptions);
                    jpegImage.parse(this.bytes);
                    var data = jpegImage.getData({
                      width: this.drawWidth,
                      height: this.drawHeight,
                      forceRGB: this.forceRGB,
                      isSourcePDF: true
                    });
                    this.buffer = data;
                    this.bufferLength = data.length;
                    this.eof = true;
                  }
                }]);
                return JpegStream2;
              }(_decode_stream.DecodeStream);
              exports2.JpegStream = JpegStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.JpegImage = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _core_utils = __w_pdfjs_require__2(139);
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var JpegError = /* @__PURE__ */ function(_BaseException) {
                _inherits(JpegError2, _BaseException);
                var _super = _createSuper(JpegError2);
                function JpegError2(msg) {
                  _classCallCheck(this, JpegError2);
                  return _super.call(this, "JPEG error: ".concat(msg), "JpegError");
                }
                return JpegError2;
              }(_util.BaseException);
              var DNLMarkerError = /* @__PURE__ */ function(_BaseException2) {
                _inherits(DNLMarkerError2, _BaseException2);
                var _super2 = _createSuper(DNLMarkerError2);
                function DNLMarkerError2(message, scanLines) {
                  var _this;
                  _classCallCheck(this, DNLMarkerError2);
                  _this = _super2.call(this, message, "DNLMarkerError");
                  _this.scanLines = scanLines;
                  return _this;
                }
                return DNLMarkerError2;
              }(_util.BaseException);
              var EOIMarkerError = /* @__PURE__ */ function(_BaseException3) {
                _inherits(EOIMarkerError2, _BaseException3);
                var _super3 = _createSuper(EOIMarkerError2);
                function EOIMarkerError2(msg) {
                  _classCallCheck(this, EOIMarkerError2);
                  return _super3.call(this, msg, "EOIMarkerError");
                }
                return EOIMarkerError2;
              }(_util.BaseException);
              var dctZigZag = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);
              var dctCos1 = 4017;
              var dctSin1 = 799;
              var dctCos3 = 3406;
              var dctSin3 = 2276;
              var dctCos6 = 1567;
              var dctSin6 = 3784;
              var dctSqrt2 = 5793;
              var dctSqrt1d2 = 2896;
              function buildHuffmanTable(codeLengths, values) {
                var k = 0, i, j, length = 16;
                while (length > 0 && !codeLengths[length - 1]) {
                  length--;
                }
                var code = [{
                  children: [],
                  index: 0
                }];
                var p = code[0], q;
                for (i = 0; i < length; i++) {
                  for (j = 0; j < codeLengths[i]; j++) {
                    p = code.pop();
                    p.children[p.index] = values[k];
                    while (p.index > 0) {
                      p = code.pop();
                    }
                    p.index++;
                    code.push(p);
                    while (code.length <= i) {
                      code.push(q = {
                        children: [],
                        index: 0
                      });
                      p.children[p.index] = q.children;
                      p = q;
                    }
                    k++;
                  }
                  if (i + 1 < length) {
                    code.push(q = {
                      children: [],
                      index: 0
                    });
                    p.children[p.index] = q.children;
                    p = q;
                  }
                }
                return code[0].children;
              }
              function getBlockBufferOffset(component, row, col) {
                return 64 * ((component.blocksPerLine + 1) * row + col);
              }
              function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
                var parseDNLMarker = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
                var mcusPerLine = frame.mcusPerLine;
                var progressive = frame.progressive;
                var startOffset = offset;
                var bitsData = 0, bitsCount = 0;
                function readBit() {
                  if (bitsCount > 0) {
                    bitsCount--;
                    return bitsData >> bitsCount & 1;
                  }
                  bitsData = data[offset++];
                  if (bitsData === 255) {
                    var nextByte = data[offset++];
                    if (nextByte) {
                      if (nextByte === 220 && parseDNLMarker) {
                        offset += 2;
                        var scanLines = (0, _core_utils.readUint16)(data, offset);
                        offset += 2;
                        if (scanLines > 0 && scanLines !== frame.scanLines) {
                          throw new DNLMarkerError("Found DNL marker (0xFFDC) while parsing scan data", scanLines);
                        }
                      } else if (nextByte === 217) {
                        if (parseDNLMarker) {
                          var maybeScanLines = blockRow * (frame.precision === 8 ? 8 : 0);
                          if (maybeScanLines > 0 && Math.round(frame.scanLines / maybeScanLines) >= 10) {
                            throw new DNLMarkerError("Found EOI marker (0xFFD9) while parsing scan data, possibly caused by incorrect `scanLines` parameter", maybeScanLines);
                          }
                        }
                        throw new EOIMarkerError("Found EOI marker (0xFFD9) while parsing scan data");
                      }
                      throw new JpegError("unexpected marker ".concat((bitsData << 8 | nextByte).toString(16)));
                    }
                  }
                  bitsCount = 7;
                  return bitsData >>> 7;
                }
                function decodeHuffman(tree) {
                  var node = tree;
                  while (true) {
                    node = node[readBit()];
                    switch (_typeof(node)) {
                      case "number":
                        return node;
                      case "object":
                        continue;
                    }
                    throw new JpegError("invalid huffman sequence");
                  }
                }
                function receive(length) {
                  var n2 = 0;
                  while (length > 0) {
                    n2 = n2 << 1 | readBit();
                    length--;
                  }
                  return n2;
                }
                function receiveAndExtend(length) {
                  if (length === 1) {
                    return readBit() === 1 ? 1 : -1;
                  }
                  var n2 = receive(length);
                  if (n2 >= 1 << length - 1) {
                    return n2;
                  }
                  return n2 + (-1 << length) + 1;
                }
                function decodeBaseline(component2, blockOffset) {
                  var t = decodeHuffman(component2.huffmanTableDC);
                  var diff = t === 0 ? 0 : receiveAndExtend(t);
                  component2.blockData[blockOffset] = component2.pred += diff;
                  var k2 = 1;
                  while (k2 < 64) {
                    var rs = decodeHuffman(component2.huffmanTableAC);
                    var s = rs & 15, r = rs >> 4;
                    if (s === 0) {
                      if (r < 15) {
                        break;
                      }
                      k2 += 16;
                      continue;
                    }
                    k2 += r;
                    var z = dctZigZag[k2];
                    component2.blockData[blockOffset + z] = receiveAndExtend(s);
                    k2++;
                  }
                }
                function decodeDCFirst(component2, blockOffset) {
                  var t = decodeHuffman(component2.huffmanTableDC);
                  var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
                  component2.blockData[blockOffset] = component2.pred += diff;
                }
                function decodeDCSuccessive(component2, blockOffset) {
                  component2.blockData[blockOffset] |= readBit() << successive;
                }
                var eobrun = 0;
                function decodeACFirst(component2, blockOffset) {
                  if (eobrun > 0) {
                    eobrun--;
                    return;
                  }
                  var k2 = spectralStart;
                  var e = spectralEnd;
                  while (k2 <= e) {
                    var rs = decodeHuffman(component2.huffmanTableAC);
                    var s = rs & 15, r = rs >> 4;
                    if (s === 0) {
                      if (r < 15) {
                        eobrun = receive(r) + (1 << r) - 1;
                        break;
                      }
                      k2 += 16;
                      continue;
                    }
                    k2 += r;
                    var z = dctZigZag[k2];
                    component2.blockData[blockOffset + z] = receiveAndExtend(s) * (1 << successive);
                    k2++;
                  }
                }
                var successiveACState = 0, successiveACNextValue;
                function decodeACSuccessive(component2, blockOffset) {
                  var k2 = spectralStart;
                  var e = spectralEnd;
                  var r = 0;
                  var s;
                  var rs;
                  while (k2 <= e) {
                    var offsetZ = blockOffset + dctZigZag[k2];
                    var sign = component2.blockData[offsetZ] < 0 ? -1 : 1;
                    switch (successiveACState) {
                      case 0:
                        rs = decodeHuffman(component2.huffmanTableAC);
                        s = rs & 15;
                        r = rs >> 4;
                        if (s === 0) {
                          if (r < 15) {
                            eobrun = receive(r) + (1 << r);
                            successiveACState = 4;
                          } else {
                            r = 16;
                            successiveACState = 1;
                          }
                        } else {
                          if (s !== 1) {
                            throw new JpegError("invalid ACn encoding");
                          }
                          successiveACNextValue = receiveAndExtend(s);
                          successiveACState = r ? 2 : 3;
                        }
                        continue;
                      case 1:
                      case 2:
                        if (component2.blockData[offsetZ]) {
                          component2.blockData[offsetZ] += sign * (readBit() << successive);
                        } else {
                          r--;
                          if (r === 0) {
                            successiveACState = successiveACState === 2 ? 3 : 0;
                          }
                        }
                        break;
                      case 3:
                        if (component2.blockData[offsetZ]) {
                          component2.blockData[offsetZ] += sign * (readBit() << successive);
                        } else {
                          component2.blockData[offsetZ] = successiveACNextValue << successive;
                          successiveACState = 0;
                        }
                        break;
                      case 4:
                        if (component2.blockData[offsetZ]) {
                          component2.blockData[offsetZ] += sign * (readBit() << successive);
                        }
                        break;
                    }
                    k2++;
                  }
                  if (successiveACState === 4) {
                    eobrun--;
                    if (eobrun === 0) {
                      successiveACState = 0;
                    }
                  }
                }
                var blockRow = 0;
                function decodeMcu(component2, decode, mcu2, row, col) {
                  var mcuRow = mcu2 / mcusPerLine | 0;
                  var mcuCol = mcu2 % mcusPerLine;
                  blockRow = mcuRow * component2.v + row;
                  var blockCol = mcuCol * component2.h + col;
                  var blockOffset = getBlockBufferOffset(component2, blockRow, blockCol);
                  decode(component2, blockOffset);
                }
                function decodeBlock(component2, decode, mcu2) {
                  blockRow = mcu2 / component2.blocksPerLine | 0;
                  var blockCol = mcu2 % component2.blocksPerLine;
                  var blockOffset = getBlockBufferOffset(component2, blockRow, blockCol);
                  decode(component2, blockOffset);
                }
                var componentsLength = components.length;
                var component, i, j, k, n;
                var decodeFn;
                if (progressive) {
                  if (spectralStart === 0) {
                    decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
                  } else {
                    decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
                  }
                } else {
                  decodeFn = decodeBaseline;
                }
                var mcu = 0, fileMarker;
                var mcuExpected;
                if (componentsLength === 1) {
                  mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
                } else {
                  mcuExpected = mcusPerLine * frame.mcusPerColumn;
                }
                var h, v;
                while (mcu <= mcuExpected) {
                  var mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;
                  if (mcuToRead > 0) {
                    for (i = 0; i < componentsLength; i++) {
                      components[i].pred = 0;
                    }
                    eobrun = 0;
                    if (componentsLength === 1) {
                      component = components[0];
                      for (n = 0; n < mcuToRead; n++) {
                        decodeBlock(component, decodeFn, mcu);
                        mcu++;
                      }
                    } else {
                      for (n = 0; n < mcuToRead; n++) {
                        for (i = 0; i < componentsLength; i++) {
                          component = components[i];
                          h = component.h;
                          v = component.v;
                          for (j = 0; j < v; j++) {
                            for (k = 0; k < h; k++) {
                              decodeMcu(component, decodeFn, mcu, j, k);
                            }
                          }
                        }
                        mcu++;
                      }
                    }
                  }
                  bitsCount = 0;
                  fileMarker = findNextFileMarker(data, offset);
                  if (!fileMarker) {
                    break;
                  }
                  if (fileMarker.invalid) {
                    var partialMsg = mcuToRead > 0 ? "unexpected" : "excessive";
                    (0, _util.warn)("decodeScan - ".concat(partialMsg, " MCU data, current marker is: ").concat(fileMarker.invalid));
                    offset = fileMarker.offset;
                  }
                  if (fileMarker.marker >= 65488 && fileMarker.marker <= 65495) {
                    offset += 2;
                  } else {
                    break;
                  }
                }
                return offset - startOffset;
              }
              function quantizeAndInverse(component, blockBufferOffset, p) {
                var qt = component.quantizationTable, blockData = component.blockData;
                var v0, v1, v2, v3, v4, v5, v6, v7;
                var p0, p1, p2, p3, p4, p5, p6, p7;
                var t;
                if (!qt) {
                  throw new JpegError("missing required Quantization Table.");
                }
                for (var row = 0; row < 64; row += 8) {
                  p0 = blockData[blockBufferOffset + row];
                  p1 = blockData[blockBufferOffset + row + 1];
                  p2 = blockData[blockBufferOffset + row + 2];
                  p3 = blockData[blockBufferOffset + row + 3];
                  p4 = blockData[blockBufferOffset + row + 4];
                  p5 = blockData[blockBufferOffset + row + 5];
                  p6 = blockData[blockBufferOffset + row + 6];
                  p7 = blockData[blockBufferOffset + row + 7];
                  p0 *= qt[row];
                  if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
                    t = dctSqrt2 * p0 + 512 >> 10;
                    p[row] = t;
                    p[row + 1] = t;
                    p[row + 2] = t;
                    p[row + 3] = t;
                    p[row + 4] = t;
                    p[row + 5] = t;
                    p[row + 6] = t;
                    p[row + 7] = t;
                    continue;
                  }
                  p1 *= qt[row + 1];
                  p2 *= qt[row + 2];
                  p3 *= qt[row + 3];
                  p4 *= qt[row + 4];
                  p5 *= qt[row + 5];
                  p6 *= qt[row + 6];
                  p7 *= qt[row + 7];
                  v0 = dctSqrt2 * p0 + 128 >> 8;
                  v1 = dctSqrt2 * p4 + 128 >> 8;
                  v2 = p2;
                  v3 = p6;
                  v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;
                  v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;
                  v5 = p3 << 4;
                  v6 = p5 << 4;
                  v0 = v0 + v1 + 1 >> 1;
                  v1 = v0 - v1;
                  t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;
                  v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;
                  v3 = t;
                  v4 = v4 + v6 + 1 >> 1;
                  v6 = v4 - v6;
                  v7 = v7 + v5 + 1 >> 1;
                  v5 = v7 - v5;
                  v0 = v0 + v3 + 1 >> 1;
                  v3 = v0 - v3;
                  v1 = v1 + v2 + 1 >> 1;
                  v2 = v1 - v2;
                  t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
                  v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
                  v7 = t;
                  t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
                  v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
                  v6 = t;
                  p[row] = v0 + v7;
                  p[row + 7] = v0 - v7;
                  p[row + 1] = v1 + v6;
                  p[row + 6] = v1 - v6;
                  p[row + 2] = v2 + v5;
                  p[row + 5] = v2 - v5;
                  p[row + 3] = v3 + v4;
                  p[row + 4] = v3 - v4;
                }
                for (var col = 0; col < 8; ++col) {
                  p0 = p[col];
                  p1 = p[col + 8];
                  p2 = p[col + 16];
                  p3 = p[col + 24];
                  p4 = p[col + 32];
                  p5 = p[col + 40];
                  p6 = p[col + 48];
                  p7 = p[col + 56];
                  if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
                    t = dctSqrt2 * p0 + 8192 >> 14;
                    if (t < -2040) {
                      t = 0;
                    } else if (t >= 2024) {
                      t = 255;
                    } else {
                      t = t + 2056 >> 4;
                    }
                    blockData[blockBufferOffset + col] = t;
                    blockData[blockBufferOffset + col + 8] = t;
                    blockData[blockBufferOffset + col + 16] = t;
                    blockData[blockBufferOffset + col + 24] = t;
                    blockData[blockBufferOffset + col + 32] = t;
                    blockData[blockBufferOffset + col + 40] = t;
                    blockData[blockBufferOffset + col + 48] = t;
                    blockData[blockBufferOffset + col + 56] = t;
                    continue;
                  }
                  v0 = dctSqrt2 * p0 + 2048 >> 12;
                  v1 = dctSqrt2 * p4 + 2048 >> 12;
                  v2 = p2;
                  v3 = p6;
                  v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;
                  v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;
                  v5 = p3;
                  v6 = p5;
                  v0 = (v0 + v1 + 1 >> 1) + 4112;
                  v1 = v0 - v1;
                  t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;
                  v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;
                  v3 = t;
                  v4 = v4 + v6 + 1 >> 1;
                  v6 = v4 - v6;
                  v7 = v7 + v5 + 1 >> 1;
                  v5 = v7 - v5;
                  v0 = v0 + v3 + 1 >> 1;
                  v3 = v0 - v3;
                  v1 = v1 + v2 + 1 >> 1;
                  v2 = v1 - v2;
                  t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
                  v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
                  v7 = t;
                  t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
                  v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
                  v6 = t;
                  p0 = v0 + v7;
                  p7 = v0 - v7;
                  p1 = v1 + v6;
                  p6 = v1 - v6;
                  p2 = v2 + v5;
                  p5 = v2 - v5;
                  p3 = v3 + v4;
                  p4 = v3 - v4;
                  if (p0 < 16) {
                    p0 = 0;
                  } else if (p0 >= 4080) {
                    p0 = 255;
                  } else {
                    p0 >>= 4;
                  }
                  if (p1 < 16) {
                    p1 = 0;
                  } else if (p1 >= 4080) {
                    p1 = 255;
                  } else {
                    p1 >>= 4;
                  }
                  if (p2 < 16) {
                    p2 = 0;
                  } else if (p2 >= 4080) {
                    p2 = 255;
                  } else {
                    p2 >>= 4;
                  }
                  if (p3 < 16) {
                    p3 = 0;
                  } else if (p3 >= 4080) {
                    p3 = 255;
                  } else {
                    p3 >>= 4;
                  }
                  if (p4 < 16) {
                    p4 = 0;
                  } else if (p4 >= 4080) {
                    p4 = 255;
                  } else {
                    p4 >>= 4;
                  }
                  if (p5 < 16) {
                    p5 = 0;
                  } else if (p5 >= 4080) {
                    p5 = 255;
                  } else {
                    p5 >>= 4;
                  }
                  if (p6 < 16) {
                    p6 = 0;
                  } else if (p6 >= 4080) {
                    p6 = 255;
                  } else {
                    p6 >>= 4;
                  }
                  if (p7 < 16) {
                    p7 = 0;
                  } else if (p7 >= 4080) {
                    p7 = 255;
                  } else {
                    p7 >>= 4;
                  }
                  blockData[blockBufferOffset + col] = p0;
                  blockData[blockBufferOffset + col + 8] = p1;
                  blockData[blockBufferOffset + col + 16] = p2;
                  blockData[blockBufferOffset + col + 24] = p3;
                  blockData[blockBufferOffset + col + 32] = p4;
                  blockData[blockBufferOffset + col + 40] = p5;
                  blockData[blockBufferOffset + col + 48] = p6;
                  blockData[blockBufferOffset + col + 56] = p7;
                }
              }
              function buildComponentData(frame, component) {
                var blocksPerLine = component.blocksPerLine;
                var blocksPerColumn = component.blocksPerColumn;
                var computationBuffer = new Int16Array(64);
                for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
                  for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
                    var offset = getBlockBufferOffset(component, blockRow, blockCol);
                    quantizeAndInverse(component, offset, computationBuffer);
                  }
                }
                return component.blockData;
              }
              function findNextFileMarker(data, currentPos) {
                var startPos = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : currentPos;
                var maxPos = data.length - 1;
                var newPos = startPos < currentPos ? startPos : currentPos;
                if (currentPos >= maxPos) {
                  return null;
                }
                var currentMarker = (0, _core_utils.readUint16)(data, currentPos);
                if (currentMarker >= 65472 && currentMarker <= 65534) {
                  return {
                    invalid: null,
                    marker: currentMarker,
                    offset: currentPos
                  };
                }
                var newMarker = (0, _core_utils.readUint16)(data, newPos);
                while (!(newMarker >= 65472 && newMarker <= 65534)) {
                  if (++newPos >= maxPos) {
                    return null;
                  }
                  newMarker = (0, _core_utils.readUint16)(data, newPos);
                }
                return {
                  invalid: currentMarker.toString(16),
                  marker: newMarker,
                  offset: newPos
                };
              }
              var JpegImage = /* @__PURE__ */ function() {
                function JpegImage2() {
                  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$decodeTransform = _ref.decodeTransform, decodeTransform = _ref$decodeTransform === void 0 ? null : _ref$decodeTransform, _ref$colorTransform = _ref.colorTransform, colorTransform = _ref$colorTransform === void 0 ? -1 : _ref$colorTransform;
                  _classCallCheck(this, JpegImage2);
                  this._decodeTransform = decodeTransform;
                  this._colorTransform = colorTransform;
                }
                _createClass(JpegImage2, [{
                  key: "parse",
                  value: function parse(data) {
                    var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref2$dnlScanLines = _ref2.dnlScanLines, dnlScanLines = _ref2$dnlScanLines === void 0 ? null : _ref2$dnlScanLines;
                    function readDataBlock() {
                      var length = (0, _core_utils.readUint16)(data, offset);
                      offset += 2;
                      var endOffset = offset + length - 2;
                      var fileMarker2 = findNextFileMarker(data, endOffset, offset);
                      if (fileMarker2 && fileMarker2.invalid) {
                        (0, _util.warn)("readDataBlock - incorrect length, current marker is: " + fileMarker2.invalid);
                        endOffset = fileMarker2.offset;
                      }
                      var array = data.subarray(offset, endOffset);
                      offset += array.length;
                      return array;
                    }
                    function prepareComponents(frame2) {
                      var mcusPerLine = Math.ceil(frame2.samplesPerLine / 8 / frame2.maxH);
                      var mcusPerColumn = Math.ceil(frame2.scanLines / 8 / frame2.maxV);
                      for (var i2 = 0, ii2 = frame2.components.length; i2 < ii2; i2++) {
                        var component2 = frame2.components[i2];
                        var blocksPerLine = Math.ceil(Math.ceil(frame2.samplesPerLine / 8) * component2.h / frame2.maxH);
                        var blocksPerColumn = Math.ceil(Math.ceil(frame2.scanLines / 8) * component2.v / frame2.maxV);
                        var blocksPerLineForMcu = mcusPerLine * component2.h;
                        var blocksPerColumnForMcu = mcusPerColumn * component2.v;
                        var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
                        component2.blockData = new Int16Array(blocksBufferSize);
                        component2.blocksPerLine = blocksPerLine;
                        component2.blocksPerColumn = blocksPerColumn;
                      }
                      frame2.mcusPerLine = mcusPerLine;
                      frame2.mcusPerColumn = mcusPerColumn;
                    }
                    var offset = 0;
                    var jfif = null;
                    var adobe = null;
                    var frame, resetInterval;
                    var numSOSMarkers = 0;
                    var quantizationTables = [];
                    var huffmanTablesAC = [], huffmanTablesDC = [];
                    var fileMarker = (0, _core_utils.readUint16)(data, offset);
                    offset += 2;
                    if (fileMarker !== 65496) {
                      throw new JpegError("SOI not found");
                    }
                    fileMarker = (0, _core_utils.readUint16)(data, offset);
                    offset += 2;
                    markerLoop:
                      while (fileMarker !== 65497) {
                        var i = void 0, j = void 0, l = void 0;
                        switch (fileMarker) {
                          case 65504:
                          case 65505:
                          case 65506:
                          case 65507:
                          case 65508:
                          case 65509:
                          case 65510:
                          case 65511:
                          case 65512:
                          case 65513:
                          case 65514:
                          case 65515:
                          case 65516:
                          case 65517:
                          case 65518:
                          case 65519:
                          case 65534:
                            var appData = readDataBlock();
                            if (fileMarker === 65504) {
                              if (appData[0] === 74 && appData[1] === 70 && appData[2] === 73 && appData[3] === 70 && appData[4] === 0) {
                                jfif = {
                                  version: {
                                    major: appData[5],
                                    minor: appData[6]
                                  },
                                  densityUnits: appData[7],
                                  xDensity: appData[8] << 8 | appData[9],
                                  yDensity: appData[10] << 8 | appData[11],
                                  thumbWidth: appData[12],
                                  thumbHeight: appData[13],
                                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                                };
                              }
                            }
                            if (fileMarker === 65518) {
                              if (appData[0] === 65 && appData[1] === 100 && appData[2] === 111 && appData[3] === 98 && appData[4] === 101) {
                                adobe = {
                                  version: appData[5] << 8 | appData[6],
                                  flags0: appData[7] << 8 | appData[8],
                                  flags1: appData[9] << 8 | appData[10],
                                  transformCode: appData[11]
                                };
                              }
                            }
                            break;
                          case 65499:
                            var quantizationTablesLength = (0, _core_utils.readUint16)(data, offset);
                            offset += 2;
                            var quantizationTablesEnd = quantizationTablesLength + offset - 2;
                            var z = void 0;
                            while (offset < quantizationTablesEnd) {
                              var quantizationTableSpec = data[offset++];
                              var tableData = new Uint16Array(64);
                              if (quantizationTableSpec >> 4 === 0) {
                                for (j = 0; j < 64; j++) {
                                  z = dctZigZag[j];
                                  tableData[z] = data[offset++];
                                }
                              } else if (quantizationTableSpec >> 4 === 1) {
                                for (j = 0; j < 64; j++) {
                                  z = dctZigZag[j];
                                  tableData[z] = (0, _core_utils.readUint16)(data, offset);
                                  offset += 2;
                                }
                              } else {
                                throw new JpegError("DQT - invalid table spec");
                              }
                              quantizationTables[quantizationTableSpec & 15] = tableData;
                            }
                            break;
                          case 65472:
                          case 65473:
                          case 65474:
                            if (frame) {
                              throw new JpegError("Only single frame JPEGs supported");
                            }
                            offset += 2;
                            frame = {};
                            frame.extended = fileMarker === 65473;
                            frame.progressive = fileMarker === 65474;
                            frame.precision = data[offset++];
                            var sofScanLines = (0, _core_utils.readUint16)(data, offset);
                            offset += 2;
                            frame.scanLines = dnlScanLines || sofScanLines;
                            frame.samplesPerLine = (0, _core_utils.readUint16)(data, offset);
                            offset += 2;
                            frame.components = [];
                            frame.componentIds = {};
                            var componentsCount = data[offset++];
                            var maxH = 0, maxV = 0;
                            for (i = 0; i < componentsCount; i++) {
                              var componentId = data[offset];
                              var h = data[offset + 1] >> 4;
                              var v = data[offset + 1] & 15;
                              if (maxH < h) {
                                maxH = h;
                              }
                              if (maxV < v) {
                                maxV = v;
                              }
                              var qId = data[offset + 2];
                              l = frame.components.push({
                                h,
                                v,
                                quantizationId: qId,
                                quantizationTable: null
                              });
                              frame.componentIds[componentId] = l - 1;
                              offset += 3;
                            }
                            frame.maxH = maxH;
                            frame.maxV = maxV;
                            prepareComponents(frame);
                            break;
                          case 65476:
                            var huffmanLength = (0, _core_utils.readUint16)(data, offset);
                            offset += 2;
                            for (i = 2; i < huffmanLength; ) {
                              var huffmanTableSpec = data[offset++];
                              var codeLengths = new Uint8Array(16);
                              var codeLengthSum = 0;
                              for (j = 0; j < 16; j++, offset++) {
                                codeLengthSum += codeLengths[j] = data[offset];
                              }
                              var huffmanValues = new Uint8Array(codeLengthSum);
                              for (j = 0; j < codeLengthSum; j++, offset++) {
                                huffmanValues[j] = data[offset];
                              }
                              i += 17 + codeLengthSum;
                              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
                            }
                            break;
                          case 65501:
                            offset += 2;
                            resetInterval = (0, _core_utils.readUint16)(data, offset);
                            offset += 2;
                            break;
                          case 65498:
                            var parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;
                            offset += 2;
                            var selectorsCount = data[offset++], components = [];
                            for (i = 0; i < selectorsCount; i++) {
                              var index = data[offset++];
                              var componentIndex = frame.componentIds[index];
                              var component = frame.components[componentIndex];
                              component.index = index;
                              var tableSpec = data[offset++];
                              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
                              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
                              components.push(component);
                            }
                            var spectralStart = data[offset++], spectralEnd = data[offset++], successiveApproximation = data[offset++];
                            try {
                              var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, parseDNLMarker);
                              offset += processed;
                            } catch (ex) {
                              if (ex instanceof DNLMarkerError) {
                                (0, _util.warn)("".concat(ex.message, " -- attempting to re-parse the JPEG image."));
                                return this.parse(data, {
                                  dnlScanLines: ex.scanLines
                                });
                              } else if (ex instanceof EOIMarkerError) {
                                (0, _util.warn)("".concat(ex.message, " -- ignoring the rest of the image data."));
                                break markerLoop;
                              }
                              throw ex;
                            }
                            break;
                          case 65500:
                            offset += 4;
                            break;
                          case 65535:
                            if (data[offset] !== 255) {
                              offset--;
                            }
                            break;
                          default:
                            var nextFileMarker = findNextFileMarker(data, offset - 2, offset - 3);
                            if (nextFileMarker && nextFileMarker.invalid) {
                              (0, _util.warn)("JpegImage.parse - unexpected data, current marker is: " + nextFileMarker.invalid);
                              offset = nextFileMarker.offset;
                              break;
                            }
                            if (!nextFileMarker || offset >= data.length - 1) {
                              (0, _util.warn)("JpegImage.parse - reached the end of the image data without finding an EOI marker (0xFFD9).");
                              break markerLoop;
                            }
                            throw new JpegError("JpegImage.parse - unknown marker: " + fileMarker.toString(16));
                        }
                        fileMarker = (0, _core_utils.readUint16)(data, offset);
                        offset += 2;
                      }
                    this.width = frame.samplesPerLine;
                    this.height = frame.scanLines;
                    this.jfif = jfif;
                    this.adobe = adobe;
                    this.components = [];
                    for (var _i = 0, ii = frame.components.length; _i < ii; _i++) {
                      var _component = frame.components[_i];
                      var quantizationTable = quantizationTables[_component.quantizationId];
                      if (quantizationTable) {
                        _component.quantizationTable = quantizationTable;
                      }
                      this.components.push({
                        index: _component.index,
                        output: buildComponentData(frame, _component),
                        scaleX: _component.h / frame.maxH,
                        scaleY: _component.v / frame.maxV,
                        blocksPerLine: _component.blocksPerLine,
                        blocksPerColumn: _component.blocksPerColumn
                      });
                    }
                    this.numComponents = this.components.length;
                    return void 0;
                  }
                }, {
                  key: "_getLinearizedBlockData",
                  value: function _getLinearizedBlockData(width, height) {
                    var isSourcePDF = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                    var scaleX = this.width / width, scaleY = this.height / height;
                    var component, componentScaleX, componentScaleY, blocksPerScanline;
                    var x, y, i, j, k;
                    var index;
                    var offset = 0;
                    var output;
                    var numComponents = this.components.length;
                    var dataLength = width * height * numComponents;
                    var data = new Uint8ClampedArray(dataLength);
                    var xScaleBlockOffset = new Uint32Array(width);
                    var mask3LSB = 4294967288;
                    var lastComponentScaleX;
                    for (i = 0; i < numComponents; i++) {
                      component = this.components[i];
                      componentScaleX = component.scaleX * scaleX;
                      componentScaleY = component.scaleY * scaleY;
                      offset = i;
                      output = component.output;
                      blocksPerScanline = component.blocksPerLine + 1 << 3;
                      if (componentScaleX !== lastComponentScaleX) {
                        for (x = 0; x < width; x++) {
                          j = 0 | x * componentScaleX;
                          xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;
                        }
                        lastComponentScaleX = componentScaleX;
                      }
                      for (y = 0; y < height; y++) {
                        j = 0 | y * componentScaleY;
                        index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;
                        for (x = 0; x < width; x++) {
                          data[offset] = output[index + xScaleBlockOffset[x]];
                          offset += numComponents;
                        }
                      }
                    }
                    var transform = this._decodeTransform;
                    if (!isSourcePDF && numComponents === 4 && !transform) {
                      transform = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);
                    }
                    if (transform) {
                      for (i = 0; i < dataLength; ) {
                        for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {
                          data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];
                        }
                      }
                    }
                    return data;
                  }
                }, {
                  key: "_isColorConversionNeeded",
                  get: function get() {
                    if (this.adobe) {
                      return !!this.adobe.transformCode;
                    }
                    if (this.numComponents === 3) {
                      if (this._colorTransform === 0) {
                        return false;
                      } else if (this.components[0].index === 82 && this.components[1].index === 71 && this.components[2].index === 66) {
                        return false;
                      }
                      return true;
                    }
                    if (this._colorTransform === 1) {
                      return true;
                    }
                    return false;
                  }
                }, {
                  key: "_convertYccToRgb",
                  value: function _convertYccToRgb(data) {
                    var Y, Cb, Cr;
                    for (var i = 0, length = data.length; i < length; i += 3) {
                      Y = data[i];
                      Cb = data[i + 1];
                      Cr = data[i + 2];
                      data[i] = Y - 179.456 + 1.402 * Cr;
                      data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;
                      data[i + 2] = Y - 226.816 + 1.772 * Cb;
                    }
                    return data;
                  }
                }, {
                  key: "_convertYcckToRgb",
                  value: function _convertYcckToRgb(data) {
                    var Y, Cb, Cr, k;
                    var offset = 0;
                    for (var i = 0, length = data.length; i < length; i += 4) {
                      Y = data[i];
                      Cb = data[i + 1];
                      Cr = data[i + 2];
                      k = data[i + 3];
                      data[offset++] = -122.67195406894 + Cb * (-660635669420364e-19 * Cb + 437130475926232e-18 * Cr - 54080610064599e-18 * Y + 48449797120281e-17 * k - 0.154362151871126) + Cr * (-957964378445773e-18 * Cr + 817076911346625e-18 * Y - 0.00477271405408747 * k + 1.53380253221734) + Y * (961250184130688e-18 * Y - 0.00266257332283933 * k + 0.48357088451265) + k * (-336197177618394e-18 * k + 0.484791561490776);
                      data[offset++] = 107.268039397724 + Cb * (219927104525741e-19 * Cb - 640992018297945e-18 * Cr + 659397001245577e-18 * Y + 426105652938837e-18 * k - 0.176491792462875) + Cr * (-778269941513683e-18 * Cr + 0.00130872261408275 * Y + 770482631801132e-18 * k - 0.151051492775562) + Y * (0.00126935368114843 * Y - 0.00265090189010898 * k + 0.25802910206845) + k * (-318913117588328e-18 * k - 0.213742400323665);
                      data[offset++] = -20.810012546947 + Cb * (-570115196973677e-18 * Cb - 263409051004589e-19 * Cr + 0.0020741088115012 * Y - 0.00288260236853442 * k + 0.814272968359295) + Cr * (-153496057440975e-19 * Cr - 132689043961446e-18 * Y + 560833691242812e-18 * k - 0.195152027534049) + Y * (0.00174418132927582 * Y - 0.00255243321439347 * k + 0.116935020465145) + k * (-343531996510555e-18 * k + 0.24165260232407);
                    }
                    return data.subarray(0, offset);
                  }
                }, {
                  key: "_convertYcckToCmyk",
                  value: function _convertYcckToCmyk(data) {
                    var Y, Cb, Cr;
                    for (var i = 0, length = data.length; i < length; i += 4) {
                      Y = data[i];
                      Cb = data[i + 1];
                      Cr = data[i + 2];
                      data[i] = 434.456 - Y - 1.402 * Cr;
                      data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;
                      data[i + 2] = 481.816 - Y - 1.772 * Cb;
                    }
                    return data;
                  }
                }, {
                  key: "_convertCmykToRgb",
                  value: function _convertCmykToRgb(data) {
                    var c, m, y, k;
                    var offset = 0;
                    for (var i = 0, length = data.length; i < length; i += 4) {
                      c = data[i];
                      m = data[i + 1];
                      y = data[i + 2];
                      k = data[i + 3];
                      data[offset++] = 255 + c * (-6747147073602441e-20 * c + 8379262121013727e-19 * m + 2894718188643294e-19 * y + 0.003264231057537806 * k - 1.1185611867203937) + m * (26374107616089405e-21 * m - 8626949158638572e-20 * y - 2748769067499491e-19 * k - 0.02155688794978967) + y * (-3878099212869363e-20 * y - 3267808279485286e-19 * k + 0.0686742238595345) - k * (3361971776183937e-19 * k + 0.7430659151342254);
                      data[offset++] = 255 + c * (13596372813588848e-20 * c + 924537132573585e-18 * m + 10567359618683593e-20 * y + 4791864687436512e-19 * k - 0.3109689587515875) + m * (-23545346108370344e-20 * m + 2702845253534714e-19 * y + 0.0020200308977307156 * k - 0.7488052167015494) + y * (6834815998235662e-20 * y + 15168452363460973e-20 * k - 0.09751927774728933) - k * (3189131175883281e-19 * k + 0.7364883807733168);
                      data[offset++] = 255 + c * (13598650411385307e-21 * c + 12423956175490851e-20 * m + 4751985097583589e-19 * y - 36729317476630422e-22 * k - 0.05562186980264034) + m * (16141380598724676e-20 * m + 9692239130725186e-19 * y + 7782692450036253e-19 * k - 0.44015232367526463) + y * (5068882914068769e-22 * y + 0.0017778369011375071 * k - 0.7591454649749609) - k * (3435319965105553e-19 * k + 0.7063770186160144);
                    }
                    return data.subarray(0, offset);
                  }
                }, {
                  key: "getData",
                  value: function getData(_ref3) {
                    var width = _ref3.width, height = _ref3.height, _ref3$forceRGB = _ref3.forceRGB, forceRGB = _ref3$forceRGB === void 0 ? false : _ref3$forceRGB, _ref3$isSourcePDF = _ref3.isSourcePDF, isSourcePDF = _ref3$isSourcePDF === void 0 ? false : _ref3$isSourcePDF;
                    if (this.numComponents > 4) {
                      throw new JpegError("Unsupported color mode");
                    }
                    var data = this._getLinearizedBlockData(width, height, isSourcePDF);
                    if (this.numComponents === 1 && forceRGB) {
                      var dataLength = data.length;
                      var rgbData = new Uint8ClampedArray(dataLength * 3);
                      var offset = 0;
                      for (var i = 0; i < dataLength; i++) {
                        var grayColor = data[i];
                        rgbData[offset++] = grayColor;
                        rgbData[offset++] = grayColor;
                        rgbData[offset++] = grayColor;
                      }
                      return rgbData;
                    } else if (this.numComponents === 3 && this._isColorConversionNeeded) {
                      return this._convertYccToRgb(data);
                    } else if (this.numComponents === 4) {
                      if (this._isColorConversionNeeded) {
                        if (forceRGB) {
                          return this._convertYcckToRgb(data);
                        }
                        return this._convertYcckToCmyk(data);
                      } else if (forceRGB) {
                        return this._convertCmykToRgb(data);
                      }
                    }
                    return data;
                  }
                }]);
                return JpegImage2;
              }();
              exports2.JpegImage = JpegImage;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.JpxStream = void 0;
              var _decode_stream = __w_pdfjs_require__2(159);
              var _jpx = __w_pdfjs_require__2(170);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var JpxStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(JpxStream2, _DecodeStream);
                var _super = _createSuper(JpxStream2);
                function JpxStream2(stream, maybeLength, params) {
                  var _this;
                  _classCallCheck(this, JpxStream2);
                  _this = _super.call(this, maybeLength);
                  _this.stream = stream;
                  _this.dict = stream.dict;
                  _this.maybeLength = maybeLength;
                  _this.params = params;
                  return _this;
                }
                _createClass(JpxStream2, [{
                  key: "bytes",
                  get: function get() {
                    return (0, _util.shadow)(this, "bytes", this.stream.getBytes(this.maybeLength));
                  }
                }, {
                  key: "ensureBuffer",
                  value: function ensureBuffer(requested) {
                  }
                }, {
                  key: "readBlock",
                  value: function readBlock() {
                    if (this.eof) {
                      return;
                    }
                    var jpxImage = new _jpx.JpxImage();
                    jpxImage.parse(this.bytes);
                    var width = jpxImage.width;
                    var height = jpxImage.height;
                    var componentsCount = jpxImage.componentsCount;
                    var tileCount = jpxImage.tiles.length;
                    if (tileCount === 1) {
                      this.buffer = jpxImage.tiles[0].items;
                    } else {
                      var data = new Uint8ClampedArray(width * height * componentsCount);
                      for (var k = 0; k < tileCount; k++) {
                        var tileComponents = jpxImage.tiles[k];
                        var tileWidth = tileComponents.width;
                        var tileHeight = tileComponents.height;
                        var tileLeft = tileComponents.left;
                        var tileTop = tileComponents.top;
                        var src = tileComponents.items;
                        var srcPosition = 0;
                        var dataPosition = (width * tileTop + tileLeft) * componentsCount;
                        var imgRowSize = width * componentsCount;
                        var tileRowSize = tileWidth * componentsCount;
                        for (var j = 0; j < tileHeight; j++) {
                          var rowBytes = src.subarray(srcPosition, srcPosition + tileRowSize);
                          data.set(rowBytes, dataPosition);
                          srcPosition += tileRowSize;
                          dataPosition += imgRowSize;
                        }
                      }
                      this.buffer = data;
                    }
                    this.bufferLength = this.buffer.length;
                    this.eof = true;
                  }
                }]);
                return JpxStream2;
              }(_decode_stream.DecodeStream);
              exports2.JpxStream = JpxStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.JpxImage = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _core_utils = __w_pdfjs_require__2(139);
              var _arithmetic_decoder = __w_pdfjs_require__2(166);
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var JpxError = /* @__PURE__ */ function(_BaseException) {
                _inherits(JpxError2, _BaseException);
                var _super = _createSuper(JpxError2);
                function JpxError2(msg) {
                  _classCallCheck(this, JpxError2);
                  return _super.call(this, "JPX error: ".concat(msg), "JpxError");
                }
                return JpxError2;
              }(_util.BaseException);
              var SubbandsGainLog2 = {
                LL: 0,
                LH: 1,
                HL: 1,
                HH: 2
              };
              var JpxImage = /* @__PURE__ */ function() {
                function JpxImage2() {
                  _classCallCheck(this, JpxImage2);
                  this.failOnCorruptedImage = false;
                }
                _createClass(JpxImage2, [{
                  key: "parse",
                  value: function parse(data) {
                    var head = (0, _core_utils.readUint16)(data, 0);
                    if (head === 65359) {
                      this.parseCodestream(data, 0, data.length);
                      return;
                    }
                    var length = data.length;
                    var position = 0;
                    while (position < length) {
                      var headerSize = 8;
                      var lbox = (0, _core_utils.readUint32)(data, position);
                      var tbox = (0, _core_utils.readUint32)(data, position + 4);
                      position += headerSize;
                      if (lbox === 1) {
                        lbox = (0, _core_utils.readUint32)(data, position) * 4294967296 + (0, _core_utils.readUint32)(data, position + 4);
                        position += 8;
                        headerSize += 8;
                      }
                      if (lbox === 0) {
                        lbox = length - position + headerSize;
                      }
                      if (lbox < headerSize) {
                        throw new JpxError("Invalid box field size");
                      }
                      var dataLength = lbox - headerSize;
                      var jumpDataLength = true;
                      switch (tbox) {
                        case 1785737832:
                          jumpDataLength = false;
                          break;
                        case 1668246642:
                          var method = data[position];
                          if (method === 1) {
                            var colorspace = (0, _core_utils.readUint32)(data, position + 3);
                            switch (colorspace) {
                              case 16:
                              case 17:
                              case 18:
                                break;
                              default:
                                (0, _util.warn)("Unknown colorspace " + colorspace);
                                break;
                            }
                          } else if (method === 2) {
                            (0, _util.info)("ICC profile not supported");
                          }
                          break;
                        case 1785737827:
                          this.parseCodestream(data, position, position + dataLength);
                          break;
                        case 1783636e3:
                          if ((0, _core_utils.readUint32)(data, position) !== 218793738) {
                            (0, _util.warn)("Invalid JP2 signature");
                          }
                          break;
                        case 1783634458:
                        case 1718909296:
                        case 1920099697:
                        case 1919251232:
                        case 1768449138:
                          break;
                        default:
                          var headerType = String.fromCharCode(tbox >> 24 & 255, tbox >> 16 & 255, tbox >> 8 & 255, tbox & 255);
                          (0, _util.warn)("Unsupported header type ".concat(tbox, " (").concat(headerType, ")."));
                          break;
                      }
                      if (jumpDataLength) {
                        position += dataLength;
                      }
                    }
                  }
                }, {
                  key: "parseImageProperties",
                  value: function parseImageProperties(stream) {
                    var newByte = stream.getByte();
                    while (newByte >= 0) {
                      var oldByte = newByte;
                      newByte = stream.getByte();
                      var code = oldByte << 8 | newByte;
                      if (code === 65361) {
                        stream.skip(4);
                        var Xsiz = stream.getInt32() >>> 0;
                        var Ysiz = stream.getInt32() >>> 0;
                        var XOsiz = stream.getInt32() >>> 0;
                        var YOsiz = stream.getInt32() >>> 0;
                        stream.skip(16);
                        var Csiz = stream.getUint16();
                        this.width = Xsiz - XOsiz;
                        this.height = Ysiz - YOsiz;
                        this.componentsCount = Csiz;
                        this.bitsPerComponent = 8;
                        return;
                      }
                    }
                    throw new JpxError("No size marker found in JPX stream");
                  }
                }, {
                  key: "parseCodestream",
                  value: function parseCodestream(data, start, end) {
                    var context = {};
                    var doNotRecover = false;
                    try {
                      var position = start;
                      while (position + 1 < end) {
                        var code = (0, _core_utils.readUint16)(data, position);
                        position += 2;
                        var length = 0, j = void 0, sqcd = void 0, spqcds = void 0, spqcdSize = void 0, scalarExpounded = void 0, tile = void 0;
                        switch (code) {
                          case 65359:
                            context.mainHeader = true;
                            break;
                          case 65497:
                            break;
                          case 65361:
                            length = (0, _core_utils.readUint16)(data, position);
                            var siz = {};
                            siz.Xsiz = (0, _core_utils.readUint32)(data, position + 4);
                            siz.Ysiz = (0, _core_utils.readUint32)(data, position + 8);
                            siz.XOsiz = (0, _core_utils.readUint32)(data, position + 12);
                            siz.YOsiz = (0, _core_utils.readUint32)(data, position + 16);
                            siz.XTsiz = (0, _core_utils.readUint32)(data, position + 20);
                            siz.YTsiz = (0, _core_utils.readUint32)(data, position + 24);
                            siz.XTOsiz = (0, _core_utils.readUint32)(data, position + 28);
                            siz.YTOsiz = (0, _core_utils.readUint32)(data, position + 32);
                            var componentsCount = (0, _core_utils.readUint16)(data, position + 36);
                            siz.Csiz = componentsCount;
                            var components = [];
                            j = position + 38;
                            for (var i = 0; i < componentsCount; i++) {
                              var component = {
                                precision: (data[j] & 127) + 1,
                                isSigned: !!(data[j] & 128),
                                XRsiz: data[j + 1],
                                YRsiz: data[j + 2]
                              };
                              j += 3;
                              calculateComponentDimensions(component, siz);
                              components.push(component);
                            }
                            context.SIZ = siz;
                            context.components = components;
                            calculateTileGrids(context, components);
                            context.QCC = [];
                            context.COC = [];
                            break;
                          case 65372:
                            length = (0, _core_utils.readUint16)(data, position);
                            var qcd = {};
                            j = position + 2;
                            sqcd = data[j++];
                            switch (sqcd & 31) {
                              case 0:
                                spqcdSize = 8;
                                scalarExpounded = true;
                                break;
                              case 1:
                                spqcdSize = 16;
                                scalarExpounded = false;
                                break;
                              case 2:
                                spqcdSize = 16;
                                scalarExpounded = true;
                                break;
                              default:
                                throw new Error("Invalid SQcd value " + sqcd);
                            }
                            qcd.noQuantization = spqcdSize === 8;
                            qcd.scalarExpounded = scalarExpounded;
                            qcd.guardBits = sqcd >> 5;
                            spqcds = [];
                            while (j < length + position) {
                              var spqcd = {};
                              if (spqcdSize === 8) {
                                spqcd.epsilon = data[j++] >> 3;
                                spqcd.mu = 0;
                              } else {
                                spqcd.epsilon = data[j] >> 3;
                                spqcd.mu = (data[j] & 7) << 8 | data[j + 1];
                                j += 2;
                              }
                              spqcds.push(spqcd);
                            }
                            qcd.SPqcds = spqcds;
                            if (context.mainHeader) {
                              context.QCD = qcd;
                            } else {
                              context.currentTile.QCD = qcd;
                              context.currentTile.QCC = [];
                            }
                            break;
                          case 65373:
                            length = (0, _core_utils.readUint16)(data, position);
                            var qcc = {};
                            j = position + 2;
                            var cqcc = void 0;
                            if (context.SIZ.Csiz < 257) {
                              cqcc = data[j++];
                            } else {
                              cqcc = (0, _core_utils.readUint16)(data, j);
                              j += 2;
                            }
                            sqcd = data[j++];
                            switch (sqcd & 31) {
                              case 0:
                                spqcdSize = 8;
                                scalarExpounded = true;
                                break;
                              case 1:
                                spqcdSize = 16;
                                scalarExpounded = false;
                                break;
                              case 2:
                                spqcdSize = 16;
                                scalarExpounded = true;
                                break;
                              default:
                                throw new Error("Invalid SQcd value " + sqcd);
                            }
                            qcc.noQuantization = spqcdSize === 8;
                            qcc.scalarExpounded = scalarExpounded;
                            qcc.guardBits = sqcd >> 5;
                            spqcds = [];
                            while (j < length + position) {
                              var _spqcd = {};
                              if (spqcdSize === 8) {
                                _spqcd.epsilon = data[j++] >> 3;
                                _spqcd.mu = 0;
                              } else {
                                _spqcd.epsilon = data[j] >> 3;
                                _spqcd.mu = (data[j] & 7) << 8 | data[j + 1];
                                j += 2;
                              }
                              spqcds.push(_spqcd);
                            }
                            qcc.SPqcds = spqcds;
                            if (context.mainHeader) {
                              context.QCC[cqcc] = qcc;
                            } else {
                              context.currentTile.QCC[cqcc] = qcc;
                            }
                            break;
                          case 65362:
                            length = (0, _core_utils.readUint16)(data, position);
                            var cod = {};
                            j = position + 2;
                            var scod = data[j++];
                            cod.entropyCoderWithCustomPrecincts = !!(scod & 1);
                            cod.sopMarkerUsed = !!(scod & 2);
                            cod.ephMarkerUsed = !!(scod & 4);
                            cod.progressionOrder = data[j++];
                            cod.layersCount = (0, _core_utils.readUint16)(data, j);
                            j += 2;
                            cod.multipleComponentTransform = data[j++];
                            cod.decompositionLevelsCount = data[j++];
                            cod.xcb = (data[j++] & 15) + 2;
                            cod.ycb = (data[j++] & 15) + 2;
                            var blockStyle = data[j++];
                            cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);
                            cod.resetContextProbabilities = !!(blockStyle & 2);
                            cod.terminationOnEachCodingPass = !!(blockStyle & 4);
                            cod.verticallyStripe = !!(blockStyle & 8);
                            cod.predictableTermination = !!(blockStyle & 16);
                            cod.segmentationSymbolUsed = !!(blockStyle & 32);
                            cod.reversibleTransformation = data[j++];
                            if (cod.entropyCoderWithCustomPrecincts) {
                              var precinctsSizes = [];
                              while (j < length + position) {
                                var precinctsSize = data[j++];
                                precinctsSizes.push({
                                  PPx: precinctsSize & 15,
                                  PPy: precinctsSize >> 4
                                });
                              }
                              cod.precinctsSizes = precinctsSizes;
                            }
                            var unsupported = [];
                            if (cod.selectiveArithmeticCodingBypass) {
                              unsupported.push("selectiveArithmeticCodingBypass");
                            }
                            if (cod.resetContextProbabilities) {
                              unsupported.push("resetContextProbabilities");
                            }
                            if (cod.terminationOnEachCodingPass) {
                              unsupported.push("terminationOnEachCodingPass");
                            }
                            if (cod.verticallyStripe) {
                              unsupported.push("verticallyStripe");
                            }
                            if (cod.predictableTermination) {
                              unsupported.push("predictableTermination");
                            }
                            if (unsupported.length > 0) {
                              doNotRecover = true;
                              (0, _util.warn)("JPX: Unsupported COD options (".concat(unsupported.join(", "), ")."));
                            }
                            if (context.mainHeader) {
                              context.COD = cod;
                            } else {
                              context.currentTile.COD = cod;
                              context.currentTile.COC = [];
                            }
                            break;
                          case 65424:
                            length = (0, _core_utils.readUint16)(data, position);
                            tile = {};
                            tile.index = (0, _core_utils.readUint16)(data, position + 2);
                            tile.length = (0, _core_utils.readUint32)(data, position + 4);
                            tile.dataEnd = tile.length + position - 2;
                            tile.partIndex = data[position + 8];
                            tile.partsCount = data[position + 9];
                            context.mainHeader = false;
                            if (tile.partIndex === 0) {
                              tile.COD = context.COD;
                              tile.COC = context.COC.slice(0);
                              tile.QCD = context.QCD;
                              tile.QCC = context.QCC.slice(0);
                            }
                            context.currentTile = tile;
                            break;
                          case 65427:
                            tile = context.currentTile;
                            if (tile.partIndex === 0) {
                              initializeTile(context, tile.index);
                              buildPackets(context);
                            }
                            length = tile.dataEnd - position;
                            parseTilePackets(context, data, position, length);
                            break;
                          case 65363:
                            (0, _util.warn)("JPX: Codestream code 0xFF53 (COC) is not implemented.");
                          case 65365:
                          case 65367:
                          case 65368:
                          case 65380:
                            length = (0, _core_utils.readUint16)(data, position);
                            break;
                          default:
                            throw new Error("Unknown codestream code: " + code.toString(16));
                        }
                        position += length;
                      }
                    } catch (e) {
                      if (doNotRecover || this.failOnCorruptedImage) {
                        throw new JpxError(e.message);
                      } else {
                        (0, _util.warn)('JPX: Trying to recover from: "'.concat(e.message, '".'));
                      }
                    }
                    this.tiles = transformComponents(context);
                    this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;
                    this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;
                    this.componentsCount = context.SIZ.Csiz;
                  }
                }]);
                return JpxImage2;
              }();
              exports2.JpxImage = JpxImage;
              function calculateComponentDimensions(component, siz) {
                component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);
                component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);
                component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);
                component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);
                component.width = component.x1 - component.x0;
                component.height = component.y1 - component.y0;
              }
              function calculateTileGrids(context, components) {
                var siz = context.SIZ;
                var tiles = [];
                var tile;
                var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);
                var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);
                for (var q = 0; q < numYtiles; q++) {
                  for (var p = 0; p < numXtiles; p++) {
                    tile = {};
                    tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);
                    tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);
                    tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);
                    tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);
                    tile.width = tile.tx1 - tile.tx0;
                    tile.height = tile.ty1 - tile.ty0;
                    tile.components = [];
                    tiles.push(tile);
                  }
                }
                context.tiles = tiles;
                var componentsCount = siz.Csiz;
                for (var i = 0, ii = componentsCount; i < ii; i++) {
                  var component = components[i];
                  for (var j = 0, jj = tiles.length; j < jj; j++) {
                    var tileComponent = {};
                    tile = tiles[j];
                    tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);
                    tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);
                    tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);
                    tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);
                    tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;
                    tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;
                    tile.components[i] = tileComponent;
                  }
                }
              }
              function getBlocksDimensions(context, component, r) {
                var codOrCoc = component.codingStyleParameters;
                var result = {};
                if (!codOrCoc.entropyCoderWithCustomPrecincts) {
                  result.PPx = 15;
                  result.PPy = 15;
                } else {
                  result.PPx = codOrCoc.precinctsSizes[r].PPx;
                  result.PPy = codOrCoc.precinctsSizes[r].PPy;
                }
                result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);
                result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);
                return result;
              }
              function buildPrecincts(context, resolution, dimensions) {
                var precinctWidth = 1 << dimensions.PPx;
                var precinctHeight = 1 << dimensions.PPy;
                var isZeroRes = resolution.resLevel === 0;
                var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);
                var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);
                var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;
                var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;
                var numprecincts = numprecinctswide * numprecinctshigh;
                resolution.precinctParameters = {
                  precinctWidth,
                  precinctHeight,
                  numprecinctswide,
                  numprecinctshigh,
                  numprecincts,
                  precinctWidthInSubband,
                  precinctHeightInSubband
                };
              }
              function buildCodeblocks(context, subband, dimensions) {
                var xcb_ = dimensions.xcb_;
                var ycb_ = dimensions.ycb_;
                var codeblockWidth = 1 << xcb_;
                var codeblockHeight = 1 << ycb_;
                var cbx0 = subband.tbx0 >> xcb_;
                var cby0 = subband.tby0 >> ycb_;
                var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;
                var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;
                var precinctParameters = subband.resolution.precinctParameters;
                var codeblocks = [];
                var precincts = [];
                var i, j, codeblock, precinctNumber;
                for (j = cby0; j < cby1; j++) {
                  for (i = cbx0; i < cbx1; i++) {
                    codeblock = {
                      cbx: i,
                      cby: j,
                      tbx0: codeblockWidth * i,
                      tby0: codeblockHeight * j,
                      tbx1: codeblockWidth * (i + 1),
                      tby1: codeblockHeight * (j + 1)
                    };
                    codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);
                    codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);
                    codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);
                    codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);
                    var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);
                    var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);
                    precinctNumber = pi + pj * precinctParameters.numprecinctswide;
                    codeblock.precinctNumber = precinctNumber;
                    codeblock.subbandType = subband.type;
                    codeblock.Lblock = 3;
                    if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {
                      continue;
                    }
                    codeblocks.push(codeblock);
                    var precinct = precincts[precinctNumber];
                    if (precinct !== void 0) {
                      if (i < precinct.cbxMin) {
                        precinct.cbxMin = i;
                      } else if (i > precinct.cbxMax) {
                        precinct.cbxMax = i;
                      }
                      if (j < precinct.cbyMin) {
                        precinct.cbxMin = j;
                      } else if (j > precinct.cbyMax) {
                        precinct.cbyMax = j;
                      }
                    } else {
                      precincts[precinctNumber] = precinct = {
                        cbxMin: i,
                        cbyMin: j,
                        cbxMax: i,
                        cbyMax: j
                      };
                    }
                    codeblock.precinct = precinct;
                  }
                }
                subband.codeblockParameters = {
                  codeblockWidth: xcb_,
                  codeblockHeight: ycb_,
                  numcodeblockwide: cbx1 - cbx0 + 1,
                  numcodeblockhigh: cby1 - cby0 + 1
                };
                subband.codeblocks = codeblocks;
                subband.precincts = precincts;
              }
              function createPacket(resolution, precinctNumber, layerNumber) {
                var precinctCodeblocks = [];
                var subbands = resolution.subbands;
                for (var i = 0, ii = subbands.length; i < ii; i++) {
                  var subband = subbands[i];
                  var codeblocks = subband.codeblocks;
                  for (var j = 0, jj = codeblocks.length; j < jj; j++) {
                    var codeblock = codeblocks[j];
                    if (codeblock.precinctNumber !== precinctNumber) {
                      continue;
                    }
                    precinctCodeblocks.push(codeblock);
                  }
                }
                return {
                  layerNumber,
                  codeblocks: precinctCodeblocks
                };
              }
              function LayerResolutionComponentPositionIterator(context) {
                var siz = context.SIZ;
                var tileIndex = context.currentTile.index;
                var tile = context.tiles[tileIndex];
                var layersCount = tile.codingStyleDefaultParameters.layersCount;
                var componentsCount = siz.Csiz;
                var maxDecompositionLevelsCount = 0;
                for (var q = 0; q < componentsCount; q++) {
                  maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
                }
                var l = 0, r = 0, i = 0, k = 0;
                this.nextPacket = function JpxImage_nextPacket() {
                  for (; l < layersCount; l++) {
                    for (; r <= maxDecompositionLevelsCount; r++) {
                      for (; i < componentsCount; i++) {
                        var component = tile.components[i];
                        if (r > component.codingStyleParameters.decompositionLevelsCount) {
                          continue;
                        }
                        var resolution = component.resolutions[r];
                        var numprecincts = resolution.precinctParameters.numprecincts;
                        for (; k < numprecincts; ) {
                          var packet = createPacket(resolution, k, l);
                          k++;
                          return packet;
                        }
                        k = 0;
                      }
                      i = 0;
                    }
                    r = 0;
                  }
                  throw new JpxError("Out of packets");
                };
              }
              function ResolutionLayerComponentPositionIterator(context) {
                var siz = context.SIZ;
                var tileIndex = context.currentTile.index;
                var tile = context.tiles[tileIndex];
                var layersCount = tile.codingStyleDefaultParameters.layersCount;
                var componentsCount = siz.Csiz;
                var maxDecompositionLevelsCount = 0;
                for (var q = 0; q < componentsCount; q++) {
                  maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
                }
                var r = 0, l = 0, i = 0, k = 0;
                this.nextPacket = function JpxImage_nextPacket() {
                  for (; r <= maxDecompositionLevelsCount; r++) {
                    for (; l < layersCount; l++) {
                      for (; i < componentsCount; i++) {
                        var component = tile.components[i];
                        if (r > component.codingStyleParameters.decompositionLevelsCount) {
                          continue;
                        }
                        var resolution = component.resolutions[r];
                        var numprecincts = resolution.precinctParameters.numprecincts;
                        for (; k < numprecincts; ) {
                          var packet = createPacket(resolution, k, l);
                          k++;
                          return packet;
                        }
                        k = 0;
                      }
                      i = 0;
                    }
                    l = 0;
                  }
                  throw new JpxError("Out of packets");
                };
              }
              function ResolutionPositionComponentLayerIterator(context) {
                var siz = context.SIZ;
                var tileIndex = context.currentTile.index;
                var tile = context.tiles[tileIndex];
                var layersCount = tile.codingStyleDefaultParameters.layersCount;
                var componentsCount = siz.Csiz;
                var l, r, c, p;
                var maxDecompositionLevelsCount = 0;
                for (c = 0; c < componentsCount; c++) {
                  var component = tile.components[c];
                  maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);
                }
                var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);
                for (r = 0; r <= maxDecompositionLevelsCount; ++r) {
                  var maxNumPrecincts = 0;
                  for (c = 0; c < componentsCount; ++c) {
                    var resolutions = tile.components[c].resolutions;
                    if (r < resolutions.length) {
                      maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);
                    }
                  }
                  maxNumPrecinctsInLevel[r] = maxNumPrecincts;
                }
                l = 0;
                r = 0;
                c = 0;
                p = 0;
                this.nextPacket = function JpxImage_nextPacket() {
                  for (; r <= maxDecompositionLevelsCount; r++) {
                    for (; p < maxNumPrecinctsInLevel[r]; p++) {
                      for (; c < componentsCount; c++) {
                        var _component = tile.components[c];
                        if (r > _component.codingStyleParameters.decompositionLevelsCount) {
                          continue;
                        }
                        var resolution = _component.resolutions[r];
                        var numprecincts = resolution.precinctParameters.numprecincts;
                        if (p >= numprecincts) {
                          continue;
                        }
                        for (; l < layersCount; ) {
                          var packet = createPacket(resolution, p, l);
                          l++;
                          return packet;
                        }
                        l = 0;
                      }
                      c = 0;
                    }
                    p = 0;
                  }
                  throw new JpxError("Out of packets");
                };
              }
              function PositionComponentResolutionLayerIterator(context) {
                var siz = context.SIZ;
                var tileIndex = context.currentTile.index;
                var tile = context.tiles[tileIndex];
                var layersCount = tile.codingStyleDefaultParameters.layersCount;
                var componentsCount = siz.Csiz;
                var precinctsSizes = getPrecinctSizesInImageScale(tile);
                var precinctsIterationSizes = precinctsSizes;
                var l = 0, r = 0, c = 0, px = 0, py = 0;
                this.nextPacket = function JpxImage_nextPacket() {
                  for (; py < precinctsIterationSizes.maxNumHigh; py++) {
                    for (; px < precinctsIterationSizes.maxNumWide; px++) {
                      for (; c < componentsCount; c++) {
                        var component = tile.components[c];
                        var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                        for (; r <= decompositionLevelsCount; r++) {
                          var resolution = component.resolutions[r];
                          var sizeInImageScale = precinctsSizes.components[c].resolutions[r];
                          var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
                          if (k === null) {
                            continue;
                          }
                          for (; l < layersCount; ) {
                            var packet = createPacket(resolution, k, l);
                            l++;
                            return packet;
                          }
                          l = 0;
                        }
                        r = 0;
                      }
                      c = 0;
                    }
                    px = 0;
                  }
                  throw new JpxError("Out of packets");
                };
              }
              function ComponentPositionResolutionLayerIterator(context) {
                var siz = context.SIZ;
                var tileIndex = context.currentTile.index;
                var tile = context.tiles[tileIndex];
                var layersCount = tile.codingStyleDefaultParameters.layersCount;
                var componentsCount = siz.Csiz;
                var precinctsSizes = getPrecinctSizesInImageScale(tile);
                var l = 0, r = 0, c = 0, px = 0, py = 0;
                this.nextPacket = function JpxImage_nextPacket() {
                  for (; c < componentsCount; ++c) {
                    var component = tile.components[c];
                    var precinctsIterationSizes = precinctsSizes.components[c];
                    var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                    for (; py < precinctsIterationSizes.maxNumHigh; py++) {
                      for (; px < precinctsIterationSizes.maxNumWide; px++) {
                        for (; r <= decompositionLevelsCount; r++) {
                          var resolution = component.resolutions[r];
                          var sizeInImageScale = precinctsIterationSizes.resolutions[r];
                          var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
                          if (k === null) {
                            continue;
                          }
                          for (; l < layersCount; ) {
                            var packet = createPacket(resolution, k, l);
                            l++;
                            return packet;
                          }
                          l = 0;
                        }
                        r = 0;
                      }
                      px = 0;
                    }
                    py = 0;
                  }
                  throw new JpxError("Out of packets");
                };
              }
              function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {
                var posX = pxIndex * precinctIterationSizes.minWidth;
                var posY = pyIndex * precinctIterationSizes.minHeight;
                if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {
                  return null;
                }
                var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;
                return posX / sizeInImageScale.height + startPrecinctRowIndex;
              }
              function getPrecinctSizesInImageScale(tile) {
                var componentsCount = tile.components.length;
                var minWidth = Number.MAX_VALUE;
                var minHeight = Number.MAX_VALUE;
                var maxNumWide = 0;
                var maxNumHigh = 0;
                var sizePerComponent = new Array(componentsCount);
                for (var c = 0; c < componentsCount; c++) {
                  var component = tile.components[c];
                  var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                  var sizePerResolution = new Array(decompositionLevelsCount + 1);
                  var minWidthCurrentComponent = Number.MAX_VALUE;
                  var minHeightCurrentComponent = Number.MAX_VALUE;
                  var maxNumWideCurrentComponent = 0;
                  var maxNumHighCurrentComponent = 0;
                  var scale = 1;
                  for (var r = decompositionLevelsCount; r >= 0; --r) {
                    var resolution = component.resolutions[r];
                    var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;
                    var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;
                    minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);
                    minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);
                    maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);
                    maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);
                    sizePerResolution[r] = {
                      width: widthCurrentResolution,
                      height: heightCurrentResolution
                    };
                    scale <<= 1;
                  }
                  minWidth = Math.min(minWidth, minWidthCurrentComponent);
                  minHeight = Math.min(minHeight, minHeightCurrentComponent);
                  maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);
                  maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);
                  sizePerComponent[c] = {
                    resolutions: sizePerResolution,
                    minWidth: minWidthCurrentComponent,
                    minHeight: minHeightCurrentComponent,
                    maxNumWide: maxNumWideCurrentComponent,
                    maxNumHigh: maxNumHighCurrentComponent
                  };
                }
                return {
                  components: sizePerComponent,
                  minWidth,
                  minHeight,
                  maxNumWide,
                  maxNumHigh
                };
              }
              function buildPackets(context) {
                var siz = context.SIZ;
                var tileIndex = context.currentTile.index;
                var tile = context.tiles[tileIndex];
                var componentsCount = siz.Csiz;
                for (var c = 0; c < componentsCount; c++) {
                  var component = tile.components[c];
                  var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                  var resolutions = [];
                  var subbands = [];
                  for (var r = 0; r <= decompositionLevelsCount; r++) {
                    var blocksDimensions = getBlocksDimensions(context, component, r);
                    var resolution = {};
                    var scale = 1 << decompositionLevelsCount - r;
                    resolution.trx0 = Math.ceil(component.tcx0 / scale);
                    resolution.try0 = Math.ceil(component.tcy0 / scale);
                    resolution.trx1 = Math.ceil(component.tcx1 / scale);
                    resolution.try1 = Math.ceil(component.tcy1 / scale);
                    resolution.resLevel = r;
                    buildPrecincts(context, resolution, blocksDimensions);
                    resolutions.push(resolution);
                    var subband = void 0;
                    if (r === 0) {
                      subband = {};
                      subband.type = "LL";
                      subband.tbx0 = Math.ceil(component.tcx0 / scale);
                      subband.tby0 = Math.ceil(component.tcy0 / scale);
                      subband.tbx1 = Math.ceil(component.tcx1 / scale);
                      subband.tby1 = Math.ceil(component.tcy1 / scale);
                      subband.resolution = resolution;
                      buildCodeblocks(context, subband, blocksDimensions);
                      subbands.push(subband);
                      resolution.subbands = [subband];
                    } else {
                      var bscale = 1 << decompositionLevelsCount - r + 1;
                      var resolutionSubbands = [];
                      subband = {};
                      subband.type = "HL";
                      subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
                      subband.tby0 = Math.ceil(component.tcy0 / bscale);
                      subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
                      subband.tby1 = Math.ceil(component.tcy1 / bscale);
                      subband.resolution = resolution;
                      buildCodeblocks(context, subband, blocksDimensions);
                      subbands.push(subband);
                      resolutionSubbands.push(subband);
                      subband = {};
                      subband.type = "LH";
                      subband.tbx0 = Math.ceil(component.tcx0 / bscale);
                      subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
                      subband.tbx1 = Math.ceil(component.tcx1 / bscale);
                      subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
                      subband.resolution = resolution;
                      buildCodeblocks(context, subband, blocksDimensions);
                      subbands.push(subband);
                      resolutionSubbands.push(subband);
                      subband = {};
                      subband.type = "HH";
                      subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
                      subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
                      subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
                      subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
                      subband.resolution = resolution;
                      buildCodeblocks(context, subband, blocksDimensions);
                      subbands.push(subband);
                      resolutionSubbands.push(subband);
                      resolution.subbands = resolutionSubbands;
                    }
                  }
                  component.resolutions = resolutions;
                  component.subbands = subbands;
                }
                var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;
                switch (progressionOrder) {
                  case 0:
                    tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);
                    break;
                  case 1:
                    tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);
                    break;
                  case 2:
                    tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);
                    break;
                  case 3:
                    tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);
                    break;
                  case 4:
                    tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);
                    break;
                  default:
                    throw new JpxError("Unsupported progression order ".concat(progressionOrder));
                }
              }
              function parseTilePackets(context, data, offset, dataLength) {
                var position = 0;
                var buffer, bufferSize = 0, skipNextBit = false;
                function readBits(count) {
                  while (bufferSize < count) {
                    var b = data[offset + position];
                    position++;
                    if (skipNextBit) {
                      buffer = buffer << 7 | b;
                      bufferSize += 7;
                      skipNextBit = false;
                    } else {
                      buffer = buffer << 8 | b;
                      bufferSize += 8;
                    }
                    if (b === 255) {
                      skipNextBit = true;
                    }
                  }
                  bufferSize -= count;
                  return buffer >>> bufferSize & (1 << count) - 1;
                }
                function skipMarkerIfEqual(value) {
                  if (data[offset + position - 1] === 255 && data[offset + position] === value) {
                    skipBytes(1);
                    return true;
                  } else if (data[offset + position] === 255 && data[offset + position + 1] === value) {
                    skipBytes(2);
                    return true;
                  }
                  return false;
                }
                function skipBytes(count) {
                  position += count;
                }
                function alignToByte() {
                  bufferSize = 0;
                  if (skipNextBit) {
                    position++;
                    skipNextBit = false;
                  }
                }
                function readCodingpasses() {
                  if (readBits(1) === 0) {
                    return 1;
                  }
                  if (readBits(1) === 0) {
                    return 2;
                  }
                  var value = readBits(2);
                  if (value < 3) {
                    return value + 3;
                  }
                  value = readBits(5);
                  if (value < 31) {
                    return value + 6;
                  }
                  value = readBits(7);
                  return value + 37;
                }
                var tileIndex = context.currentTile.index;
                var tile = context.tiles[tileIndex];
                var sopMarkerUsed = context.COD.sopMarkerUsed;
                var ephMarkerUsed = context.COD.ephMarkerUsed;
                var packetsIterator = tile.packetsIterator;
                while (position < dataLength) {
                  alignToByte();
                  if (sopMarkerUsed && skipMarkerIfEqual(145)) {
                    skipBytes(4);
                  }
                  var packet = packetsIterator.nextPacket();
                  if (!readBits(1)) {
                    continue;
                  }
                  var layerNumber = packet.layerNumber, queue = [];
                  var codeblock = void 0;
                  for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {
                    codeblock = packet.codeblocks[i];
                    var precinct = codeblock.precinct;
                    var codeblockColumn = codeblock.cbx - precinct.cbxMin;
                    var codeblockRow = codeblock.cby - precinct.cbyMin;
                    var codeblockIncluded = false;
                    var firstTimeInclusion = false;
                    var valueReady = void 0, zeroBitPlanesTree = void 0;
                    if (codeblock.included !== void 0) {
                      codeblockIncluded = !!readBits(1);
                    } else {
                      precinct = codeblock.precinct;
                      var inclusionTree = void 0;
                      if (precinct.inclusionTree !== void 0) {
                        inclusionTree = precinct.inclusionTree;
                      } else {
                        var width = precinct.cbxMax - precinct.cbxMin + 1;
                        var height = precinct.cbyMax - precinct.cbyMin + 1;
                        inclusionTree = new InclusionTree(width, height, layerNumber);
                        zeroBitPlanesTree = new TagTree(width, height);
                        precinct.inclusionTree = inclusionTree;
                        precinct.zeroBitPlanesTree = zeroBitPlanesTree;
                        for (var l = 0; l < layerNumber; l++) {
                          if (readBits(1) !== 0) {
                            throw new JpxError("Invalid tag tree");
                          }
                        }
                      }
                      if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {
                        while (true) {
                          if (readBits(1)) {
                            valueReady = !inclusionTree.nextLevel();
                            if (valueReady) {
                              codeblock.included = true;
                              codeblockIncluded = firstTimeInclusion = true;
                              break;
                            }
                          } else {
                            inclusionTree.incrementValue(layerNumber);
                            break;
                          }
                        }
                      }
                    }
                    if (!codeblockIncluded) {
                      continue;
                    }
                    if (firstTimeInclusion) {
                      zeroBitPlanesTree = precinct.zeroBitPlanesTree;
                      zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);
                      while (true) {
                        if (readBits(1)) {
                          valueReady = !zeroBitPlanesTree.nextLevel();
                          if (valueReady) {
                            break;
                          }
                        } else {
                          zeroBitPlanesTree.incrementValue();
                        }
                      }
                      codeblock.zeroBitPlanes = zeroBitPlanesTree.value;
                    }
                    var codingpasses = readCodingpasses();
                    while (readBits(1)) {
                      codeblock.Lblock++;
                    }
                    var codingpassesLog2 = (0, _core_utils.log2)(codingpasses);
                    var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;
                    var codedDataLength = readBits(bits);
                    queue.push({
                      codeblock,
                      codingpasses,
                      dataLength: codedDataLength
                    });
                  }
                  alignToByte();
                  if (ephMarkerUsed) {
                    skipMarkerIfEqual(146);
                  }
                  while (queue.length > 0) {
                    var packetItem = queue.shift();
                    codeblock = packetItem.codeblock;
                    if (codeblock.data === void 0) {
                      codeblock.data = [];
                    }
                    codeblock.data.push({
                      data,
                      start: offset + position,
                      end: offset + position + packetItem.dataLength,
                      codingpasses: packetItem.codingpasses
                    });
                    position += packetItem.dataLength;
                  }
                }
                return position;
              }
              function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed) {
                var x0 = subband.tbx0;
                var y0 = subband.tby0;
                var width = subband.tbx1 - subband.tbx0;
                var codeblocks = subband.codeblocks;
                var right = subband.type.charAt(0) === "H" ? 1 : 0;
                var bottom = subband.type.charAt(1) === "H" ? levelWidth : 0;
                for (var i = 0, ii = codeblocks.length; i < ii; ++i) {
                  var codeblock = codeblocks[i];
                  var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;
                  var blockHeight = codeblock.tby1_ - codeblock.tby0_;
                  if (blockWidth === 0 || blockHeight === 0) {
                    continue;
                  }
                  if (codeblock.data === void 0) {
                    continue;
                  }
                  var bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);
                  var currentCodingpassType = 2;
                  var data = codeblock.data;
                  var totalLength = 0, codingpasses = 0;
                  var j = void 0, jj = void 0, dataItem = void 0;
                  for (j = 0, jj = data.length; j < jj; j++) {
                    dataItem = data[j];
                    totalLength += dataItem.end - dataItem.start;
                    codingpasses += dataItem.codingpasses;
                  }
                  var encodedData = new Uint8Array(totalLength);
                  var position = 0;
                  for (j = 0, jj = data.length; j < jj; j++) {
                    dataItem = data[j];
                    var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);
                    encodedData.set(chunk, position);
                    position += chunk.length;
                  }
                  var decoder = new _arithmetic_decoder.ArithmeticDecoder(encodedData, 0, totalLength);
                  bitModel.setDecoder(decoder);
                  for (j = 0; j < codingpasses; j++) {
                    switch (currentCodingpassType) {
                      case 0:
                        bitModel.runSignificancePropagationPass();
                        break;
                      case 1:
                        bitModel.runMagnitudeRefinementPass();
                        break;
                      case 2:
                        bitModel.runCleanupPass();
                        if (segmentationSymbolUsed) {
                          bitModel.checkSegmentationSymbol();
                        }
                        break;
                    }
                    currentCodingpassType = (currentCodingpassType + 1) % 3;
                  }
                  var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;
                  var sign = bitModel.coefficentsSign;
                  var magnitude = bitModel.coefficentsMagnitude;
                  var bitsDecoded = bitModel.bitsDecoded;
                  var magnitudeCorrection = reversible ? 0 : 0.5;
                  var k = void 0, n = void 0, nb = void 0;
                  position = 0;
                  var interleave = subband.type !== "LL";
                  for (j = 0; j < blockHeight; j++) {
                    var row = offset / width | 0;
                    var levelOffset = 2 * row * (levelWidth - width) + right + bottom;
                    for (k = 0; k < blockWidth; k++) {
                      n = magnitude[position];
                      if (n !== 0) {
                        n = (n + magnitudeCorrection) * delta;
                        if (sign[position] !== 0) {
                          n = -n;
                        }
                        nb = bitsDecoded[position];
                        var pos = interleave ? levelOffset + (offset << 1) : offset;
                        if (reversible && nb >= mb) {
                          coefficients[pos] = n;
                        } else {
                          coefficients[pos] = n * (1 << mb - nb);
                        }
                      }
                      offset++;
                      position++;
                    }
                    offset += width - blockWidth;
                  }
                }
              }
              function transformTile(context, tile, c) {
                var component = tile.components[c];
                var codingStyleParameters = component.codingStyleParameters;
                var quantizationParameters = component.quantizationParameters;
                var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;
                var spqcds = quantizationParameters.SPqcds;
                var scalarExpounded = quantizationParameters.scalarExpounded;
                var guardBits = quantizationParameters.guardBits;
                var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;
                var precision = context.components[c].precision;
                var reversible = codingStyleParameters.reversibleTransformation;
                var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();
                var subbandCoefficients = [];
                var b = 0;
                for (var i = 0; i <= decompositionLevelsCount; i++) {
                  var resolution = component.resolutions[i];
                  var width = resolution.trx1 - resolution.trx0;
                  var height = resolution.try1 - resolution.try0;
                  var coefficients = new Float32Array(width * height);
                  for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {
                    var mu = void 0, epsilon = void 0;
                    if (!scalarExpounded) {
                      mu = spqcds[0].mu;
                      epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);
                    } else {
                      mu = spqcds[b].mu;
                      epsilon = spqcds[b].epsilon;
                      b++;
                    }
                    var subband = resolution.subbands[j];
                    var gainLog2 = SubbandsGainLog2[subband.type];
                    var delta = reversible ? 1 : Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048);
                    var mb = guardBits + epsilon - 1;
                    copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed);
                  }
                  subbandCoefficients.push({
                    width,
                    height,
                    items: coefficients
                  });
                }
                var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);
                return {
                  left: component.tcx0,
                  top: component.tcy0,
                  width: result.width,
                  height: result.height,
                  items: result.items
                };
              }
              function transformComponents(context) {
                var siz = context.SIZ;
                var components = context.components;
                var componentsCount = siz.Csiz;
                var resultImages = [];
                for (var i = 0, ii = context.tiles.length; i < ii; i++) {
                  var tile = context.tiles[i];
                  var transformedTiles = [];
                  for (var c = 0; c < componentsCount; c++) {
                    transformedTiles[c] = transformTile(context, tile, c);
                  }
                  var tile0 = transformedTiles[0];
                  var out = new Uint8ClampedArray(tile0.items.length * componentsCount);
                  var result = {
                    left: tile0.left,
                    top: tile0.top,
                    width: tile0.width,
                    height: tile0.height,
                    items: out
                  };
                  var shift = void 0, offset = void 0;
                  var pos = 0, j = void 0, jj = void 0, y0 = void 0, y1 = void 0, y2 = void 0;
                  if (tile.codingStyleDefaultParameters.multipleComponentTransform) {
                    var fourComponents = componentsCount === 4;
                    var y0items = transformedTiles[0].items;
                    var y1items = transformedTiles[1].items;
                    var y2items = transformedTiles[2].items;
                    var y3items = fourComponents ? transformedTiles[3].items : null;
                    shift = components[0].precision - 8;
                    offset = (128 << shift) + 0.5;
                    var component0 = tile.components[0];
                    var alpha01 = componentsCount - 3;
                    jj = y0items.length;
                    if (!component0.codingStyleParameters.reversibleTransformation) {
                      for (j = 0; j < jj; j++, pos += alpha01) {
                        y0 = y0items[j] + offset;
                        y1 = y1items[j];
                        y2 = y2items[j];
                        out[pos++] = y0 + 1.402 * y2 >> shift;
                        out[pos++] = y0 - 0.34413 * y1 - 0.71414 * y2 >> shift;
                        out[pos++] = y0 + 1.772 * y1 >> shift;
                      }
                    } else {
                      for (j = 0; j < jj; j++, pos += alpha01) {
                        y0 = y0items[j] + offset;
                        y1 = y1items[j];
                        y2 = y2items[j];
                        var g = y0 - (y2 + y1 >> 2);
                        out[pos++] = g + y2 >> shift;
                        out[pos++] = g >> shift;
                        out[pos++] = g + y1 >> shift;
                      }
                    }
                    if (fourComponents) {
                      for (j = 0, pos = 3; j < jj; j++, pos += 4) {
                        out[pos] = y3items[j] + offset >> shift;
                      }
                    }
                  } else {
                    for (var _c = 0; _c < componentsCount; _c++) {
                      var items = transformedTiles[_c].items;
                      shift = components[_c].precision - 8;
                      offset = (128 << shift) + 0.5;
                      for (pos = _c, j = 0, jj = items.length; j < jj; j++) {
                        out[pos] = items[j] + offset >> shift;
                        pos += componentsCount;
                      }
                    }
                  }
                  resultImages.push(result);
                }
                return resultImages;
              }
              function initializeTile(context, tileIndex) {
                var siz = context.SIZ;
                var componentsCount = siz.Csiz;
                var tile = context.tiles[tileIndex];
                for (var c = 0; c < componentsCount; c++) {
                  var component = tile.components[c];
                  var qcdOrQcc = context.currentTile.QCC[c] !== void 0 ? context.currentTile.QCC[c] : context.currentTile.QCD;
                  component.quantizationParameters = qcdOrQcc;
                  var codOrCoc = context.currentTile.COC[c] !== void 0 ? context.currentTile.COC[c] : context.currentTile.COD;
                  component.codingStyleParameters = codOrCoc;
                }
                tile.codingStyleDefaultParameters = context.currentTile.COD;
              }
              var TagTree = /* @__PURE__ */ function() {
                function TagTree2(width, height) {
                  _classCallCheck(this, TagTree2);
                  var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;
                  this.levels = [];
                  for (var i = 0; i < levelsLength; i++) {
                    var level = {
                      width,
                      height,
                      items: []
                    };
                    this.levels.push(level);
                    width = Math.ceil(width / 2);
                    height = Math.ceil(height / 2);
                  }
                }
                _createClass(TagTree2, [{
                  key: "reset",
                  value: function reset(i, j) {
                    var currentLevel = 0, value = 0, level;
                    while (currentLevel < this.levels.length) {
                      level = this.levels[currentLevel];
                      var index = i + j * level.width;
                      if (level.items[index] !== void 0) {
                        value = level.items[index];
                        break;
                      }
                      level.index = index;
                      i >>= 1;
                      j >>= 1;
                      currentLevel++;
                    }
                    currentLevel--;
                    level = this.levels[currentLevel];
                    level.items[level.index] = value;
                    this.currentLevel = currentLevel;
                    delete this.value;
                  }
                }, {
                  key: "incrementValue",
                  value: function incrementValue() {
                    var level = this.levels[this.currentLevel];
                    level.items[level.index]++;
                  }
                }, {
                  key: "nextLevel",
                  value: function nextLevel() {
                    var currentLevel = this.currentLevel;
                    var level = this.levels[currentLevel];
                    var value = level.items[level.index];
                    currentLevel--;
                    if (currentLevel < 0) {
                      this.value = value;
                      return false;
                    }
                    this.currentLevel = currentLevel;
                    level = this.levels[currentLevel];
                    level.items[level.index] = value;
                    return true;
                  }
                }]);
                return TagTree2;
              }();
              var InclusionTree = /* @__PURE__ */ function() {
                function InclusionTree2(width, height, defaultValue) {
                  _classCallCheck(this, InclusionTree2);
                  var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;
                  this.levels = [];
                  for (var i = 0; i < levelsLength; i++) {
                    var items = new Uint8Array(width * height);
                    for (var j = 0, jj = items.length; j < jj; j++) {
                      items[j] = defaultValue;
                    }
                    var level = {
                      width,
                      height,
                      items
                    };
                    this.levels.push(level);
                    width = Math.ceil(width / 2);
                    height = Math.ceil(height / 2);
                  }
                }
                _createClass(InclusionTree2, [{
                  key: "reset",
                  value: function reset(i, j, stopValue) {
                    var currentLevel = 0;
                    while (currentLevel < this.levels.length) {
                      var level = this.levels[currentLevel];
                      var index = i + j * level.width;
                      level.index = index;
                      var value = level.items[index];
                      if (value === 255) {
                        break;
                      }
                      if (value > stopValue) {
                        this.currentLevel = currentLevel;
                        this.propagateValues();
                        return false;
                      }
                      i >>= 1;
                      j >>= 1;
                      currentLevel++;
                    }
                    this.currentLevel = currentLevel - 1;
                    return true;
                  }
                }, {
                  key: "incrementValue",
                  value: function incrementValue(stopValue) {
                    var level = this.levels[this.currentLevel];
                    level.items[level.index] = stopValue + 1;
                    this.propagateValues();
                  }
                }, {
                  key: "propagateValues",
                  value: function propagateValues() {
                    var levelIndex = this.currentLevel;
                    var level = this.levels[levelIndex];
                    var currentValue = level.items[level.index];
                    while (--levelIndex >= 0) {
                      level = this.levels[levelIndex];
                      level.items[level.index] = currentValue;
                    }
                  }
                }, {
                  key: "nextLevel",
                  value: function nextLevel() {
                    var currentLevel = this.currentLevel;
                    var level = this.levels[currentLevel];
                    var value = level.items[level.index];
                    level.items[level.index] = 255;
                    currentLevel--;
                    if (currentLevel < 0) {
                      return false;
                    }
                    this.currentLevel = currentLevel;
                    level = this.levels[currentLevel];
                    level.items[level.index] = value;
                    return true;
                  }
                }]);
                return InclusionTree2;
              }();
              var BitModel = function BitModelClosure() {
                var UNIFORM_CONTEXT = 17;
                var RUNLENGTH_CONTEXT = 18;
                var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);
                var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);
                var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);
                var BitModel2 = /* @__PURE__ */ function() {
                  function BitModel3(width, height, subband, zeroBitPlanes, mb) {
                    _classCallCheck(this, BitModel3);
                    this.width = width;
                    this.height = height;
                    var contextLabelTable;
                    if (subband === "HH") {
                      contextLabelTable = HHContextLabel;
                    } else if (subband === "HL") {
                      contextLabelTable = HLContextLabel;
                    } else {
                      contextLabelTable = LLAndLHContextsLabel;
                    }
                    this.contextLabelTable = contextLabelTable;
                    var coefficientCount = width * height;
                    this.neighborsSignificance = new Uint8Array(coefficientCount);
                    this.coefficentsSign = new Uint8Array(coefficientCount);
                    var coefficentsMagnitude;
                    if (mb > 14) {
                      coefficentsMagnitude = new Uint32Array(coefficientCount);
                    } else if (mb > 6) {
                      coefficentsMagnitude = new Uint16Array(coefficientCount);
                    } else {
                      coefficentsMagnitude = new Uint8Array(coefficientCount);
                    }
                    this.coefficentsMagnitude = coefficentsMagnitude;
                    this.processingFlags = new Uint8Array(coefficientCount);
                    var bitsDecoded = new Uint8Array(coefficientCount);
                    if (zeroBitPlanes !== 0) {
                      for (var i = 0; i < coefficientCount; i++) {
                        bitsDecoded[i] = zeroBitPlanes;
                      }
                    }
                    this.bitsDecoded = bitsDecoded;
                    this.reset();
                  }
                  _createClass(BitModel3, [{
                    key: "setDecoder",
                    value: function setDecoder(decoder) {
                      this.decoder = decoder;
                    }
                  }, {
                    key: "reset",
                    value: function reset() {
                      this.contexts = new Int8Array(19);
                      this.contexts[0] = 4 << 1 | 0;
                      this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;
                      this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;
                    }
                  }, {
                    key: "setNeighborsSignificance",
                    value: function setNeighborsSignificance(row, column, index) {
                      var neighborsSignificance = this.neighborsSignificance;
                      var width = this.width, height = this.height;
                      var left = column > 0;
                      var right = column + 1 < width;
                      var i;
                      if (row > 0) {
                        i = index - width;
                        if (left) {
                          neighborsSignificance[i - 1] += 16;
                        }
                        if (right) {
                          neighborsSignificance[i + 1] += 16;
                        }
                        neighborsSignificance[i] += 4;
                      }
                      if (row + 1 < height) {
                        i = index + width;
                        if (left) {
                          neighborsSignificance[i - 1] += 16;
                        }
                        if (right) {
                          neighborsSignificance[i + 1] += 16;
                        }
                        neighborsSignificance[i] += 4;
                      }
                      if (left) {
                        neighborsSignificance[index - 1] += 1;
                      }
                      if (right) {
                        neighborsSignificance[index + 1] += 1;
                      }
                      neighborsSignificance[index] |= 128;
                    }
                  }, {
                    key: "runSignificancePropagationPass",
                    value: function runSignificancePropagationPass() {
                      var decoder = this.decoder;
                      var width = this.width, height = this.height;
                      var coefficentsMagnitude = this.coefficentsMagnitude;
                      var coefficentsSign = this.coefficentsSign;
                      var neighborsSignificance = this.neighborsSignificance;
                      var processingFlags = this.processingFlags;
                      var contexts = this.contexts;
                      var labels = this.contextLabelTable;
                      var bitsDecoded = this.bitsDecoded;
                      var processedInverseMask = ~1;
                      var processedMask = 1;
                      var firstMagnitudeBitMask = 2;
                      for (var i0 = 0; i0 < height; i0 += 4) {
                        for (var j = 0; j < width; j++) {
                          var index = i0 * width + j;
                          for (var i1 = 0; i1 < 4; i1++, index += width) {
                            var i = i0 + i1;
                            if (i >= height) {
                              break;
                            }
                            processingFlags[index] &= processedInverseMask;
                            if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {
                              continue;
                            }
                            var contextLabel = labels[neighborsSignificance[index]];
                            var decision = decoder.readBit(contexts, contextLabel);
                            if (decision) {
                              var sign = this.decodeSignBit(i, j, index);
                              coefficentsSign[index] = sign;
                              coefficentsMagnitude[index] = 1;
                              this.setNeighborsSignificance(i, j, index);
                              processingFlags[index] |= firstMagnitudeBitMask;
                            }
                            bitsDecoded[index]++;
                            processingFlags[index] |= processedMask;
                          }
                        }
                      }
                    }
                  }, {
                    key: "decodeSignBit",
                    value: function decodeSignBit(row, column, index) {
                      var width = this.width, height = this.height;
                      var coefficentsMagnitude = this.coefficentsMagnitude;
                      var coefficentsSign = this.coefficentsSign;
                      var contribution, sign0, sign1, significance1;
                      var contextLabel, decoded;
                      significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;
                      if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {
                        sign1 = coefficentsSign[index + 1];
                        if (significance1) {
                          sign0 = coefficentsSign[index - 1];
                          contribution = 1 - sign1 - sign0;
                        } else {
                          contribution = 1 - sign1 - sign1;
                        }
                      } else if (significance1) {
                        sign0 = coefficentsSign[index - 1];
                        contribution = 1 - sign0 - sign0;
                      } else {
                        contribution = 0;
                      }
                      var horizontalContribution = 3 * contribution;
                      significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;
                      if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {
                        sign1 = coefficentsSign[index + width];
                        if (significance1) {
                          sign0 = coefficentsSign[index - width];
                          contribution = 1 - sign1 - sign0 + horizontalContribution;
                        } else {
                          contribution = 1 - sign1 - sign1 + horizontalContribution;
                        }
                      } else if (significance1) {
                        sign0 = coefficentsSign[index - width];
                        contribution = 1 - sign0 - sign0 + horizontalContribution;
                      } else {
                        contribution = horizontalContribution;
                      }
                      if (contribution >= 0) {
                        contextLabel = 9 + contribution;
                        decoded = this.decoder.readBit(this.contexts, contextLabel);
                      } else {
                        contextLabel = 9 - contribution;
                        decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;
                      }
                      return decoded;
                    }
                  }, {
                    key: "runMagnitudeRefinementPass",
                    value: function runMagnitudeRefinementPass() {
                      var decoder = this.decoder;
                      var width = this.width, height = this.height;
                      var coefficentsMagnitude = this.coefficentsMagnitude;
                      var neighborsSignificance = this.neighborsSignificance;
                      var contexts = this.contexts;
                      var bitsDecoded = this.bitsDecoded;
                      var processingFlags = this.processingFlags;
                      var processedMask = 1;
                      var firstMagnitudeBitMask = 2;
                      var length = width * height;
                      var width4 = width * 4;
                      for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {
                        indexNext = Math.min(length, index0 + width4);
                        for (var j = 0; j < width; j++) {
                          for (var index = index0 + j; index < indexNext; index += width) {
                            if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
                              continue;
                            }
                            var contextLabel = 16;
                            if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {
                              processingFlags[index] ^= firstMagnitudeBitMask;
                              var significance = neighborsSignificance[index] & 127;
                              contextLabel = significance === 0 ? 15 : 14;
                            }
                            var bit = decoder.readBit(contexts, contextLabel);
                            coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;
                            bitsDecoded[index]++;
                            processingFlags[index] |= processedMask;
                          }
                        }
                      }
                    }
                  }, {
                    key: "runCleanupPass",
                    value: function runCleanupPass() {
                      var decoder = this.decoder;
                      var width = this.width, height = this.height;
                      var neighborsSignificance = this.neighborsSignificance;
                      var coefficentsMagnitude = this.coefficentsMagnitude;
                      var coefficentsSign = this.coefficentsSign;
                      var contexts = this.contexts;
                      var labels = this.contextLabelTable;
                      var bitsDecoded = this.bitsDecoded;
                      var processingFlags = this.processingFlags;
                      var processedMask = 1;
                      var firstMagnitudeBitMask = 2;
                      var oneRowDown = width;
                      var twoRowsDown = width * 2;
                      var threeRowsDown = width * 3;
                      var iNext;
                      for (var i0 = 0; i0 < height; i0 = iNext) {
                        iNext = Math.min(i0 + 4, height);
                        var indexBase = i0 * width;
                        var checkAllEmpty = i0 + 3 < height;
                        for (var j = 0; j < width; j++) {
                          var index0 = indexBase + j;
                          var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;
                          var i1 = 0, index = index0;
                          var i = i0, sign = void 0;
                          if (allEmpty) {
                            var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);
                            if (!hasSignificantCoefficent) {
                              bitsDecoded[index0]++;
                              bitsDecoded[index0 + oneRowDown]++;
                              bitsDecoded[index0 + twoRowsDown]++;
                              bitsDecoded[index0 + threeRowsDown]++;
                              continue;
                            }
                            i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
                            if (i1 !== 0) {
                              i = i0 + i1;
                              index += i1 * width;
                            }
                            sign = this.decodeSignBit(i, j, index);
                            coefficentsSign[index] = sign;
                            coefficentsMagnitude[index] = 1;
                            this.setNeighborsSignificance(i, j, index);
                            processingFlags[index] |= firstMagnitudeBitMask;
                            index = index0;
                            for (var i2 = i0; i2 <= i; i2++, index += width) {
                              bitsDecoded[index]++;
                            }
                            i1++;
                          }
                          for (i = i0 + i1; i < iNext; i++, index += width) {
                            if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
                              continue;
                            }
                            var contextLabel = labels[neighborsSignificance[index]];
                            var decision = decoder.readBit(contexts, contextLabel);
                            if (decision === 1) {
                              sign = this.decodeSignBit(i, j, index);
                              coefficentsSign[index] = sign;
                              coefficentsMagnitude[index] = 1;
                              this.setNeighborsSignificance(i, j, index);
                              processingFlags[index] |= firstMagnitudeBitMask;
                            }
                            bitsDecoded[index]++;
                          }
                        }
                      }
                    }
                  }, {
                    key: "checkSegmentationSymbol",
                    value: function checkSegmentationSymbol() {
                      var decoder = this.decoder;
                      var contexts = this.contexts;
                      var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
                      if (symbol !== 10) {
                        throw new JpxError("Invalid segmentation symbol");
                      }
                    }
                  }]);
                  return BitModel3;
                }();
                return BitModel2;
              }();
              var Transform = /* @__PURE__ */ function() {
                function Transform2() {
                  _classCallCheck(this, Transform2);
                  if (this.constructor === Transform2) {
                    (0, _util.unreachable)("Cannot initialize Transform.");
                  }
                }
                _createClass(Transform2, [{
                  key: "calculate",
                  value: function calculate(subbands, u0, v0) {
                    var ll = subbands[0];
                    for (var i = 1, ii = subbands.length; i < ii; i++) {
                      ll = this.iterate(ll, subbands[i], u0, v0);
                    }
                    return ll;
                  }
                }, {
                  key: "extend",
                  value: function extend(buffer, offset, size) {
                    var i1 = offset - 1, j1 = offset + 1;
                    var i2 = offset + size - 2, j2 = offset + size;
                    buffer[i1--] = buffer[j1++];
                    buffer[j2++] = buffer[i2--];
                    buffer[i1--] = buffer[j1++];
                    buffer[j2++] = buffer[i2--];
                    buffer[i1--] = buffer[j1++];
                    buffer[j2++] = buffer[i2--];
                    buffer[i1] = buffer[j1];
                    buffer[j2] = buffer[i2];
                  }
                }, {
                  key: "filter",
                  value: function filter(x, offset, length) {
                    (0, _util.unreachable)("Abstract method `filter` called");
                  }
                }, {
                  key: "iterate",
                  value: function iterate(ll, hl_lh_hh, u0, v0) {
                    var llWidth = ll.width, llHeight = ll.height;
                    var llItems = ll.items;
                    var width = hl_lh_hh.width;
                    var height = hl_lh_hh.height;
                    var items = hl_lh_hh.items;
                    var i, j, k, l, u, v;
                    for (k = 0, i = 0; i < llHeight; i++) {
                      l = i * 2 * width;
                      for (j = 0; j < llWidth; j++, k++, l += 2) {
                        items[l] = llItems[k];
                      }
                    }
                    llItems = ll.items = null;
                    var bufferPadding = 4;
                    var rowBuffer = new Float32Array(width + 2 * bufferPadding);
                    if (width === 1) {
                      if ((u0 & 1) !== 0) {
                        for (v = 0, k = 0; v < height; v++, k += width) {
                          items[k] *= 0.5;
                        }
                      }
                    } else {
                      for (v = 0, k = 0; v < height; v++, k += width) {
                        rowBuffer.set(items.subarray(k, k + width), bufferPadding);
                        this.extend(rowBuffer, bufferPadding, width);
                        this.filter(rowBuffer, bufferPadding, width);
                        items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);
                      }
                    }
                    var numBuffers = 16;
                    var colBuffers = [];
                    for (i = 0; i < numBuffers; i++) {
                      colBuffers.push(new Float32Array(height + 2 * bufferPadding));
                    }
                    var b, currentBuffer = 0;
                    ll = bufferPadding + height;
                    if (height === 1) {
                      if ((v0 & 1) !== 0) {
                        for (u = 0; u < width; u++) {
                          items[u] *= 0.5;
                        }
                      }
                    } else {
                      for (u = 0; u < width; u++) {
                        if (currentBuffer === 0) {
                          numBuffers = Math.min(width - u, numBuffers);
                          for (k = u, l = bufferPadding; l < ll; k += width, l++) {
                            for (b = 0; b < numBuffers; b++) {
                              colBuffers[b][l] = items[k + b];
                            }
                          }
                          currentBuffer = numBuffers;
                        }
                        currentBuffer--;
                        var buffer = colBuffers[currentBuffer];
                        this.extend(buffer, bufferPadding, height);
                        this.filter(buffer, bufferPadding, height);
                        if (currentBuffer === 0) {
                          k = u - numBuffers + 1;
                          for (l = bufferPadding; l < ll; k += width, l++) {
                            for (b = 0; b < numBuffers; b++) {
                              items[k + b] = colBuffers[b][l];
                            }
                          }
                        }
                      }
                    }
                    return {
                      width,
                      height,
                      items
                    };
                  }
                }]);
                return Transform2;
              }();
              var IrreversibleTransform = /* @__PURE__ */ function(_Transform) {
                _inherits(IrreversibleTransform2, _Transform);
                var _super2 = _createSuper(IrreversibleTransform2);
                function IrreversibleTransform2() {
                  _classCallCheck(this, IrreversibleTransform2);
                  return _super2.apply(this, arguments);
                }
                _createClass(IrreversibleTransform2, [{
                  key: "filter",
                  value: function filter(x, offset, length) {
                    var len = length >> 1;
                    offset |= 0;
                    var j, n, current, next;
                    var alpha = -1.586134342059924;
                    var beta = -0.052980118572961;
                    var gamma = 0.882911075530934;
                    var delta = 0.443506852043971;
                    var K = 1.230174104914001;
                    var K_ = 1 / K;
                    j = offset - 3;
                    for (n = len + 4; n--; j += 2) {
                      x[j] *= K_;
                    }
                    j = offset - 2;
                    current = delta * x[j - 1];
                    for (n = len + 3; n--; j += 2) {
                      next = delta * x[j + 1];
                      x[j] = K * x[j] - current - next;
                      if (n--) {
                        j += 2;
                        current = delta * x[j + 1];
                        x[j] = K * x[j] - current - next;
                      } else {
                        break;
                      }
                    }
                    j = offset - 1;
                    current = gamma * x[j - 1];
                    for (n = len + 2; n--; j += 2) {
                      next = gamma * x[j + 1];
                      x[j] -= current + next;
                      if (n--) {
                        j += 2;
                        current = gamma * x[j + 1];
                        x[j] -= current + next;
                      } else {
                        break;
                      }
                    }
                    j = offset;
                    current = beta * x[j - 1];
                    for (n = len + 1; n--; j += 2) {
                      next = beta * x[j + 1];
                      x[j] -= current + next;
                      if (n--) {
                        j += 2;
                        current = beta * x[j + 1];
                        x[j] -= current + next;
                      } else {
                        break;
                      }
                    }
                    if (len !== 0) {
                      j = offset + 1;
                      current = alpha * x[j - 1];
                      for (n = len; n--; j += 2) {
                        next = alpha * x[j + 1];
                        x[j] -= current + next;
                        if (n--) {
                          j += 2;
                          current = alpha * x[j + 1];
                          x[j] -= current + next;
                        } else {
                          break;
                        }
                      }
                    }
                  }
                }]);
                return IrreversibleTransform2;
              }(Transform);
              var ReversibleTransform = /* @__PURE__ */ function(_Transform2) {
                _inherits(ReversibleTransform2, _Transform2);
                var _super3 = _createSuper(ReversibleTransform2);
                function ReversibleTransform2() {
                  _classCallCheck(this, ReversibleTransform2);
                  return _super3.apply(this, arguments);
                }
                _createClass(ReversibleTransform2, [{
                  key: "filter",
                  value: function filter(x, offset, length) {
                    var len = length >> 1;
                    offset |= 0;
                    var j, n;
                    for (j = offset, n = len + 1; n--; j += 2) {
                      x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;
                    }
                    for (j = offset + 1, n = len; n--; j += 2) {
                      x[j] += x[j - 1] + x[j + 1] >> 1;
                    }
                  }
                }]);
                return ReversibleTransform2;
              }(Transform);
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.LZWStream = void 0;
              var _decode_stream = __w_pdfjs_require__2(159);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var LZWStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(LZWStream2, _DecodeStream);
                var _super = _createSuper(LZWStream2);
                function LZWStream2(str, maybeLength, earlyChange) {
                  var _this;
                  _classCallCheck(this, LZWStream2);
                  _this = _super.call(this, maybeLength);
                  _this.str = str;
                  _this.dict = str.dict;
                  _this.cachedData = 0;
                  _this.bitsCached = 0;
                  var maxLzwDictionarySize = 4096;
                  var lzwState = {
                    earlyChange,
                    codeLength: 9,
                    nextCode: 258,
                    dictionaryValues: new Uint8Array(maxLzwDictionarySize),
                    dictionaryLengths: new Uint16Array(maxLzwDictionarySize),
                    dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),
                    currentSequence: new Uint8Array(maxLzwDictionarySize),
                    currentSequenceLength: 0
                  };
                  for (var i = 0; i < 256; ++i) {
                    lzwState.dictionaryValues[i] = i;
                    lzwState.dictionaryLengths[i] = 1;
                  }
                  _this.lzwState = lzwState;
                  return _this;
                }
                _createClass(LZWStream2, [{
                  key: "readBits",
                  value: function readBits(n) {
                    var bitsCached = this.bitsCached;
                    var cachedData = this.cachedData;
                    while (bitsCached < n) {
                      var c = this.str.getByte();
                      if (c === -1) {
                        this.eof = true;
                        return null;
                      }
                      cachedData = cachedData << 8 | c;
                      bitsCached += 8;
                    }
                    this.bitsCached = bitsCached -= n;
                    this.cachedData = cachedData;
                    this.lastCode = null;
                    return cachedData >>> bitsCached & (1 << n) - 1;
                  }
                }, {
                  key: "readBlock",
                  value: function readBlock() {
                    var blockSize = 512, decodedSizeDelta = blockSize;
                    var estimatedDecodedSize = blockSize * 2;
                    var i, j, q;
                    var lzwState = this.lzwState;
                    if (!lzwState) {
                      return;
                    }
                    var earlyChange = lzwState.earlyChange;
                    var nextCode = lzwState.nextCode;
                    var dictionaryValues = lzwState.dictionaryValues;
                    var dictionaryLengths = lzwState.dictionaryLengths;
                    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;
                    var codeLength = lzwState.codeLength;
                    var prevCode = lzwState.prevCode;
                    var currentSequence = lzwState.currentSequence;
                    var currentSequenceLength = lzwState.currentSequenceLength;
                    var decodedLength = 0;
                    var currentBufferLength = this.bufferLength;
                    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);
                    for (i = 0; i < blockSize; i++) {
                      var code = this.readBits(codeLength);
                      var hasPrev = currentSequenceLength > 0;
                      if (code < 256) {
                        currentSequence[0] = code;
                        currentSequenceLength = 1;
                      } else if (code >= 258) {
                        if (code < nextCode) {
                          currentSequenceLength = dictionaryLengths[code];
                          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {
                            currentSequence[j] = dictionaryValues[q];
                            q = dictionaryPrevCodes[q];
                          }
                        } else {
                          currentSequence[currentSequenceLength++] = currentSequence[0];
                        }
                      } else if (code === 256) {
                        codeLength = 9;
                        nextCode = 258;
                        currentSequenceLength = 0;
                        continue;
                      } else {
                        this.eof = true;
                        delete this.lzwState;
                        break;
                      }
                      if (hasPrev) {
                        dictionaryPrevCodes[nextCode] = prevCode;
                        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;
                        dictionaryValues[nextCode] = currentSequence[0];
                        nextCode++;
                        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;
                      }
                      prevCode = code;
                      decodedLength += currentSequenceLength;
                      if (estimatedDecodedSize < decodedLength) {
                        do {
                          estimatedDecodedSize += decodedSizeDelta;
                        } while (estimatedDecodedSize < decodedLength);
                        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);
                      }
                      for (j = 0; j < currentSequenceLength; j++) {
                        buffer[currentBufferLength++] = currentSequence[j];
                      }
                    }
                    lzwState.nextCode = nextCode;
                    lzwState.codeLength = codeLength;
                    lzwState.prevCode = prevCode;
                    lzwState.currentSequenceLength = currentSequenceLength;
                    this.bufferLength = currentBufferLength;
                  }
                }]);
                return LZWStream2;
              }(_decode_stream.DecodeStream);
              exports2.LZWStream = LZWStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.PredictorStream = void 0;
              var _decode_stream = __w_pdfjs_require__2(159);
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var PredictorStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(PredictorStream2, _DecodeStream);
                var _super = _createSuper(PredictorStream2);
                function PredictorStream2(str, maybeLength, params) {
                  var _this;
                  _classCallCheck(this, PredictorStream2);
                  _this = _super.call(this, maybeLength);
                  if (!(0, _primitives.isDict)(params)) {
                    return _possibleConstructorReturn(_this, str);
                  }
                  var predictor = _this.predictor = params.get("Predictor") || 1;
                  if (predictor <= 1) {
                    return _possibleConstructorReturn(_this, str);
                  }
                  if (predictor !== 2 && (predictor < 10 || predictor > 15)) {
                    throw new _util.FormatError("Unsupported predictor: ".concat(predictor));
                  }
                  if (predictor === 2) {
                    _this.readBlock = _this.readBlockTiff;
                  } else {
                    _this.readBlock = _this.readBlockPng;
                  }
                  _this.str = str;
                  _this.dict = str.dict;
                  var colors = _this.colors = params.get("Colors") || 1;
                  var bits = _this.bits = params.get("BPC", "BitsPerComponent") || 8;
                  var columns = _this.columns = params.get("Columns") || 1;
                  _this.pixBytes = colors * bits + 7 >> 3;
                  _this.rowBytes = columns * colors * bits + 7 >> 3;
                  return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
                }
                _createClass(PredictorStream2, [{
                  key: "readBlockTiff",
                  value: function readBlockTiff() {
                    var rowBytes = this.rowBytes;
                    var bufferLength = this.bufferLength;
                    var buffer = this.ensureBuffer(bufferLength + rowBytes);
                    var bits = this.bits;
                    var colors = this.colors;
                    var rawBytes = this.str.getBytes(rowBytes);
                    this.eof = !rawBytes.length;
                    if (this.eof) {
                      return;
                    }
                    var inbuf = 0, outbuf = 0;
                    var inbits = 0, outbits = 0;
                    var pos = bufferLength;
                    var i;
                    if (bits === 1 && colors === 1) {
                      for (i = 0; i < rowBytes; ++i) {
                        var c = rawBytes[i] ^ inbuf;
                        c ^= c >> 1;
                        c ^= c >> 2;
                        c ^= c >> 4;
                        inbuf = (c & 1) << 7;
                        buffer[pos++] = c;
                      }
                    } else if (bits === 8) {
                      for (i = 0; i < colors; ++i) {
                        buffer[pos++] = rawBytes[i];
                      }
                      for (; i < rowBytes; ++i) {
                        buffer[pos] = buffer[pos - colors] + rawBytes[i];
                        pos++;
                      }
                    } else if (bits === 16) {
                      var bytesPerPixel = colors * 2;
                      for (i = 0; i < bytesPerPixel; ++i) {
                        buffer[pos++] = rawBytes[i];
                      }
                      for (; i < rowBytes; i += 2) {
                        var sum = ((rawBytes[i] & 255) << 8) + (rawBytes[i + 1] & 255) + ((buffer[pos - bytesPerPixel] & 255) << 8) + (buffer[pos - bytesPerPixel + 1] & 255);
                        buffer[pos++] = sum >> 8 & 255;
                        buffer[pos++] = sum & 255;
                      }
                    } else {
                      var compArray = new Uint8Array(colors + 1);
                      var bitMask = (1 << bits) - 1;
                      var j = 0, k = bufferLength;
                      var columns = this.columns;
                      for (i = 0; i < columns; ++i) {
                        for (var kk = 0; kk < colors; ++kk) {
                          if (inbits < bits) {
                            inbuf = inbuf << 8 | rawBytes[j++] & 255;
                            inbits += 8;
                          }
                          compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;
                          inbits -= bits;
                          outbuf = outbuf << bits | compArray[kk];
                          outbits += bits;
                          if (outbits >= 8) {
                            buffer[k++] = outbuf >> outbits - 8 & 255;
                            outbits -= 8;
                          }
                        }
                      }
                      if (outbits > 0) {
                        buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);
                      }
                    }
                    this.bufferLength += rowBytes;
                  }
                }, {
                  key: "readBlockPng",
                  value: function readBlockPng() {
                    var rowBytes = this.rowBytes;
                    var pixBytes = this.pixBytes;
                    var predictor = this.str.getByte();
                    var rawBytes = this.str.getBytes(rowBytes);
                    this.eof = !rawBytes.length;
                    if (this.eof) {
                      return;
                    }
                    var bufferLength = this.bufferLength;
                    var buffer = this.ensureBuffer(bufferLength + rowBytes);
                    var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);
                    if (prevRow.length === 0) {
                      prevRow = new Uint8Array(rowBytes);
                    }
                    var i, j = bufferLength, up, c;
                    switch (predictor) {
                      case 0:
                        for (i = 0; i < rowBytes; ++i) {
                          buffer[j++] = rawBytes[i];
                        }
                        break;
                      case 1:
                        for (i = 0; i < pixBytes; ++i) {
                          buffer[j++] = rawBytes[i];
                        }
                        for (; i < rowBytes; ++i) {
                          buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 255;
                          j++;
                        }
                        break;
                      case 2:
                        for (i = 0; i < rowBytes; ++i) {
                          buffer[j++] = prevRow[i] + rawBytes[i] & 255;
                        }
                        break;
                      case 3:
                        for (i = 0; i < pixBytes; ++i) {
                          buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];
                        }
                        for (; i < rowBytes; ++i) {
                          buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 255;
                          j++;
                        }
                        break;
                      case 4:
                        for (i = 0; i < pixBytes; ++i) {
                          up = prevRow[i];
                          c = rawBytes[i];
                          buffer[j++] = up + c;
                        }
                        for (; i < rowBytes; ++i) {
                          up = prevRow[i];
                          var upLeft = prevRow[i - pixBytes];
                          var left = buffer[j - pixBytes];
                          var p = left + up - upLeft;
                          var pa = p - left;
                          if (pa < 0) {
                            pa = -pa;
                          }
                          var pb = p - up;
                          if (pb < 0) {
                            pb = -pb;
                          }
                          var pc = p - upLeft;
                          if (pc < 0) {
                            pc = -pc;
                          }
                          c = rawBytes[i];
                          if (pa <= pb && pa <= pc) {
                            buffer[j++] = left + c;
                          } else if (pb <= pc) {
                            buffer[j++] = up + c;
                          } else {
                            buffer[j++] = upLeft + c;
                          }
                        }
                        break;
                      default:
                        throw new _util.FormatError("Unsupported predictor: ".concat(predictor));
                    }
                    this.bufferLength += rowBytes;
                  }
                }]);
                return PredictorStream2;
              }(_decode_stream.DecodeStream);
              exports2.PredictorStream = PredictorStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.RunLengthStream = void 0;
              var _decode_stream = __w_pdfjs_require__2(159);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var RunLengthStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(RunLengthStream2, _DecodeStream);
                var _super = _createSuper(RunLengthStream2);
                function RunLengthStream2(str, maybeLength) {
                  var _this;
                  _classCallCheck(this, RunLengthStream2);
                  _this = _super.call(this, maybeLength);
                  _this.str = str;
                  _this.dict = str.dict;
                  return _this;
                }
                _createClass(RunLengthStream2, [{
                  key: "readBlock",
                  value: function readBlock() {
                    var repeatHeader = this.str.getBytes(2);
                    if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {
                      this.eof = true;
                      return;
                    }
                    var buffer;
                    var bufferLength = this.bufferLength;
                    var n = repeatHeader[0];
                    if (n < 128) {
                      buffer = this.ensureBuffer(bufferLength + n + 1);
                      buffer[bufferLength++] = repeatHeader[1];
                      if (n > 0) {
                        var source = this.str.getBytes(n);
                        buffer.set(source, bufferLength);
                        bufferLength += n;
                      }
                    } else {
                      n = 257 - n;
                      var b = repeatHeader[1];
                      buffer = this.ensureBuffer(bufferLength + n + 1);
                      for (var i = 0; i < n; i++) {
                        buffer[bufferLength++] = b;
                      }
                    }
                    this.bufferLength = bufferLength;
                  }
                }]);
                return RunLengthStream2;
              }(_decode_stream.DecodeStream);
              exports2.RunLengthStream = RunLengthStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Font = exports2.ErrorFont = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _cff_parser = __w_pdfjs_require__2(175);
              var _fonts_utils = __w_pdfjs_require__2(148);
              var _glyphlist = __w_pdfjs_require__2(150);
              var _encodings = __w_pdfjs_require__2(149);
              var _standard_fonts = __w_pdfjs_require__2(177);
              var _unicode = __w_pdfjs_require__2(151);
              var _to_unicode_map = __w_pdfjs_require__2(178);
              var _cff_font = __w_pdfjs_require__2(179);
              var _font_renderer = __w_pdfjs_require__2(180);
              var _glyf = __w_pdfjs_require__2(181);
              var _cmap = __w_pdfjs_require__2(156);
              var _opentype_file_builder = __w_pdfjs_require__2(182);
              var _core_utils = __w_pdfjs_require__2(139);
              var _stream = __w_pdfjs_require__2(140);
              var _type1_font = __w_pdfjs_require__2(183);
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var PRIVATE_USE_AREAS = [[57344, 63743], [1048576, 1114109]];
              var PDF_GLYPH_SPACE_UNITS = 1e3;
              var EXPORT_DATA_PROPERTIES = ["ascent", "bbox", "black", "bold", "charProcOperatorList", "composite", "cssFontInfo", "data", "defaultVMetrics", "defaultWidth", "descent", "fallbackName", "fontMatrix", "fontType", "isType3Font", "italic", "loadedName", "mimetype", "missingFile", "name", "remeasure", "subtype", "type", "vertical"];
              var EXPORT_DATA_EXTRA_PROPERTIES = ["cMap", "defaultEncoding", "differences", "isMonospace", "isSerifFont", "isSymbolicFont", "seacMap", "toFontChar", "toUnicode", "vmetrics", "widths"];
              function adjustWidths(properties) {
                if (!properties.fontMatrix) {
                  return;
                }
                if (properties.fontMatrix[0] === _util.FONT_IDENTITY_MATRIX[0]) {
                  return;
                }
                var scale = 1e-3 / properties.fontMatrix[0];
                var glyphsWidths = properties.widths;
                for (var glyph in glyphsWidths) {
                  glyphsWidths[glyph] *= scale;
                }
                properties.defaultWidth *= scale;
              }
              function adjustToUnicode(properties, builtInEncoding) {
                if (properties.isInternalFont) {
                  return;
                }
                if (builtInEncoding === properties.defaultEncoding) {
                  return;
                }
                if (properties.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap) {
                  return;
                }
                var toUnicode = [], glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
                for (var charCode in builtInEncoding) {
                  if (properties.hasIncludedToUnicodeMap) {
                    if (properties.toUnicode.has(charCode)) {
                      continue;
                    }
                  } else if (properties.hasEncoding) {
                    if (properties.differences.length === 0 || properties.differences[charCode] !== void 0) {
                      continue;
                    }
                  }
                  var glyphName = builtInEncoding[charCode];
                  var unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);
                  if (unicode !== -1) {
                    toUnicode[charCode] = String.fromCharCode(unicode);
                  }
                }
                if (toUnicode.length > 0) {
                  properties.toUnicode.amend(toUnicode);
                }
              }
              function amendFallbackToUnicode(properties) {
                if (!properties.fallbackToUnicode) {
                  return;
                }
                if (properties.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap) {
                  return;
                }
                var toUnicode = [];
                for (var charCode in properties.fallbackToUnicode) {
                  if (properties.toUnicode.has(charCode)) {
                    continue;
                  }
                  toUnicode[charCode] = properties.fallbackToUnicode[charCode];
                }
                if (toUnicode.length > 0) {
                  properties.toUnicode.amend(toUnicode);
                }
              }
              var Glyph = /* @__PURE__ */ function() {
                function Glyph2(originalCharCode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {
                  _classCallCheck(this, Glyph2);
                  this.originalCharCode = originalCharCode;
                  this.fontChar = fontChar;
                  this.unicode = unicode;
                  this.accent = accent;
                  this.width = width;
                  this.vmetric = vmetric;
                  this.operatorListId = operatorListId;
                  this.isSpace = isSpace;
                  this.isInFont = isInFont;
                }
                _createClass(Glyph2, [{
                  key: "matchesForCache",
                  value: function matchesForCache(originalCharCode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {
                    return this.originalCharCode === originalCharCode && this.fontChar === fontChar && this.unicode === unicode && this.accent === accent && this.width === width && this.vmetric === vmetric && this.operatorListId === operatorListId && this.isSpace === isSpace && this.isInFont === isInFont;
                  }
                }]);
                return Glyph2;
              }();
              function int16(b0, b1) {
                return (b0 << 8) + b1;
              }
              function writeSignedInt16(bytes, index, value) {
                bytes[index + 1] = value;
                bytes[index] = value >>> 8;
              }
              function signedInt16(b0, b1) {
                var value = (b0 << 8) + b1;
                return value & 1 << 15 ? value - 65536 : value;
              }
              function int32(b0, b1, b2, b3) {
                return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
              }
              function string16(value) {
                return String.fromCharCode(value >> 8 & 255, value & 255);
              }
              function safeString16(value) {
                if (value > 32767) {
                  value = 32767;
                } else if (value < -32768) {
                  value = -32768;
                }
                return String.fromCharCode(value >> 8 & 255, value & 255);
              }
              function isTrueTypeFile(file) {
                var header = file.peekBytes(4);
                return (0, _core_utils.readUint32)(header, 0) === 65536 || (0, _util.bytesToString)(header) === "true";
              }
              function isTrueTypeCollectionFile(file) {
                var header = file.peekBytes(4);
                return (0, _util.bytesToString)(header) === "ttcf";
              }
              function isOpenTypeFile(file) {
                var header = file.peekBytes(4);
                return (0, _util.bytesToString)(header) === "OTTO";
              }
              function isType1File(file) {
                var header = file.peekBytes(2);
                if (header[0] === 37 && header[1] === 33) {
                  return true;
                }
                if (header[0] === 128 && header[1] === 1) {
                  return true;
                }
                return false;
              }
              function isCFFFile(file) {
                var header = file.peekBytes(4);
                if (header[0] >= 1 && header[3] >= 1 && header[3] <= 4) {
                  return true;
                }
                return false;
              }
              function getFontFileType(file, _ref) {
                var type = _ref.type, subtype = _ref.subtype, composite = _ref.composite;
                var fileType, fileSubtype;
                if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {
                  if (composite) {
                    fileType = "CIDFontType2";
                  } else {
                    fileType = "TrueType";
                  }
                } else if (isOpenTypeFile(file)) {
                  if (composite) {
                    fileType = "CIDFontType2";
                  } else {
                    fileType = "OpenType";
                  }
                } else if (isType1File(file)) {
                  if (composite) {
                    fileType = "CIDFontType0";
                  } else {
                    fileType = type === "MMType1" ? "MMType1" : "Type1";
                  }
                } else if (isCFFFile(file)) {
                  if (composite) {
                    fileType = "CIDFontType0";
                    fileSubtype = "CIDFontType0C";
                  } else {
                    fileType = type === "MMType1" ? "MMType1" : "Type1";
                    fileSubtype = "Type1C";
                  }
                } else {
                  (0, _util.warn)("getFontFileType: Unable to detect correct font file Type/Subtype.");
                  fileType = type;
                  fileSubtype = subtype;
                }
                return [fileType, fileSubtype];
              }
              function applyStandardFontGlyphMap(map, glyphMap) {
                for (var charCode in glyphMap) {
                  map[+charCode] = glyphMap[charCode];
                }
              }
              function buildToFontChar(encoding, glyphsUnicodeMap, differences) {
                var toFontChar = [];
                var unicode;
                for (var i = 0, ii = encoding.length; i < ii; i++) {
                  unicode = (0, _unicode.getUnicodeForGlyph)(encoding[i], glyphsUnicodeMap);
                  if (unicode !== -1) {
                    toFontChar[i] = unicode;
                  }
                }
                for (var charCode in differences) {
                  unicode = (0, _unicode.getUnicodeForGlyph)(differences[charCode], glyphsUnicodeMap);
                  if (unicode !== -1) {
                    toFontChar[+charCode] = unicode;
                  }
                }
                return toFontChar;
              }
              function convertCidString(charCode, cid) {
                var shouldThrow = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                switch (cid.length) {
                  case 1:
                    return cid.charCodeAt(0);
                  case 2:
                    return cid.charCodeAt(0) << 8 | cid.charCodeAt(1);
                }
                var msg = "Unsupported CID string (charCode ".concat(charCode, '): "').concat(cid, '".');
                if (shouldThrow) {
                  throw new _util.FormatError(msg);
                }
                (0, _util.warn)(msg);
                return cid;
              }
              function adjustMapping(charCodeToGlyphId, hasGlyph, newGlyphZeroId) {
                var newMap = /* @__PURE__ */ Object.create(null);
                var toFontChar = [];
                var privateUseAreaIndex = 0;
                var nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];
                var privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];
                for (var originalCharCode in charCodeToGlyphId) {
                  originalCharCode |= 0;
                  var glyphId = charCodeToGlyphId[originalCharCode];
                  if (!hasGlyph(glyphId)) {
                    continue;
                  }
                  if (nextAvailableFontCharCode > privateUseOffetEnd) {
                    privateUseAreaIndex++;
                    if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {
                      (0, _util.warn)("Ran out of space in font private use area.");
                      break;
                    }
                    nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];
                    privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];
                  }
                  var fontCharCode = nextAvailableFontCharCode++;
                  if (glyphId === 0) {
                    glyphId = newGlyphZeroId;
                  }
                  newMap[fontCharCode] = glyphId;
                  toFontChar[originalCharCode] = fontCharCode;
                }
                return {
                  toFontChar,
                  charCodeToGlyphId: newMap,
                  nextAvailableFontCharCode
                };
              }
              function getRanges(glyphs, numGlyphs) {
                var codes = [];
                for (var charCode in glyphs) {
                  if (glyphs[charCode] >= numGlyphs) {
                    continue;
                  }
                  codes.push({
                    fontCharCode: charCode | 0,
                    glyphId: glyphs[charCode]
                  });
                }
                if (codes.length === 0) {
                  codes.push({
                    fontCharCode: 0,
                    glyphId: 0
                  });
                }
                codes.sort(function fontGetRangesSort(a, b) {
                  return a.fontCharCode - b.fontCharCode;
                });
                var ranges = [];
                var length = codes.length;
                for (var n = 0; n < length; ) {
                  var start = codes[n].fontCharCode;
                  var codeIndices = [codes[n].glyphId];
                  ++n;
                  var end = start;
                  while (n < length && end + 1 === codes[n].fontCharCode) {
                    codeIndices.push(codes[n].glyphId);
                    ++end;
                    ++n;
                    if (end === 65535) {
                      break;
                    }
                  }
                  ranges.push([start, end, codeIndices]);
                }
                return ranges;
              }
              function createCmapTable(glyphs, numGlyphs) {
                var ranges = getRanges(glyphs, numGlyphs);
                var numTables = ranges[ranges.length - 1][1] > 65535 ? 2 : 1;
                var cmap = "\0\0" + string16(numTables) + "\0\0" + (0, _util.string32)(4 + numTables * 8);
                var i, ii, j, jj;
                for (i = ranges.length - 1; i >= 0; --i) {
                  if (ranges[i][0] <= 65535) {
                    break;
                  }
                }
                var bmpLength = i + 1;
                if (ranges[i][0] < 65535 && ranges[i][1] === 65535) {
                  ranges[i][1] = 65534;
                }
                var trailingRangesCount = ranges[i][1] < 65535 ? 1 : 0;
                var segCount = bmpLength + trailingRangesCount;
                var searchParams = _opentype_file_builder.OpenTypeFileBuilder.getSearchParams(segCount, 2);
                var startCount = "";
                var endCount = "";
                var idDeltas = "";
                var idRangeOffsets = "";
                var glyphsIds = "";
                var bias = 0;
                var range, start, end, codes;
                for (i = 0, ii = bmpLength; i < ii; i++) {
                  range = ranges[i];
                  start = range[0];
                  end = range[1];
                  startCount += string16(start);
                  endCount += string16(end);
                  codes = range[2];
                  var contiguous = true;
                  for (j = 1, jj = codes.length; j < jj; ++j) {
                    if (codes[j] !== codes[j - 1] + 1) {
                      contiguous = false;
                      break;
                    }
                  }
                  if (!contiguous) {
                    var offset = (segCount - i) * 2 + bias * 2;
                    bias += end - start + 1;
                    idDeltas += string16(0);
                    idRangeOffsets += string16(offset);
                    for (j = 0, jj = codes.length; j < jj; ++j) {
                      glyphsIds += string16(codes[j]);
                    }
                  } else {
                    var startCode = codes[0];
                    idDeltas += string16(startCode - start & 65535);
                    idRangeOffsets += string16(0);
                  }
                }
                if (trailingRangesCount > 0) {
                  endCount += "\xFF\xFF";
                  startCount += "\xFF\xFF";
                  idDeltas += "\0";
                  idRangeOffsets += "\0\0";
                }
                var format314 = "\0\0" + string16(2 * segCount) + string16(searchParams.range) + string16(searchParams.entry) + string16(searchParams.rangeShift) + endCount + "\0\0" + startCount + idDeltas + idRangeOffsets + glyphsIds;
                var format31012 = "";
                var header31012 = "";
                if (numTables > 1) {
                  cmap += "\0\0\n" + (0, _util.string32)(4 + numTables * 8 + 4 + format314.length);
                  format31012 = "";
                  for (i = 0, ii = ranges.length; i < ii; i++) {
                    range = ranges[i];
                    start = range[0];
                    codes = range[2];
                    var code = codes[0];
                    for (j = 1, jj = codes.length; j < jj; ++j) {
                      if (codes[j] !== codes[j - 1] + 1) {
                        end = range[0] + j - 1;
                        format31012 += (0, _util.string32)(start) + (0, _util.string32)(end) + (0, _util.string32)(code);
                        start = end + 1;
                        code = codes[j];
                      }
                    }
                    format31012 += (0, _util.string32)(start) + (0, _util.string32)(range[1]) + (0, _util.string32)(code);
                  }
                  header31012 = "\0\f\0\0" + (0, _util.string32)(format31012.length + 16) + "\0\0\0\0" + (0, _util.string32)(format31012.length / 12);
                }
                return cmap + "\0" + string16(format314.length + 4) + format314 + header31012 + format31012;
              }
              function validateOS2Table(os2, file) {
                file.pos = (file.start || 0) + os2.offset;
                var version = file.getUint16();
                file.skip(60);
                var selection = file.getUint16();
                if (version < 4 && selection & 768) {
                  return false;
                }
                var firstChar = file.getUint16();
                var lastChar = file.getUint16();
                if (firstChar > lastChar) {
                  return false;
                }
                file.skip(6);
                var usWinAscent = file.getUint16();
                if (usWinAscent === 0) {
                  return false;
                }
                os2.data[8] = os2.data[9] = 0;
                return true;
              }
              function createOS2Table(properties, charstrings, override) {
                override = override || {
                  unitsPerEm: 0,
                  yMax: 0,
                  yMin: 0,
                  ascent: 0,
                  descent: 0
                };
                var ulUnicodeRange1 = 0;
                var ulUnicodeRange2 = 0;
                var ulUnicodeRange3 = 0;
                var ulUnicodeRange4 = 0;
                var firstCharIndex = null;
                var lastCharIndex = 0;
                if (charstrings) {
                  for (var code in charstrings) {
                    code |= 0;
                    if (firstCharIndex > code || !firstCharIndex) {
                      firstCharIndex = code;
                    }
                    if (lastCharIndex < code) {
                      lastCharIndex = code;
                    }
                    var position = (0, _unicode.getUnicodeRangeFor)(code);
                    if (position < 32) {
                      ulUnicodeRange1 |= 1 << position;
                    } else if (position < 64) {
                      ulUnicodeRange2 |= 1 << position - 32;
                    } else if (position < 96) {
                      ulUnicodeRange3 |= 1 << position - 64;
                    } else if (position < 123) {
                      ulUnicodeRange4 |= 1 << position - 96;
                    } else {
                      throw new _util.FormatError("Unicode ranges Bits > 123 are reserved for internal usage");
                    }
                  }
                  if (lastCharIndex > 65535) {
                    lastCharIndex = 65535;
                  }
                } else {
                  firstCharIndex = 0;
                  lastCharIndex = 255;
                }
                var bbox = properties.bbox || [0, 0, 0, 0];
                var unitsPerEm = override.unitsPerEm || 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];
                var scale = properties.ascentScaled ? 1 : unitsPerEm / PDF_GLYPH_SPACE_UNITS;
                var typoAscent = override.ascent || Math.round(scale * (properties.ascent || bbox[3]));
                var typoDescent = override.descent || Math.round(scale * (properties.descent || bbox[1]));
                if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {
                  typoDescent = -typoDescent;
                }
                var winAscent = override.yMax || typoAscent;
                var winDescent = -override.yMin || -typoDescent;
                return "\0$\xF4\0\0\0\x8A\xBB\0\0\0\x8C\x8A\xBB\0\0\xDF\x001\0\0\0\0" + String.fromCharCode(properties.fixedPitch ? 9 : 0) + "\0\0\0\0\0\0" + (0, _util.string32)(ulUnicodeRange1) + (0, _util.string32)(ulUnicodeRange2) + (0, _util.string32)(ulUnicodeRange3) + (0, _util.string32)(ulUnicodeRange4) + "*21*" + string16(properties.italicAngle ? 1 : 0) + string16(firstCharIndex || properties.firstChar) + string16(lastCharIndex || properties.lastChar) + string16(typoAscent) + string16(typoDescent) + "\0d" + string16(winAscent) + string16(winDescent) + "\0\0\0\0\0\0\0\0" + string16(properties.xHeight) + string16(properties.capHeight) + string16(0) + string16(firstCharIndex || properties.firstChar) + "\0";
              }
              function createPostTable(properties) {
                var angle = Math.floor(properties.italicAngle * Math.pow(2, 16));
                return "\0\0\0" + (0, _util.string32)(angle) + "\0\0\0\0" + (0, _util.string32)(properties.fixedPitch ? 1 : 0) + "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
              }
              function createPostscriptName(name) {
                return name.replace(/[^\x21-\x7E]|[[\](){}<>/%]/g, "").slice(0, 63);
              }
              function createNameTable(name, proto) {
                if (!proto) {
                  proto = [[], []];
                }
                var strings = [proto[0][0] || "Original licence", proto[0][1] || name, proto[0][2] || "Unknown", proto[0][3] || "uniqueID", proto[0][4] || name, proto[0][5] || "Version 0.11", proto[0][6] || createPostscriptName(name), proto[0][7] || "Unknown", proto[0][8] || "Unknown", proto[0][9] || "Unknown"];
                var stringsUnicode = [];
                var i, ii, j, jj, str;
                for (i = 0, ii = strings.length; i < ii; i++) {
                  str = proto[1][i] || strings[i];
                  var strBufUnicode = [];
                  for (j = 0, jj = str.length; j < jj; j++) {
                    strBufUnicode.push(string16(str.charCodeAt(j)));
                  }
                  stringsUnicode.push(strBufUnicode.join(""));
                }
                var names = [strings, stringsUnicode];
                var platforms = ["\0", "\0"];
                var encodings = ["\0\0", "\0"];
                var languages = ["\0\0", "	"];
                var namesRecordCount = strings.length * platforms.length;
                var nameTable = "\0\0" + string16(namesRecordCount) + string16(namesRecordCount * 12 + 6);
                var strOffset = 0;
                for (i = 0, ii = platforms.length; i < ii; i++) {
                  var strs = names[i];
                  for (j = 0, jj = strs.length; j < jj; j++) {
                    str = strs[j];
                    var nameRecord = platforms[i] + encodings[i] + languages[i] + string16(j) + string16(str.length) + string16(strOffset);
                    nameTable += nameRecord;
                    strOffset += str.length;
                  }
                }
                nameTable += strings.join("") + stringsUnicode.join("");
                return nameTable;
              }
              var Font = /* @__PURE__ */ function() {
                function Font2(name, file, properties) {
                  _classCallCheck(this, Font2);
                  this.name = name;
                  this.psName = null;
                  this.mimetype = null;
                  this.disableFontFace = false;
                  this.loadedName = properties.loadedName;
                  this.isType3Font = properties.isType3Font;
                  this.missingFile = false;
                  this.cssFontInfo = properties.cssFontInfo;
                  this._charsCache = /* @__PURE__ */ Object.create(null);
                  this._glyphCache = /* @__PURE__ */ Object.create(null);
                  var isSerifFont = !!(properties.flags & _fonts_utils.FontFlags.Serif);
                  if (!isSerifFont && !properties.isSimulatedFlags) {
                    var baseName = name.replace(/[,_]/g, "-").split("-")[0], serifFonts = (0, _standard_fonts.getSerifFonts)();
                    var _iterator = _createForOfIteratorHelper(baseName.split("+")), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var namePart = _step.value;
                        if (serifFonts[namePart]) {
                          isSerifFont = true;
                          break;
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                  }
                  this.isSerifFont = isSerifFont;
                  this.isSymbolicFont = !!(properties.flags & _fonts_utils.FontFlags.Symbolic);
                  this.isMonospace = !!(properties.flags & _fonts_utils.FontFlags.FixedPitch);
                  var type = properties.type;
                  var subtype = properties.subtype;
                  this.type = type;
                  this.subtype = subtype;
                  var fallbackName = "sans-serif";
                  if (this.isMonospace) {
                    fallbackName = "monospace";
                  } else if (this.isSerifFont) {
                    fallbackName = "serif";
                  }
                  this.fallbackName = fallbackName;
                  this.differences = properties.differences;
                  this.widths = properties.widths;
                  this.defaultWidth = properties.defaultWidth;
                  this.composite = properties.composite;
                  this.cMap = properties.cMap;
                  this.capHeight = properties.capHeight / PDF_GLYPH_SPACE_UNITS;
                  this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;
                  this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;
                  this.lineHeight = this.ascent - this.descent;
                  this.fontMatrix = properties.fontMatrix;
                  this.bbox = properties.bbox;
                  this.defaultEncoding = properties.defaultEncoding;
                  this.toUnicode = properties.toUnicode;
                  this.toFontChar = [];
                  if (properties.type === "Type3") {
                    for (var charCode = 0; charCode < 256; charCode++) {
                      this.toFontChar[charCode] = this.differences[charCode] || properties.defaultEncoding[charCode];
                    }
                    this.fontType = _util.FontType.TYPE3;
                    return;
                  }
                  this.cidEncoding = properties.cidEncoding || "";
                  this.vertical = !!properties.vertical;
                  if (this.vertical) {
                    this.vmetrics = properties.vmetrics;
                    this.defaultVMetrics = properties.defaultVMetrics;
                  }
                  if (!file || file.isEmpty) {
                    if (file) {
                      (0, _util.warn)('Font file is empty in "' + name + '" (' + this.loadedName + ")");
                    }
                    this.fallbackToSystemFont(properties);
                    return;
                  }
                  var _getFontFileType = getFontFileType(file, properties);
                  var _getFontFileType2 = _slicedToArray(_getFontFileType, 2);
                  type = _getFontFileType2[0];
                  subtype = _getFontFileType2[1];
                  if (type !== this.type || subtype !== this.subtype) {
                    (0, _util.info)("Inconsistent font file Type/SubType, expected: " + "".concat(this.type, "/").concat(this.subtype, " but found: ").concat(type, "/").concat(subtype, "."));
                  }
                  var data;
                  try {
                    switch (type) {
                      case "MMType1":
                        (0, _util.info)("MMType1 font (" + name + "), falling back to Type1.");
                      case "Type1":
                      case "CIDFontType0":
                        this.mimetype = "font/opentype";
                        var cff = subtype === "Type1C" || subtype === "CIDFontType0C" ? new _cff_font.CFFFont(file, properties) : new _type1_font.Type1Font(name, file, properties);
                        adjustWidths(properties);
                        data = this.convert(name, cff, properties);
                        break;
                      case "OpenType":
                      case "TrueType":
                      case "CIDFontType2":
                        this.mimetype = "font/opentype";
                        data = this.checkAndRepair(name, file, properties);
                        if (this.isOpenType) {
                          adjustWidths(properties);
                          type = "OpenType";
                        }
                        break;
                      default:
                        throw new _util.FormatError("Font ".concat(type, " is not supported"));
                    }
                  } catch (e) {
                    (0, _util.warn)(e);
                    this.fallbackToSystemFont(properties);
                    return;
                  }
                  amendFallbackToUnicode(properties);
                  this.data = data;
                  this.fontType = (0, _fonts_utils.getFontType)(type, subtype, properties.isStandardFont);
                  this.fontMatrix = properties.fontMatrix;
                  this.widths = properties.widths;
                  this.defaultWidth = properties.defaultWidth;
                  this.toUnicode = properties.toUnicode;
                  this.seacMap = properties.seacMap;
                }
                _createClass(Font2, [{
                  key: "renderer",
                  get: function get() {
                    var renderer = _font_renderer.FontRendererFactory.create(this, _fonts_utils.SEAC_ANALYSIS_ENABLED);
                    return (0, _util.shadow)(this, "renderer", renderer);
                  }
                }, {
                  key: "exportData",
                  value: function exportData() {
                    var extraProperties = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    var exportDataProperties = extraProperties ? [].concat(EXPORT_DATA_PROPERTIES, EXPORT_DATA_EXTRA_PROPERTIES) : EXPORT_DATA_PROPERTIES;
                    var data = /* @__PURE__ */ Object.create(null);
                    var property, value;
                    var _iterator2 = _createForOfIteratorHelper(exportDataProperties), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        property = _step2.value;
                        value = this[property];
                        if (value !== void 0) {
                          data[property] = value;
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    return data;
                  }
                }, {
                  key: "fallbackToSystemFont",
                  value: function fallbackToSystemFont(properties) {
                    var _this = this;
                    this.missingFile = true;
                    var name = this.name;
                    var type = this.type;
                    var subtype = this.subtype;
                    var fontName = (0, _fonts_utils.normalizeFontName)(name);
                    var stdFontMap = (0, _standard_fonts.getStdFontMap)(), nonStdFontMap = (0, _standard_fonts.getNonStdFontMap)();
                    var isStandardFont = !!stdFontMap[fontName];
                    var isMappedToStandardFont = !!(nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]);
                    fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;
                    this.bold = fontName.search(/bold/gi) !== -1;
                    this.italic = fontName.search(/oblique/gi) !== -1 || fontName.search(/italic/gi) !== -1;
                    this.black = name.search(/Black/g) !== -1;
                    var isNarrow = name.search(/Narrow/g) !== -1;
                    this.remeasure = (!isStandardFont || isNarrow) && Object.keys(this.widths).length > 0;
                    if ((isStandardFont || isMappedToStandardFont) && type === "CIDFontType2" && this.cidEncoding.startsWith("Identity-")) {
                      var cidToGidMap = properties.cidToGidMap;
                      var map = [];
                      applyStandardFontGlyphMap(map, (0, _standard_fonts.getGlyphMapForStandardFonts)());
                      if (/Arial-?Black/i.test(name)) {
                        applyStandardFontGlyphMap(map, (0, _standard_fonts.getSupplementalGlyphMapForArialBlack)());
                      } else if (/Calibri/i.test(name)) {
                        applyStandardFontGlyphMap(map, (0, _standard_fonts.getSupplementalGlyphMapForCalibri)());
                      }
                      if (cidToGidMap) {
                        for (var charCode in map) {
                          var cid = map[charCode];
                          if (cidToGidMap[cid] !== void 0) {
                            map[+charCode] = cidToGidMap[cid];
                          }
                        }
                        if (cidToGidMap.length !== this.toUnicode.length && properties.hasIncludedToUnicodeMap && this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap) {
                          this.toUnicode.forEach(function(charCode2, unicodeCharCode) {
                            var cid2 = map[charCode2];
                            if (cidToGidMap[cid2] === void 0) {
                              map[+charCode2] = unicodeCharCode;
                            }
                          });
                        }
                      }
                      if (!(this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap)) {
                        this.toUnicode.forEach(function(charCode2, unicodeCharCode) {
                          map[+charCode2] = unicodeCharCode;
                        });
                      }
                      this.toFontChar = map;
                      this.toUnicode = new _to_unicode_map.ToUnicodeMap(map);
                    } else if (/Symbol/i.test(fontName)) {
                      this.toFontChar = buildToFontChar(_encodings.SymbolSetEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);
                    } else if (/Dingbats/i.test(fontName)) {
                      if (/Wingdings/i.test(name)) {
                        (0, _util.warn)("Non-embedded Wingdings font, falling back to ZapfDingbats.");
                      }
                      this.toFontChar = buildToFontChar(_encodings.ZapfDingbatsEncoding, (0, _glyphlist.getDingbatsGlyphsUnicode)(), this.differences);
                    } else if (isStandardFont) {
                      var _map = buildToFontChar(this.defaultEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);
                      if (type === "CIDFontType2" && !this.cidEncoding.startsWith("Identity-") && !(this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap)) {
                        this.toUnicode.forEach(function(charCode2, unicodeCharCode) {
                          _map[+charCode2] = unicodeCharCode;
                        });
                      }
                      this.toFontChar = _map;
                    } else {
                      var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
                      var _map2 = [];
                      this.toUnicode.forEach(function(charCode2, unicodeCharCode) {
                        if (!_this.composite) {
                          var glyphName = _this.differences[charCode2] || _this.defaultEncoding[charCode2];
                          var unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);
                          if (unicode !== -1) {
                            unicodeCharCode = unicode;
                          }
                        }
                        _map2[+charCode2] = unicodeCharCode;
                      });
                      if (this.composite && this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap) {
                        if (/Verdana/i.test(name)) {
                          applyStandardFontGlyphMap(_map2, (0, _standard_fonts.getGlyphMapForStandardFonts)());
                        }
                      }
                      this.toFontChar = _map2;
                    }
                    amendFallbackToUnicode(properties);
                    this.loadedName = fontName.split("-")[0];
                    this.fontType = (0, _fonts_utils.getFontType)(type, subtype, properties.isStandardFont);
                  }
                }, {
                  key: "checkAndRepair",
                  value: function checkAndRepair(name, font, properties) {
                    var VALID_TABLES = ["OS/2", "cmap", "head", "hhea", "hmtx", "maxp", "name", "post", "loca", "glyf", "fpgm", "prep", "cvt ", "CFF "];
                    function readTables(file, numTables) {
                      var tables2 = /* @__PURE__ */ Object.create(null);
                      tables2["OS/2"] = null;
                      tables2.cmap = null;
                      tables2.head = null;
                      tables2.hhea = null;
                      tables2.hmtx = null;
                      tables2.maxp = null;
                      tables2.name = null;
                      tables2.post = null;
                      for (var i2 = 0; i2 < numTables; i2++) {
                        var table = readTableEntry(file);
                        if (!VALID_TABLES.includes(table.tag)) {
                          continue;
                        }
                        if (table.length === 0) {
                          continue;
                        }
                        tables2[table.tag] = table;
                      }
                      return tables2;
                    }
                    function readTableEntry(file) {
                      var tag = file.getString(4);
                      var checksum = file.getInt32() >>> 0;
                      var offset = file.getInt32() >>> 0;
                      var length = file.getInt32() >>> 0;
                      var previousPosition = file.pos;
                      file.pos = file.start ? file.start : 0;
                      file.skip(offset);
                      var data = file.getBytes(length);
                      file.pos = previousPosition;
                      if (tag === "head") {
                        data[8] = data[9] = data[10] = data[11] = 0;
                        data[17] |= 32;
                      }
                      return {
                        tag,
                        checksum,
                        length,
                        offset,
                        data
                      };
                    }
                    function readOpenTypeHeader(ttf) {
                      return {
                        version: ttf.getString(4),
                        numTables: ttf.getUint16(),
                        searchRange: ttf.getUint16(),
                        entrySelector: ttf.getUint16(),
                        rangeShift: ttf.getUint16()
                      };
                    }
                    function readTrueTypeCollectionHeader(ttc) {
                      var ttcTag = ttc.getString(4);
                      (0, _util.assert)(ttcTag === "ttcf", "Must be a TrueType Collection font.");
                      var majorVersion = ttc.getUint16();
                      var minorVersion = ttc.getUint16();
                      var numFonts = ttc.getInt32() >>> 0;
                      var offsetTable = [];
                      for (var i2 = 0; i2 < numFonts; i2++) {
                        offsetTable.push(ttc.getInt32() >>> 0);
                      }
                      var header2 = {
                        ttcTag,
                        majorVersion,
                        minorVersion,
                        numFonts,
                        offsetTable
                      };
                      switch (majorVersion) {
                        case 1:
                          return header2;
                        case 2:
                          header2.dsigTag = ttc.getInt32() >>> 0;
                          header2.dsigLength = ttc.getInt32() >>> 0;
                          header2.dsigOffset = ttc.getInt32() >>> 0;
                          return header2;
                      }
                      throw new _util.FormatError("Invalid TrueType Collection majorVersion: ".concat(majorVersion, "."));
                    }
                    function readTrueTypeCollectionData(ttc, fontName) {
                      var _readTrueTypeCollecti = readTrueTypeCollectionHeader(ttc), numFonts = _readTrueTypeCollecti.numFonts, offsetTable = _readTrueTypeCollecti.offsetTable;
                      var fontNameParts = fontName.split("+");
                      var fallbackData;
                      for (var i2 = 0; i2 < numFonts; i2++) {
                        ttc.pos = (ttc.start || 0) + offsetTable[i2];
                        var potentialHeader = readOpenTypeHeader(ttc);
                        var potentialTables = readTables(ttc, potentialHeader.numTables);
                        if (!potentialTables.name) {
                          throw new _util.FormatError('TrueType Collection font must contain a "name" table.');
                        }
                        var nameTable = readNameTable(potentialTables.name);
                        for (var j2 = 0, jj = nameTable.length; j2 < jj; j2++) {
                          for (var k = 0, kk = nameTable[j2].length; k < kk; k++) {
                            var nameEntry = nameTable[j2][k] && nameTable[j2][k].replace(/\s/g, "");
                            if (!nameEntry) {
                              continue;
                            }
                            if (nameEntry === fontName) {
                              return {
                                header: potentialHeader,
                                tables: potentialTables
                              };
                            }
                            if (fontNameParts.length < 2) {
                              continue;
                            }
                            var _iterator3 = _createForOfIteratorHelper(fontNameParts), _step3;
                            try {
                              for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                                var part = _step3.value;
                                if (nameEntry === part) {
                                  fallbackData = {
                                    name: part,
                                    header: potentialHeader,
                                    tables: potentialTables
                                  };
                                }
                              }
                            } catch (err) {
                              _iterator3.e(err);
                            } finally {
                              _iterator3.f();
                            }
                          }
                        }
                      }
                      if (fallbackData) {
                        (0, _util.warn)('TrueType Collection does not contain "'.concat(fontName, '" font, ') + 'falling back to "'.concat(fallbackData.name, '" font instead.'));
                        return {
                          header: fallbackData.header,
                          tables: fallbackData.tables
                        };
                      }
                      throw new _util.FormatError('TrueType Collection does not contain "'.concat(fontName, '" font.'));
                    }
                    function readCmapTable(cmap, file, isSymbolicFont, hasEncoding) {
                      if (!cmap) {
                        (0, _util.warn)("No cmap table available.");
                        return {
                          platformId: -1,
                          encodingId: -1,
                          mappings: [],
                          hasShortCmap: false
                        };
                      }
                      var segment;
                      var start = (file.start ? file.start : 0) + cmap.offset;
                      file.pos = start;
                      file.skip(2);
                      var numTables = file.getUint16();
                      var potentialTable;
                      var canBreak = false;
                      for (var i2 = 0; i2 < numTables; i2++) {
                        var platformId = file.getUint16();
                        var encodingId = file.getUint16();
                        var offset = file.getInt32() >>> 0;
                        var useTable = false;
                        if (potentialTable && potentialTable.platformId === platformId && potentialTable.encodingId === encodingId) {
                          continue;
                        }
                        if (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 3)) {
                          useTable = true;
                        } else if (platformId === 1 && encodingId === 0) {
                          useTable = true;
                        } else if (platformId === 3 && encodingId === 1 && (hasEncoding || !potentialTable)) {
                          useTable = true;
                          if (!isSymbolicFont) {
                            canBreak = true;
                          }
                        } else if (isSymbolicFont && platformId === 3 && encodingId === 0) {
                          useTable = true;
                          var correctlySorted = true;
                          if (i2 < numTables - 1) {
                            var nextBytes = file.peekBytes(2), nextPlatformId = int16(nextBytes[0], nextBytes[1]);
                            if (nextPlatformId < platformId) {
                              correctlySorted = false;
                            }
                          }
                          if (correctlySorted) {
                            canBreak = true;
                          }
                        }
                        if (useTable) {
                          potentialTable = {
                            platformId,
                            encodingId,
                            offset
                          };
                        }
                        if (canBreak) {
                          break;
                        }
                      }
                      if (potentialTable) {
                        file.pos = start + potentialTable.offset;
                      }
                      if (!potentialTable || file.peekByte() === -1) {
                        (0, _util.warn)("Could not find a preferred cmap table.");
                        return {
                          platformId: -1,
                          encodingId: -1,
                          mappings: [],
                          hasShortCmap: false
                        };
                      }
                      var format = file.getUint16();
                      file.skip(2 + 2);
                      var hasShortCmap = false;
                      var mappings = [];
                      var j2, glyphId2;
                      if (format === 0) {
                        for (j2 = 0; j2 < 256; j2++) {
                          var index = file.getByte();
                          if (!index) {
                            continue;
                          }
                          mappings.push({
                            charCode: j2,
                            glyphId: index
                          });
                        }
                        hasShortCmap = true;
                      } else if (format === 2) {
                        var subHeaderKeys = [];
                        var maxSubHeaderKey = 0;
                        for (var _i2 = 0; _i2 < 256; _i2++) {
                          var subHeaderKey = file.getUint16() >> 3;
                          subHeaderKeys.push(subHeaderKey);
                          maxSubHeaderKey = Math.max(subHeaderKey, maxSubHeaderKey);
                        }
                        var subHeaders = [];
                        for (var _i3 = 0; _i3 <= maxSubHeaderKey; _i3++) {
                          subHeaders.push({
                            firstCode: file.getUint16(),
                            entryCount: file.getUint16(),
                            idDelta: signedInt16(file.getByte(), file.getByte()),
                            idRangePos: file.pos + file.getUint16()
                          });
                        }
                        for (var _i4 = 0; _i4 < 256; _i4++) {
                          if (subHeaderKeys[_i4] === 0) {
                            file.pos = subHeaders[0].idRangePos + 2 * _i4;
                            glyphId2 = file.getUint16();
                            mappings.push({
                              charCode: _i4,
                              glyphId: glyphId2
                            });
                          } else {
                            var s = subHeaders[subHeaderKeys[_i4]];
                            for (j2 = 0; j2 < s.entryCount; j2++) {
                              var charCode2 = (_i4 << 8) + j2 + s.firstCode;
                              file.pos = s.idRangePos + 2 * j2;
                              glyphId2 = file.getUint16();
                              if (glyphId2 !== 0) {
                                glyphId2 = (glyphId2 + s.idDelta) % 65536;
                              }
                              mappings.push({
                                charCode: charCode2,
                                glyphId: glyphId2
                              });
                            }
                          }
                        }
                      } else if (format === 4) {
                        var segCount = file.getUint16() >> 1;
                        file.skip(6);
                        var segments = [];
                        var segIndex;
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                          segments.push({
                            end: file.getUint16()
                          });
                        }
                        file.skip(2);
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                          segments[segIndex].start = file.getUint16();
                        }
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                          segments[segIndex].delta = file.getUint16();
                        }
                        var offsetsCount = 0, offsetIndex;
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                          segment = segments[segIndex];
                          var rangeOffset = file.getUint16();
                          if (!rangeOffset) {
                            segment.offsetIndex = -1;
                            continue;
                          }
                          offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);
                          segment.offsetIndex = offsetIndex;
                          offsetsCount = Math.max(offsetsCount, offsetIndex + segment.end - segment.start + 1);
                        }
                        var offsets = [];
                        for (j2 = 0; j2 < offsetsCount; j2++) {
                          offsets.push(file.getUint16());
                        }
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                          segment = segments[segIndex];
                          start = segment.start;
                          var end = segment.end;
                          var delta = segment.delta;
                          offsetIndex = segment.offsetIndex;
                          for (j2 = start; j2 <= end; j2++) {
                            if (j2 === 65535) {
                              continue;
                            }
                            glyphId2 = offsetIndex < 0 ? j2 : offsets[offsetIndex + j2 - start];
                            glyphId2 = glyphId2 + delta & 65535;
                            mappings.push({
                              charCode: j2,
                              glyphId: glyphId2
                            });
                          }
                        }
                      } else if (format === 6) {
                        var firstCode = file.getUint16();
                        var entryCount = file.getUint16();
                        for (j2 = 0; j2 < entryCount; j2++) {
                          glyphId2 = file.getUint16();
                          var _charCode = firstCode + j2;
                          mappings.push({
                            charCode: _charCode,
                            glyphId: glyphId2
                          });
                        }
                      } else {
                        (0, _util.warn)("cmap table has unsupported format: " + format);
                        return {
                          platformId: -1,
                          encodingId: -1,
                          mappings: [],
                          hasShortCmap: false
                        };
                      }
                      mappings.sort(function(a, b) {
                        return a.charCode - b.charCode;
                      });
                      for (var _i5 = 1; _i5 < mappings.length; _i5++) {
                        if (mappings[_i5 - 1].charCode === mappings[_i5].charCode) {
                          mappings.splice(_i5, 1);
                          _i5--;
                        }
                      }
                      return {
                        platformId: potentialTable.platformId,
                        encodingId: potentialTable.encodingId,
                        mappings,
                        hasShortCmap
                      };
                    }
                    function sanitizeMetrics(file, header2, metrics2, headTable, numGlyphs2, dupFirstEntry2) {
                      if (!header2) {
                        if (metrics2) {
                          metrics2.data = null;
                        }
                        return;
                      }
                      file.pos = (file.start ? file.start : 0) + header2.offset;
                      file.pos += 4;
                      file.pos += 2;
                      file.pos += 2;
                      file.pos += 2;
                      file.pos += 2;
                      file.pos += 2;
                      file.pos += 2;
                      file.pos += 2;
                      file.pos += 2;
                      file.pos += 2;
                      var caretOffset = file.getUint16();
                      file.pos += 8;
                      file.pos += 2;
                      var numOfMetrics = file.getUint16();
                      if (caretOffset !== 0) {
                        var macStyle = int16(headTable.data[44], headTable.data[45]);
                        if (!(macStyle & 2)) {
                          header2.data[22] = 0;
                          header2.data[23] = 0;
                        }
                      }
                      if (numOfMetrics > numGlyphs2) {
                        (0, _util.info)("The numOfMetrics (".concat(numOfMetrics, ") should not be ") + "greater than the numGlyphs (".concat(numGlyphs2, ")."));
                        numOfMetrics = numGlyphs2;
                        header2.data[34] = (numOfMetrics & 65280) >> 8;
                        header2.data[35] = numOfMetrics & 255;
                      }
                      var numOfSidebearings = numGlyphs2 - numOfMetrics;
                      var numMissing = numOfSidebearings - (metrics2.length - numOfMetrics * 4 >> 1);
                      if (numMissing > 0) {
                        var entries = new Uint8Array(metrics2.length + numMissing * 2);
                        entries.set(metrics2.data);
                        if (dupFirstEntry2) {
                          entries[metrics2.length] = metrics2.data[2];
                          entries[metrics2.length + 1] = metrics2.data[3];
                        }
                        metrics2.data = entries;
                      }
                    }
                    function sanitizeGlyph(source, sourceStart, sourceEnd, dest, destStart, hintsValid2) {
                      var glyphProfile = {
                        length: 0,
                        sizeOfInstructions: 0
                      };
                      if (sourceEnd - sourceStart <= 12) {
                        return glyphProfile;
                      }
                      var glyf2 = source.subarray(sourceStart, sourceEnd);
                      var contoursCount = signedInt16(glyf2[0], glyf2[1]);
                      if (contoursCount < 0) {
                        contoursCount = -1;
                        writeSignedInt16(glyf2, 0, contoursCount);
                        dest.set(glyf2, destStart);
                        glyphProfile.length = glyf2.length;
                        return glyphProfile;
                      }
                      var i2, j2 = 10, flagsCount = 0;
                      for (i2 = 0; i2 < contoursCount; i2++) {
                        var endPoint = glyf2[j2] << 8 | glyf2[j2 + 1];
                        flagsCount = endPoint + 1;
                        j2 += 2;
                      }
                      var instructionsStart = j2;
                      var instructionsLength = glyf2[j2] << 8 | glyf2[j2 + 1];
                      glyphProfile.sizeOfInstructions = instructionsLength;
                      j2 += 2 + instructionsLength;
                      var instructionsEnd = j2;
                      var coordinatesLength = 0;
                      for (i2 = 0; i2 < flagsCount; i2++) {
                        var flag = glyf2[j2++];
                        if (flag & 192) {
                          glyf2[j2 - 1] = flag & 63;
                        }
                        var xLength = 2;
                        if (flag & 2) {
                          xLength = 1;
                        } else if (flag & 16) {
                          xLength = 0;
                        }
                        var yLength = 2;
                        if (flag & 4) {
                          yLength = 1;
                        } else if (flag & 32) {
                          yLength = 0;
                        }
                        var xyLength = xLength + yLength;
                        coordinatesLength += xyLength;
                        if (flag & 8) {
                          var repeat = glyf2[j2++];
                          i2 += repeat;
                          coordinatesLength += repeat * xyLength;
                        }
                      }
                      if (coordinatesLength === 0) {
                        return glyphProfile;
                      }
                      var glyphDataLength = j2 + coordinatesLength;
                      if (glyphDataLength > glyf2.length) {
                        return glyphProfile;
                      }
                      if (!hintsValid2 && instructionsLength > 0) {
                        dest.set(glyf2.subarray(0, instructionsStart), destStart);
                        dest.set([0, 0], destStart + instructionsStart);
                        dest.set(glyf2.subarray(instructionsEnd, glyphDataLength), destStart + instructionsStart + 2);
                        glyphDataLength -= instructionsLength;
                        if (glyf2.length - glyphDataLength > 3) {
                          glyphDataLength = glyphDataLength + 3 & ~3;
                        }
                        glyphProfile.length = glyphDataLength;
                        return glyphProfile;
                      }
                      if (glyf2.length - glyphDataLength > 3) {
                        glyphDataLength = glyphDataLength + 3 & ~3;
                        dest.set(glyf2.subarray(0, glyphDataLength), destStart);
                        glyphProfile.length = glyphDataLength;
                        return glyphProfile;
                      }
                      dest.set(glyf2, destStart);
                      glyphProfile.length = glyf2.length;
                      return glyphProfile;
                    }
                    function sanitizeHead(head, numGlyphs2, locaLength) {
                      var data = head.data;
                      var version2 = int32(data[0], data[1], data[2], data[3]);
                      if (version2 >> 16 !== 1) {
                        (0, _util.info)("Attempting to fix invalid version in head table: " + version2);
                        data[0] = 0;
                        data[1] = 1;
                        data[2] = 0;
                        data[3] = 0;
                      }
                      var indexToLocFormat = int16(data[50], data[51]);
                      if (indexToLocFormat < 0 || indexToLocFormat > 1) {
                        (0, _util.info)("Attempting to fix invalid indexToLocFormat in head table: " + indexToLocFormat);
                        var numGlyphsPlusOne = numGlyphs2 + 1;
                        if (locaLength === numGlyphsPlusOne << 1) {
                          data[50] = 0;
                          data[51] = 0;
                        } else if (locaLength === numGlyphsPlusOne << 2) {
                          data[50] = 0;
                          data[51] = 1;
                        } else {
                          throw new _util.FormatError("Could not fix indexToLocFormat: " + indexToLocFormat);
                        }
                      }
                    }
                    function sanitizeGlyphLocations(loca2, glyf2, numGlyphs2, isGlyphLocationsLong2, hintsValid2, dupFirstEntry2, maxSizeOfInstructions2) {
                      var itemSize, itemDecode, itemEncode;
                      if (isGlyphLocationsLong2) {
                        itemSize = 4;
                        itemDecode = function fontItemDecodeLong(data, offset2) {
                          return data[offset2] << 24 | data[offset2 + 1] << 16 | data[offset2 + 2] << 8 | data[offset2 + 3];
                        };
                        itemEncode = function fontItemEncodeLong(data, offset2, value) {
                          data[offset2] = value >>> 24 & 255;
                          data[offset2 + 1] = value >> 16 & 255;
                          data[offset2 + 2] = value >> 8 & 255;
                          data[offset2 + 3] = value & 255;
                        };
                      } else {
                        itemSize = 2;
                        itemDecode = function fontItemDecode(data, offset2) {
                          return data[offset2] << 9 | data[offset2 + 1] << 1;
                        };
                        itemEncode = function fontItemEncode(data, offset2, value) {
                          data[offset2] = value >> 9 & 255;
                          data[offset2 + 1] = value >> 1 & 255;
                        };
                      }
                      var numGlyphsOut2 = dupFirstEntry2 ? numGlyphs2 + 1 : numGlyphs2;
                      var locaDataSize = itemSize * (1 + numGlyphsOut2);
                      var locaData = new Uint8Array(locaDataSize);
                      locaData.set(loca2.data.subarray(0, locaDataSize));
                      loca2.data = locaData;
                      var oldGlyfData = glyf2.data;
                      var oldGlyfDataLength = oldGlyfData.length;
                      var newGlyfData = new Uint8Array(oldGlyfDataLength);
                      var i2, j2;
                      var locaEntries = [];
                      for (i2 = 0, j2 = 0; i2 < numGlyphs2 + 1; i2++, j2 += itemSize) {
                        var offset = itemDecode(locaData, j2);
                        if (offset > oldGlyfDataLength) {
                          offset = oldGlyfDataLength;
                        }
                        locaEntries.push({
                          index: i2,
                          offset,
                          endOffset: 0
                        });
                      }
                      locaEntries.sort(function(a, b) {
                        return a.offset - b.offset;
                      });
                      for (i2 = 0; i2 < numGlyphs2; i2++) {
                        locaEntries[i2].endOffset = locaEntries[i2 + 1].offset;
                      }
                      locaEntries.sort(function(a, b) {
                        return a.index - b.index;
                      });
                      var missingGlyphs2 = /* @__PURE__ */ Object.create(null);
                      var writeOffset = 0;
                      itemEncode(locaData, 0, writeOffset);
                      for (i2 = 0, j2 = itemSize; i2 < numGlyphs2; i2++, j2 += itemSize) {
                        var glyphProfile = sanitizeGlyph(oldGlyfData, locaEntries[i2].offset, locaEntries[i2].endOffset, newGlyfData, writeOffset, hintsValid2);
                        var newLength = glyphProfile.length;
                        if (newLength === 0) {
                          missingGlyphs2[i2] = true;
                        }
                        if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions2) {
                          maxSizeOfInstructions2 = glyphProfile.sizeOfInstructions;
                        }
                        writeOffset += newLength;
                        itemEncode(locaData, j2, writeOffset);
                      }
                      if (writeOffset === 0) {
                        var simpleGlyph = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);
                        for (i2 = 0, j2 = itemSize; i2 < numGlyphsOut2; i2++, j2 += itemSize) {
                          itemEncode(locaData, j2, simpleGlyph.length);
                        }
                        glyf2.data = simpleGlyph;
                      } else if (dupFirstEntry2) {
                        var firstEntryLength = itemDecode(locaData, itemSize);
                        if (newGlyfData.length > firstEntryLength + writeOffset) {
                          glyf2.data = newGlyfData.subarray(0, firstEntryLength + writeOffset);
                        } else {
                          glyf2.data = new Uint8Array(firstEntryLength + writeOffset);
                          glyf2.data.set(newGlyfData.subarray(0, writeOffset));
                        }
                        glyf2.data.set(newGlyfData.subarray(0, firstEntryLength), writeOffset);
                        itemEncode(loca2.data, locaData.length - itemSize, writeOffset + firstEntryLength);
                      } else {
                        glyf2.data = newGlyfData.subarray(0, writeOffset);
                      }
                      return {
                        missingGlyphs: missingGlyphs2,
                        maxSizeOfInstructions: maxSizeOfInstructions2
                      };
                    }
                    function readPostScriptTable(post, propertiesObj, maxpNumGlyphs) {
                      var start = (font.start ? font.start : 0) + post.offset;
                      font.pos = start;
                      var length = post.length, end = start + length;
                      var version2 = font.getInt32();
                      font.skip(28);
                      var glyphNames;
                      var valid = true;
                      var i2;
                      switch (version2) {
                        case 65536:
                          glyphNames = _fonts_utils.MacStandardGlyphOrdering;
                          break;
                        case 131072:
                          var _numGlyphs = font.getUint16();
                          if (_numGlyphs !== maxpNumGlyphs) {
                            valid = false;
                            break;
                          }
                          var glyphNameIndexes = [];
                          for (i2 = 0; i2 < _numGlyphs; ++i2) {
                            var index = font.getUint16();
                            if (index >= 32768) {
                              valid = false;
                              break;
                            }
                            glyphNameIndexes.push(index);
                          }
                          if (!valid) {
                            break;
                          }
                          var customNames = [], strBuf = [];
                          while (font.pos < end) {
                            var stringLength = font.getByte();
                            strBuf.length = stringLength;
                            for (i2 = 0; i2 < stringLength; ++i2) {
                              strBuf[i2] = String.fromCharCode(font.getByte());
                            }
                            customNames.push(strBuf.join(""));
                          }
                          glyphNames = [];
                          for (i2 = 0; i2 < _numGlyphs; ++i2) {
                            var j2 = glyphNameIndexes[i2];
                            if (j2 < 258) {
                              glyphNames.push(_fonts_utils.MacStandardGlyphOrdering[j2]);
                              continue;
                            }
                            glyphNames.push(customNames[j2 - 258]);
                          }
                          break;
                        case 196608:
                          break;
                        default:
                          (0, _util.warn)("Unknown/unsupported post table version " + version2);
                          valid = false;
                          if (propertiesObj.defaultEncoding) {
                            glyphNames = propertiesObj.defaultEncoding;
                          }
                          break;
                      }
                      propertiesObj.glyphNames = glyphNames;
                      return valid;
                    }
                    function readNameTable(nameTable) {
                      var start = (font.start ? font.start : 0) + nameTable.offset;
                      font.pos = start;
                      var names = [[], []];
                      var length = nameTable.length, end = start + length;
                      var format = font.getUint16();
                      var FORMAT_0_HEADER_LENGTH = 6;
                      if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {
                        return names;
                      }
                      var numRecords = font.getUint16();
                      var stringsStart = font.getUint16();
                      var records = [];
                      var NAME_RECORD_LENGTH = 12;
                      var i2, ii;
                      for (i2 = 0; i2 < numRecords && font.pos + NAME_RECORD_LENGTH <= end; i2++) {
                        var r = {
                          platform: font.getUint16(),
                          encoding: font.getUint16(),
                          language: font.getUint16(),
                          name: font.getUint16(),
                          length: font.getUint16(),
                          offset: font.getUint16()
                        };
                        if (r.platform === 1 && r.encoding === 0 && r.language === 0 || r.platform === 3 && r.encoding === 1 && r.language === 1033) {
                          records.push(r);
                        }
                      }
                      for (i2 = 0, ii = records.length; i2 < ii; i2++) {
                        var record = records[i2];
                        if (record.length <= 0) {
                          continue;
                        }
                        var pos = start + stringsStart + record.offset;
                        if (pos + record.length > end) {
                          continue;
                        }
                        font.pos = pos;
                        var nameIndex = record.name;
                        if (record.encoding) {
                          var str = "";
                          for (var j2 = 0, jj = record.length; j2 < jj; j2 += 2) {
                            str += String.fromCharCode(font.getUint16());
                          }
                          names[1][nameIndex] = str;
                        } else {
                          names[0][nameIndex] = font.getString(record.length);
                        }
                      }
                      return names;
                    }
                    var TTOpsStackDeltas = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];
                    function sanitizeTTProgram(table, ttContext) {
                      var data = table.data;
                      var i2 = 0, j2, n, b, funcId, pc, lastEndf = 0, lastDeff = 0;
                      var stack = [];
                      var callstack = [];
                      var functionsCalled = [];
                      var tooComplexToFollowFunctions = ttContext.tooComplexToFollowFunctions;
                      var inFDEF = false, ifLevel = 0, inELSE = 0;
                      for (var ii = data.length; i2 < ii; ) {
                        var op = data[i2++];
                        if (op === 64) {
                          n = data[i2++];
                          if (inFDEF || inELSE) {
                            i2 += n;
                          } else {
                            for (j2 = 0; j2 < n; j2++) {
                              stack.push(data[i2++]);
                            }
                          }
                        } else if (op === 65) {
                          n = data[i2++];
                          if (inFDEF || inELSE) {
                            i2 += n * 2;
                          } else {
                            for (j2 = 0; j2 < n; j2++) {
                              b = data[i2++];
                              stack.push(b << 8 | data[i2++]);
                            }
                          }
                        } else if ((op & 248) === 176) {
                          n = op - 176 + 1;
                          if (inFDEF || inELSE) {
                            i2 += n;
                          } else {
                            for (j2 = 0; j2 < n; j2++) {
                              stack.push(data[i2++]);
                            }
                          }
                        } else if ((op & 248) === 184) {
                          n = op - 184 + 1;
                          if (inFDEF || inELSE) {
                            i2 += n * 2;
                          } else {
                            for (j2 = 0; j2 < n; j2++) {
                              b = data[i2++];
                              stack.push(b << 8 | data[i2++]);
                            }
                          }
                        } else if (op === 43 && !tooComplexToFollowFunctions) {
                          if (!inFDEF && !inELSE) {
                            funcId = stack[stack.length - 1];
                            if (isNaN(funcId)) {
                              (0, _util.info)("TT: CALL empty stack (or invalid entry).");
                            } else {
                              ttContext.functionsUsed[funcId] = true;
                              if (funcId in ttContext.functionsStackDeltas) {
                                var newStackLength = stack.length + ttContext.functionsStackDeltas[funcId];
                                if (newStackLength < 0) {
                                  (0, _util.warn)("TT: CALL invalid functions stack delta.");
                                  ttContext.hintsValid = false;
                                  return;
                                }
                                stack.length = newStackLength;
                              } else if (funcId in ttContext.functionsDefined && !functionsCalled.includes(funcId)) {
                                callstack.push({
                                  data,
                                  i: i2,
                                  stackTop: stack.length - 1
                                });
                                functionsCalled.push(funcId);
                                pc = ttContext.functionsDefined[funcId];
                                if (!pc) {
                                  (0, _util.warn)("TT: CALL non-existent function");
                                  ttContext.hintsValid = false;
                                  return;
                                }
                                data = pc.data;
                                i2 = pc.i;
                              }
                            }
                          }
                        } else if (op === 44 && !tooComplexToFollowFunctions) {
                          if (inFDEF || inELSE) {
                            (0, _util.warn)("TT: nested FDEFs not allowed");
                            tooComplexToFollowFunctions = true;
                          }
                          inFDEF = true;
                          lastDeff = i2;
                          funcId = stack.pop();
                          ttContext.functionsDefined[funcId] = {
                            data,
                            i: i2
                          };
                        } else if (op === 45) {
                          if (inFDEF) {
                            inFDEF = false;
                            lastEndf = i2;
                          } else {
                            pc = callstack.pop();
                            if (!pc) {
                              (0, _util.warn)("TT: ENDF bad stack");
                              ttContext.hintsValid = false;
                              return;
                            }
                            funcId = functionsCalled.pop();
                            data = pc.data;
                            i2 = pc.i;
                            ttContext.functionsStackDeltas[funcId] = stack.length - pc.stackTop;
                          }
                        } else if (op === 137) {
                          if (inFDEF || inELSE) {
                            (0, _util.warn)("TT: nested IDEFs not allowed");
                            tooComplexToFollowFunctions = true;
                          }
                          inFDEF = true;
                          lastDeff = i2;
                        } else if (op === 88) {
                          ++ifLevel;
                        } else if (op === 27) {
                          inELSE = ifLevel;
                        } else if (op === 89) {
                          if (inELSE === ifLevel) {
                            inELSE = 0;
                          }
                          --ifLevel;
                        } else if (op === 28) {
                          if (!inFDEF && !inELSE) {
                            var offset = stack[stack.length - 1];
                            if (offset > 0) {
                              i2 += offset - 1;
                            }
                          }
                        }
                        if (!inFDEF && !inELSE) {
                          var stackDelta = 0;
                          if (op <= 142) {
                            stackDelta = TTOpsStackDeltas[op];
                          } else if (op >= 192 && op <= 223) {
                            stackDelta = -1;
                          } else if (op >= 224) {
                            stackDelta = -2;
                          }
                          if (op >= 113 && op <= 117) {
                            n = stack.pop();
                            if (!isNaN(n)) {
                              stackDelta = -n * 2;
                            }
                          }
                          while (stackDelta < 0 && stack.length > 0) {
                            stack.pop();
                            stackDelta++;
                          }
                          while (stackDelta > 0) {
                            stack.push(NaN);
                            stackDelta--;
                          }
                        }
                      }
                      ttContext.tooComplexToFollowFunctions = tooComplexToFollowFunctions;
                      var content = [data];
                      if (i2 > data.length) {
                        content.push(new Uint8Array(i2 - data.length));
                      }
                      if (lastDeff > lastEndf) {
                        (0, _util.warn)("TT: complementing a missing function tail");
                        content.push(new Uint8Array([34, 45]));
                      }
                      foldTTTable(table, content);
                    }
                    function checkInvalidFunctions(ttContext, maxFunctionDefs2) {
                      if (ttContext.tooComplexToFollowFunctions) {
                        return;
                      }
                      if (ttContext.functionsDefined.length > maxFunctionDefs2) {
                        (0, _util.warn)("TT: more functions defined than expected");
                        ttContext.hintsValid = false;
                        return;
                      }
                      for (var j2 = 0, jj = ttContext.functionsUsed.length; j2 < jj; j2++) {
                        if (j2 > maxFunctionDefs2) {
                          (0, _util.warn)("TT: invalid function id: " + j2);
                          ttContext.hintsValid = false;
                          return;
                        }
                        if (ttContext.functionsUsed[j2] && !ttContext.functionsDefined[j2]) {
                          (0, _util.warn)("TT: undefined function: " + j2);
                          ttContext.hintsValid = false;
                          return;
                        }
                      }
                    }
                    function foldTTTable(table, content) {
                      if (content.length > 1) {
                        var newLength = 0;
                        var j2, jj;
                        for (j2 = 0, jj = content.length; j2 < jj; j2++) {
                          newLength += content[j2].length;
                        }
                        newLength = newLength + 3 & ~3;
                        var result = new Uint8Array(newLength);
                        var pos = 0;
                        for (j2 = 0, jj = content.length; j2 < jj; j2++) {
                          result.set(content[j2], pos);
                          pos += content[j2].length;
                        }
                        table.data = result;
                        table.length = newLength;
                      }
                    }
                    function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs2) {
                      var ttContext = {
                        functionsDefined: [],
                        functionsUsed: [],
                        functionsStackDeltas: [],
                        tooComplexToFollowFunctions: false,
                        hintsValid: true
                      };
                      if (fpgm) {
                        sanitizeTTProgram(fpgm, ttContext);
                      }
                      if (prep) {
                        sanitizeTTProgram(prep, ttContext);
                      }
                      if (fpgm) {
                        checkInvalidFunctions(ttContext, maxFunctionDefs2);
                      }
                      if (cvt && cvt.length & 1) {
                        var cvtData = new Uint8Array(cvt.length + 1);
                        cvtData.set(cvt.data);
                        cvt.data = cvtData;
                      }
                      return ttContext.hintsValid;
                    }
                    font = new _stream.Stream(new Uint8Array(font.getBytes()));
                    var header, tables;
                    if (isTrueTypeCollectionFile(font)) {
                      var ttcData = readTrueTypeCollectionData(font, this.name);
                      header = ttcData.header;
                      tables = ttcData.tables;
                    } else {
                      header = readOpenTypeHeader(font);
                      tables = readTables(font, header.numTables);
                    }
                    var cff, cffFile;
                    var isTrueType = !tables["CFF "];
                    if (!isTrueType) {
                      var isComposite = properties.composite && ((properties.cidToGidMap || []).length > 0 || !(properties.cMap instanceof _cmap.IdentityCMap));
                      if (header.version === "OTTO" && !isComposite || !tables.head || !tables.hhea || !tables.maxp || !tables.post) {
                        cffFile = new _stream.Stream(tables["CFF "].data);
                        cff = new _cff_font.CFFFont(cffFile, properties);
                        adjustWidths(properties);
                        return this.convert(name, cff, properties);
                      }
                      delete tables.glyf;
                      delete tables.loca;
                      delete tables.fpgm;
                      delete tables.prep;
                      delete tables["cvt "];
                      this.isOpenType = true;
                    } else {
                      if (!tables.loca) {
                        throw new _util.FormatError('Required "loca" table is not found');
                      }
                      if (!tables.glyf) {
                        (0, _util.warn)('Required "glyf" table is not found -- trying to recover.');
                        tables.glyf = {
                          tag: "glyf",
                          data: new Uint8Array(0)
                        };
                      }
                      this.isOpenType = false;
                    }
                    if (!tables.maxp) {
                      throw new _util.FormatError('Required "maxp" table is not found');
                    }
                    font.pos = (font.start || 0) + tables.maxp.offset;
                    var version = font.getInt32();
                    var numGlyphs = font.getUint16();
                    if (properties.scaleFactors && properties.scaleFactors.length === numGlyphs && isTrueType) {
                      var scaleFactors = properties.scaleFactors;
                      var isGlyphLocationsLong = int16(tables.head.data[50], tables.head.data[51]);
                      var glyphs = new _glyf.GlyfTable({
                        glyfTable: tables.glyf.data,
                        isGlyphLocationsLong,
                        locaTable: tables.loca.data,
                        numGlyphs
                      });
                      glyphs.scale(scaleFactors);
                      var _glyphs$write = glyphs.write(), glyf = _glyphs$write.glyf, loca = _glyphs$write.loca, isLocationLong = _glyphs$write.isLocationLong;
                      tables.glyf.data = glyf;
                      tables.loca.data = loca;
                      if (isLocationLong !== !!isGlyphLocationsLong) {
                        tables.head.data[50] = 0;
                        tables.head.data[51] = isLocationLong ? 1 : 0;
                      }
                      var metrics = tables.hmtx.data;
                      for (var i = 0; i < numGlyphs; i++) {
                        var j = 4 * i;
                        var advanceWidth = Math.round(scaleFactors[i] * int16(metrics[j], metrics[j + 1]));
                        metrics[j] = advanceWidth >> 8 & 255;
                        metrics[j + 1] = advanceWidth & 255;
                        var lsb = Math.round(scaleFactors[i] * signedInt16(metrics[j + 2], metrics[j + 3]));
                        writeSignedInt16(metrics, j + 2, lsb);
                      }
                    }
                    var numGlyphsOut = numGlyphs + 1;
                    var dupFirstEntry = true;
                    if (numGlyphsOut > 65535) {
                      dupFirstEntry = false;
                      numGlyphsOut = numGlyphs;
                      (0, _util.warn)("Not enough space in glyfs to duplicate first glyph.");
                    }
                    var maxFunctionDefs = 0;
                    var maxSizeOfInstructions = 0;
                    if (version >= 65536 && tables.maxp.length >= 22) {
                      font.pos += 8;
                      var maxZones = font.getUint16();
                      if (maxZones > 2) {
                        tables.maxp.data[14] = 0;
                        tables.maxp.data[15] = 2;
                      }
                      font.pos += 4;
                      maxFunctionDefs = font.getUint16();
                      font.pos += 4;
                      maxSizeOfInstructions = font.getUint16();
                    }
                    tables.maxp.data[4] = numGlyphsOut >> 8;
                    tables.maxp.data[5] = numGlyphsOut & 255;
                    var hintsValid = sanitizeTTPrograms(tables.fpgm, tables.prep, tables["cvt "], maxFunctionDefs);
                    if (!hintsValid) {
                      delete tables.fpgm;
                      delete tables.prep;
                      delete tables["cvt "];
                    }
                    sanitizeMetrics(font, tables.hhea, tables.hmtx, tables.head, numGlyphsOut, dupFirstEntry);
                    if (!tables.head) {
                      throw new _util.FormatError('Required "head" table is not found');
                    }
                    sanitizeHead(tables.head, numGlyphs, isTrueType ? tables.loca.length : 0);
                    var missingGlyphs = /* @__PURE__ */ Object.create(null);
                    if (isTrueType) {
                      var _isGlyphLocationsLong = int16(tables.head.data[50], tables.head.data[51]);
                      var glyphsInfo = sanitizeGlyphLocations(tables.loca, tables.glyf, numGlyphs, _isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions);
                      missingGlyphs = glyphsInfo.missingGlyphs;
                      if (version >= 65536 && tables.maxp.length >= 22) {
                        tables.maxp.data[26] = glyphsInfo.maxSizeOfInstructions >> 8;
                        tables.maxp.data[27] = glyphsInfo.maxSizeOfInstructions & 255;
                      }
                    }
                    if (!tables.hhea) {
                      throw new _util.FormatError('Required "hhea" table is not found');
                    }
                    if (tables.hhea.data[10] === 0 && tables.hhea.data[11] === 0) {
                      tables.hhea.data[10] = 255;
                      tables.hhea.data[11] = 255;
                    }
                    var metricsOverride = {
                      unitsPerEm: int16(tables.head.data[18], tables.head.data[19]),
                      yMax: int16(tables.head.data[42], tables.head.data[43]),
                      yMin: signedInt16(tables.head.data[38], tables.head.data[39]),
                      ascent: signedInt16(tables.hhea.data[4], tables.hhea.data[5]),
                      descent: signedInt16(tables.hhea.data[6], tables.hhea.data[7]),
                      lineGap: signedInt16(tables.hhea.data[8], tables.hhea.data[9])
                    };
                    this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;
                    this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;
                    this.lineGap = metricsOverride.lineGap / metricsOverride.unitsPerEm;
                    if (this.cssFontInfo && this.cssFontInfo.lineHeight) {
                      this.lineHeight = this.cssFontInfo.metrics.lineHeight;
                      this.lineGap = this.cssFontInfo.metrics.lineGap;
                    } else {
                      this.lineHeight = this.ascent - this.descent + this.lineGap;
                    }
                    if (tables.post) {
                      readPostScriptTable(tables.post, properties, numGlyphs);
                    }
                    tables.post = {
                      tag: "post",
                      data: createPostTable(properties)
                    };
                    var charCodeToGlyphId = [];
                    function hasGlyph(glyphId2) {
                      return !missingGlyphs[glyphId2];
                    }
                    if (properties.composite) {
                      var cidToGidMap = properties.cidToGidMap || [];
                      var isCidToGidMapEmpty = cidToGidMap.length === 0;
                      properties.cMap.forEach(function(charCode2, cid) {
                        if (typeof cid === "string") {
                          cid = convertCidString(charCode2, cid, true);
                        }
                        if (cid > 65535) {
                          throw new _util.FormatError("Max size of CID is 65,535");
                        }
                        var glyphId2 = -1;
                        if (isCidToGidMapEmpty) {
                          glyphId2 = cid;
                        } else if (cidToGidMap[cid] !== void 0) {
                          glyphId2 = cidToGidMap[cid];
                        }
                        if (glyphId2 >= 0 && glyphId2 < numGlyphs && hasGlyph(glyphId2)) {
                          charCodeToGlyphId[charCode2] = glyphId2;
                        }
                      });
                    } else {
                      var cmapTable = readCmapTable(tables.cmap, font, this.isSymbolicFont, properties.hasEncoding);
                      var cmapPlatformId = cmapTable.platformId;
                      var cmapEncodingId = cmapTable.encodingId;
                      var cmapMappings = cmapTable.mappings;
                      var cmapMappingsLength = cmapMappings.length;
                      var baseEncoding = [], forcePostTable = false;
                      if (properties.hasEncoding && (properties.baseEncodingName === "MacRomanEncoding" || properties.baseEncodingName === "WinAnsiEncoding")) {
                        baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);
                      }
                      if (properties.hasEncoding && !this.isSymbolicFont && (cmapPlatformId === 3 && cmapEncodingId === 1 || cmapPlatformId === 1 && cmapEncodingId === 0)) {
                        var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
                        for (var charCode = 0; charCode < 256; charCode++) {
                          var glyphName = void 0;
                          if (this.differences[charCode] !== void 0) {
                            glyphName = this.differences[charCode];
                          } else if (baseEncoding.length && baseEncoding[charCode] !== "") {
                            glyphName = baseEncoding[charCode];
                          } else {
                            glyphName = _encodings.StandardEncoding[charCode];
                          }
                          if (!glyphName) {
                            continue;
                          }
                          var standardGlyphName = (0, _fonts_utils.recoverGlyphName)(glyphName, glyphsUnicodeMap);
                          var unicodeOrCharCode = void 0;
                          if (cmapPlatformId === 3 && cmapEncodingId === 1) {
                            unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];
                          } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {
                            unicodeOrCharCode = _encodings.MacRomanEncoding.indexOf(standardGlyphName);
                          }
                          if (unicodeOrCharCode === void 0) {
                            if (!properties.glyphNames && properties.hasIncludedToUnicodeMap && !(this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap)) {
                              var unicode = this.toUnicode.get(charCode);
                              if (unicode) {
                                unicodeOrCharCode = unicode.codePointAt(0);
                              }
                            }
                            if (unicodeOrCharCode === void 0) {
                              continue;
                            }
                          }
                          for (var _i6 = 0; _i6 < cmapMappingsLength; ++_i6) {
                            if (cmapMappings[_i6].charCode !== unicodeOrCharCode) {
                              continue;
                            }
                            charCodeToGlyphId[charCode] = cmapMappings[_i6].glyphId;
                            break;
                          }
                        }
                      } else if (cmapPlatformId === 0) {
                        for (var _i7 = 0; _i7 < cmapMappingsLength; ++_i7) {
                          charCodeToGlyphId[cmapMappings[_i7].charCode] = cmapMappings[_i7].glyphId;
                        }
                        forcePostTable = true;
                      } else {
                        for (var _i8 = 0; _i8 < cmapMappingsLength; ++_i8) {
                          var _charCode2 = cmapMappings[_i8].charCode;
                          if (cmapPlatformId === 3 && _charCode2 >= 61440 && _charCode2 <= 61695) {
                            _charCode2 &= 255;
                          }
                          charCodeToGlyphId[_charCode2] = cmapMappings[_i8].glyphId;
                        }
                      }
                      if (properties.glyphNames && (baseEncoding.length || this.differences.length)) {
                        for (var _i9 = 0; _i9 < 256; ++_i9) {
                          if (!forcePostTable && charCodeToGlyphId[_i9] !== void 0) {
                            continue;
                          }
                          var _glyphName = this.differences[_i9] || baseEncoding[_i9];
                          if (!_glyphName) {
                            continue;
                          }
                          var glyphId = properties.glyphNames.indexOf(_glyphName);
                          if (glyphId > 0 && hasGlyph(glyphId)) {
                            charCodeToGlyphId[_i9] = glyphId;
                          }
                        }
                      }
                    }
                    if (charCodeToGlyphId.length === 0) {
                      charCodeToGlyphId[0] = 0;
                    }
                    var glyphZeroId = numGlyphsOut - 1;
                    if (!dupFirstEntry) {
                      glyphZeroId = 0;
                    }
                    if (!properties.cssFontInfo) {
                      var newMapping = adjustMapping(charCodeToGlyphId, hasGlyph, glyphZeroId);
                      this.toFontChar = newMapping.toFontChar;
                      tables.cmap = {
                        tag: "cmap",
                        data: createCmapTable(newMapping.charCodeToGlyphId, numGlyphsOut)
                      };
                      if (!tables["OS/2"] || !validateOS2Table(tables["OS/2"], font)) {
                        tables["OS/2"] = {
                          tag: "OS/2",
                          data: createOS2Table(properties, newMapping.charCodeToGlyphId, metricsOverride)
                        };
                      }
                    }
                    if (!isTrueType) {
                      try {
                        cffFile = new _stream.Stream(tables["CFF "].data);
                        var parser = new _cff_parser.CFFParser(cffFile, properties, _fonts_utils.SEAC_ANALYSIS_ENABLED);
                        cff = parser.parse();
                        cff.duplicateFirstGlyph();
                        var compiler = new _cff_parser.CFFCompiler(cff);
                        tables["CFF "].data = compiler.compile();
                      } catch (e) {
                        (0, _util.warn)("Failed to compile font " + properties.loadedName);
                      }
                    }
                    if (!tables.name) {
                      tables.name = {
                        tag: "name",
                        data: createNameTable(this.name)
                      };
                    } else {
                      var namePrototype = readNameTable(tables.name);
                      tables.name.data = createNameTable(name, namePrototype);
                      this.psName = namePrototype[0][6] || null;
                    }
                    var builder = new _opentype_file_builder.OpenTypeFileBuilder(header.version);
                    for (var tableTag in tables) {
                      builder.addTable(tableTag, tables[tableTag].data);
                    }
                    return builder.toArray();
                  }
                }, {
                  key: "convert",
                  value: function convert(fontName, font, properties) {
                    properties.fixedPitch = false;
                    if (properties.builtInEncoding) {
                      adjustToUnicode(properties, properties.builtInEncoding);
                    }
                    var glyphZeroId = 1;
                    if (font instanceof _cff_font.CFFFont) {
                      glyphZeroId = font.numGlyphs - 1;
                    }
                    var mapping = font.getGlyphMapping(properties);
                    var newMapping = null;
                    var newCharCodeToGlyphId = mapping;
                    if (!properties.cssFontInfo) {
                      newMapping = adjustMapping(mapping, font.hasGlyphId.bind(font), glyphZeroId);
                      this.toFontChar = newMapping.toFontChar;
                      newCharCodeToGlyphId = newMapping.charCodeToGlyphId;
                    }
                    var numGlyphs = font.numGlyphs;
                    function getCharCodes(charCodeToGlyphId2, glyphId2) {
                      var charCodes2 = null;
                      for (var charCode2 in charCodeToGlyphId2) {
                        if (glyphId2 === charCodeToGlyphId2[charCode2]) {
                          if (!charCodes2) {
                            charCodes2 = [];
                          }
                          charCodes2.push(charCode2 | 0);
                        }
                      }
                      return charCodes2;
                    }
                    function createCharCode(charCodeToGlyphId2, glyphId2) {
                      for (var charCode2 in charCodeToGlyphId2) {
                        if (glyphId2 === charCodeToGlyphId2[charCode2]) {
                          return charCode2 | 0;
                        }
                      }
                      newMapping.charCodeToGlyphId[newMapping.nextAvailableFontCharCode] = glyphId2;
                      return newMapping.nextAvailableFontCharCode++;
                    }
                    var seacs = font.seacs;
                    if (newMapping && _fonts_utils.SEAC_ANALYSIS_ENABLED && seacs && seacs.length) {
                      var matrix = properties.fontMatrix || _util.FONT_IDENTITY_MATRIX;
                      var charset = font.getCharset();
                      var seacMap = /* @__PURE__ */ Object.create(null);
                      for (var glyphId in seacs) {
                        glyphId |= 0;
                        var seac = seacs[glyphId];
                        var baseGlyphName = _encodings.StandardEncoding[seac[2]];
                        var accentGlyphName = _encodings.StandardEncoding[seac[3]];
                        var baseGlyphId = charset.indexOf(baseGlyphName);
                        var accentGlyphId = charset.indexOf(accentGlyphName);
                        if (baseGlyphId < 0 || accentGlyphId < 0) {
                          continue;
                        }
                        var accentOffset = {
                          x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],
                          y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5]
                        };
                        var charCodes = getCharCodes(mapping, glyphId);
                        if (!charCodes) {
                          continue;
                        }
                        for (var i = 0, ii = charCodes.length; i < ii; i++) {
                          var charCode = charCodes[i];
                          var charCodeToGlyphId = newMapping.charCodeToGlyphId;
                          var baseFontCharCode = createCharCode(charCodeToGlyphId, baseGlyphId);
                          var accentFontCharCode = createCharCode(charCodeToGlyphId, accentGlyphId);
                          seacMap[charCode] = {
                            baseFontCharCode,
                            accentFontCharCode,
                            accentOffset
                          };
                        }
                      }
                      properties.seacMap = seacMap;
                    }
                    var unitsPerEm = 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];
                    var builder = new _opentype_file_builder.OpenTypeFileBuilder("OTTO");
                    builder.addTable("CFF ", font.data);
                    builder.addTable("OS/2", createOS2Table(properties, newCharCodeToGlyphId));
                    builder.addTable("cmap", createCmapTable(newCharCodeToGlyphId, numGlyphs));
                    builder.addTable("head", "\0\0\0\0\0\0\0\0\0\0_<\xF5\0\0" + safeString16(unitsPerEm) + "\0\0\0\0\x9E\v~'\0\0\0\0\x9E\v~'\0\0" + safeString16(properties.descent) + "\xFF" + safeString16(properties.ascent) + string16(properties.italicAngle ? 2 : 0) + "\0\0\0\0\0\0\0");
                    builder.addTable("hhea", "\0\0\0" + safeString16(properties.ascent) + safeString16(properties.descent) + "\0\0\xFF\xFF\0\0\0\0\0\0" + safeString16(properties.capHeight) + safeString16(Math.tan(properties.italicAngle) * properties.xHeight) + "\0\0\0\0\0\0\0\0\0\0\0\0" + string16(numGlyphs));
                    builder.addTable("hmtx", function fontFieldsHmtx() {
                      var charstrings = font.charstrings;
                      var cffWidths = font.cff ? font.cff.widths : null;
                      var hmtx = "\0\0\0\0";
                      for (var _i10 = 1, _ii = numGlyphs; _i10 < _ii; _i10++) {
                        var width = 0;
                        if (charstrings) {
                          var charstring = charstrings[_i10 - 1];
                          width = "width" in charstring ? charstring.width : 0;
                        } else if (cffWidths) {
                          width = Math.ceil(cffWidths[_i10] || 0);
                        }
                        hmtx += string16(width) + string16(0);
                      }
                      return hmtx;
                    }());
                    builder.addTable("maxp", "\0\0P\0" + string16(numGlyphs));
                    builder.addTable("name", createNameTable(fontName));
                    builder.addTable("post", createPostTable(properties));
                    return builder.toArray();
                  }
                }, {
                  key: "spaceWidth",
                  get: function get() {
                    var possibleSpaceReplacements = ["space", "minus", "one", "i", "I"];
                    var width;
                    for (var i = 0, ii = possibleSpaceReplacements.length; i < ii; i++) {
                      var glyphName = possibleSpaceReplacements[i];
                      if (glyphName in this.widths) {
                        width = this.widths[glyphName];
                        break;
                      }
                      var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
                      var glyphUnicode = glyphsUnicodeMap[glyphName];
                      var charcode = 0;
                      if (this.composite && this.cMap.contains(glyphUnicode)) {
                        charcode = this.cMap.lookup(glyphUnicode);
                        if (typeof charcode === "string") {
                          charcode = convertCidString(glyphUnicode, charcode);
                        }
                      }
                      if (!charcode && this.toUnicode) {
                        charcode = this.toUnicode.charCodeOf(glyphUnicode);
                      }
                      if (charcode <= 0) {
                        charcode = glyphUnicode;
                      }
                      width = this.widths[charcode];
                      if (width) {
                        break;
                      }
                    }
                    width = width || this.defaultWidth;
                    return (0, _util.shadow)(this, "spaceWidth", width);
                  }
                }, {
                  key: "_charToGlyph",
                  value: function _charToGlyph(charcode) {
                    var isSpace = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    var fontCharCode, width, operatorListId;
                    var widthCode = charcode;
                    if (this.cMap && this.cMap.contains(charcode)) {
                      widthCode = this.cMap.lookup(charcode);
                      if (typeof widthCode === "string") {
                        widthCode = convertCidString(charcode, widthCode);
                      }
                    }
                    width = this.widths[widthCode];
                    width = (0, _util.isNum)(width) ? width : this.defaultWidth;
                    var vmetric = this.vmetrics && this.vmetrics[widthCode];
                    var unicode = this.toUnicode.get(charcode) || charcode;
                    if (typeof unicode === "number") {
                      unicode = String.fromCharCode(unicode);
                    }
                    var isInFont = this.toFontChar[charcode] !== void 0;
                    fontCharCode = this.toFontChar[charcode] || charcode;
                    if (this.missingFile) {
                      var glyphName = this.differences[charcode] || this.defaultEncoding[charcode];
                      if ((glyphName === ".notdef" || glyphName === "") && this.type === "Type1") {
                        fontCharCode = 32;
                      }
                      fontCharCode = (0, _unicode.mapSpecialUnicodeValues)(fontCharCode);
                    }
                    if (this.isType3Font) {
                      operatorListId = fontCharCode;
                    }
                    var accent = null;
                    if (this.seacMap && this.seacMap[charcode]) {
                      isInFont = true;
                      var seac = this.seacMap[charcode];
                      fontCharCode = seac.baseFontCharCode;
                      accent = {
                        fontChar: String.fromCodePoint(seac.accentFontCharCode),
                        offset: seac.accentOffset
                      };
                    }
                    var fontChar = "";
                    if (typeof fontCharCode === "number") {
                      if (fontCharCode <= 1114111) {
                        fontChar = String.fromCodePoint(fontCharCode);
                      } else {
                        (0, _util.warn)("charToGlyph - invalid fontCharCode: ".concat(fontCharCode));
                      }
                    }
                    var glyph = this._glyphCache[charcode];
                    if (!glyph || !glyph.matchesForCache(charcode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont)) {
                      glyph = new Glyph(charcode, fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont);
                      this._glyphCache[charcode] = glyph;
                    }
                    return glyph;
                  }
                }, {
                  key: "charsToGlyphs",
                  value: function charsToGlyphs(chars) {
                    var glyphs = this._charsCache[chars];
                    if (glyphs) {
                      return glyphs;
                    }
                    glyphs = [];
                    if (this.cMap) {
                      var c = /* @__PURE__ */ Object.create(null), ii = chars.length;
                      var i = 0;
                      while (i < ii) {
                        this.cMap.readCharCode(chars, i, c);
                        var charcode = c.charcode, length = c.length;
                        i += length;
                        var glyph = this._charToGlyph(charcode, length === 1 && chars.charCodeAt(i - 1) === 32);
                        glyphs.push(glyph);
                      }
                    } else {
                      for (var _i11 = 0, _ii2 = chars.length; _i11 < _ii2; ++_i11) {
                        var _charcode = chars.charCodeAt(_i11);
                        var _glyph = this._charToGlyph(_charcode, _charcode === 32);
                        glyphs.push(_glyph);
                      }
                    }
                    return this._charsCache[chars] = glyphs;
                  }
                }, {
                  key: "getCharPositions",
                  value: function getCharPositions(chars) {
                    var positions = [];
                    if (this.cMap) {
                      var c = /* @__PURE__ */ Object.create(null);
                      var i = 0;
                      while (i < chars.length) {
                        this.cMap.readCharCode(chars, i, c);
                        var length = c.length;
                        positions.push([i, i + length]);
                        i += length;
                      }
                    } else {
                      for (var _i12 = 0, ii = chars.length; _i12 < ii; ++_i12) {
                        positions.push([_i12, _i12 + 1]);
                      }
                    }
                    return positions;
                  }
                }, {
                  key: "glyphCacheValues",
                  get: function get() {
                    return Object.values(this._glyphCache);
                  }
                }, {
                  key: "encodeString",
                  value: function encodeString(str) {
                    var _this2 = this;
                    var buffers = [];
                    var currentBuf = [];
                    var hasCurrentBufErrors = function hasCurrentBufErrors2() {
                      return buffers.length % 2 === 1;
                    };
                    var getCharCode = this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap ? function(unicode2) {
                      return _this2.toUnicode.charCodeOf(unicode2);
                    } : function(unicode2) {
                      return _this2.toUnicode.charCodeOf(String.fromCodePoint(unicode2));
                    };
                    for (var i = 0, ii = str.length; i < ii; i++) {
                      var unicode = str.codePointAt(i);
                      if (unicode > 55295 && (unicode < 57344 || unicode > 65533)) {
                        i++;
                      }
                      if (this.toUnicode) {
                        var charCode = getCharCode(unicode);
                        if (charCode !== -1) {
                          if (hasCurrentBufErrors()) {
                            buffers.push(currentBuf.join(""));
                            currentBuf.length = 0;
                          }
                          var charCodeLength = this.cMap ? this.cMap.getCharCodeLength(charCode) : 1;
                          for (var j = charCodeLength - 1; j >= 0; j--) {
                            currentBuf.push(String.fromCharCode(charCode >> 8 * j & 255));
                          }
                          continue;
                        }
                      }
                      if (!hasCurrentBufErrors()) {
                        buffers.push(currentBuf.join(""));
                        currentBuf.length = 0;
                      }
                      currentBuf.push(String.fromCodePoint(unicode));
                    }
                    buffers.push(currentBuf.join(""));
                    return buffers;
                  }
                }]);
                return Font2;
              }();
              exports2.Font = Font;
              var ErrorFont = /* @__PURE__ */ function() {
                function ErrorFont2(error) {
                  _classCallCheck(this, ErrorFont2);
                  this.error = error;
                  this.loadedName = "g_font_error";
                  this.missingFile = true;
                }
                _createClass(ErrorFont2, [{
                  key: "charsToGlyphs",
                  value: function charsToGlyphs() {
                    return [];
                  }
                }, {
                  key: "encodeString",
                  value: function encodeString(chars) {
                    return [chars];
                  }
                }, {
                  key: "exportData",
                  value: function exportData() {
                    var extraProperties = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    return {
                      error: this.error
                    };
                  }
                }]);
                return ErrorFont2;
              }();
              exports2.ErrorFont = ErrorFont;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.CFFTopDict = exports2.CFFStrings = exports2.CFFStandardStrings = exports2.CFFPrivateDict = exports2.CFFParser = exports2.CFFIndex = exports2.CFFHeader = exports2.CFFFDSelect = exports2.CFFCompiler = exports2.CFFCharset = exports2.CFF = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _charsets = __w_pdfjs_require__2(176);
              var _encodings = __w_pdfjs_require__2(149);
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var MAX_SUBR_NESTING = 10;
              var CFFStandardStrings = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"];
              exports2.CFFStandardStrings = CFFStandardStrings;
              var NUM_STANDARD_CFF_STRINGS = 391;
              var CFFParser = function CFFParserClosure() {
                var CharstringValidationData = [null, {
                  id: "hstem",
                  min: 2,
                  stackClearing: true,
                  stem: true
                }, null, {
                  id: "vstem",
                  min: 2,
                  stackClearing: true,
                  stem: true
                }, {
                  id: "vmoveto",
                  min: 1,
                  stackClearing: true
                }, {
                  id: "rlineto",
                  min: 2,
                  resetStack: true
                }, {
                  id: "hlineto",
                  min: 1,
                  resetStack: true
                }, {
                  id: "vlineto",
                  min: 1,
                  resetStack: true
                }, {
                  id: "rrcurveto",
                  min: 6,
                  resetStack: true
                }, null, {
                  id: "callsubr",
                  min: 1,
                  undefStack: true
                }, {
                  id: "return",
                  min: 0,
                  undefStack: true
                }, null, null, {
                  id: "endchar",
                  min: 0,
                  stackClearing: true
                }, null, null, null, {
                  id: "hstemhm",
                  min: 2,
                  stackClearing: true,
                  stem: true
                }, {
                  id: "hintmask",
                  min: 0,
                  stackClearing: true
                }, {
                  id: "cntrmask",
                  min: 0,
                  stackClearing: true
                }, {
                  id: "rmoveto",
                  min: 2,
                  stackClearing: true
                }, {
                  id: "hmoveto",
                  min: 1,
                  stackClearing: true
                }, {
                  id: "vstemhm",
                  min: 2,
                  stackClearing: true,
                  stem: true
                }, {
                  id: "rcurveline",
                  min: 8,
                  resetStack: true
                }, {
                  id: "rlinecurve",
                  min: 8,
                  resetStack: true
                }, {
                  id: "vvcurveto",
                  min: 4,
                  resetStack: true
                }, {
                  id: "hhcurveto",
                  min: 4,
                  resetStack: true
                }, null, {
                  id: "callgsubr",
                  min: 1,
                  undefStack: true
                }, {
                  id: "vhcurveto",
                  min: 4,
                  resetStack: true
                }, {
                  id: "hvcurveto",
                  min: 4,
                  resetStack: true
                }];
                var CharstringValidationData12 = [null, null, null, {
                  id: "and",
                  min: 2,
                  stackDelta: -1
                }, {
                  id: "or",
                  min: 2,
                  stackDelta: -1
                }, {
                  id: "not",
                  min: 1,
                  stackDelta: 0
                }, null, null, null, {
                  id: "abs",
                  min: 1,
                  stackDelta: 0
                }, {
                  id: "add",
                  min: 2,
                  stackDelta: -1,
                  stackFn: function stack_div(stack, index) {
                    stack[index - 2] = stack[index - 2] + stack[index - 1];
                  }
                }, {
                  id: "sub",
                  min: 2,
                  stackDelta: -1,
                  stackFn: function stack_div(stack, index) {
                    stack[index - 2] = stack[index - 2] - stack[index - 1];
                  }
                }, {
                  id: "div",
                  min: 2,
                  stackDelta: -1,
                  stackFn: function stack_div(stack, index) {
                    stack[index - 2] = stack[index - 2] / stack[index - 1];
                  }
                }, null, {
                  id: "neg",
                  min: 1,
                  stackDelta: 0,
                  stackFn: function stack_div(stack, index) {
                    stack[index - 1] = -stack[index - 1];
                  }
                }, {
                  id: "eq",
                  min: 2,
                  stackDelta: -1
                }, null, null, {
                  id: "drop",
                  min: 1,
                  stackDelta: -1
                }, null, {
                  id: "put",
                  min: 2,
                  stackDelta: -2
                }, {
                  id: "get",
                  min: 1,
                  stackDelta: 0
                }, {
                  id: "ifelse",
                  min: 4,
                  stackDelta: -3
                }, {
                  id: "random",
                  min: 0,
                  stackDelta: 1
                }, {
                  id: "mul",
                  min: 2,
                  stackDelta: -1,
                  stackFn: function stack_div(stack, index) {
                    stack[index - 2] = stack[index - 2] * stack[index - 1];
                  }
                }, null, {
                  id: "sqrt",
                  min: 1,
                  stackDelta: 0
                }, {
                  id: "dup",
                  min: 1,
                  stackDelta: 1
                }, {
                  id: "exch",
                  min: 2,
                  stackDelta: 0
                }, {
                  id: "index",
                  min: 2,
                  stackDelta: 0
                }, {
                  id: "roll",
                  min: 3,
                  stackDelta: -2
                }, null, null, null, {
                  id: "hflex",
                  min: 7,
                  resetStack: true
                }, {
                  id: "flex",
                  min: 13,
                  resetStack: true
                }, {
                  id: "hflex1",
                  min: 9,
                  resetStack: true
                }, {
                  id: "flex1",
                  min: 11,
                  resetStack: true
                }];
                var CFFParser2 = /* @__PURE__ */ function() {
                  function CFFParser3(file, properties, seacAnalysisEnabled) {
                    _classCallCheck(this, CFFParser3);
                    this.bytes = file.getBytes();
                    this.properties = properties;
                    this.seacAnalysisEnabled = !!seacAnalysisEnabled;
                  }
                  _createClass(CFFParser3, [{
                    key: "parse",
                    value: function parse() {
                      var properties = this.properties;
                      var cff = new CFF();
                      this.cff = cff;
                      var header = this.parseHeader();
                      var nameIndex = this.parseIndex(header.endPos);
                      var topDictIndex = this.parseIndex(nameIndex.endPos);
                      var stringIndex = this.parseIndex(topDictIndex.endPos);
                      var globalSubrIndex = this.parseIndex(stringIndex.endPos);
                      var topDictParsed = this.parseDict(topDictIndex.obj.get(0));
                      var topDict = this.createDict(CFFTopDict, topDictParsed, cff.strings);
                      cff.header = header.obj;
                      cff.names = this.parseNameIndex(nameIndex.obj);
                      cff.strings = this.parseStringIndex(stringIndex.obj);
                      cff.topDict = topDict;
                      cff.globalSubrIndex = globalSubrIndex.obj;
                      this.parsePrivateDict(cff.topDict);
                      cff.isCIDFont = topDict.hasName("ROS");
                      var charStringOffset = topDict.getByName("CharStrings");
                      var charStringIndex = this.parseIndex(charStringOffset).obj;
                      var fontMatrix = topDict.getByName("FontMatrix");
                      if (fontMatrix) {
                        properties.fontMatrix = fontMatrix;
                      }
                      var fontBBox = topDict.getByName("FontBBox");
                      if (fontBBox) {
                        properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
                        properties.descent = Math.min(fontBBox[1], fontBBox[3]);
                        properties.ascentScaled = true;
                      }
                      var charset, encoding;
                      if (cff.isCIDFont) {
                        var fdArrayIndex = this.parseIndex(topDict.getByName("FDArray")).obj;
                        for (var i = 0, ii = fdArrayIndex.count; i < ii; ++i) {
                          var dictRaw = fdArrayIndex.get(i);
                          var fontDict = this.createDict(CFFTopDict, this.parseDict(dictRaw), cff.strings);
                          this.parsePrivateDict(fontDict);
                          cff.fdArray.push(fontDict);
                        }
                        encoding = null;
                        charset = this.parseCharsets(topDict.getByName("charset"), charStringIndex.count, cff.strings, true);
                        cff.fdSelect = this.parseFDSelect(topDict.getByName("FDSelect"), charStringIndex.count);
                      } else {
                        charset = this.parseCharsets(topDict.getByName("charset"), charStringIndex.count, cff.strings, false);
                        encoding = this.parseEncoding(topDict.getByName("Encoding"), properties, cff.strings, charset.charset);
                      }
                      cff.charset = charset;
                      cff.encoding = encoding;
                      var charStringsAndSeacs = this.parseCharStrings({
                        charStrings: charStringIndex,
                        localSubrIndex: topDict.privateDict.subrsIndex,
                        globalSubrIndex: globalSubrIndex.obj,
                        fdSelect: cff.fdSelect,
                        fdArray: cff.fdArray,
                        privateDict: topDict.privateDict
                      });
                      cff.charStrings = charStringsAndSeacs.charStrings;
                      cff.seacs = charStringsAndSeacs.seacs;
                      cff.widths = charStringsAndSeacs.widths;
                      return cff;
                    }
                  }, {
                    key: "parseHeader",
                    value: function parseHeader() {
                      var bytes = this.bytes;
                      var bytesLength = bytes.length;
                      var offset = 0;
                      while (offset < bytesLength && bytes[offset] !== 1) {
                        ++offset;
                      }
                      if (offset >= bytesLength) {
                        throw new _util.FormatError("Invalid CFF header");
                      }
                      if (offset !== 0) {
                        (0, _util.info)("cff data is shifted");
                        bytes = bytes.subarray(offset);
                        this.bytes = bytes;
                      }
                      var major = bytes[0];
                      var minor = bytes[1];
                      var hdrSize = bytes[2];
                      var offSize = bytes[3];
                      var header = new CFFHeader(major, minor, hdrSize, offSize);
                      return {
                        obj: header,
                        endPos: hdrSize
                      };
                    }
                  }, {
                    key: "parseDict",
                    value: function parseDict(dict) {
                      var pos = 0;
                      function parseOperand() {
                        var value = dict[pos++];
                        if (value === 30) {
                          return parseFloatOperand();
                        } else if (value === 28) {
                          value = dict[pos++];
                          value = (value << 24 | dict[pos++] << 16) >> 16;
                          return value;
                        } else if (value === 29) {
                          value = dict[pos++];
                          value = value << 8 | dict[pos++];
                          value = value << 8 | dict[pos++];
                          value = value << 8 | dict[pos++];
                          return value;
                        } else if (value >= 32 && value <= 246) {
                          return value - 139;
                        } else if (value >= 247 && value <= 250) {
                          return (value - 247) * 256 + dict[pos++] + 108;
                        } else if (value >= 251 && value <= 254) {
                          return -((value - 251) * 256) - dict[pos++] - 108;
                        }
                        (0, _util.warn)('CFFParser_parseDict: "' + value + '" is a reserved command.');
                        return NaN;
                      }
                      function parseFloatOperand() {
                        var str = "";
                        var eof = 15;
                        var lookup = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"];
                        var length = dict.length;
                        while (pos < length) {
                          var b2 = dict[pos++];
                          var b1 = b2 >> 4;
                          var b22 = b2 & 15;
                          if (b1 === eof) {
                            break;
                          }
                          str += lookup[b1];
                          if (b22 === eof) {
                            break;
                          }
                          str += lookup[b22];
                        }
                        return parseFloat(str);
                      }
                      var operands = [];
                      var entries = [];
                      pos = 0;
                      var end = dict.length;
                      while (pos < end) {
                        var b = dict[pos];
                        if (b <= 21) {
                          if (b === 12) {
                            b = b << 8 | dict[++pos];
                          }
                          entries.push([b, operands]);
                          operands = [];
                          ++pos;
                        } else {
                          operands.push(parseOperand());
                        }
                      }
                      return entries;
                    }
                  }, {
                    key: "parseIndex",
                    value: function parseIndex(pos) {
                      var cffIndex = new CFFIndex();
                      var bytes = this.bytes;
                      var count = bytes[pos++] << 8 | bytes[pos++];
                      var offsets = [];
                      var end = pos;
                      var i, ii;
                      if (count !== 0) {
                        var offsetSize = bytes[pos++];
                        var startPos = pos + (count + 1) * offsetSize - 1;
                        for (i = 0, ii = count + 1; i < ii; ++i) {
                          var offset = 0;
                          for (var j = 0; j < offsetSize; ++j) {
                            offset <<= 8;
                            offset += bytes[pos++];
                          }
                          offsets.push(startPos + offset);
                        }
                        end = offsets[count];
                      }
                      for (i = 0, ii = offsets.length - 1; i < ii; ++i) {
                        var offsetStart = offsets[i];
                        var offsetEnd = offsets[i + 1];
                        cffIndex.add(bytes.subarray(offsetStart, offsetEnd));
                      }
                      return {
                        obj: cffIndex,
                        endPos: end
                      };
                    }
                  }, {
                    key: "parseNameIndex",
                    value: function parseNameIndex(index) {
                      var names = [];
                      for (var i = 0, ii = index.count; i < ii; ++i) {
                        var name = index.get(i);
                        names.push((0, _util.bytesToString)(name));
                      }
                      return names;
                    }
                  }, {
                    key: "parseStringIndex",
                    value: function parseStringIndex(index) {
                      var strings = new CFFStrings();
                      for (var i = 0, ii = index.count; i < ii; ++i) {
                        var data = index.get(i);
                        strings.add((0, _util.bytesToString)(data));
                      }
                      return strings;
                    }
                  }, {
                    key: "createDict",
                    value: function createDict(Type, dict, strings) {
                      var cffDict = new Type(strings);
                      for (var i = 0, ii = dict.length; i < ii; ++i) {
                        var pair = dict[i];
                        var key = pair[0];
                        var value = pair[1];
                        cffDict.setByKey(key, value);
                      }
                      return cffDict;
                    }
                  }, {
                    key: "parseCharString",
                    value: function parseCharString(state, data, localSubrIndex, globalSubrIndex) {
                      if (!data || state.callDepth > MAX_SUBR_NESTING) {
                        return false;
                      }
                      var stackSize = state.stackSize;
                      var stack = state.stack;
                      var length = data.length;
                      for (var j = 0; j < length; ) {
                        var value = data[j++];
                        var validationCommand = null;
                        if (value === 12) {
                          var q = data[j++];
                          if (q === 0) {
                            data[j - 2] = 139;
                            data[j - 1] = 22;
                            stackSize = 0;
                          } else {
                            validationCommand = CharstringValidationData12[q];
                          }
                        } else if (value === 28) {
                          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16) >> 16;
                          j += 2;
                          stackSize++;
                        } else if (value === 14) {
                          if (stackSize >= 4) {
                            stackSize -= 4;
                            if (this.seacAnalysisEnabled) {
                              state.seac = stack.slice(stackSize, stackSize + 4);
                              return false;
                            }
                          }
                          validationCommand = CharstringValidationData[value];
                        } else if (value >= 32 && value <= 246) {
                          stack[stackSize] = value - 139;
                          stackSize++;
                        } else if (value >= 247 && value <= 254) {
                          stack[stackSize] = value < 251 ? (value - 247 << 8) + data[j] + 108 : -(value - 251 << 8) - data[j] - 108;
                          j++;
                          stackSize++;
                        } else if (value === 255) {
                          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16 | data[j + 2] << 8 | data[j + 3]) / 65536;
                          j += 4;
                          stackSize++;
                        } else if (value === 19 || value === 20) {
                          state.hints += stackSize >> 1;
                          j += state.hints + 7 >> 3;
                          stackSize %= 2;
                          validationCommand = CharstringValidationData[value];
                        } else if (value === 10 || value === 29) {
                          var subrsIndex = void 0;
                          if (value === 10) {
                            subrsIndex = localSubrIndex;
                          } else {
                            subrsIndex = globalSubrIndex;
                          }
                          if (!subrsIndex) {
                            validationCommand = CharstringValidationData[value];
                            (0, _util.warn)("Missing subrsIndex for " + validationCommand.id);
                            return false;
                          }
                          var bias = 32768;
                          if (subrsIndex.count < 1240) {
                            bias = 107;
                          } else if (subrsIndex.count < 33900) {
                            bias = 1131;
                          }
                          var subrNumber = stack[--stackSize] + bias;
                          if (subrNumber < 0 || subrNumber >= subrsIndex.count || isNaN(subrNumber)) {
                            validationCommand = CharstringValidationData[value];
                            (0, _util.warn)("Out of bounds subrIndex for " + validationCommand.id);
                            return false;
                          }
                          state.stackSize = stackSize;
                          state.callDepth++;
                          var valid = this.parseCharString(state, subrsIndex.get(subrNumber), localSubrIndex, globalSubrIndex);
                          if (!valid) {
                            return false;
                          }
                          state.callDepth--;
                          stackSize = state.stackSize;
                          continue;
                        } else if (value === 11) {
                          state.stackSize = stackSize;
                          return true;
                        } else if (value === 0 && j === data.length) {
                          data[j - 1] = 14;
                          validationCommand = CharstringValidationData[14];
                        } else {
                          validationCommand = CharstringValidationData[value];
                        }
                        if (validationCommand) {
                          if (validationCommand.stem) {
                            state.hints += stackSize >> 1;
                            if (value === 3 || value === 23) {
                              state.hasVStems = true;
                            } else if (state.hasVStems && (value === 1 || value === 18)) {
                              (0, _util.warn)("CFF stem hints are in wrong order");
                              data[j - 1] = value === 1 ? 3 : 23;
                            }
                          }
                          if ("min" in validationCommand) {
                            if (!state.undefStack && stackSize < validationCommand.min) {
                              (0, _util.warn)("Not enough parameters for " + validationCommand.id + "; actual: " + stackSize + ", expected: " + validationCommand.min);
                              if (stackSize === 0) {
                                data[j - 1] = 14;
                                return true;
                              }
                              return false;
                            }
                          }
                          if (state.firstStackClearing && validationCommand.stackClearing) {
                            state.firstStackClearing = false;
                            stackSize -= validationCommand.min;
                            if (stackSize >= 2 && validationCommand.stem) {
                              stackSize %= 2;
                            } else if (stackSize > 1) {
                              (0, _util.warn)("Found too many parameters for stack-clearing command");
                            }
                            if (stackSize > 0) {
                              state.width = stack[stackSize - 1];
                            }
                          }
                          if ("stackDelta" in validationCommand) {
                            if ("stackFn" in validationCommand) {
                              validationCommand.stackFn(stack, stackSize);
                            }
                            stackSize += validationCommand.stackDelta;
                          } else if (validationCommand.stackClearing) {
                            stackSize = 0;
                          } else if (validationCommand.resetStack) {
                            stackSize = 0;
                            state.undefStack = false;
                          } else if (validationCommand.undefStack) {
                            stackSize = 0;
                            state.undefStack = true;
                            state.firstStackClearing = false;
                          }
                        }
                      }
                      state.stackSize = stackSize;
                      return true;
                    }
                  }, {
                    key: "parseCharStrings",
                    value: function parseCharStrings(_ref) {
                      var charStrings = _ref.charStrings, localSubrIndex = _ref.localSubrIndex, globalSubrIndex = _ref.globalSubrIndex, fdSelect = _ref.fdSelect, fdArray = _ref.fdArray, privateDict = _ref.privateDict;
                      var seacs = [];
                      var widths = [];
                      var count = charStrings.count;
                      for (var i = 0; i < count; i++) {
                        var charstring = charStrings.get(i);
                        var state = {
                          callDepth: 0,
                          stackSize: 0,
                          stack: [],
                          undefStack: true,
                          hints: 0,
                          firstStackClearing: true,
                          seac: null,
                          width: null,
                          hasVStems: false
                        };
                        var valid = true;
                        var localSubrToUse = null;
                        var privateDictToUse = privateDict;
                        if (fdSelect && fdArray.length) {
                          var fdIndex = fdSelect.getFDIndex(i);
                          if (fdIndex === -1) {
                            (0, _util.warn)("Glyph index is not in fd select.");
                            valid = false;
                          }
                          if (fdIndex >= fdArray.length) {
                            (0, _util.warn)("Invalid fd index for glyph index.");
                            valid = false;
                          }
                          if (valid) {
                            privateDictToUse = fdArray[fdIndex].privateDict;
                            localSubrToUse = privateDictToUse.subrsIndex;
                          }
                        } else if (localSubrIndex) {
                          localSubrToUse = localSubrIndex;
                        }
                        if (valid) {
                          valid = this.parseCharString(state, charstring, localSubrToUse, globalSubrIndex);
                        }
                        if (state.width !== null) {
                          var nominalWidth = privateDictToUse.getByName("nominalWidthX");
                          widths[i] = nominalWidth + state.width;
                        } else {
                          var defaultWidth = privateDictToUse.getByName("defaultWidthX");
                          widths[i] = defaultWidth;
                        }
                        if (state.seac !== null) {
                          seacs[i] = state.seac;
                        }
                        if (!valid) {
                          charStrings.set(i, new Uint8Array([14]));
                        }
                      }
                      return {
                        charStrings,
                        seacs,
                        widths
                      };
                    }
                  }, {
                    key: "emptyPrivateDictionary",
                    value: function emptyPrivateDictionary(parentDict) {
                      var privateDict = this.createDict(CFFPrivateDict, [], parentDict.strings);
                      parentDict.setByKey(18, [0, 0]);
                      parentDict.privateDict = privateDict;
                    }
                  }, {
                    key: "parsePrivateDict",
                    value: function parsePrivateDict(parentDict) {
                      if (!parentDict.hasName("Private")) {
                        this.emptyPrivateDictionary(parentDict);
                        return;
                      }
                      var privateOffset = parentDict.getByName("Private");
                      if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {
                        parentDict.removeByName("Private");
                        return;
                      }
                      var size = privateOffset[0];
                      var offset = privateOffset[1];
                      if (size === 0 || offset >= this.bytes.length) {
                        this.emptyPrivateDictionary(parentDict);
                        return;
                      }
                      var privateDictEnd = offset + size;
                      var dictData = this.bytes.subarray(offset, privateDictEnd);
                      var dict = this.parseDict(dictData);
                      var privateDict = this.createDict(CFFPrivateDict, dict, parentDict.strings);
                      parentDict.privateDict = privateDict;
                      if (!privateDict.getByName("Subrs")) {
                        return;
                      }
                      var subrsOffset = privateDict.getByName("Subrs");
                      var relativeOffset = offset + subrsOffset;
                      if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {
                        this.emptyPrivateDictionary(parentDict);
                        return;
                      }
                      var subrsIndex = this.parseIndex(relativeOffset);
                      privateDict.subrsIndex = subrsIndex.obj;
                    }
                  }, {
                    key: "parseCharsets",
                    value: function parseCharsets(pos, length, strings, cid) {
                      if (pos === 0) {
                        return new CFFCharset(true, CFFCharsetPredefinedTypes.ISO_ADOBE, _charsets.ISOAdobeCharset);
                      } else if (pos === 1) {
                        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT, _charsets.ExpertCharset);
                      } else if (pos === 2) {
                        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT_SUBSET, _charsets.ExpertSubsetCharset);
                      }
                      var bytes = this.bytes;
                      var start = pos;
                      var format = bytes[pos++];
                      var charset = [cid ? 0 : ".notdef"];
                      var id, count, i;
                      length -= 1;
                      switch (format) {
                        case 0:
                          for (i = 0; i < length; i++) {
                            id = bytes[pos++] << 8 | bytes[pos++];
                            charset.push(cid ? id : strings.get(id));
                          }
                          break;
                        case 1:
                          while (charset.length <= length) {
                            id = bytes[pos++] << 8 | bytes[pos++];
                            count = bytes[pos++];
                            for (i = 0; i <= count; i++) {
                              charset.push(cid ? id++ : strings.get(id++));
                            }
                          }
                          break;
                        case 2:
                          while (charset.length <= length) {
                            id = bytes[pos++] << 8 | bytes[pos++];
                            count = bytes[pos++] << 8 | bytes[pos++];
                            for (i = 0; i <= count; i++) {
                              charset.push(cid ? id++ : strings.get(id++));
                            }
                          }
                          break;
                        default:
                          throw new _util.FormatError("Unknown charset format");
                      }
                      var end = pos;
                      var raw = bytes.subarray(start, end);
                      return new CFFCharset(false, format, charset, raw);
                    }
                  }, {
                    key: "parseEncoding",
                    value: function parseEncoding(pos, properties, strings, charset) {
                      var encoding = /* @__PURE__ */ Object.create(null);
                      var bytes = this.bytes;
                      var predefined = false;
                      var format, i, ii;
                      var raw = null;
                      function readSupplement() {
                        var supplementsCount = bytes[pos++];
                        for (i = 0; i < supplementsCount; i++) {
                          var code = bytes[pos++];
                          var sid = (bytes[pos++] << 8) + (bytes[pos++] & 255);
                          encoding[code] = charset.indexOf(strings.get(sid));
                        }
                      }
                      if (pos === 0 || pos === 1) {
                        predefined = true;
                        format = pos;
                        var baseEncoding = pos ? _encodings.ExpertEncoding : _encodings.StandardEncoding;
                        for (i = 0, ii = charset.length; i < ii; i++) {
                          var index = baseEncoding.indexOf(charset[i]);
                          if (index !== -1) {
                            encoding[index] = i;
                          }
                        }
                      } else {
                        var dataStart = pos;
                        format = bytes[pos++];
                        switch (format & 127) {
                          case 0:
                            var glyphsCount = bytes[pos++];
                            for (i = 1; i <= glyphsCount; i++) {
                              encoding[bytes[pos++]] = i;
                            }
                            break;
                          case 1:
                            var rangesCount = bytes[pos++];
                            var gid = 1;
                            for (i = 0; i < rangesCount; i++) {
                              var start = bytes[pos++];
                              var left = bytes[pos++];
                              for (var j = start; j <= start + left; j++) {
                                encoding[j] = gid++;
                              }
                            }
                            break;
                          default:
                            throw new _util.FormatError("Unknown encoding format: ".concat(format, " in CFF"));
                        }
                        var dataEnd = pos;
                        if (format & 128) {
                          bytes[dataStart] &= 127;
                          readSupplement();
                        }
                        raw = bytes.subarray(dataStart, dataEnd);
                      }
                      format &= 127;
                      return new CFFEncoding(predefined, format, encoding, raw);
                    }
                  }, {
                    key: "parseFDSelect",
                    value: function parseFDSelect(pos, length) {
                      var bytes = this.bytes;
                      var format = bytes[pos++];
                      var fdSelect = [];
                      var i;
                      switch (format) {
                        case 0:
                          for (i = 0; i < length; ++i) {
                            var id = bytes[pos++];
                            fdSelect.push(id);
                          }
                          break;
                        case 3:
                          var rangesCount = bytes[pos++] << 8 | bytes[pos++];
                          for (i = 0; i < rangesCount; ++i) {
                            var first = bytes[pos++] << 8 | bytes[pos++];
                            if (i === 0 && first !== 0) {
                              (0, _util.warn)("parseFDSelect: The first range must have a first GID of 0 -- trying to recover.");
                              first = 0;
                            }
                            var fdIndex = bytes[pos++];
                            var next = bytes[pos] << 8 | bytes[pos + 1];
                            for (var j = first; j < next; ++j) {
                              fdSelect.push(fdIndex);
                            }
                          }
                          pos += 2;
                          break;
                        default:
                          throw new _util.FormatError('parseFDSelect: Unknown format "'.concat(format, '".'));
                      }
                      if (fdSelect.length !== length) {
                        throw new _util.FormatError("parseFDSelect: Invalid font data.");
                      }
                      return new CFFFDSelect(format, fdSelect);
                    }
                  }]);
                  return CFFParser3;
                }();
                return CFFParser2;
              }();
              exports2.CFFParser = CFFParser;
              var CFF = /* @__PURE__ */ function() {
                function CFF2() {
                  _classCallCheck(this, CFF2);
                  this.header = null;
                  this.names = [];
                  this.topDict = null;
                  this.strings = new CFFStrings();
                  this.globalSubrIndex = null;
                  this.encoding = null;
                  this.charset = null;
                  this.charStrings = null;
                  this.fdArray = [];
                  this.fdSelect = null;
                  this.isCIDFont = false;
                }
                _createClass(CFF2, [{
                  key: "duplicateFirstGlyph",
                  value: function duplicateFirstGlyph() {
                    if (this.charStrings.count >= 65535) {
                      (0, _util.warn)("Not enough space in charstrings to duplicate first glyph.");
                      return;
                    }
                    var glyphZero = this.charStrings.get(0);
                    this.charStrings.add(glyphZero);
                    if (this.isCIDFont) {
                      this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);
                    }
                  }
                }, {
                  key: "hasGlyphId",
                  value: function hasGlyphId(id) {
                    if (id < 0 || id >= this.charStrings.count) {
                      return false;
                    }
                    var glyph = this.charStrings.get(id);
                    return glyph.length > 0;
                  }
                }]);
                return CFF2;
              }();
              exports2.CFF = CFF;
              var CFFHeader = function CFFHeader2(major, minor, hdrSize, offSize) {
                _classCallCheck(this, CFFHeader2);
                this.major = major;
                this.minor = minor;
                this.hdrSize = hdrSize;
                this.offSize = offSize;
              };
              exports2.CFFHeader = CFFHeader;
              var CFFStrings = /* @__PURE__ */ function() {
                function CFFStrings2() {
                  _classCallCheck(this, CFFStrings2);
                  this.strings = [];
                }
                _createClass(CFFStrings2, [{
                  key: "get",
                  value: function get(index) {
                    if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {
                      return CFFStandardStrings[index];
                    }
                    if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {
                      return this.strings[index - NUM_STANDARD_CFF_STRINGS];
                    }
                    return CFFStandardStrings[0];
                  }
                }, {
                  key: "getSID",
                  value: function getSID(str) {
                    var index = CFFStandardStrings.indexOf(str);
                    if (index !== -1) {
                      return index;
                    }
                    index = this.strings.indexOf(str);
                    if (index !== -1) {
                      return index + NUM_STANDARD_CFF_STRINGS;
                    }
                    return -1;
                  }
                }, {
                  key: "add",
                  value: function add(value) {
                    this.strings.push(value);
                  }
                }, {
                  key: "count",
                  get: function get() {
                    return this.strings.length;
                  }
                }]);
                return CFFStrings2;
              }();
              exports2.CFFStrings = CFFStrings;
              var CFFIndex = /* @__PURE__ */ function() {
                function CFFIndex2() {
                  _classCallCheck(this, CFFIndex2);
                  this.objects = [];
                  this.length = 0;
                }
                _createClass(CFFIndex2, [{
                  key: "add",
                  value: function add(data) {
                    this.length += data.length;
                    this.objects.push(data);
                  }
                }, {
                  key: "set",
                  value: function set(index, data) {
                    this.length += data.length - this.objects[index].length;
                    this.objects[index] = data;
                  }
                }, {
                  key: "get",
                  value: function get(index) {
                    return this.objects[index];
                  }
                }, {
                  key: "count",
                  get: function get() {
                    return this.objects.length;
                  }
                }]);
                return CFFIndex2;
              }();
              exports2.CFFIndex = CFFIndex;
              var CFFDict = /* @__PURE__ */ function() {
                function CFFDict2(tables, strings) {
                  _classCallCheck(this, CFFDict2);
                  this.keyToNameMap = tables.keyToNameMap;
                  this.nameToKeyMap = tables.nameToKeyMap;
                  this.defaults = tables.defaults;
                  this.types = tables.types;
                  this.opcodes = tables.opcodes;
                  this.order = tables.order;
                  this.strings = strings;
                  this.values = /* @__PURE__ */ Object.create(null);
                }
                _createClass(CFFDict2, [{
                  key: "setByKey",
                  value: function setByKey(key, value) {
                    if (!(key in this.keyToNameMap)) {
                      return false;
                    }
                    var valueLength = value.length;
                    if (valueLength === 0) {
                      return true;
                    }
                    for (var i = 0; i < valueLength; i++) {
                      if (isNaN(value[i])) {
                        (0, _util.warn)('Invalid CFFDict value: "' + value + '" for key "' + key + '".');
                        return true;
                      }
                    }
                    var type = this.types[key];
                    if (type === "num" || type === "sid" || type === "offset") {
                      value = value[0];
                    }
                    this.values[key] = value;
                    return true;
                  }
                }, {
                  key: "setByName",
                  value: function setByName(name, value) {
                    if (!(name in this.nameToKeyMap)) {
                      throw new _util.FormatError('Invalid dictionary name "'.concat(name, '"'));
                    }
                    this.values[this.nameToKeyMap[name]] = value;
                  }
                }, {
                  key: "hasName",
                  value: function hasName(name) {
                    return this.nameToKeyMap[name] in this.values;
                  }
                }, {
                  key: "getByName",
                  value: function getByName(name) {
                    if (!(name in this.nameToKeyMap)) {
                      throw new _util.FormatError("Invalid dictionary name ".concat(name, '"'));
                    }
                    var key = this.nameToKeyMap[name];
                    if (!(key in this.values)) {
                      return this.defaults[key];
                    }
                    return this.values[key];
                  }
                }, {
                  key: "removeByName",
                  value: function removeByName(name) {
                    delete this.values[this.nameToKeyMap[name]];
                  }
                }], [{
                  key: "createTables",
                  value: function createTables(layout) {
                    var tables = {
                      keyToNameMap: {},
                      nameToKeyMap: {},
                      defaults: {},
                      types: {},
                      opcodes: {},
                      order: []
                    };
                    for (var i = 0, ii = layout.length; i < ii; ++i) {
                      var entry = layout[i];
                      var key = Array.isArray(entry[0]) ? (entry[0][0] << 8) + entry[0][1] : entry[0];
                      tables.keyToNameMap[key] = entry[1];
                      tables.nameToKeyMap[entry[1]] = key;
                      tables.types[key] = entry[2];
                      tables.defaults[key] = entry[3];
                      tables.opcodes[key] = Array.isArray(entry[0]) ? entry[0] : [entry[0]];
                      tables.order.push(key);
                    }
                    return tables;
                  }
                }]);
                return CFFDict2;
              }();
              var CFFTopDict = function CFFTopDictClosure() {
                var layout = [[[12, 30], "ROS", ["sid", "sid", "num"], null], [[12, 20], "SyntheticBase", "num", null], [0, "version", "sid", null], [1, "Notice", "sid", null], [[12, 0], "Copyright", "sid", null], [2, "FullName", "sid", null], [3, "FamilyName", "sid", null], [4, "Weight", "sid", null], [[12, 1], "isFixedPitch", "num", 0], [[12, 2], "ItalicAngle", "num", 0], [[12, 3], "UnderlinePosition", "num", -100], [[12, 4], "UnderlineThickness", "num", 50], [[12, 5], "PaintType", "num", 0], [[12, 6], "CharstringType", "num", 2], [[12, 7], "FontMatrix", ["num", "num", "num", "num", "num", "num"], [1e-3, 0, 0, 1e-3, 0, 0]], [13, "UniqueID", "num", null], [5, "FontBBox", ["num", "num", "num", "num"], [0, 0, 0, 0]], [[12, 8], "StrokeWidth", "num", 0], [14, "XUID", "array", null], [15, "charset", "offset", 0], [16, "Encoding", "offset", 0], [17, "CharStrings", "offset", 0], [18, "Private", ["offset", "offset"], null], [[12, 21], "PostScript", "sid", null], [[12, 22], "BaseFontName", "sid", null], [[12, 23], "BaseFontBlend", "delta", null], [[12, 31], "CIDFontVersion", "num", 0], [[12, 32], "CIDFontRevision", "num", 0], [[12, 33], "CIDFontType", "num", 0], [[12, 34], "CIDCount", "num", 8720], [[12, 35], "UIDBase", "num", null], [[12, 37], "FDSelect", "offset", null], [[12, 36], "FDArray", "offset", null], [[12, 38], "FontName", "sid", null]];
                var tables = null;
                var CFFTopDict2 = /* @__PURE__ */ function(_CFFDict) {
                  _inherits(CFFTopDict3, _CFFDict);
                  var _super = _createSuper(CFFTopDict3);
                  function CFFTopDict3(strings) {
                    var _this;
                    _classCallCheck(this, CFFTopDict3);
                    if (tables === null) {
                      tables = CFFDict.createTables(layout);
                    }
                    _this = _super.call(this, tables, strings);
                    _this.privateDict = null;
                    return _this;
                  }
                  return CFFTopDict3;
                }(CFFDict);
                return CFFTopDict2;
              }();
              exports2.CFFTopDict = CFFTopDict;
              var CFFPrivateDict = function CFFPrivateDictClosure() {
                var layout = [[6, "BlueValues", "delta", null], [7, "OtherBlues", "delta", null], [8, "FamilyBlues", "delta", null], [9, "FamilyOtherBlues", "delta", null], [[12, 9], "BlueScale", "num", 0.039625], [[12, 10], "BlueShift", "num", 7], [[12, 11], "BlueFuzz", "num", 1], [10, "StdHW", "num", null], [11, "StdVW", "num", null], [[12, 12], "StemSnapH", "delta", null], [[12, 13], "StemSnapV", "delta", null], [[12, 14], "ForceBold", "num", 0], [[12, 17], "LanguageGroup", "num", 0], [[12, 18], "ExpansionFactor", "num", 0.06], [[12, 19], "initialRandomSeed", "num", 0], [20, "defaultWidthX", "num", 0], [21, "nominalWidthX", "num", 0], [19, "Subrs", "offset", null]];
                var tables = null;
                var CFFPrivateDict2 = /* @__PURE__ */ function(_CFFDict2) {
                  _inherits(CFFPrivateDict3, _CFFDict2);
                  var _super2 = _createSuper(CFFPrivateDict3);
                  function CFFPrivateDict3(strings) {
                    var _this2;
                    _classCallCheck(this, CFFPrivateDict3);
                    if (tables === null) {
                      tables = CFFDict.createTables(layout);
                    }
                    _this2 = _super2.call(this, tables, strings);
                    _this2.subrsIndex = null;
                    return _this2;
                  }
                  return CFFPrivateDict3;
                }(CFFDict);
                return CFFPrivateDict2;
              }();
              exports2.CFFPrivateDict = CFFPrivateDict;
              var CFFCharsetPredefinedTypes = {
                ISO_ADOBE: 0,
                EXPERT: 1,
                EXPERT_SUBSET: 2
              };
              var CFFCharset = function CFFCharset2(predefined, format, charset, raw) {
                _classCallCheck(this, CFFCharset2);
                this.predefined = predefined;
                this.format = format;
                this.charset = charset;
                this.raw = raw;
              };
              exports2.CFFCharset = CFFCharset;
              var CFFEncoding = function CFFEncoding2(predefined, format, encoding, raw) {
                _classCallCheck(this, CFFEncoding2);
                this.predefined = predefined;
                this.format = format;
                this.encoding = encoding;
                this.raw = raw;
              };
              var CFFFDSelect = /* @__PURE__ */ function() {
                function CFFFDSelect2(format, fdSelect) {
                  _classCallCheck(this, CFFFDSelect2);
                  this.format = format;
                  this.fdSelect = fdSelect;
                }
                _createClass(CFFFDSelect2, [{
                  key: "getFDIndex",
                  value: function getFDIndex(glyphIndex) {
                    if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {
                      return -1;
                    }
                    return this.fdSelect[glyphIndex];
                  }
                }]);
                return CFFFDSelect2;
              }();
              exports2.CFFFDSelect = CFFFDSelect;
              var CFFOffsetTracker = /* @__PURE__ */ function() {
                function CFFOffsetTracker2() {
                  _classCallCheck(this, CFFOffsetTracker2);
                  this.offsets = /* @__PURE__ */ Object.create(null);
                }
                _createClass(CFFOffsetTracker2, [{
                  key: "isTracking",
                  value: function isTracking(key) {
                    return key in this.offsets;
                  }
                }, {
                  key: "track",
                  value: function track(key, location) {
                    if (key in this.offsets) {
                      throw new _util.FormatError("Already tracking location of ".concat(key));
                    }
                    this.offsets[key] = location;
                  }
                }, {
                  key: "offset",
                  value: function offset(value) {
                    for (var key in this.offsets) {
                      this.offsets[key] += value;
                    }
                  }
                }, {
                  key: "setEntryLocation",
                  value: function setEntryLocation(key, values, output) {
                    if (!(key in this.offsets)) {
                      throw new _util.FormatError("Not tracking location of ".concat(key));
                    }
                    var data = output.data;
                    var dataOffset = this.offsets[key];
                    var size = 5;
                    for (var i = 0, ii = values.length; i < ii; ++i) {
                      var offset0 = i * size + dataOffset;
                      var offset1 = offset0 + 1;
                      var offset2 = offset0 + 2;
                      var offset3 = offset0 + 3;
                      var offset4 = offset0 + 4;
                      if (data[offset0] !== 29 || data[offset1] !== 0 || data[offset2] !== 0 || data[offset3] !== 0 || data[offset4] !== 0) {
                        throw new _util.FormatError("writing to an offset that is not empty");
                      }
                      var value = values[i];
                      data[offset0] = 29;
                      data[offset1] = value >> 24 & 255;
                      data[offset2] = value >> 16 & 255;
                      data[offset3] = value >> 8 & 255;
                      data[offset4] = value & 255;
                    }
                  }
                }]);
                return CFFOffsetTracker2;
              }();
              var CFFCompiler = /* @__PURE__ */ function() {
                function CFFCompiler2(cff) {
                  _classCallCheck(this, CFFCompiler2);
                  this.cff = cff;
                }
                _createClass(CFFCompiler2, [{
                  key: "compile",
                  value: function compile() {
                    var cff = this.cff;
                    var output = {
                      data: [],
                      length: 0,
                      add: function CFFCompiler_add(data) {
                        this.data = this.data.concat(data);
                        this.length = this.data.length;
                      }
                    };
                    var header = this.compileHeader(cff.header);
                    output.add(header);
                    var nameIndex = this.compileNameIndex(cff.names);
                    output.add(nameIndex);
                    if (cff.isCIDFont) {
                      if (cff.topDict.hasName("FontMatrix")) {
                        var base = cff.topDict.getByName("FontMatrix");
                        cff.topDict.removeByName("FontMatrix");
                        for (var i = 0, ii = cff.fdArray.length; i < ii; i++) {
                          var subDict = cff.fdArray[i];
                          var matrix = base.slice(0);
                          if (subDict.hasName("FontMatrix")) {
                            matrix = _util.Util.transform(matrix, subDict.getByName("FontMatrix"));
                          }
                          subDict.setByName("FontMatrix", matrix);
                        }
                      }
                    }
                    var xuid = cff.topDict.getByName("XUID");
                    if (xuid && xuid.length > 16) {
                      cff.topDict.removeByName("XUID");
                    }
                    cff.topDict.setByName("charset", 0);
                    var compiled = this.compileTopDicts([cff.topDict], output.length, cff.isCIDFont);
                    output.add(compiled.output);
                    var topDictTracker = compiled.trackers[0];
                    var stringIndex = this.compileStringIndex(cff.strings.strings);
                    output.add(stringIndex);
                    var globalSubrIndex = this.compileIndex(cff.globalSubrIndex);
                    output.add(globalSubrIndex);
                    if (cff.encoding && cff.topDict.hasName("Encoding")) {
                      if (cff.encoding.predefined) {
                        topDictTracker.setEntryLocation("Encoding", [cff.encoding.format], output);
                      } else {
                        var encoding = this.compileEncoding(cff.encoding);
                        topDictTracker.setEntryLocation("Encoding", [output.length], output);
                        output.add(encoding);
                      }
                    }
                    var charset = this.compileCharset(cff.charset, cff.charStrings.count, cff.strings, cff.isCIDFont);
                    topDictTracker.setEntryLocation("charset", [output.length], output);
                    output.add(charset);
                    var charStrings = this.compileCharStrings(cff.charStrings);
                    topDictTracker.setEntryLocation("CharStrings", [output.length], output);
                    output.add(charStrings);
                    if (cff.isCIDFont) {
                      topDictTracker.setEntryLocation("FDSelect", [output.length], output);
                      var fdSelect = this.compileFDSelect(cff.fdSelect);
                      output.add(fdSelect);
                      compiled = this.compileTopDicts(cff.fdArray, output.length, true);
                      topDictTracker.setEntryLocation("FDArray", [output.length], output);
                      output.add(compiled.output);
                      var fontDictTrackers = compiled.trackers;
                      this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);
                    }
                    this.compilePrivateDicts([cff.topDict], [topDictTracker], output);
                    output.add([0]);
                    return output.data;
                  }
                }, {
                  key: "encodeNumber",
                  value: function encodeNumber(value) {
                    if (Number.isInteger(value)) {
                      return this.encodeInteger(value);
                    }
                    return this.encodeFloat(value);
                  }
                }, {
                  key: "encodeFloat",
                  value: function encodeFloat(num) {
                    var value = num.toString();
                    var m = CFFCompiler2.EncodeFloatRegExp.exec(value);
                    if (m) {
                      var epsilon = parseFloat("1e" + ((m[2] ? +m[2] : 0) + m[1].length));
                      value = (Math.round(num * epsilon) / epsilon).toString();
                    }
                    var nibbles = "";
                    var i, ii;
                    for (i = 0, ii = value.length; i < ii; ++i) {
                      var a = value[i];
                      if (a === "e") {
                        nibbles += value[++i] === "-" ? "c" : "b";
                      } else if (a === ".") {
                        nibbles += "a";
                      } else if (a === "-") {
                        nibbles += "e";
                      } else {
                        nibbles += a;
                      }
                    }
                    nibbles += nibbles.length & 1 ? "f" : "ff";
                    var out = [30];
                    for (i = 0, ii = nibbles.length; i < ii; i += 2) {
                      out.push(parseInt(nibbles.substring(i, i + 2), 16));
                    }
                    return out;
                  }
                }, {
                  key: "encodeInteger",
                  value: function encodeInteger(value) {
                    var code;
                    if (value >= -107 && value <= 107) {
                      code = [value + 139];
                    } else if (value >= 108 && value <= 1131) {
                      value -= 108;
                      code = [(value >> 8) + 247, value & 255];
                    } else if (value >= -1131 && value <= -108) {
                      value = -value - 108;
                      code = [(value >> 8) + 251, value & 255];
                    } else if (value >= -32768 && value <= 32767) {
                      code = [28, value >> 8 & 255, value & 255];
                    } else {
                      code = [29, value >> 24 & 255, value >> 16 & 255, value >> 8 & 255, value & 255];
                    }
                    return code;
                  }
                }, {
                  key: "compileHeader",
                  value: function compileHeader(header) {
                    return [header.major, header.minor, 4, header.offSize];
                  }
                }, {
                  key: "compileNameIndex",
                  value: function compileNameIndex(names) {
                    var nameIndex = new CFFIndex();
                    for (var i = 0, ii = names.length; i < ii; ++i) {
                      var name = names[i];
                      var length = Math.min(name.length, 127);
                      var sanitizedName = new Array(length);
                      for (var j = 0; j < length; j++) {
                        var _char = name[j];
                        if (_char < "!" || _char > "~" || _char === "[" || _char === "]" || _char === "(" || _char === ")" || _char === "{" || _char === "}" || _char === "<" || _char === ">" || _char === "/" || _char === "%") {
                          _char = "_";
                        }
                        sanitizedName[j] = _char;
                      }
                      sanitizedName = sanitizedName.join("");
                      if (sanitizedName === "") {
                        sanitizedName = "Bad_Font_Name";
                      }
                      nameIndex.add((0, _util.stringToBytes)(sanitizedName));
                    }
                    return this.compileIndex(nameIndex);
                  }
                }, {
                  key: "compileTopDicts",
                  value: function compileTopDicts(dicts, length, removeCidKeys) {
                    var fontDictTrackers = [];
                    var fdArrayIndex = new CFFIndex();
                    for (var i = 0, ii = dicts.length; i < ii; ++i) {
                      var fontDict = dicts[i];
                      if (removeCidKeys) {
                        fontDict.removeByName("CIDFontVersion");
                        fontDict.removeByName("CIDFontRevision");
                        fontDict.removeByName("CIDFontType");
                        fontDict.removeByName("CIDCount");
                        fontDict.removeByName("UIDBase");
                      }
                      var fontDictTracker = new CFFOffsetTracker();
                      var fontDictData = this.compileDict(fontDict, fontDictTracker);
                      fontDictTrackers.push(fontDictTracker);
                      fdArrayIndex.add(fontDictData);
                      fontDictTracker.offset(length);
                    }
                    fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);
                    return {
                      trackers: fontDictTrackers,
                      output: fdArrayIndex
                    };
                  }
                }, {
                  key: "compilePrivateDicts",
                  value: function compilePrivateDicts(dicts, trackers, output) {
                    for (var i = 0, ii = dicts.length; i < ii; ++i) {
                      var fontDict = dicts[i];
                      var privateDict = fontDict.privateDict;
                      if (!privateDict || !fontDict.hasName("Private")) {
                        throw new _util.FormatError("There must be a private dictionary.");
                      }
                      var privateDictTracker = new CFFOffsetTracker();
                      var privateDictData = this.compileDict(privateDict, privateDictTracker);
                      var outputLength = output.length;
                      privateDictTracker.offset(outputLength);
                      if (!privateDictData.length) {
                        outputLength = 0;
                      }
                      trackers[i].setEntryLocation("Private", [privateDictData.length, outputLength], output);
                      output.add(privateDictData);
                      if (privateDict.subrsIndex && privateDict.hasName("Subrs")) {
                        var subrs = this.compileIndex(privateDict.subrsIndex);
                        privateDictTracker.setEntryLocation("Subrs", [privateDictData.length], output);
                        output.add(subrs);
                      }
                    }
                  }
                }, {
                  key: "compileDict",
                  value: function compileDict(dict, offsetTracker) {
                    var out = [];
                    var order = dict.order;
                    for (var i = 0; i < order.length; ++i) {
                      var key = order[i];
                      if (!(key in dict.values)) {
                        continue;
                      }
                      var values = dict.values[key];
                      var types = dict.types[key];
                      if (!Array.isArray(types)) {
                        types = [types];
                      }
                      if (!Array.isArray(values)) {
                        values = [values];
                      }
                      if (values.length === 0) {
                        continue;
                      }
                      for (var j = 0, jj = types.length; j < jj; ++j) {
                        var type = types[j];
                        var value = values[j];
                        switch (type) {
                          case "num":
                          case "sid":
                            out = out.concat(this.encodeNumber(value));
                            break;
                          case "offset":
                            var name = dict.keyToNameMap[key];
                            if (!offsetTracker.isTracking(name)) {
                              offsetTracker.track(name, out.length);
                            }
                            out = out.concat([29, 0, 0, 0, 0]);
                            break;
                          case "array":
                          case "delta":
                            out = out.concat(this.encodeNumber(value));
                            for (var k = 1, kk = values.length; k < kk; ++k) {
                              out = out.concat(this.encodeNumber(values[k]));
                            }
                            break;
                          default:
                            throw new _util.FormatError("Unknown data type of ".concat(type));
                        }
                      }
                      out = out.concat(dict.opcodes[key]);
                    }
                    return out;
                  }
                }, {
                  key: "compileStringIndex",
                  value: function compileStringIndex(strings) {
                    var stringIndex = new CFFIndex();
                    for (var i = 0, ii = strings.length; i < ii; ++i) {
                      stringIndex.add((0, _util.stringToBytes)(strings[i]));
                    }
                    return this.compileIndex(stringIndex);
                  }
                }, {
                  key: "compileGlobalSubrIndex",
                  value: function compileGlobalSubrIndex() {
                    var globalSubrIndex = this.cff.globalSubrIndex;
                    this.out.writeByteArray(this.compileIndex(globalSubrIndex));
                  }
                }, {
                  key: "compileCharStrings",
                  value: function compileCharStrings(charStrings) {
                    var charStringsIndex = new CFFIndex();
                    for (var i = 0; i < charStrings.count; i++) {
                      var glyph = charStrings.get(i);
                      if (glyph.length === 0) {
                        charStringsIndex.add(new Uint8Array([139, 14]));
                        continue;
                      }
                      charStringsIndex.add(glyph);
                    }
                    return this.compileIndex(charStringsIndex);
                  }
                }, {
                  key: "compileCharset",
                  value: function compileCharset(charset, numGlyphs, strings, isCIDFont) {
                    var out;
                    var numGlyphsLessNotDef = numGlyphs - 1;
                    if (isCIDFont) {
                      out = new Uint8Array([2, 0, 0, numGlyphsLessNotDef >> 8 & 255, numGlyphsLessNotDef & 255]);
                    } else {
                      var length = 1 + numGlyphsLessNotDef * 2;
                      out = new Uint8Array(length);
                      out[0] = 0;
                      var charsetIndex = 0;
                      var numCharsets = charset.charset.length;
                      var warned = false;
                      for (var i = 1; i < out.length; i += 2) {
                        var sid = 0;
                        if (charsetIndex < numCharsets) {
                          var name = charset.charset[charsetIndex++];
                          sid = strings.getSID(name);
                          if (sid === -1) {
                            sid = 0;
                            if (!warned) {
                              warned = true;
                              (0, _util.warn)("Couldn't find ".concat(name, " in CFF strings"));
                            }
                          }
                        }
                        out[i] = sid >> 8 & 255;
                        out[i + 1] = sid & 255;
                      }
                    }
                    return this.compileTypedArray(out);
                  }
                }, {
                  key: "compileEncoding",
                  value: function compileEncoding(encoding) {
                    return this.compileTypedArray(encoding.raw);
                  }
                }, {
                  key: "compileFDSelect",
                  value: function compileFDSelect(fdSelect) {
                    var format = fdSelect.format;
                    var out, i;
                    switch (format) {
                      case 0:
                        out = new Uint8Array(1 + fdSelect.fdSelect.length);
                        out[0] = format;
                        for (i = 0; i < fdSelect.fdSelect.length; i++) {
                          out[i + 1] = fdSelect.fdSelect[i];
                        }
                        break;
                      case 3:
                        var start = 0;
                        var lastFD = fdSelect.fdSelect[0];
                        var ranges = [format, 0, 0, start >> 8 & 255, start & 255, lastFD];
                        for (i = 1; i < fdSelect.fdSelect.length; i++) {
                          var currentFD = fdSelect.fdSelect[i];
                          if (currentFD !== lastFD) {
                            ranges.push(i >> 8 & 255, i & 255, currentFD);
                            lastFD = currentFD;
                          }
                        }
                        var numRanges = (ranges.length - 3) / 3;
                        ranges[1] = numRanges >> 8 & 255;
                        ranges[2] = numRanges & 255;
                        ranges.push(i >> 8 & 255, i & 255);
                        out = new Uint8Array(ranges);
                        break;
                    }
                    return this.compileTypedArray(out);
                  }
                }, {
                  key: "compileTypedArray",
                  value: function compileTypedArray(data) {
                    var out = [];
                    for (var i = 0, ii = data.length; i < ii; ++i) {
                      out[i] = data[i];
                    }
                    return out;
                  }
                }, {
                  key: "compileIndex",
                  value: function compileIndex(index) {
                    var trackers = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
                    var objects = index.objects;
                    var count = objects.length;
                    if (count === 0) {
                      return [0, 0, 0];
                    }
                    var data = [count >> 8 & 255, count & 255];
                    var lastOffset = 1, i;
                    for (i = 0; i < count; ++i) {
                      lastOffset += objects[i].length;
                    }
                    var offsetSize;
                    if (lastOffset < 256) {
                      offsetSize = 1;
                    } else if (lastOffset < 65536) {
                      offsetSize = 2;
                    } else if (lastOffset < 16777216) {
                      offsetSize = 3;
                    } else {
                      offsetSize = 4;
                    }
                    data.push(offsetSize);
                    var relativeOffset = 1;
                    for (i = 0; i < count + 1; i++) {
                      if (offsetSize === 1) {
                        data.push(relativeOffset & 255);
                      } else if (offsetSize === 2) {
                        data.push(relativeOffset >> 8 & 255, relativeOffset & 255);
                      } else if (offsetSize === 3) {
                        data.push(relativeOffset >> 16 & 255, relativeOffset >> 8 & 255, relativeOffset & 255);
                      } else {
                        data.push(relativeOffset >>> 24 & 255, relativeOffset >> 16 & 255, relativeOffset >> 8 & 255, relativeOffset & 255);
                      }
                      if (objects[i]) {
                        relativeOffset += objects[i].length;
                      }
                    }
                    for (i = 0; i < count; i++) {
                      if (trackers[i]) {
                        trackers[i].offset(data.length);
                      }
                      for (var j = 0, jj = objects[i].length; j < jj; j++) {
                        data.push(objects[i][j]);
                      }
                    }
                    return data;
                  }
                }], [{
                  key: "EncodeFloatRegExp",
                  get: function get() {
                    return (0, _util.shadow)(this, "EncodeFloatRegExp", /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/);
                  }
                }]);
                return CFFCompiler2;
              }();
              exports2.CFFCompiler = CFFCompiler;
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.ISOAdobeCharset = exports2.ExpertSubsetCharset = exports2.ExpertCharset = void 0;
              var ISOAdobeCharset = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron"];
              exports2.ISOAdobeCharset = ISOAdobeCharset;
              var ExpertCharset = [".notdef", "space", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"];
              exports2.ExpertCharset = ExpertCharset;
              var ExpertSubsetCharset = [".notdef", "space", "dollaroldstyle", "dollarsuperior", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "hyphensuperior", "colonmonetary", "onefitted", "rupiah", "centoldstyle", "figuredash", "hypheninferior", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior"];
              exports2.ExpertSubsetCharset = ExpertSubsetCharset;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.getSerifFonts = exports2.getNonStdFontMap = exports2.getGlyphMapForStandardFonts = exports2.getFontNameToFileMap = void 0;
              exports2.getStandardFontName = getStandardFontName;
              exports2.getSymbolsFonts = exports2.getSupplementalGlyphMapForCalibri = exports2.getSupplementalGlyphMapForArialBlack = exports2.getStdFontMap = void 0;
              var _core_utils = __w_pdfjs_require__2(139);
              var _fonts_utils = __w_pdfjs_require__2(148);
              var getStdFontMap = (0, _core_utils.getLookupTableFactory)(function(t) {
                t["Times-Roman"] = "Times-Roman";
                t.Helvetica = "Helvetica";
                t.Courier = "Courier";
                t.Symbol = "Symbol";
                t["Times-Bold"] = "Times-Bold";
                t["Helvetica-Bold"] = "Helvetica-Bold";
                t["Courier-Bold"] = "Courier-Bold";
                t.ZapfDingbats = "ZapfDingbats";
                t["Times-Italic"] = "Times-Italic";
                t["Helvetica-Oblique"] = "Helvetica-Oblique";
                t["Courier-Oblique"] = "Courier-Oblique";
                t["Times-BoldItalic"] = "Times-BoldItalic";
                t["Helvetica-BoldOblique"] = "Helvetica-BoldOblique";
                t["Courier-BoldOblique"] = "Courier-BoldOblique";
                t.ArialNarrow = "Helvetica";
                t["ArialNarrow-Bold"] = "Helvetica-Bold";
                t["ArialNarrow-BoldItalic"] = "Helvetica-BoldOblique";
                t["ArialNarrow-Italic"] = "Helvetica-Oblique";
                t.ArialBlack = "Helvetica";
                t["ArialBlack-Bold"] = "Helvetica-Bold";
                t["ArialBlack-BoldItalic"] = "Helvetica-BoldOblique";
                t["ArialBlack-Italic"] = "Helvetica-Oblique";
                t["Arial-Black"] = "Helvetica";
                t["Arial-Black-Bold"] = "Helvetica-Bold";
                t["Arial-Black-BoldItalic"] = "Helvetica-BoldOblique";
                t["Arial-Black-Italic"] = "Helvetica-Oblique";
                t.Arial = "Helvetica";
                t["Arial-Bold"] = "Helvetica-Bold";
                t["Arial-BoldItalic"] = "Helvetica-BoldOblique";
                t["Arial-Italic"] = "Helvetica-Oblique";
                t["Arial-BoldItalicMT"] = "Helvetica-BoldOblique";
                t["Arial-BoldMT"] = "Helvetica-Bold";
                t["Arial-ItalicMT"] = "Helvetica-Oblique";
                t.ArialMT = "Helvetica";
                t["Courier-BoldItalic"] = "Courier-BoldOblique";
                t["Courier-Italic"] = "Courier-Oblique";
                t.CourierNew = "Courier";
                t["CourierNew-Bold"] = "Courier-Bold";
                t["CourierNew-BoldItalic"] = "Courier-BoldOblique";
                t["CourierNew-Italic"] = "Courier-Oblique";
                t["CourierNewPS-BoldItalicMT"] = "Courier-BoldOblique";
                t["CourierNewPS-BoldMT"] = "Courier-Bold";
                t["CourierNewPS-ItalicMT"] = "Courier-Oblique";
                t.CourierNewPSMT = "Courier";
                t["Helvetica-BoldItalic"] = "Helvetica-BoldOblique";
                t["Helvetica-Italic"] = "Helvetica-Oblique";
                t["Symbol-Bold"] = "Symbol";
                t["Symbol-BoldItalic"] = "Symbol";
                t["Symbol-Italic"] = "Symbol";
                t.TimesNewRoman = "Times-Roman";
                t["TimesNewRoman-Bold"] = "Times-Bold";
                t["TimesNewRoman-BoldItalic"] = "Times-BoldItalic";
                t["TimesNewRoman-Italic"] = "Times-Italic";
                t.TimesNewRomanPS = "Times-Roman";
                t["TimesNewRomanPS-Bold"] = "Times-Bold";
                t["TimesNewRomanPS-BoldItalic"] = "Times-BoldItalic";
                t["TimesNewRomanPS-BoldItalicMT"] = "Times-BoldItalic";
                t["TimesNewRomanPS-BoldMT"] = "Times-Bold";
                t["TimesNewRomanPS-Italic"] = "Times-Italic";
                t["TimesNewRomanPS-ItalicMT"] = "Times-Italic";
                t.TimesNewRomanPSMT = "Times-Roman";
                t["TimesNewRomanPSMT-Bold"] = "Times-Bold";
                t["TimesNewRomanPSMT-BoldItalic"] = "Times-BoldItalic";
                t["TimesNewRomanPSMT-Italic"] = "Times-Italic";
              });
              exports2.getStdFontMap = getStdFontMap;
              var getFontNameToFileMap = (0, _core_utils.getLookupTableFactory)(function(t) {
                t.Courier = "FoxitFixed.pfb";
                t["Courier-Bold"] = "FoxitFixedBold.pfb";
                t["Courier-BoldOblique"] = "FoxitFixedBoldItalic.pfb";
                t["Courier-Oblique"] = "FoxitFixedItalic.pfb";
                t.Helvetica = "FoxitSans.pfb";
                t["Helvetica-Bold"] = "FoxitSansBold.pfb";
                t["Helvetica-BoldOblique"] = "FoxitSansBoldItalic.pfb";
                t["Helvetica-Oblique"] = "FoxitSansItalic.pfb";
                t["Times-Roman"] = "FoxitSerif.pfb";
                t["Times-Bold"] = "FoxitSerifBold.pfb";
                t["Times-BoldItalic"] = "FoxitSerifBoldItalic.pfb";
                t["Times-Italic"] = "FoxitSerifItalic.pfb";
                t.Symbol = "FoxitSymbol.pfb";
                t.ZapfDingbats = "FoxitDingbats.pfb";
                t["LiberationSans-Regular"] = "LiberationSans-Regular.ttf";
                t["LiberationSans-Bold"] = "LiberationSans-Bold.ttf";
                t["LiberationSans-Italic"] = "LiberationSans-Italic.ttf";
                t["LiberationSans-BoldItalic"] = "LiberationSans-BoldItalic.ttf";
              });
              exports2.getFontNameToFileMap = getFontNameToFileMap;
              var getNonStdFontMap = (0, _core_utils.getLookupTableFactory)(function(t) {
                t.Calibri = "Helvetica";
                t["Calibri-Bold"] = "Helvetica-Bold";
                t["Calibri-BoldItalic"] = "Helvetica-BoldOblique";
                t["Calibri-Italic"] = "Helvetica-Oblique";
                t.CenturyGothic = "Helvetica";
                t["CenturyGothic-Bold"] = "Helvetica-Bold";
                t["CenturyGothic-BoldItalic"] = "Helvetica-BoldOblique";
                t["CenturyGothic-Italic"] = "Helvetica-Oblique";
                t.ComicSansMS = "Comic Sans MS";
                t["ComicSansMS-Bold"] = "Comic Sans MS-Bold";
                t["ComicSansMS-BoldItalic"] = "Comic Sans MS-BoldItalic";
                t["ComicSansMS-Italic"] = "Comic Sans MS-Italic";
                t["ItcSymbol-Bold"] = "Helvetica-Bold";
                t["ItcSymbol-BoldItalic"] = "Helvetica-BoldOblique";
                t["ItcSymbol-Book"] = "Helvetica";
                t["ItcSymbol-BookItalic"] = "Helvetica-Oblique";
                t["ItcSymbol-Medium"] = "Helvetica";
                t["ItcSymbol-MediumItalic"] = "Helvetica-Oblique";
                t.LucidaConsole = "Courier";
                t["LucidaConsole-Bold"] = "Courier-Bold";
                t["LucidaConsole-BoldItalic"] = "Courier-BoldOblique";
                t["LucidaConsole-Italic"] = "Courier-Oblique";
                t["LucidaSans-Demi"] = "Helvetica-Bold";
                t["MS-Gothic"] = "MS Gothic";
                t["MS-Gothic-Bold"] = "MS Gothic-Bold";
                t["MS-Gothic-BoldItalic"] = "MS Gothic-BoldItalic";
                t["MS-Gothic-Italic"] = "MS Gothic-Italic";
                t["MS-Mincho"] = "MS Mincho";
                t["MS-Mincho-Bold"] = "MS Mincho-Bold";
                t["MS-Mincho-BoldItalic"] = "MS Mincho-BoldItalic";
                t["MS-Mincho-Italic"] = "MS Mincho-Italic";
                t["MS-PGothic"] = "MS PGothic";
                t["MS-PGothic-Bold"] = "MS PGothic-Bold";
                t["MS-PGothic-BoldItalic"] = "MS PGothic-BoldItalic";
                t["MS-PGothic-Italic"] = "MS PGothic-Italic";
                t["MS-PMincho"] = "MS PMincho";
                t["MS-PMincho-Bold"] = "MS PMincho-Bold";
                t["MS-PMincho-BoldItalic"] = "MS PMincho-BoldItalic";
                t["MS-PMincho-Italic"] = "MS PMincho-Italic";
                t.NuptialScript = "Times-Italic";
                t.SegoeUISymbol = "Helvetica";
                t.Wingdings = "ZapfDingbats";
                t["Wingdings-Regular"] = "ZapfDingbats";
              });
              exports2.getNonStdFontMap = getNonStdFontMap;
              var getSerifFonts = (0, _core_utils.getLookupTableFactory)(function(t) {
                t["Adobe Jenson"] = true;
                t["Adobe Text"] = true;
                t.Albertus = true;
                t.Aldus = true;
                t.Alexandria = true;
                t.Algerian = true;
                t["American Typewriter"] = true;
                t.Antiqua = true;
                t.Apex = true;
                t.Arno = true;
                t.Aster = true;
                t.Aurora = true;
                t.Baskerville = true;
                t.Bell = true;
                t.Bembo = true;
                t["Bembo Schoolbook"] = true;
                t.Benguiat = true;
                t["Berkeley Old Style"] = true;
                t["Bernhard Modern"] = true;
                t["Berthold City"] = true;
                t.Bodoni = true;
                t["Bauer Bodoni"] = true;
                t["Book Antiqua"] = true;
                t.Bookman = true;
                t["Bordeaux Roman"] = true;
                t["Californian FB"] = true;
                t.Calisto = true;
                t.Calvert = true;
                t.Capitals = true;
                t.Cambria = true;
                t.Cartier = true;
                t.Caslon = true;
                t.Catull = true;
                t.Centaur = true;
                t["Century Old Style"] = true;
                t["Century Schoolbook"] = true;
                t.Chaparral = true;
                t["Charis SIL"] = true;
                t.Cheltenham = true;
                t["Cholla Slab"] = true;
                t.Clarendon = true;
                t.Clearface = true;
                t.Cochin = true;
                t.Colonna = true;
                t["Computer Modern"] = true;
                t["Concrete Roman"] = true;
                t.Constantia = true;
                t["Cooper Black"] = true;
                t.Corona = true;
                t.Ecotype = true;
                t.Egyptienne = true;
                t.Elephant = true;
                t.Excelsior = true;
                t.Fairfield = true;
                t["FF Scala"] = true;
                t.Folkard = true;
                t.Footlight = true;
                t.FreeSerif = true;
                t["Friz Quadrata"] = true;
                t.Garamond = true;
                t.Gentium = true;
                t.Georgia = true;
                t.Gloucester = true;
                t["Goudy Old Style"] = true;
                t["Goudy Schoolbook"] = true;
                t["Goudy Pro Font"] = true;
                t.Granjon = true;
                t["Guardian Egyptian"] = true;
                t.Heather = true;
                t.Hercules = true;
                t["High Tower Text"] = true;
                t.Hiroshige = true;
                t["Hoefler Text"] = true;
                t["Humana Serif"] = true;
                t.Imprint = true;
                t["Ionic No. 5"] = true;
                t.Janson = true;
                t.Joanna = true;
                t.Korinna = true;
                t.Lexicon = true;
                t.LiberationSerif = true;
                t["Liberation Serif"] = true;
                t["Linux Libertine"] = true;
                t.Literaturnaya = true;
                t.Lucida = true;
                t["Lucida Bright"] = true;
                t.Melior = true;
                t.Memphis = true;
                t.Miller = true;
                t.Minion = true;
                t.Modern = true;
                t["Mona Lisa"] = true;
                t["Mrs Eaves"] = true;
                t["MS Serif"] = true;
                t["Museo Slab"] = true;
                t["New York"] = true;
                t["Nimbus Roman"] = true;
                t["NPS Rawlinson Roadway"] = true;
                t.NuptialScript = true;
                t.Palatino = true;
                t.Perpetua = true;
                t.Plantin = true;
                t["Plantin Schoolbook"] = true;
                t.Playbill = true;
                t["Poor Richard"] = true;
                t["Rawlinson Roadway"] = true;
                t.Renault = true;
                t.Requiem = true;
                t.Rockwell = true;
                t.Roman = true;
                t["Rotis Serif"] = true;
                t.Sabon = true;
                t.Scala = true;
                t.Seagull = true;
                t.Sistina = true;
                t.Souvenir = true;
                t.STIX = true;
                t["Stone Informal"] = true;
                t["Stone Serif"] = true;
                t.Sylfaen = true;
                t.Times = true;
                t.Trajan = true;
                t["Trinit\xE9"] = true;
                t["Trump Mediaeval"] = true;
                t.Utopia = true;
                t["Vale Type"] = true;
                t["Bitstream Vera"] = true;
                t["Vera Serif"] = true;
                t.Versailles = true;
                t.Wanted = true;
                t.Weiss = true;
                t["Wide Latin"] = true;
                t.Windsor = true;
                t.XITS = true;
              });
              exports2.getSerifFonts = getSerifFonts;
              var getSymbolsFonts = (0, _core_utils.getLookupTableFactory)(function(t) {
                t.Dingbats = true;
                t.Symbol = true;
                t.ZapfDingbats = true;
              });
              exports2.getSymbolsFonts = getSymbolsFonts;
              var getGlyphMapForStandardFonts = (0, _core_utils.getLookupTableFactory)(function(t) {
                t[2] = 10;
                t[3] = 32;
                t[4] = 33;
                t[5] = 34;
                t[6] = 35;
                t[7] = 36;
                t[8] = 37;
                t[9] = 38;
                t[10] = 39;
                t[11] = 40;
                t[12] = 41;
                t[13] = 42;
                t[14] = 43;
                t[15] = 44;
                t[16] = 45;
                t[17] = 46;
                t[18] = 47;
                t[19] = 48;
                t[20] = 49;
                t[21] = 50;
                t[22] = 51;
                t[23] = 52;
                t[24] = 53;
                t[25] = 54;
                t[26] = 55;
                t[27] = 56;
                t[28] = 57;
                t[29] = 58;
                t[30] = 894;
                t[31] = 60;
                t[32] = 61;
                t[33] = 62;
                t[34] = 63;
                t[35] = 64;
                t[36] = 65;
                t[37] = 66;
                t[38] = 67;
                t[39] = 68;
                t[40] = 69;
                t[41] = 70;
                t[42] = 71;
                t[43] = 72;
                t[44] = 73;
                t[45] = 74;
                t[46] = 75;
                t[47] = 76;
                t[48] = 77;
                t[49] = 78;
                t[50] = 79;
                t[51] = 80;
                t[52] = 81;
                t[53] = 82;
                t[54] = 83;
                t[55] = 84;
                t[56] = 85;
                t[57] = 86;
                t[58] = 87;
                t[59] = 88;
                t[60] = 89;
                t[61] = 90;
                t[62] = 91;
                t[63] = 92;
                t[64] = 93;
                t[65] = 94;
                t[66] = 95;
                t[67] = 96;
                t[68] = 97;
                t[69] = 98;
                t[70] = 99;
                t[71] = 100;
                t[72] = 101;
                t[73] = 102;
                t[74] = 103;
                t[75] = 104;
                t[76] = 105;
                t[77] = 106;
                t[78] = 107;
                t[79] = 108;
                t[80] = 109;
                t[81] = 110;
                t[82] = 111;
                t[83] = 112;
                t[84] = 113;
                t[85] = 114;
                t[86] = 115;
                t[87] = 116;
                t[88] = 117;
                t[89] = 118;
                t[90] = 119;
                t[91] = 120;
                t[92] = 121;
                t[93] = 122;
                t[94] = 123;
                t[95] = 124;
                t[96] = 125;
                t[97] = 126;
                t[98] = 196;
                t[99] = 197;
                t[100] = 199;
                t[101] = 201;
                t[102] = 209;
                t[103] = 214;
                t[104] = 220;
                t[105] = 225;
                t[106] = 224;
                t[107] = 226;
                t[108] = 228;
                t[109] = 227;
                t[110] = 229;
                t[111] = 231;
                t[112] = 233;
                t[113] = 232;
                t[114] = 234;
                t[115] = 235;
                t[116] = 237;
                t[117] = 236;
                t[118] = 238;
                t[119] = 239;
                t[120] = 241;
                t[121] = 243;
                t[122] = 242;
                t[123] = 244;
                t[124] = 246;
                t[125] = 245;
                t[126] = 250;
                t[127] = 249;
                t[128] = 251;
                t[129] = 252;
                t[130] = 8224;
                t[131] = 176;
                t[132] = 162;
                t[133] = 163;
                t[134] = 167;
                t[135] = 8226;
                t[136] = 182;
                t[137] = 223;
                t[138] = 174;
                t[139] = 169;
                t[140] = 8482;
                t[141] = 180;
                t[142] = 168;
                t[143] = 8800;
                t[144] = 198;
                t[145] = 216;
                t[146] = 8734;
                t[147] = 177;
                t[148] = 8804;
                t[149] = 8805;
                t[150] = 165;
                t[151] = 181;
                t[152] = 8706;
                t[153] = 8721;
                t[154] = 8719;
                t[156] = 8747;
                t[157] = 170;
                t[158] = 186;
                t[159] = 8486;
                t[160] = 230;
                t[161] = 248;
                t[162] = 191;
                t[163] = 161;
                t[164] = 172;
                t[165] = 8730;
                t[166] = 402;
                t[167] = 8776;
                t[168] = 8710;
                t[169] = 171;
                t[170] = 187;
                t[171] = 8230;
                t[200] = 193;
                t[203] = 205;
                t[210] = 218;
                t[223] = 711;
                t[224] = 321;
                t[225] = 322;
                t[226] = 352;
                t[227] = 353;
                t[228] = 381;
                t[229] = 382;
                t[233] = 221;
                t[234] = 253;
                t[252] = 263;
                t[253] = 268;
                t[254] = 269;
                t[258] = 258;
                t[260] = 260;
                t[261] = 261;
                t[265] = 280;
                t[266] = 281;
                t[267] = 282;
                t[268] = 283;
                t[269] = 313;
                t[275] = 323;
                t[276] = 324;
                t[278] = 328;
                t[283] = 344;
                t[284] = 345;
                t[285] = 346;
                t[286] = 347;
                t[292] = 367;
                t[295] = 377;
                t[296] = 378;
                t[298] = 380;
                t[305] = 963;
                t[306] = 964;
                t[307] = 966;
                t[308] = 8215;
                t[309] = 8252;
                t[310] = 8319;
                t[311] = 8359;
                t[312] = 8592;
                t[313] = 8593;
                t[337] = 9552;
                t[493] = 1039;
                t[494] = 1040;
                t[705] = 1524;
                t[706] = 8362;
                t[710] = 64288;
                t[711] = 64298;
                t[759] = 1617;
                t[761] = 1776;
                t[763] = 1778;
                t[775] = 1652;
                t[777] = 1764;
                t[778] = 1780;
                t[779] = 1781;
                t[780] = 1782;
                t[782] = 771;
                t[783] = 64726;
                t[786] = 8363;
                t[788] = 8532;
                t[790] = 768;
                t[791] = 769;
                t[792] = 768;
                t[795] = 803;
                t[797] = 64336;
                t[798] = 64337;
                t[799] = 64342;
                t[800] = 64343;
                t[801] = 64344;
                t[802] = 64345;
                t[803] = 64362;
                t[804] = 64363;
                t[805] = 64364;
                t[2424] = 7821;
                t[2425] = 7822;
                t[2426] = 7823;
                t[2427] = 7824;
                t[2428] = 7825;
                t[2429] = 7826;
                t[2430] = 7827;
                t[2433] = 7682;
                t[2678] = 8045;
                t[2679] = 8046;
                t[2830] = 1552;
                t[2838] = 686;
                t[2840] = 751;
                t[2842] = 753;
                t[2843] = 754;
                t[2844] = 755;
                t[2846] = 757;
                t[2856] = 767;
                t[2857] = 848;
                t[2858] = 849;
                t[2862] = 853;
                t[2863] = 854;
                t[2864] = 855;
                t[2865] = 861;
                t[2866] = 862;
                t[2906] = 7460;
                t[2908] = 7462;
                t[2909] = 7463;
                t[2910] = 7464;
                t[2912] = 7466;
                t[2913] = 7467;
                t[2914] = 7468;
                t[2916] = 7470;
                t[2917] = 7471;
                t[2918] = 7472;
                t[2920] = 7474;
                t[2921] = 7475;
                t[2922] = 7476;
                t[2924] = 7478;
                t[2925] = 7479;
                t[2926] = 7480;
                t[2928] = 7482;
                t[2929] = 7483;
                t[2930] = 7484;
                t[2932] = 7486;
                t[2933] = 7487;
                t[2934] = 7488;
                t[2936] = 7490;
                t[2937] = 7491;
                t[2938] = 7492;
                t[2940] = 7494;
                t[2941] = 7495;
                t[2942] = 7496;
                t[2944] = 7498;
                t[2946] = 7500;
                t[2948] = 7502;
                t[2950] = 7504;
                t[2951] = 7505;
                t[2952] = 7506;
                t[2954] = 7508;
                t[2955] = 7509;
                t[2956] = 7510;
                t[2958] = 7512;
                t[2959] = 7513;
                t[2960] = 7514;
                t[2962] = 7516;
                t[2963] = 7517;
                t[2964] = 7518;
                t[2966] = 7520;
                t[2967] = 7521;
                t[2968] = 7522;
                t[2970] = 7524;
                t[2971] = 7525;
                t[2972] = 7526;
                t[2974] = 7528;
                t[2975] = 7529;
                t[2976] = 7530;
                t[2978] = 1537;
                t[2979] = 1538;
                t[2980] = 1539;
                t[2982] = 1549;
                t[2983] = 1551;
                t[2984] = 1552;
                t[2986] = 1554;
                t[2987] = 1555;
                t[2988] = 1556;
                t[2990] = 1623;
                t[2991] = 1624;
                t[2995] = 1775;
                t[2999] = 1791;
                t[3002] = 64290;
                t[3003] = 64291;
                t[3004] = 64292;
                t[3006] = 64294;
                t[3007] = 64295;
                t[3008] = 64296;
                t[3011] = 1900;
                t[3014] = 8223;
                t[3015] = 8244;
                t[3017] = 7532;
                t[3018] = 7533;
                t[3019] = 7534;
                t[3075] = 7590;
                t[3076] = 7591;
                t[3079] = 7594;
                t[3080] = 7595;
                t[3083] = 7598;
                t[3084] = 7599;
                t[3087] = 7602;
                t[3088] = 7603;
                t[3091] = 7606;
                t[3092] = 7607;
                t[3095] = 7610;
                t[3096] = 7611;
                t[3099] = 7614;
                t[3100] = 7615;
                t[3103] = 7618;
                t[3104] = 7619;
                t[3107] = 8337;
                t[3108] = 8338;
                t[3116] = 1884;
                t[3119] = 1885;
                t[3120] = 1885;
                t[3123] = 1886;
                t[3124] = 1886;
                t[3127] = 1887;
                t[3128] = 1887;
                t[3131] = 1888;
                t[3132] = 1888;
                t[3135] = 1889;
                t[3136] = 1889;
                t[3139] = 1890;
                t[3140] = 1890;
                t[3143] = 1891;
                t[3144] = 1891;
                t[3147] = 1892;
                t[3148] = 1892;
                t[3153] = 580;
                t[3154] = 581;
                t[3157] = 584;
                t[3158] = 585;
                t[3161] = 588;
                t[3162] = 589;
                t[3165] = 891;
                t[3166] = 892;
                t[3169] = 1274;
                t[3170] = 1275;
                t[3173] = 1278;
                t[3174] = 1279;
                t[3181] = 7622;
                t[3182] = 7623;
                t[3282] = 11799;
                t[3316] = 578;
                t[3379] = 42785;
                t[3393] = 1159;
                t[3416] = 8377;
              });
              exports2.getGlyphMapForStandardFonts = getGlyphMapForStandardFonts;
              var getSupplementalGlyphMapForArialBlack = (0, _core_utils.getLookupTableFactory)(function(t) {
                t[227] = 322;
                t[264] = 261;
                t[291] = 346;
              });
              exports2.getSupplementalGlyphMapForArialBlack = getSupplementalGlyphMapForArialBlack;
              var getSupplementalGlyphMapForCalibri = (0, _core_utils.getLookupTableFactory)(function(t) {
                t[1] = 32;
                t[4] = 65;
                t[6] = 193;
                t[17] = 66;
                t[18] = 67;
                t[21] = 268;
                t[24] = 68;
                t[28] = 69;
                t[30] = 201;
                t[32] = 282;
                t[38] = 70;
                t[39] = 71;
                t[44] = 72;
                t[47] = 73;
                t[49] = 205;
                t[58] = 74;
                t[60] = 75;
                t[62] = 76;
                t[68] = 77;
                t[69] = 78;
                t[75] = 79;
                t[87] = 80;
                t[89] = 81;
                t[90] = 82;
                t[92] = 344;
                t[94] = 83;
                t[97] = 352;
                t[100] = 84;
                t[104] = 85;
                t[115] = 86;
                t[116] = 87;
                t[121] = 88;
                t[122] = 89;
                t[124] = 221;
                t[127] = 90;
                t[129] = 381;
                t[258] = 97;
                t[260] = 225;
                t[268] = 261;
                t[271] = 98;
                t[272] = 99;
                t[273] = 263;
                t[275] = 269;
                t[282] = 100;
                t[286] = 101;
                t[288] = 233;
                t[290] = 283;
                t[295] = 281;
                t[296] = 102;
                t[336] = 103;
                t[346] = 104;
                t[349] = 105;
                t[351] = 237;
                t[361] = 106;
                t[364] = 107;
                t[367] = 108;
                t[371] = 322;
                t[373] = 109;
                t[374] = 110;
                t[381] = 111;
                t[383] = 243;
                t[393] = 112;
                t[395] = 113;
                t[396] = 114;
                t[398] = 345;
                t[400] = 115;
                t[401] = 347;
                t[403] = 353;
                t[410] = 116;
                t[437] = 117;
                t[448] = 118;
                t[449] = 119;
                t[454] = 120;
                t[455] = 121;
                t[457] = 253;
                t[460] = 122;
                t[462] = 382;
                t[463] = 380;
                t[853] = 44;
                t[855] = 58;
                t[856] = 46;
                t[876] = 47;
                t[878] = 45;
                t[882] = 45;
                t[894] = 40;
                t[895] = 41;
                t[896] = 91;
                t[897] = 93;
                t[923] = 64;
                t[1004] = 48;
                t[1005] = 49;
                t[1006] = 50;
                t[1007] = 51;
                t[1008] = 52;
                t[1009] = 53;
                t[1010] = 54;
                t[1011] = 55;
                t[1012] = 56;
                t[1013] = 57;
                t[1081] = 37;
                t[1085] = 43;
                t[1086] = 45;
              });
              exports2.getSupplementalGlyphMapForCalibri = getSupplementalGlyphMapForCalibri;
              function getStandardFontName(name) {
                var fontName = (0, _fonts_utils.normalizeFontName)(name);
                var stdFontMap = getStdFontMap();
                return stdFontMap[fontName];
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.ToUnicodeMap = exports2.IdentityToUnicodeMap = void 0;
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var ToUnicodeMap = /* @__PURE__ */ function() {
                function ToUnicodeMap2() {
                  var cmap = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                  _classCallCheck(this, ToUnicodeMap2);
                  this._map = cmap;
                }
                _createClass(ToUnicodeMap2, [{
                  key: "length",
                  get: function get() {
                    return this._map.length;
                  }
                }, {
                  key: "forEach",
                  value: function forEach(callback) {
                    for (var charCode in this._map) {
                      callback(charCode, this._map[charCode].charCodeAt(0));
                    }
                  }
                }, {
                  key: "has",
                  value: function has(i) {
                    return this._map[i] !== void 0;
                  }
                }, {
                  key: "get",
                  value: function get(i) {
                    return this._map[i];
                  }
                }, {
                  key: "charCodeOf",
                  value: function charCodeOf(value) {
                    var map = this._map;
                    if (map.length <= 65536) {
                      return map.indexOf(value);
                    }
                    for (var charCode in map) {
                      if (map[charCode] === value) {
                        return charCode | 0;
                      }
                    }
                    return -1;
                  }
                }, {
                  key: "amend",
                  value: function amend(map) {
                    for (var charCode in map) {
                      this._map[charCode] = map[charCode];
                    }
                  }
                }]);
                return ToUnicodeMap2;
              }();
              exports2.ToUnicodeMap = ToUnicodeMap;
              var IdentityToUnicodeMap = /* @__PURE__ */ function() {
                function IdentityToUnicodeMap2(firstChar, lastChar) {
                  _classCallCheck(this, IdentityToUnicodeMap2);
                  this.firstChar = firstChar;
                  this.lastChar = lastChar;
                }
                _createClass(IdentityToUnicodeMap2, [{
                  key: "length",
                  get: function get() {
                    return this.lastChar + 1 - this.firstChar;
                  }
                }, {
                  key: "forEach",
                  value: function forEach(callback) {
                    for (var i = this.firstChar, ii = this.lastChar; i <= ii; i++) {
                      callback(i, i);
                    }
                  }
                }, {
                  key: "has",
                  value: function has(i) {
                    return this.firstChar <= i && i <= this.lastChar;
                  }
                }, {
                  key: "get",
                  value: function get(i) {
                    if (this.firstChar <= i && i <= this.lastChar) {
                      return String.fromCharCode(i);
                    }
                    return void 0;
                  }
                }, {
                  key: "charCodeOf",
                  value: function charCodeOf(v) {
                    return Number.isInteger(v) && v >= this.firstChar && v <= this.lastChar ? v : -1;
                  }
                }, {
                  key: "amend",
                  value: function amend(map) {
                    (0, _util.unreachable)("Should not call amend()");
                  }
                }]);
                return IdentityToUnicodeMap2;
              }();
              exports2.IdentityToUnicodeMap = IdentityToUnicodeMap;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.CFFFont = void 0;
              var _cff_parser = __w_pdfjs_require__2(175);
              var _fonts_utils = __w_pdfjs_require__2(148);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var CFFFont = /* @__PURE__ */ function() {
                function CFFFont2(file, properties) {
                  _classCallCheck(this, CFFFont2);
                  this.properties = properties;
                  var parser = new _cff_parser.CFFParser(file, properties, _fonts_utils.SEAC_ANALYSIS_ENABLED);
                  this.cff = parser.parse();
                  this.cff.duplicateFirstGlyph();
                  var compiler = new _cff_parser.CFFCompiler(this.cff);
                  this.seacs = this.cff.seacs;
                  try {
                    this.data = compiler.compile();
                  } catch (e) {
                    (0, _util.warn)("Failed to compile font " + properties.loadedName);
                    this.data = file;
                  }
                  this._createBuiltInEncoding();
                }
                _createClass(CFFFont2, [{
                  key: "numGlyphs",
                  get: function get() {
                    return this.cff.charStrings.count;
                  }
                }, {
                  key: "getCharset",
                  value: function getCharset() {
                    return this.cff.charset.charset;
                  }
                }, {
                  key: "getGlyphMapping",
                  value: function getGlyphMapping() {
                    var cff = this.cff;
                    var properties = this.properties;
                    var charsets = cff.charset.charset;
                    var charCodeToGlyphId;
                    var glyphId;
                    if (properties.composite) {
                      charCodeToGlyphId = /* @__PURE__ */ Object.create(null);
                      var charCode;
                      if (cff.isCIDFont) {
                        for (glyphId = 0; glyphId < charsets.length; glyphId++) {
                          var cid = charsets[glyphId];
                          charCode = properties.cMap.charCodeOf(cid);
                          charCodeToGlyphId[charCode] = glyphId;
                        }
                      } else {
                        for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {
                          charCode = properties.cMap.charCodeOf(glyphId);
                          charCodeToGlyphId[charCode] = glyphId;
                        }
                      }
                      return charCodeToGlyphId;
                    }
                    var encoding = cff.encoding ? cff.encoding.encoding : null;
                    if (properties.isInternalFont) {
                      encoding = properties.defaultEncoding;
                    }
                    charCodeToGlyphId = (0, _fonts_utils.type1FontGlyphMapping)(properties, encoding, charsets);
                    return charCodeToGlyphId;
                  }
                }, {
                  key: "hasGlyphId",
                  value: function hasGlyphId(id) {
                    return this.cff.hasGlyphId(id);
                  }
                }, {
                  key: "_createBuiltInEncoding",
                  value: function _createBuiltInEncoding() {
                    var _this$cff = this.cff, charset = _this$cff.charset, encoding = _this$cff.encoding;
                    if (!charset || !encoding) {
                      return;
                    }
                    var charsets = charset.charset, encodings = encoding.encoding;
                    var map = [];
                    for (var charCode in encodings) {
                      var glyphId = encodings[charCode];
                      if (glyphId >= 0) {
                        var glyphName = charsets[glyphId];
                        if (glyphName) {
                          map[charCode] = glyphName;
                        }
                      }
                    }
                    if (map.length > 0) {
                      this.properties.builtInEncoding = map;
                    }
                  }
                }]);
                return CFFFont2;
              }();
              exports2.CFFFont = CFFFont;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.FontRendererFactory = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _cff_parser = __w_pdfjs_require__2(175);
              var _glyphlist = __w_pdfjs_require__2(150);
              var _encodings = __w_pdfjs_require__2(149);
              var _stream = __w_pdfjs_require__2(140);
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function getLong(data, offset) {
                return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];
              }
              function getUshort(data, offset) {
                return data[offset] << 8 | data[offset + 1];
              }
              function getSubroutineBias(subrs) {
                var numSubrs = subrs.length;
                var bias = 32768;
                if (numSubrs < 1240) {
                  bias = 107;
                } else if (numSubrs < 33900) {
                  bias = 1131;
                }
                return bias;
              }
              function parseCmap(data, start, end) {
                var offset = getUshort(data, start + 2) === 1 ? getLong(data, start + 8) : getLong(data, start + 16);
                var format = getUshort(data, start + offset);
                var ranges, p, i;
                if (format === 4) {
                  getUshort(data, start + offset + 2);
                  var segCount = getUshort(data, start + offset + 6) >> 1;
                  p = start + offset + 14;
                  ranges = [];
                  for (i = 0; i < segCount; i++, p += 2) {
                    ranges[i] = {
                      end: getUshort(data, p)
                    };
                  }
                  p += 2;
                  for (i = 0; i < segCount; i++, p += 2) {
                    ranges[i].start = getUshort(data, p);
                  }
                  for (i = 0; i < segCount; i++, p += 2) {
                    ranges[i].idDelta = getUshort(data, p);
                  }
                  for (i = 0; i < segCount; i++, p += 2) {
                    var idOffset = getUshort(data, p);
                    if (idOffset === 0) {
                      continue;
                    }
                    ranges[i].ids = [];
                    for (var j = 0, jj = ranges[i].end - ranges[i].start + 1; j < jj; j++) {
                      ranges[i].ids[j] = getUshort(data, p + idOffset);
                      idOffset += 2;
                    }
                  }
                  return ranges;
                } else if (format === 12) {
                  getLong(data, start + offset + 4);
                  var groups = getLong(data, start + offset + 12);
                  p = start + offset + 16;
                  ranges = [];
                  for (i = 0; i < groups; i++) {
                    ranges.push({
                      start: getLong(data, p),
                      end: getLong(data, p + 4),
                      idDelta: getLong(data, p + 8) - getLong(data, p)
                    });
                    p += 12;
                  }
                  return ranges;
                }
                throw new _util.FormatError("unsupported cmap: ".concat(format));
              }
              function parseCff(data, start, end, seacAnalysisEnabled) {
                var properties = {};
                var parser = new _cff_parser.CFFParser(new _stream.Stream(data, start, end - start), properties, seacAnalysisEnabled);
                var cff = parser.parse();
                return {
                  glyphs: cff.charStrings.objects,
                  subrs: cff.topDict.privateDict && cff.topDict.privateDict.subrsIndex && cff.topDict.privateDict.subrsIndex.objects,
                  gsubrs: cff.globalSubrIndex && cff.globalSubrIndex.objects,
                  isCFFCIDFont: cff.isCIDFont,
                  fdSelect: cff.fdSelect,
                  fdArray: cff.fdArray
                };
              }
              function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {
                var itemSize, itemDecode;
                if (isGlyphLocationsLong) {
                  itemSize = 4;
                  itemDecode = function fontItemDecodeLong(data, offset) {
                    return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];
                  };
                } else {
                  itemSize = 2;
                  itemDecode = function fontItemDecode(data, offset) {
                    return data[offset] << 9 | data[offset + 1] << 1;
                  };
                }
                var glyphs = [];
                var startOffset = itemDecode(loca, 0);
                for (var j = itemSize; j < loca.length; j += itemSize) {
                  var endOffset = itemDecode(loca, j);
                  glyphs.push(glyf.subarray(startOffset, endOffset));
                  startOffset = endOffset;
                }
                return glyphs;
              }
              function lookupCmap(ranges, unicode) {
                var code = unicode.codePointAt(0);
                var gid = 0, l = 0, r = ranges.length - 1;
                while (l < r) {
                  var c = l + r + 1 >> 1;
                  if (code < ranges[c].start) {
                    r = c - 1;
                  } else {
                    l = c;
                  }
                }
                if (ranges[l].start <= code && code <= ranges[l].end) {
                  gid = ranges[l].idDelta + (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code) & 65535;
                }
                return {
                  charCode: code,
                  glyphId: gid
                };
              }
              function compileGlyf(code, cmds, font) {
                function moveTo(x2, y2) {
                  cmds.push({
                    cmd: "moveTo",
                    args: [x2, y2]
                  });
                }
                function lineTo(x2, y2) {
                  cmds.push({
                    cmd: "lineTo",
                    args: [x2, y2]
                  });
                }
                function quadraticCurveTo(xa, ya, x2, y2) {
                  cmds.push({
                    cmd: "quadraticCurveTo",
                    args: [xa, ya, x2, y2]
                  });
                }
                var i = 0;
                var numberOfContours = (code[i] << 24 | code[i + 1] << 16) >> 16;
                var flags;
                var x = 0, y = 0;
                i += 10;
                if (numberOfContours < 0) {
                  do {
                    flags = code[i] << 8 | code[i + 1];
                    var glyphIndex = code[i + 2] << 8 | code[i + 3];
                    i += 4;
                    var arg1 = void 0, arg2 = void 0;
                    if (flags & 1) {
                      arg1 = (code[i] << 24 | code[i + 1] << 16) >> 16;
                      arg2 = (code[i + 2] << 24 | code[i + 3] << 16) >> 16;
                      i += 4;
                    } else {
                      arg1 = code[i++];
                      arg2 = code[i++];
                    }
                    if (flags & 2) {
                      x = arg1;
                      y = arg2;
                    } else {
                      x = 0;
                      y = 0;
                    }
                    var scaleX = 1, scaleY = 1, scale01 = 0, scale10 = 0;
                    if (flags & 8) {
                      scaleX = scaleY = (code[i] << 24 | code[i + 1] << 16) / 1073741824;
                      i += 2;
                    } else if (flags & 64) {
                      scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;
                      scaleY = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;
                      i += 4;
                    } else if (flags & 128) {
                      scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;
                      scale01 = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;
                      scale10 = (code[i + 4] << 24 | code[i + 5] << 16) / 1073741824;
                      scaleY = (code[i + 6] << 24 | code[i + 7] << 16) / 1073741824;
                      i += 8;
                    }
                    var subglyph = font.glyphs[glyphIndex];
                    if (subglyph) {
                      cmds.push({
                        cmd: "save"
                      }, {
                        cmd: "transform",
                        args: [scaleX, scale01, scale10, scaleY, x, y]
                      });
                      compileGlyf(subglyph, cmds, font);
                      cmds.push({
                        cmd: "restore"
                      });
                    }
                  } while (flags & 32);
                } else {
                  var endPtsOfContours = [];
                  var j, jj;
                  for (j = 0; j < numberOfContours; j++) {
                    endPtsOfContours.push(code[i] << 8 | code[i + 1]);
                    i += 2;
                  }
                  var instructionLength = code[i] << 8 | code[i + 1];
                  i += 2 + instructionLength;
                  var numberOfPoints = endPtsOfContours[endPtsOfContours.length - 1] + 1;
                  var points = [];
                  while (points.length < numberOfPoints) {
                    flags = code[i++];
                    var repeat = 1;
                    if (flags & 8) {
                      repeat += code[i++];
                    }
                    while (repeat-- > 0) {
                      points.push({
                        flags
                      });
                    }
                  }
                  for (j = 0; j < numberOfPoints; j++) {
                    switch (points[j].flags & 18) {
                      case 0:
                        x += (code[i] << 24 | code[i + 1] << 16) >> 16;
                        i += 2;
                        break;
                      case 2:
                        x -= code[i++];
                        break;
                      case 18:
                        x += code[i++];
                        break;
                    }
                    points[j].x = x;
                  }
                  for (j = 0; j < numberOfPoints; j++) {
                    switch (points[j].flags & 36) {
                      case 0:
                        y += (code[i] << 24 | code[i + 1] << 16) >> 16;
                        i += 2;
                        break;
                      case 4:
                        y -= code[i++];
                        break;
                      case 36:
                        y += code[i++];
                        break;
                    }
                    points[j].y = y;
                  }
                  var startPoint = 0;
                  for (i = 0; i < numberOfContours; i++) {
                    var endPoint = endPtsOfContours[i];
                    var contour = points.slice(startPoint, endPoint + 1);
                    if (contour[0].flags & 1) {
                      contour.push(contour[0]);
                    } else if (contour[contour.length - 1].flags & 1) {
                      contour.unshift(contour[contour.length - 1]);
                    } else {
                      var p = {
                        flags: 1,
                        x: (contour[0].x + contour[contour.length - 1].x) / 2,
                        y: (contour[0].y + contour[contour.length - 1].y) / 2
                      };
                      contour.unshift(p);
                      contour.push(p);
                    }
                    moveTo(contour[0].x, contour[0].y);
                    for (j = 1, jj = contour.length; j < jj; j++) {
                      if (contour[j].flags & 1) {
                        lineTo(contour[j].x, contour[j].y);
                      } else if (contour[j + 1].flags & 1) {
                        quadraticCurveTo(contour[j].x, contour[j].y, contour[j + 1].x, contour[j + 1].y);
                        j++;
                      } else {
                        quadraticCurveTo(contour[j].x, contour[j].y, (contour[j].x + contour[j + 1].x) / 2, (contour[j].y + contour[j + 1].y) / 2);
                      }
                    }
                    startPoint = endPoint + 1;
                  }
                }
              }
              function compileCharString(charStringCode, cmds, font, glyphId) {
                function moveTo(x2, y2) {
                  cmds.push({
                    cmd: "moveTo",
                    args: [x2, y2]
                  });
                }
                function lineTo(x2, y2) {
                  cmds.push({
                    cmd: "lineTo",
                    args: [x2, y2]
                  });
                }
                function bezierCurveTo(x1, y1, x2, y2, x3, y3) {
                  cmds.push({
                    cmd: "bezierCurveTo",
                    args: [x1, y1, x2, y2, x3, y3]
                  });
                }
                var stack = [];
                var x = 0, y = 0;
                var stems = 0;
                function parse(code) {
                  var i = 0;
                  while (i < code.length) {
                    var stackClean = false;
                    var v = code[i++];
                    var xa = void 0, xb = void 0, ya = void 0, yb = void 0, y1 = void 0, y2 = void 0, y3 = void 0, n = void 0, subrCode = void 0;
                    switch (v) {
                      case 1:
                        stems += stack.length >> 1;
                        stackClean = true;
                        break;
                      case 3:
                        stems += stack.length >> 1;
                        stackClean = true;
                        break;
                      case 4:
                        y += stack.pop();
                        moveTo(x, y);
                        stackClean = true;
                        break;
                      case 5:
                        while (stack.length > 0) {
                          x += stack.shift();
                          y += stack.shift();
                          lineTo(x, y);
                        }
                        break;
                      case 6:
                        while (stack.length > 0) {
                          x += stack.shift();
                          lineTo(x, y);
                          if (stack.length === 0) {
                            break;
                          }
                          y += stack.shift();
                          lineTo(x, y);
                        }
                        break;
                      case 7:
                        while (stack.length > 0) {
                          y += stack.shift();
                          lineTo(x, y);
                          if (stack.length === 0) {
                            break;
                          }
                          x += stack.shift();
                          lineTo(x, y);
                        }
                        break;
                      case 8:
                        while (stack.length > 0) {
                          xa = x + stack.shift();
                          ya = y + stack.shift();
                          xb = xa + stack.shift();
                          yb = ya + stack.shift();
                          x = xb + stack.shift();
                          y = yb + stack.shift();
                          bezierCurveTo(xa, ya, xb, yb, x, y);
                        }
                        break;
                      case 10:
                        n = stack.pop();
                        subrCode = null;
                        if (font.isCFFCIDFont) {
                          var fdIndex = font.fdSelect.getFDIndex(glyphId);
                          if (fdIndex >= 0 && fdIndex < font.fdArray.length) {
                            var fontDict = font.fdArray[fdIndex];
                            var subrs = void 0;
                            if (fontDict.privateDict && fontDict.privateDict.subrsIndex) {
                              subrs = fontDict.privateDict.subrsIndex.objects;
                            }
                            if (subrs) {
                              n += getSubroutineBias(subrs);
                              subrCode = subrs[n];
                            }
                          } else {
                            (0, _util.warn)("Invalid fd index for glyph index.");
                          }
                        } else {
                          subrCode = font.subrs[n + font.subrsBias];
                        }
                        if (subrCode) {
                          parse(subrCode);
                        }
                        break;
                      case 11:
                        return;
                      case 12:
                        v = code[i++];
                        switch (v) {
                          case 34:
                            xa = x + stack.shift();
                            xb = xa + stack.shift();
                            y1 = y + stack.shift();
                            x = xb + stack.shift();
                            bezierCurveTo(xa, y, xb, y1, x, y1);
                            xa = x + stack.shift();
                            xb = xa + stack.shift();
                            x = xb + stack.shift();
                            bezierCurveTo(xa, y1, xb, y, x, y);
                            break;
                          case 35:
                            xa = x + stack.shift();
                            ya = y + stack.shift();
                            xb = xa + stack.shift();
                            yb = ya + stack.shift();
                            x = xb + stack.shift();
                            y = yb + stack.shift();
                            bezierCurveTo(xa, ya, xb, yb, x, y);
                            xa = x + stack.shift();
                            ya = y + stack.shift();
                            xb = xa + stack.shift();
                            yb = ya + stack.shift();
                            x = xb + stack.shift();
                            y = yb + stack.shift();
                            bezierCurveTo(xa, ya, xb, yb, x, y);
                            stack.pop();
                            break;
                          case 36:
                            xa = x + stack.shift();
                            y1 = y + stack.shift();
                            xb = xa + stack.shift();
                            y2 = y1 + stack.shift();
                            x = xb + stack.shift();
                            bezierCurveTo(xa, y1, xb, y2, x, y2);
                            xa = x + stack.shift();
                            xb = xa + stack.shift();
                            y3 = y2 + stack.shift();
                            x = xb + stack.shift();
                            bezierCurveTo(xa, y2, xb, y3, x, y);
                            break;
                          case 37:
                            var x0 = x, y0 = y;
                            xa = x + stack.shift();
                            ya = y + stack.shift();
                            xb = xa + stack.shift();
                            yb = ya + stack.shift();
                            x = xb + stack.shift();
                            y = yb + stack.shift();
                            bezierCurveTo(xa, ya, xb, yb, x, y);
                            xa = x + stack.shift();
                            ya = y + stack.shift();
                            xb = xa + stack.shift();
                            yb = ya + stack.shift();
                            x = xb;
                            y = yb;
                            if (Math.abs(x - x0) > Math.abs(y - y0)) {
                              x += stack.shift();
                            } else {
                              y += stack.shift();
                            }
                            bezierCurveTo(xa, ya, xb, yb, x, y);
                            break;
                          default:
                            throw new _util.FormatError("unknown operator: 12 ".concat(v));
                        }
                        break;
                      case 14:
                        if (stack.length >= 4) {
                          var achar = stack.pop();
                          var bchar = stack.pop();
                          y = stack.pop();
                          x = stack.pop();
                          cmds.push({
                            cmd: "save"
                          }, {
                            cmd: "translate",
                            args: [x, y]
                          });
                          var cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[achar]]));
                          compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);
                          cmds.push({
                            cmd: "restore"
                          });
                          cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[bchar]]));
                          compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);
                        }
                        return;
                      case 18:
                        stems += stack.length >> 1;
                        stackClean = true;
                        break;
                      case 19:
                        stems += stack.length >> 1;
                        i += stems + 7 >> 3;
                        stackClean = true;
                        break;
                      case 20:
                        stems += stack.length >> 1;
                        i += stems + 7 >> 3;
                        stackClean = true;
                        break;
                      case 21:
                        y += stack.pop();
                        x += stack.pop();
                        moveTo(x, y);
                        stackClean = true;
                        break;
                      case 22:
                        x += stack.pop();
                        moveTo(x, y);
                        stackClean = true;
                        break;
                      case 23:
                        stems += stack.length >> 1;
                        stackClean = true;
                        break;
                      case 24:
                        while (stack.length > 2) {
                          xa = x + stack.shift();
                          ya = y + stack.shift();
                          xb = xa + stack.shift();
                          yb = ya + stack.shift();
                          x = xb + stack.shift();
                          y = yb + stack.shift();
                          bezierCurveTo(xa, ya, xb, yb, x, y);
                        }
                        x += stack.shift();
                        y += stack.shift();
                        lineTo(x, y);
                        break;
                      case 25:
                        while (stack.length > 6) {
                          x += stack.shift();
                          y += stack.shift();
                          lineTo(x, y);
                        }
                        xa = x + stack.shift();
                        ya = y + stack.shift();
                        xb = xa + stack.shift();
                        yb = ya + stack.shift();
                        x = xb + stack.shift();
                        y = yb + stack.shift();
                        bezierCurveTo(xa, ya, xb, yb, x, y);
                        break;
                      case 26:
                        if (stack.length % 2) {
                          x += stack.shift();
                        }
                        while (stack.length > 0) {
                          xa = x;
                          ya = y + stack.shift();
                          xb = xa + stack.shift();
                          yb = ya + stack.shift();
                          x = xb;
                          y = yb + stack.shift();
                          bezierCurveTo(xa, ya, xb, yb, x, y);
                        }
                        break;
                      case 27:
                        if (stack.length % 2) {
                          y += stack.shift();
                        }
                        while (stack.length > 0) {
                          xa = x + stack.shift();
                          ya = y;
                          xb = xa + stack.shift();
                          yb = ya + stack.shift();
                          x = xb + stack.shift();
                          y = yb;
                          bezierCurveTo(xa, ya, xb, yb, x, y);
                        }
                        break;
                      case 28:
                        stack.push((code[i] << 24 | code[i + 1] << 16) >> 16);
                        i += 2;
                        break;
                      case 29:
                        n = stack.pop() + font.gsubrsBias;
                        subrCode = font.gsubrs[n];
                        if (subrCode) {
                          parse(subrCode);
                        }
                        break;
                      case 30:
                        while (stack.length > 0) {
                          xa = x;
                          ya = y + stack.shift();
                          xb = xa + stack.shift();
                          yb = ya + stack.shift();
                          x = xb + stack.shift();
                          y = yb + (stack.length === 1 ? stack.shift() : 0);
                          bezierCurveTo(xa, ya, xb, yb, x, y);
                          if (stack.length === 0) {
                            break;
                          }
                          xa = x + stack.shift();
                          ya = y;
                          xb = xa + stack.shift();
                          yb = ya + stack.shift();
                          y = yb + stack.shift();
                          x = xb + (stack.length === 1 ? stack.shift() : 0);
                          bezierCurveTo(xa, ya, xb, yb, x, y);
                        }
                        break;
                      case 31:
                        while (stack.length > 0) {
                          xa = x + stack.shift();
                          ya = y;
                          xb = xa + stack.shift();
                          yb = ya + stack.shift();
                          y = yb + stack.shift();
                          x = xb + (stack.length === 1 ? stack.shift() : 0);
                          bezierCurveTo(xa, ya, xb, yb, x, y);
                          if (stack.length === 0) {
                            break;
                          }
                          xa = x;
                          ya = y + stack.shift();
                          xb = xa + stack.shift();
                          yb = ya + stack.shift();
                          x = xb + stack.shift();
                          y = yb + (stack.length === 1 ? stack.shift() : 0);
                          bezierCurveTo(xa, ya, xb, yb, x, y);
                        }
                        break;
                      default:
                        if (v < 32) {
                          throw new _util.FormatError("unknown operator: ".concat(v));
                        }
                        if (v < 247) {
                          stack.push(v - 139);
                        } else if (v < 251) {
                          stack.push((v - 247) * 256 + code[i++] + 108);
                        } else if (v < 255) {
                          stack.push(-(v - 251) * 256 - code[i++] - 108);
                        } else {
                          stack.push((code[i] << 24 | code[i + 1] << 16 | code[i + 2] << 8 | code[i + 3]) / 65536);
                          i += 4;
                        }
                        break;
                    }
                    if (stackClean) {
                      stack.length = 0;
                    }
                  }
                }
                parse(charStringCode);
              }
              var NOOP = [];
              var CompiledFont = /* @__PURE__ */ function() {
                function CompiledFont2(fontMatrix) {
                  _classCallCheck(this, CompiledFont2);
                  if (this.constructor === CompiledFont2) {
                    (0, _util.unreachable)("Cannot initialize CompiledFont.");
                  }
                  this.fontMatrix = fontMatrix;
                  this.compiledGlyphs = /* @__PURE__ */ Object.create(null);
                  this.compiledCharCodeToGlyphId = /* @__PURE__ */ Object.create(null);
                }
                _createClass(CompiledFont2, [{
                  key: "getPathJs",
                  value: function getPathJs(unicode) {
                    var _lookupCmap = lookupCmap(this.cmap, unicode), charCode = _lookupCmap.charCode, glyphId = _lookupCmap.glyphId;
                    var fn = this.compiledGlyphs[glyphId];
                    if (!fn) {
                      try {
                        fn = this.compileGlyph(this.glyphs[glyphId], glyphId);
                        this.compiledGlyphs[glyphId] = fn;
                      } catch (ex) {
                        this.compiledGlyphs[glyphId] = NOOP;
                        if (this.compiledCharCodeToGlyphId[charCode] === void 0) {
                          this.compiledCharCodeToGlyphId[charCode] = glyphId;
                        }
                        throw ex;
                      }
                    }
                    if (this.compiledCharCodeToGlyphId[charCode] === void 0) {
                      this.compiledCharCodeToGlyphId[charCode] = glyphId;
                    }
                    return fn;
                  }
                }, {
                  key: "compileGlyph",
                  value: function compileGlyph(code, glyphId) {
                    if (!code || code.length === 0 || code[0] === 14) {
                      return NOOP;
                    }
                    var fontMatrix = this.fontMatrix;
                    if (this.isCFFCIDFont) {
                      var fdIndex = this.fdSelect.getFDIndex(glyphId);
                      if (fdIndex >= 0 && fdIndex < this.fdArray.length) {
                        var fontDict = this.fdArray[fdIndex];
                        fontMatrix = fontDict.getByName("FontMatrix") || _util.FONT_IDENTITY_MATRIX;
                      } else {
                        (0, _util.warn)("Invalid fd index for glyph index.");
                      }
                    }
                    var cmds = [{
                      cmd: "save"
                    }, {
                      cmd: "transform",
                      args: fontMatrix.slice()
                    }, {
                      cmd: "scale",
                      args: ["size", "-size"]
                    }];
                    this.compileGlyphImpl(code, cmds, glyphId);
                    cmds.push({
                      cmd: "restore"
                    });
                    return cmds;
                  }
                }, {
                  key: "compileGlyphImpl",
                  value: function compileGlyphImpl() {
                    (0, _util.unreachable)("Children classes should implement this.");
                  }
                }, {
                  key: "hasBuiltPath",
                  value: function hasBuiltPath(unicode) {
                    var _lookupCmap2 = lookupCmap(this.cmap, unicode), charCode = _lookupCmap2.charCode, glyphId = _lookupCmap2.glyphId;
                    return this.compiledGlyphs[glyphId] !== void 0 && this.compiledCharCodeToGlyphId[charCode] !== void 0;
                  }
                }]);
                return CompiledFont2;
              }();
              var TrueTypeCompiled = /* @__PURE__ */ function(_CompiledFont) {
                _inherits(TrueTypeCompiled2, _CompiledFont);
                var _super = _createSuper(TrueTypeCompiled2);
                function TrueTypeCompiled2(glyphs, cmap, fontMatrix) {
                  var _this;
                  _classCallCheck(this, TrueTypeCompiled2);
                  _this = _super.call(this, fontMatrix || [488e-6, 0, 0, 488e-6, 0, 0]);
                  _this.glyphs = glyphs;
                  _this.cmap = cmap;
                  return _this;
                }
                _createClass(TrueTypeCompiled2, [{
                  key: "compileGlyphImpl",
                  value: function compileGlyphImpl(code, cmds) {
                    compileGlyf(code, cmds, this);
                  }
                }]);
                return TrueTypeCompiled2;
              }(CompiledFont);
              var Type2Compiled = /* @__PURE__ */ function(_CompiledFont2) {
                _inherits(Type2Compiled2, _CompiledFont2);
                var _super2 = _createSuper(Type2Compiled2);
                function Type2Compiled2(cffInfo, cmap, fontMatrix, glyphNameMap) {
                  var _this2;
                  _classCallCheck(this, Type2Compiled2);
                  _this2 = _super2.call(this, fontMatrix || [1e-3, 0, 0, 1e-3, 0, 0]);
                  _this2.glyphs = cffInfo.glyphs;
                  _this2.gsubrs = cffInfo.gsubrs || [];
                  _this2.subrs = cffInfo.subrs || [];
                  _this2.cmap = cmap;
                  _this2.glyphNameMap = glyphNameMap || (0, _glyphlist.getGlyphsUnicode)();
                  _this2.gsubrsBias = getSubroutineBias(_this2.gsubrs);
                  _this2.subrsBias = getSubroutineBias(_this2.subrs);
                  _this2.isCFFCIDFont = cffInfo.isCFFCIDFont;
                  _this2.fdSelect = cffInfo.fdSelect;
                  _this2.fdArray = cffInfo.fdArray;
                  return _this2;
                }
                _createClass(Type2Compiled2, [{
                  key: "compileGlyphImpl",
                  value: function compileGlyphImpl(code, cmds, glyphId) {
                    compileCharString(code, cmds, this, glyphId);
                  }
                }]);
                return Type2Compiled2;
              }(CompiledFont);
              var FontRendererFactory = /* @__PURE__ */ function() {
                function FontRendererFactory2() {
                  _classCallCheck(this, FontRendererFactory2);
                }
                _createClass(FontRendererFactory2, null, [{
                  key: "create",
                  value: function create(font, seacAnalysisEnabled) {
                    var data = new Uint8Array(font.data);
                    var cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;
                    var numTables = getUshort(data, 4);
                    for (var i = 0, p = 12; i < numTables; i++, p += 16) {
                      var tag = (0, _util.bytesToString)(data.subarray(p, p + 4));
                      var offset = getLong(data, p + 8);
                      var length = getLong(data, p + 12);
                      switch (tag) {
                        case "cmap":
                          cmap = parseCmap(data, offset, offset + length);
                          break;
                        case "glyf":
                          glyf = data.subarray(offset, offset + length);
                          break;
                        case "loca":
                          loca = data.subarray(offset, offset + length);
                          break;
                        case "head":
                          unitsPerEm = getUshort(data, offset + 18);
                          indexToLocFormat = getUshort(data, offset + 50);
                          break;
                        case "CFF ":
                          cff = parseCff(data, offset, offset + length, seacAnalysisEnabled);
                          break;
                      }
                    }
                    if (glyf) {
                      var fontMatrix = !unitsPerEm ? font.fontMatrix : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];
                      return new TrueTypeCompiled(parseGlyfTable(glyf, loca, indexToLocFormat), cmap, fontMatrix);
                    }
                    return new Type2Compiled(cff, cmap, font.fontMatrix, font.glyphNameMap);
                  }
                }]);
                return FontRendererFactory2;
              }();
              exports2.FontRendererFactory = FontRendererFactory;
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.GlyfTable = void 0;
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var ON_CURVE_POINT = 1 << 0;
              var X_SHORT_VECTOR = 1 << 1;
              var Y_SHORT_VECTOR = 1 << 2;
              var REPEAT_FLAG = 1 << 3;
              var X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR = 1 << 4;
              var Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR = 1 << 5;
              var OVERLAP_SIMPLE = 1 << 6;
              var ARG_1_AND_2_ARE_WORDS = 1 << 0;
              var ARGS_ARE_XY_VALUES = 1 << 1;
              var WE_HAVE_A_SCALE = 1 << 3;
              var MORE_COMPONENTS = 1 << 5;
              var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;
              var WE_HAVE_A_TWO_BY_TWO = 1 << 7;
              var WE_HAVE_INSTRUCTIONS = 1 << 8;
              var GlyfTable = /* @__PURE__ */ function() {
                function GlyfTable2(_ref) {
                  var glyfTable = _ref.glyfTable, isGlyphLocationsLong = _ref.isGlyphLocationsLong, locaTable = _ref.locaTable, numGlyphs = _ref.numGlyphs;
                  _classCallCheck(this, GlyfTable2);
                  this.glyphs = [];
                  var loca = new DataView(locaTable.buffer, locaTable.byteOffset, locaTable.byteLength);
                  var glyf = new DataView(glyfTable.buffer, glyfTable.byteOffset, glyfTable.byteLength);
                  var offsetSize = isGlyphLocationsLong ? 4 : 2;
                  var prev = isGlyphLocationsLong ? loca.getUint32(0) : 2 * loca.getUint16(0);
                  var pos = 0;
                  for (var i = 0; i < numGlyphs; i++) {
                    pos += offsetSize;
                    var next = isGlyphLocationsLong ? loca.getUint32(pos) : 2 * loca.getUint16(pos);
                    if (next === prev) {
                      this.glyphs.push(new Glyph({}));
                      continue;
                    }
                    var glyph = Glyph.parse(prev, glyf);
                    this.glyphs.push(glyph);
                    prev = next;
                  }
                }
                _createClass(GlyfTable2, [{
                  key: "getSize",
                  value: function getSize() {
                    return this.glyphs.reduce(function(a, g) {
                      var size = g.getSize();
                      return a + (size + 3 & ~3);
                    }, 0);
                  }
                }, {
                  key: "write",
                  value: function write() {
                    var totalSize = this.getSize();
                    var glyfTable = new DataView(new ArrayBuffer(totalSize));
                    var isLocationLong = totalSize > 131070;
                    var offsetSize = isLocationLong ? 4 : 2;
                    var locaTable = new DataView(new ArrayBuffer((this.glyphs.length + 1) * offsetSize));
                    if (isLocationLong) {
                      locaTable.setUint32(0, 0);
                    } else {
                      locaTable.setUint16(0, 0);
                    }
                    var pos = 0;
                    var locaIndex = 0;
                    var _iterator = _createForOfIteratorHelper(this.glyphs), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var glyph = _step.value;
                        pos += glyph.write(pos, glyfTable);
                        pos = pos + 3 & ~3;
                        locaIndex += offsetSize;
                        if (isLocationLong) {
                          locaTable.setUint32(locaIndex, pos);
                        } else {
                          locaTable.setUint16(locaIndex, pos >> 1);
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    return {
                      isLocationLong,
                      loca: new Uint8Array(locaTable.buffer),
                      glyf: new Uint8Array(glyfTable.buffer)
                    };
                  }
                }, {
                  key: "scale",
                  value: function scale(factors) {
                    for (var i = 0, ii = this.glyphs.length; i < ii; i++) {
                      this.glyphs[i].scale(factors[i]);
                    }
                  }
                }]);
                return GlyfTable2;
              }();
              exports2.GlyfTable = GlyfTable;
              var Glyph = /* @__PURE__ */ function() {
                function Glyph2(_ref2) {
                  var _ref2$header = _ref2.header, header = _ref2$header === void 0 ? null : _ref2$header, _ref2$simple = _ref2.simple, simple = _ref2$simple === void 0 ? null : _ref2$simple, _ref2$composites = _ref2.composites, composites = _ref2$composites === void 0 ? null : _ref2$composites;
                  _classCallCheck(this, Glyph2);
                  this.header = header;
                  this.simple = simple;
                  this.composites = composites;
                }
                _createClass(Glyph2, [{
                  key: "getSize",
                  value: function getSize() {
                    if (!this.header) {
                      return 0;
                    }
                    var size = this.simple ? this.simple.getSize() : this.composites.reduce(function(a, c) {
                      return a + c.getSize();
                    }, 0);
                    return this.header.getSize() + size;
                  }
                }, {
                  key: "write",
                  value: function write(pos, buf) {
                    if (!this.header) {
                      return 0;
                    }
                    var spos = pos;
                    pos += this.header.write(pos, buf);
                    if (this.simple) {
                      pos += this.simple.write(pos, buf);
                    } else {
                      var _iterator2 = _createForOfIteratorHelper(this.composites), _step2;
                      try {
                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                          var composite = _step2.value;
                          pos += composite.write(pos, buf);
                        }
                      } catch (err) {
                        _iterator2.e(err);
                      } finally {
                        _iterator2.f();
                      }
                    }
                    return pos - spos;
                  }
                }, {
                  key: "scale",
                  value: function scale(factor) {
                    if (!this.header) {
                      return;
                    }
                    var xMiddle = (this.header.xMin + this.header.xMax) / 2;
                    this.header.scale(xMiddle, factor);
                    if (this.simple) {
                      this.simple.scale(xMiddle, factor);
                    } else {
                      var _iterator3 = _createForOfIteratorHelper(this.composites), _step3;
                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                          var composite = _step3.value;
                          composite.scale(xMiddle, factor);
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                    }
                  }
                }], [{
                  key: "parse",
                  value: function parse(pos, glyf) {
                    var _GlyphHeader$parse = GlyphHeader.parse(pos, glyf), _GlyphHeader$parse2 = _slicedToArray(_GlyphHeader$parse, 2), read = _GlyphHeader$parse2[0], header = _GlyphHeader$parse2[1];
                    pos += read;
                    if (header.numberOfContours < 0) {
                      var composites = [];
                      while (true) {
                        var _CompositeGlyph$parse = CompositeGlyph.parse(pos, glyf), _CompositeGlyph$parse2 = _slicedToArray(_CompositeGlyph$parse, 2), n = _CompositeGlyph$parse2[0], composite = _CompositeGlyph$parse2[1];
                        pos += n;
                        composites.push(composite);
                        if (!(composite.flags & MORE_COMPONENTS)) {
                          break;
                        }
                      }
                      return new Glyph2({
                        header,
                        composites
                      });
                    }
                    var simple = SimpleGlyph.parse(pos, glyf, header.numberOfContours);
                    return new Glyph2({
                      header,
                      simple
                    });
                  }
                }]);
                return Glyph2;
              }();
              var GlyphHeader = /* @__PURE__ */ function() {
                function GlyphHeader2(_ref3) {
                  var numberOfContours = _ref3.numberOfContours, xMin = _ref3.xMin, yMin = _ref3.yMin, xMax = _ref3.xMax, yMax = _ref3.yMax;
                  _classCallCheck(this, GlyphHeader2);
                  this.numberOfContours = numberOfContours;
                  this.xMin = xMin;
                  this.yMin = yMin;
                  this.xMax = xMax;
                  this.yMax = yMax;
                }
                _createClass(GlyphHeader2, [{
                  key: "getSize",
                  value: function getSize() {
                    return 10;
                  }
                }, {
                  key: "write",
                  value: function write(pos, buf) {
                    buf.setInt16(pos, this.numberOfContours);
                    buf.setInt16(pos + 2, this.xMin);
                    buf.setInt16(pos + 4, this.yMin);
                    buf.setInt16(pos + 6, this.xMax);
                    buf.setInt16(pos + 8, this.yMax);
                    return 10;
                  }
                }, {
                  key: "scale",
                  value: function scale(x, factor) {
                    this.xMin = Math.round(x + (this.xMin - x) * factor);
                    this.xMax = Math.round(x + (this.xMax - x) * factor);
                  }
                }], [{
                  key: "parse",
                  value: function parse(pos, glyf) {
                    return [10, new GlyphHeader2({
                      numberOfContours: glyf.getInt16(pos),
                      xMin: glyf.getInt16(pos + 2),
                      yMin: glyf.getInt16(pos + 4),
                      xMax: glyf.getInt16(pos + 6),
                      yMax: glyf.getInt16(pos + 8)
                    })];
                  }
                }]);
                return GlyphHeader2;
              }();
              var Contour = function Contour2(_ref4) {
                var flags = _ref4.flags, xCoordinates = _ref4.xCoordinates, yCoordinates = _ref4.yCoordinates;
                _classCallCheck(this, Contour2);
                this.xCoordinates = xCoordinates;
                this.yCoordinates = yCoordinates;
                this.flags = flags;
              };
              var SimpleGlyph = /* @__PURE__ */ function() {
                function SimpleGlyph2(_ref5) {
                  var contours = _ref5.contours, instructions = _ref5.instructions;
                  _classCallCheck(this, SimpleGlyph2);
                  this.contours = contours;
                  this.instructions = instructions;
                }
                _createClass(SimpleGlyph2, [{
                  key: "getSize",
                  value: function getSize() {
                    var size = this.contours.length * 2 + 2 + this.instructions.length;
                    var lastX = 0;
                    var lastY = 0;
                    var _iterator4 = _createForOfIteratorHelper(this.contours), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var contour = _step4.value;
                        size += contour.flags.length;
                        for (var i = 0, ii = contour.xCoordinates.length; i < ii; i++) {
                          var x = contour.xCoordinates[i];
                          var y = contour.yCoordinates[i];
                          var abs = Math.abs(x - lastX);
                          if (abs > 255) {
                            size += 2;
                          } else if (abs > 0) {
                            size += 1;
                          }
                          lastX = x;
                          abs = Math.abs(y - lastY);
                          if (abs > 255) {
                            size += 2;
                          } else if (abs > 0) {
                            size += 1;
                          }
                          lastY = y;
                        }
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                    return size;
                  }
                }, {
                  key: "write",
                  value: function write(pos, buf) {
                    var spos = pos;
                    var xCoordinates = [];
                    var yCoordinates = [];
                    var flags = [];
                    var lastX = 0;
                    var lastY = 0;
                    var _iterator5 = _createForOfIteratorHelper(this.contours), _step5;
                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                        var contour = _step5.value;
                        for (var _i4 = 0, _ii2 = contour.xCoordinates.length; _i4 < _ii2; _i4++) {
                          var _flag3 = contour.flags[_i4];
                          var _x = contour.xCoordinates[_i4];
                          var delta = _x - lastX;
                          if (delta === 0) {
                            _flag3 |= X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR;
                            xCoordinates.push(0);
                          } else {
                            var abs = Math.abs(delta);
                            if (abs <= 255) {
                              _flag3 |= delta >= 0 ? X_SHORT_VECTOR | X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR : X_SHORT_VECTOR;
                              xCoordinates.push(abs);
                            } else {
                              xCoordinates.push(delta);
                            }
                          }
                          lastX = _x;
                          var _y = contour.yCoordinates[_i4];
                          delta = _y - lastY;
                          if (delta === 0) {
                            _flag3 |= Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR;
                            yCoordinates.push(0);
                          } else {
                            var _abs = Math.abs(delta);
                            if (_abs <= 255) {
                              _flag3 |= delta >= 0 ? Y_SHORT_VECTOR | Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR : Y_SHORT_VECTOR;
                              yCoordinates.push(_abs);
                            } else {
                              yCoordinates.push(delta);
                            }
                          }
                          lastY = _y;
                          flags.push(_flag3);
                        }
                        buf.setUint16(pos, xCoordinates.length - 1);
                        pos += 2;
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                    buf.setUint16(pos, this.instructions.length);
                    pos += 2;
                    if (this.instructions.length) {
                      new Uint8Array(buf.buffer, 0, buf.buffer.byteLength).set(this.instructions, pos);
                      pos += this.instructions.length;
                    }
                    for (var _i2 = 0, _flags = flags; _i2 < _flags.length; _i2++) {
                      var flag = _flags[_i2];
                      buf.setUint8(pos++, flag);
                    }
                    for (var i = 0, ii = xCoordinates.length; i < ii; i++) {
                      var x = xCoordinates[i];
                      var _flag = flags[i];
                      if (_flag & X_SHORT_VECTOR) {
                        buf.setUint8(pos++, x);
                      } else if (!(_flag & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR)) {
                        buf.setInt16(pos, x);
                        pos += 2;
                      }
                    }
                    for (var _i3 = 0, _ii = yCoordinates.length; _i3 < _ii; _i3++) {
                      var y = yCoordinates[_i3];
                      var _flag2 = flags[_i3];
                      if (_flag2 & Y_SHORT_VECTOR) {
                        buf.setUint8(pos++, y);
                      } else if (!(_flag2 & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR)) {
                        buf.setInt16(pos, y);
                        pos += 2;
                      }
                    }
                    return pos - spos;
                  }
                }, {
                  key: "scale",
                  value: function scale(x, factor) {
                    var _iterator6 = _createForOfIteratorHelper(this.contours), _step6;
                    try {
                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                        var contour = _step6.value;
                        if (contour.xCoordinates.length === 0) {
                          continue;
                        }
                        for (var i = 0, ii = contour.xCoordinates.length; i < ii; i++) {
                          contour.xCoordinates[i] = Math.round(x + (contour.xCoordinates[i] - x) * factor);
                        }
                      }
                    } catch (err) {
                      _iterator6.e(err);
                    } finally {
                      _iterator6.f();
                    }
                  }
                }], [{
                  key: "parse",
                  value: function parse(pos, glyf, numberOfContours) {
                    var endPtsOfContours = [];
                    for (var i = 0; i < numberOfContours; i++) {
                      var endPt = glyf.getUint16(pos);
                      pos += 2;
                      endPtsOfContours.push(endPt);
                    }
                    var numberOfPt = endPtsOfContours[numberOfContours - 1] + 1;
                    var instructionLength = glyf.getUint16(pos);
                    pos += 2;
                    var instructions = new Uint8Array(glyf).slice(pos, pos + instructionLength);
                    pos += instructionLength;
                    var flags = [];
                    for (var _i5 = 0; _i5 < numberOfPt; pos++, _i5++) {
                      var flag = glyf.getUint8(pos);
                      flags.push(flag);
                      if (flag & REPEAT_FLAG) {
                        var count = glyf.getUint8(++pos);
                        flag ^= REPEAT_FLAG;
                        for (var m = 0; m < count; m++) {
                          flags.push(flag);
                        }
                        _i5 += count;
                      }
                    }
                    var allXCoordinates = [];
                    var xCoordinates = [];
                    var yCoordinates = [];
                    var pointFlags = [];
                    var contours = [];
                    var endPtsOfContoursIndex = 0;
                    var lastCoordinate = 0;
                    for (var _i6 = 0; _i6 < numberOfPt; _i6++) {
                      var _flag4 = flags[_i6];
                      if (_flag4 & X_SHORT_VECTOR) {
                        var x = glyf.getUint8(pos++);
                        lastCoordinate += _flag4 & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR ? x : -x;
                        xCoordinates.push(lastCoordinate);
                      } else if (_flag4 & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR) {
                        xCoordinates.push(lastCoordinate);
                      } else {
                        lastCoordinate += glyf.getInt16(pos);
                        pos += 2;
                        xCoordinates.push(lastCoordinate);
                      }
                      if (endPtsOfContours[endPtsOfContoursIndex] === _i6) {
                        endPtsOfContoursIndex++;
                        allXCoordinates.push(xCoordinates);
                        xCoordinates = [];
                      }
                    }
                    lastCoordinate = 0;
                    endPtsOfContoursIndex = 0;
                    for (var _i7 = 0; _i7 < numberOfPt; _i7++) {
                      var _flag5 = flags[_i7];
                      if (_flag5 & Y_SHORT_VECTOR) {
                        var y = glyf.getUint8(pos++);
                        lastCoordinate += _flag5 & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR ? y : -y;
                        yCoordinates.push(lastCoordinate);
                      } else if (_flag5 & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR) {
                        yCoordinates.push(lastCoordinate);
                      } else {
                        lastCoordinate += glyf.getInt16(pos);
                        pos += 2;
                        yCoordinates.push(lastCoordinate);
                      }
                      pointFlags.push(_flag5 & ON_CURVE_POINT | _flag5 & OVERLAP_SIMPLE);
                      if (endPtsOfContours[endPtsOfContoursIndex] === _i7) {
                        xCoordinates = allXCoordinates[endPtsOfContoursIndex];
                        endPtsOfContoursIndex++;
                        contours.push(new Contour({
                          flags: pointFlags,
                          xCoordinates,
                          yCoordinates
                        }));
                        yCoordinates = [];
                        pointFlags = [];
                      }
                    }
                    return new SimpleGlyph2({
                      contours,
                      instructions
                    });
                  }
                }]);
                return SimpleGlyph2;
              }();
              var CompositeGlyph = /* @__PURE__ */ function() {
                function CompositeGlyph2(_ref6) {
                  var flags = _ref6.flags, glyphIndex = _ref6.glyphIndex, argument1 = _ref6.argument1, argument2 = _ref6.argument2, transf = _ref6.transf, instructions = _ref6.instructions;
                  _classCallCheck(this, CompositeGlyph2);
                  this.flags = flags;
                  this.glyphIndex = glyphIndex;
                  this.argument1 = argument1;
                  this.argument2 = argument2;
                  this.transf = transf;
                  this.instructions = instructions;
                }
                _createClass(CompositeGlyph2, [{
                  key: "getSize",
                  value: function getSize() {
                    var size = 2 + 2 + this.transf.length * 2;
                    if (this.flags & WE_HAVE_INSTRUCTIONS) {
                      size += 2 + this.instructions.length;
                    }
                    size += 2;
                    if (this.flags & 2) {
                      if (!(this.argument1 >= -128 && this.argument1 <= 127 && this.argument2 >= -128 && this.argument2 <= 127)) {
                        size += 2;
                      }
                    } else {
                      if (!(this.argument1 >= 0 && this.argument1 <= 255 && this.argument2 >= 0 && this.argument2 <= 255)) {
                        size += 2;
                      }
                    }
                    return size;
                  }
                }, {
                  key: "write",
                  value: function write(pos, buf) {
                    var spos = pos;
                    if (this.flags & ARGS_ARE_XY_VALUES) {
                      if (!(this.argument1 >= -128 && this.argument1 <= 127 && this.argument2 >= -128 && this.argument2 <= 127)) {
                        this.flags |= ARG_1_AND_2_ARE_WORDS;
                      }
                    } else {
                      if (!(this.argument1 >= 0 && this.argument1 <= 255 && this.argument2 >= 0 && this.argument2 <= 255)) {
                        this.flags |= ARG_1_AND_2_ARE_WORDS;
                      }
                    }
                    buf.setUint16(pos, this.flags);
                    buf.setUint16(pos + 2, this.glyphIndex);
                    pos += 4;
                    if (this.flags & ARG_1_AND_2_ARE_WORDS) {
                      if (this.flags & ARGS_ARE_XY_VALUES) {
                        buf.setInt16(pos, this.argument1);
                        buf.setInt16(pos + 2, this.argument2);
                      } else {
                        buf.setUint16(pos, this.argument1);
                        buf.setUint16(pos + 2, this.argument2);
                      }
                      pos += 4;
                    } else {
                      buf.setUint8(pos, this.argument1);
                      buf.setUint8(pos + 1, this.argument2);
                      pos += 2;
                    }
                    if (this.flags & WE_HAVE_INSTRUCTIONS) {
                      buf.setUint16(pos, this.instructions.length);
                      pos += 2;
                      if (this.instructions.length) {
                        new Uint8Array(buf.buffer, 0, buf.buffer.byteLength).set(this.instructions, pos);
                        pos += this.instructions.length;
                      }
                    }
                    return pos - spos;
                  }
                }, {
                  key: "scale",
                  value: function scale(x, factor) {
                  }
                }], [{
                  key: "parse",
                  value: function parse(pos, glyf) {
                    var spos = pos;
                    var transf = [];
                    var flags = glyf.getUint16(pos);
                    var glyphIndex = glyf.getUint16(pos + 2);
                    pos += 4;
                    var argument1, argument2;
                    if (flags & ARG_1_AND_2_ARE_WORDS) {
                      if (flags & ARGS_ARE_XY_VALUES) {
                        argument1 = glyf.getInt16(pos);
                        argument2 = glyf.getInt16(pos + 2);
                      } else {
                        argument1 = glyf.getUint16(pos);
                        argument2 = glyf.getUint16(pos + 2);
                      }
                      pos += 4;
                      flags ^= ARG_1_AND_2_ARE_WORDS;
                    } else {
                      argument1 = glyf.getUint8(pos);
                      argument2 = glyf.getUint8(pos + 1);
                      if (flags & ARGS_ARE_XY_VALUES) {
                        var abs1 = argument1 & 127;
                        argument1 = argument1 & 128 ? -abs1 : abs1;
                        var abs2 = argument2 & 127;
                        argument2 = argument2 & 128 ? -abs2 : abs2;
                      }
                      pos += 2;
                    }
                    if (flags & WE_HAVE_A_SCALE) {
                      transf.push(glyf.getUint16(pos));
                      pos += 2;
                    } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
                      transf.push(glyf.getUint16(pos), glyf.getUint16(pos + 2));
                      pos += 4;
                    } else if (flags & WE_HAVE_A_TWO_BY_TWO) {
                      transf.push(glyf.getUint16(pos), glyf.getUint16(pos + 2), glyf.getUint16(pos + 4), glyf.getUint16(pos + 6));
                      pos += 8;
                    }
                    var instructions = null;
                    if (flags & WE_HAVE_INSTRUCTIONS) {
                      var instructionLength = glyf.getUint16(pos);
                      pos += 2;
                      instructions = new Uint8Array(glyf).slice(pos, pos + instructionLength);
                      pos += instructionLength;
                    }
                    return [pos - spos, new CompositeGlyph2({
                      flags,
                      glyphIndex,
                      argument1,
                      argument2,
                      transf,
                      instructions
                    })];
                  }
                }]);
                return CompositeGlyph2;
              }();
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.OpenTypeFileBuilder = void 0;
              var _core_utils = __w_pdfjs_require__2(139);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function writeInt16(dest, offset, num) {
                dest[offset] = num >> 8 & 255;
                dest[offset + 1] = num & 255;
              }
              function writeInt32(dest, offset, num) {
                dest[offset] = num >> 24 & 255;
                dest[offset + 1] = num >> 16 & 255;
                dest[offset + 2] = num >> 8 & 255;
                dest[offset + 3] = num & 255;
              }
              function writeData(dest, offset, data) {
                if (data instanceof Uint8Array) {
                  dest.set(data, offset);
                } else if (typeof data === "string") {
                  for (var i = 0, ii = data.length; i < ii; i++) {
                    dest[offset++] = data.charCodeAt(i) & 255;
                  }
                } else {
                  for (var _i = 0, _ii = data.length; _i < _ii; _i++) {
                    dest[offset++] = data[_i] & 255;
                  }
                }
              }
              var OTF_HEADER_SIZE = 12;
              var OTF_TABLE_ENTRY_SIZE = 16;
              var OpenTypeFileBuilder = /* @__PURE__ */ function() {
                function OpenTypeFileBuilder2(sfnt) {
                  _classCallCheck(this, OpenTypeFileBuilder2);
                  this.sfnt = sfnt;
                  this.tables = /* @__PURE__ */ Object.create(null);
                }
                _createClass(OpenTypeFileBuilder2, [{
                  key: "toArray",
                  value: function toArray() {
                    var sfnt = this.sfnt;
                    var tables = this.tables;
                    var tablesNames = Object.keys(tables);
                    tablesNames.sort();
                    var numTables = tablesNames.length;
                    var i, j, jj, table, tableName;
                    var offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;
                    var tableOffsets = [offset];
                    for (i = 0; i < numTables; i++) {
                      table = tables[tablesNames[i]];
                      var paddedLength = (table.length + 3 & ~3) >>> 0;
                      offset += paddedLength;
                      tableOffsets.push(offset);
                    }
                    var file = new Uint8Array(offset);
                    for (i = 0; i < numTables; i++) {
                      table = tables[tablesNames[i]];
                      writeData(file, tableOffsets[i], table);
                    }
                    if (sfnt === "true") {
                      sfnt = (0, _util.string32)(65536);
                    }
                    file[0] = sfnt.charCodeAt(0) & 255;
                    file[1] = sfnt.charCodeAt(1) & 255;
                    file[2] = sfnt.charCodeAt(2) & 255;
                    file[3] = sfnt.charCodeAt(3) & 255;
                    writeInt16(file, 4, numTables);
                    var searchParams = OpenTypeFileBuilder2.getSearchParams(numTables, 16);
                    writeInt16(file, 6, searchParams.range);
                    writeInt16(file, 8, searchParams.entry);
                    writeInt16(file, 10, searchParams.rangeShift);
                    offset = OTF_HEADER_SIZE;
                    for (i = 0; i < numTables; i++) {
                      tableName = tablesNames[i];
                      file[offset] = tableName.charCodeAt(0) & 255;
                      file[offset + 1] = tableName.charCodeAt(1) & 255;
                      file[offset + 2] = tableName.charCodeAt(2) & 255;
                      file[offset + 3] = tableName.charCodeAt(3) & 255;
                      var checksum = 0;
                      for (j = tableOffsets[i], jj = tableOffsets[i + 1]; j < jj; j += 4) {
                        var quad = (0, _core_utils.readUint32)(file, j);
                        checksum = checksum + quad >>> 0;
                      }
                      writeInt32(file, offset + 4, checksum);
                      writeInt32(file, offset + 8, tableOffsets[i]);
                      writeInt32(file, offset + 12, tables[tableName].length);
                      offset += OTF_TABLE_ENTRY_SIZE;
                    }
                    return file;
                  }
                }, {
                  key: "addTable",
                  value: function addTable(tag, data) {
                    if (tag in this.tables) {
                      throw new Error("Table " + tag + " already exists");
                    }
                    this.tables[tag] = data;
                  }
                }], [{
                  key: "getSearchParams",
                  value: function getSearchParams(entriesCount, entrySize) {
                    var maxPower2 = 1, log2 = 0;
                    while ((maxPower2 ^ entriesCount) > maxPower2) {
                      maxPower2 <<= 1;
                      log2++;
                    }
                    var searchRange = maxPower2 * entrySize;
                    return {
                      range: searchRange,
                      entry: log2,
                      rangeShift: entrySize * entriesCount - searchRange
                    };
                  }
                }]);
                return OpenTypeFileBuilder2;
              }();
              exports2.OpenTypeFileBuilder = OpenTypeFileBuilder;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Type1Font = void 0;
              var _cff_parser = __w_pdfjs_require__2(175);
              var _fonts_utils = __w_pdfjs_require__2(148);
              var _core_utils = __w_pdfjs_require__2(139);
              var _stream = __w_pdfjs_require__2(140);
              var _type1_parser = __w_pdfjs_require__2(184);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function findBlock(streamBytes, signature, startIndex) {
                var streamBytesLength = streamBytes.length;
                var signatureLength = signature.length;
                var scanLength = streamBytesLength - signatureLength;
                var i = startIndex, found = false;
                while (i < scanLength) {
                  var j = 0;
                  while (j < signatureLength && streamBytes[i + j] === signature[j]) {
                    j++;
                  }
                  if (j >= signatureLength) {
                    i += j;
                    while (i < streamBytesLength && (0, _core_utils.isWhiteSpace)(streamBytes[i])) {
                      i++;
                    }
                    found = true;
                    break;
                  }
                  i++;
                }
                return {
                  found,
                  length: i
                };
              }
              function getHeaderBlock(stream, suggestedLength) {
                var EEXEC_SIGNATURE = [101, 101, 120, 101, 99];
                var streamStartPos = stream.pos;
                var headerBytes, headerBytesLength, block;
                try {
                  headerBytes = stream.getBytes(suggestedLength);
                  headerBytesLength = headerBytes.length;
                } catch (ex) {
                }
                if (headerBytesLength === suggestedLength) {
                  block = findBlock(headerBytes, EEXEC_SIGNATURE, suggestedLength - 2 * EEXEC_SIGNATURE.length);
                  if (block.found && block.length === suggestedLength) {
                    return {
                      stream: new _stream.Stream(headerBytes),
                      length: suggestedLength
                    };
                  }
                }
                (0, _util.warn)('Invalid "Length1" property in Type1 font -- trying to recover.');
                stream.pos = streamStartPos;
                var SCAN_BLOCK_LENGTH = 2048;
                var actualLength;
                while (true) {
                  var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);
                  block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);
                  if (block.length === 0) {
                    break;
                  }
                  stream.pos += block.length;
                  if (block.found) {
                    actualLength = stream.pos - streamStartPos;
                    break;
                  }
                }
                stream.pos = streamStartPos;
                if (actualLength) {
                  return {
                    stream: new _stream.Stream(stream.getBytes(actualLength)),
                    length: actualLength
                  };
                }
                (0, _util.warn)('Unable to recover "Length1" property in Type1 font -- using as is.');
                return {
                  stream: new _stream.Stream(stream.getBytes(suggestedLength)),
                  length: suggestedLength
                };
              }
              function getEexecBlock(stream, suggestedLength) {
                var eexecBytes = stream.getBytes();
                return {
                  stream: new _stream.Stream(eexecBytes),
                  length: eexecBytes.length
                };
              }
              var Type1Font = /* @__PURE__ */ function() {
                function Type1Font2(name, file, properties) {
                  _classCallCheck(this, Type1Font2);
                  var PFB_HEADER_SIZE = 6;
                  var headerBlockLength = properties.length1;
                  var eexecBlockLength = properties.length2;
                  var pfbHeader = file.peekBytes(PFB_HEADER_SIZE);
                  var pfbHeaderPresent = pfbHeader[0] === 128 && pfbHeader[1] === 1;
                  if (pfbHeaderPresent) {
                    file.skip(PFB_HEADER_SIZE);
                    headerBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];
                  }
                  var headerBlock = getHeaderBlock(file, headerBlockLength);
                  var headerBlockParser = new _type1_parser.Type1Parser(headerBlock.stream, false, _fonts_utils.SEAC_ANALYSIS_ENABLED);
                  headerBlockParser.extractFontHeader(properties);
                  if (pfbHeaderPresent) {
                    pfbHeader = file.getBytes(PFB_HEADER_SIZE);
                    eexecBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];
                  }
                  var eexecBlock = getEexecBlock(file, eexecBlockLength);
                  var eexecBlockParser = new _type1_parser.Type1Parser(eexecBlock.stream, true, _fonts_utils.SEAC_ANALYSIS_ENABLED);
                  var data = eexecBlockParser.extractFontProgram(properties);
                  for (var key in data.properties) {
                    properties[key] = data.properties[key];
                  }
                  var charstrings = data.charstrings;
                  var type2Charstrings = this.getType2Charstrings(charstrings);
                  var subrs = this.getType2Subrs(data.subrs);
                  this.charstrings = charstrings;
                  this.data = this.wrap(name, type2Charstrings, this.charstrings, subrs, properties);
                  this.seacs = this.getSeacs(data.charstrings);
                }
                _createClass(Type1Font2, [{
                  key: "numGlyphs",
                  get: function get() {
                    return this.charstrings.length + 1;
                  }
                }, {
                  key: "getCharset",
                  value: function getCharset() {
                    var charset = [".notdef"];
                    var charstrings = this.charstrings;
                    for (var glyphId = 0; glyphId < charstrings.length; glyphId++) {
                      charset.push(charstrings[glyphId].glyphName);
                    }
                    return charset;
                  }
                }, {
                  key: "getGlyphMapping",
                  value: function getGlyphMapping(properties) {
                    var charstrings = this.charstrings;
                    if (properties.composite) {
                      var charCodeToGlyphId = /* @__PURE__ */ Object.create(null);
                      for (var _glyphId = 0, charstringsLen = charstrings.length; _glyphId < charstringsLen; _glyphId++) {
                        var charCode = properties.cMap.charCodeOf(_glyphId);
                        charCodeToGlyphId[charCode] = _glyphId + 1;
                      }
                      return charCodeToGlyphId;
                    }
                    var glyphNames = [".notdef"];
                    var builtInEncoding, glyphId;
                    for (glyphId = 0; glyphId < charstrings.length; glyphId++) {
                      glyphNames.push(charstrings[glyphId].glyphName);
                    }
                    var encoding = properties.builtInEncoding;
                    if (encoding) {
                      builtInEncoding = /* @__PURE__ */ Object.create(null);
                      for (var _charCode in encoding) {
                        glyphId = glyphNames.indexOf(encoding[_charCode]);
                        if (glyphId >= 0) {
                          builtInEncoding[_charCode] = glyphId;
                        }
                      }
                    }
                    return (0, _fonts_utils.type1FontGlyphMapping)(properties, builtInEncoding, glyphNames);
                  }
                }, {
                  key: "hasGlyphId",
                  value: function hasGlyphId(id) {
                    if (id < 0 || id >= this.numGlyphs) {
                      return false;
                    }
                    if (id === 0) {
                      return true;
                    }
                    var glyph = this.charstrings[id - 1];
                    return glyph.charstring.length > 0;
                  }
                }, {
                  key: "getSeacs",
                  value: function getSeacs(charstrings) {
                    var seacMap = [];
                    for (var i = 0, ii = charstrings.length; i < ii; i++) {
                      var charstring = charstrings[i];
                      if (charstring.seac) {
                        seacMap[i + 1] = charstring.seac;
                      }
                    }
                    return seacMap;
                  }
                }, {
                  key: "getType2Charstrings",
                  value: function getType2Charstrings(type1Charstrings) {
                    var type2Charstrings = [];
                    for (var i = 0, ii = type1Charstrings.length; i < ii; i++) {
                      type2Charstrings.push(type1Charstrings[i].charstring);
                    }
                    return type2Charstrings;
                  }
                }, {
                  key: "getType2Subrs",
                  value: function getType2Subrs(type1Subrs) {
                    var bias = 0;
                    var count = type1Subrs.length;
                    if (count < 1133) {
                      bias = 107;
                    } else if (count < 33769) {
                      bias = 1131;
                    } else {
                      bias = 32768;
                    }
                    var type2Subrs = [];
                    var i;
                    for (i = 0; i < bias; i++) {
                      type2Subrs.push([11]);
                    }
                    for (i = 0; i < count; i++) {
                      type2Subrs.push(type1Subrs[i]);
                    }
                    return type2Subrs;
                  }
                }, {
                  key: "wrap",
                  value: function wrap(name, glyphs, charstrings, subrs, properties) {
                    var cff = new _cff_parser.CFF();
                    cff.header = new _cff_parser.CFFHeader(1, 0, 4, 4);
                    cff.names = [name];
                    var topDict = new _cff_parser.CFFTopDict();
                    topDict.setByName("version", 391);
                    topDict.setByName("Notice", 392);
                    topDict.setByName("FullName", 393);
                    topDict.setByName("FamilyName", 394);
                    topDict.setByName("Weight", 395);
                    topDict.setByName("Encoding", null);
                    topDict.setByName("FontMatrix", properties.fontMatrix);
                    topDict.setByName("FontBBox", properties.bbox);
                    topDict.setByName("charset", null);
                    topDict.setByName("CharStrings", null);
                    topDict.setByName("Private", null);
                    cff.topDict = topDict;
                    var strings = new _cff_parser.CFFStrings();
                    strings.add("Version 0.11");
                    strings.add("See original notice");
                    strings.add(name);
                    strings.add(name);
                    strings.add("Medium");
                    cff.strings = strings;
                    cff.globalSubrIndex = new _cff_parser.CFFIndex();
                    var count = glyphs.length;
                    var charsetArray = [".notdef"];
                    var i, ii;
                    for (i = 0; i < count; i++) {
                      var glyphName = charstrings[i].glyphName;
                      var index = _cff_parser.CFFStandardStrings.indexOf(glyphName);
                      if (index === -1) {
                        strings.add(glyphName);
                      }
                      charsetArray.push(glyphName);
                    }
                    cff.charset = new _cff_parser.CFFCharset(false, 0, charsetArray);
                    var charStringsIndex = new _cff_parser.CFFIndex();
                    charStringsIndex.add([139, 14]);
                    for (i = 0; i < count; i++) {
                      charStringsIndex.add(glyphs[i]);
                    }
                    cff.charStrings = charStringsIndex;
                    var privateDict = new _cff_parser.CFFPrivateDict();
                    privateDict.setByName("Subrs", null);
                    var fields = ["BlueValues", "OtherBlues", "FamilyBlues", "FamilyOtherBlues", "StemSnapH", "StemSnapV", "BlueShift", "BlueFuzz", "BlueScale", "LanguageGroup", "ExpansionFactor", "ForceBold", "StdHW", "StdVW"];
                    for (i = 0, ii = fields.length; i < ii; i++) {
                      var field = fields[i];
                      if (!(field in properties.privateData)) {
                        continue;
                      }
                      var value = properties.privateData[field];
                      if (Array.isArray(value)) {
                        for (var j = value.length - 1; j > 0; j--) {
                          value[j] -= value[j - 1];
                        }
                      }
                      privateDict.setByName(field, value);
                    }
                    cff.topDict.privateDict = privateDict;
                    var subrIndex = new _cff_parser.CFFIndex();
                    for (i = 0, ii = subrs.length; i < ii; i++) {
                      subrIndex.add(subrs[i]);
                    }
                    privateDict.subrsIndex = subrIndex;
                    var compiler = new _cff_parser.CFFCompiler(cff);
                    return compiler.compile();
                  }
                }]);
                return Type1Font2;
              }();
              exports2.Type1Font = Type1Font;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Type1Parser = void 0;
              var _encodings = __w_pdfjs_require__2(149);
              var _core_utils = __w_pdfjs_require__2(139);
              var _stream = __w_pdfjs_require__2(140);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var HINTING_ENABLED = false;
              var Type1CharString = function Type1CharStringClosure() {
                var COMMAND_MAP = {
                  hstem: [1],
                  vstem: [3],
                  vmoveto: [4],
                  rlineto: [5],
                  hlineto: [6],
                  vlineto: [7],
                  rrcurveto: [8],
                  callsubr: [10],
                  flex: [12, 35],
                  drop: [12, 18],
                  endchar: [14],
                  rmoveto: [21],
                  hmoveto: [22],
                  vhcurveto: [30],
                  hvcurveto: [31]
                };
                var Type1CharString2 = /* @__PURE__ */ function() {
                  function Type1CharString3() {
                    _classCallCheck(this, Type1CharString3);
                    this.width = 0;
                    this.lsb = 0;
                    this.flexing = false;
                    this.output = [];
                    this.stack = [];
                  }
                  _createClass(Type1CharString3, [{
                    key: "convert",
                    value: function convert(encoded, subrs, seacAnalysisEnabled) {
                      var count = encoded.length;
                      var error = false;
                      var wx, sbx, subrNumber;
                      for (var i = 0; i < count; i++) {
                        var value = encoded[i];
                        if (value < 32) {
                          if (value === 12) {
                            value = (value << 8) + encoded[++i];
                          }
                          switch (value) {
                            case 1:
                              if (!HINTING_ENABLED) {
                                this.stack = [];
                                break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.hstem);
                              break;
                            case 3:
                              if (!HINTING_ENABLED) {
                                this.stack = [];
                                break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.vstem);
                              break;
                            case 4:
                              if (this.flexing) {
                                if (this.stack.length < 1) {
                                  error = true;
                                  break;
                                }
                                var dy = this.stack.pop();
                                this.stack.push(0, dy);
                                break;
                              }
                              error = this.executeCommand(1, COMMAND_MAP.vmoveto);
                              break;
                            case 5:
                              error = this.executeCommand(2, COMMAND_MAP.rlineto);
                              break;
                            case 6:
                              error = this.executeCommand(1, COMMAND_MAP.hlineto);
                              break;
                            case 7:
                              error = this.executeCommand(1, COMMAND_MAP.vlineto);
                              break;
                            case 8:
                              error = this.executeCommand(6, COMMAND_MAP.rrcurveto);
                              break;
                            case 9:
                              this.stack = [];
                              break;
                            case 10:
                              if (this.stack.length < 1) {
                                error = true;
                                break;
                              }
                              subrNumber = this.stack.pop();
                              if (!subrs[subrNumber]) {
                                error = true;
                                break;
                              }
                              error = this.convert(subrs[subrNumber], subrs, seacAnalysisEnabled);
                              break;
                            case 11:
                              return error;
                            case 13:
                              if (this.stack.length < 2) {
                                error = true;
                                break;
                              }
                              wx = this.stack.pop();
                              sbx = this.stack.pop();
                              this.lsb = sbx;
                              this.width = wx;
                              this.stack.push(wx, sbx);
                              error = this.executeCommand(2, COMMAND_MAP.hmoveto);
                              break;
                            case 14:
                              this.output.push(COMMAND_MAP.endchar[0]);
                              break;
                            case 21:
                              if (this.flexing) {
                                break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.rmoveto);
                              break;
                            case 22:
                              if (this.flexing) {
                                this.stack.push(0);
                                break;
                              }
                              error = this.executeCommand(1, COMMAND_MAP.hmoveto);
                              break;
                            case 30:
                              error = this.executeCommand(4, COMMAND_MAP.vhcurveto);
                              break;
                            case 31:
                              error = this.executeCommand(4, COMMAND_MAP.hvcurveto);
                              break;
                            case (12 << 8) + 0:
                              this.stack = [];
                              break;
                            case (12 << 8) + 1:
                              if (!HINTING_ENABLED) {
                                this.stack = [];
                                break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.vstem);
                              break;
                            case (12 << 8) + 2:
                              if (!HINTING_ENABLED) {
                                this.stack = [];
                                break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.hstem);
                              break;
                            case (12 << 8) + 6:
                              if (seacAnalysisEnabled) {
                                var asb = this.stack[this.stack.length - 5];
                                this.seac = this.stack.splice(-4, 4);
                                this.seac[0] += this.lsb - asb;
                                error = this.executeCommand(0, COMMAND_MAP.endchar);
                              } else {
                                error = this.executeCommand(4, COMMAND_MAP.endchar);
                              }
                              break;
                            case (12 << 8) + 7:
                              if (this.stack.length < 4) {
                                error = true;
                                break;
                              }
                              this.stack.pop();
                              wx = this.stack.pop();
                              var sby = this.stack.pop();
                              sbx = this.stack.pop();
                              this.lsb = sbx;
                              this.width = wx;
                              this.stack.push(wx, sbx, sby);
                              error = this.executeCommand(3, COMMAND_MAP.rmoveto);
                              break;
                            case (12 << 8) + 12:
                              if (this.stack.length < 2) {
                                error = true;
                                break;
                              }
                              var num2 = this.stack.pop();
                              var num1 = this.stack.pop();
                              this.stack.push(num1 / num2);
                              break;
                            case (12 << 8) + 16:
                              if (this.stack.length < 2) {
                                error = true;
                                break;
                              }
                              subrNumber = this.stack.pop();
                              var numArgs = this.stack.pop();
                              if (subrNumber === 0 && numArgs === 3) {
                                var flexArgs = this.stack.splice(this.stack.length - 17, 17);
                                this.stack.push(flexArgs[2] + flexArgs[0], flexArgs[3] + flexArgs[1], flexArgs[4], flexArgs[5], flexArgs[6], flexArgs[7], flexArgs[8], flexArgs[9], flexArgs[10], flexArgs[11], flexArgs[12], flexArgs[13], flexArgs[14]);
                                error = this.executeCommand(13, COMMAND_MAP.flex, true);
                                this.flexing = false;
                                this.stack.push(flexArgs[15], flexArgs[16]);
                              } else if (subrNumber === 1 && numArgs === 0) {
                                this.flexing = true;
                              }
                              break;
                            case (12 << 8) + 17:
                              break;
                            case (12 << 8) + 33:
                              this.stack = [];
                              break;
                            default:
                              (0, _util.warn)('Unknown type 1 charstring command of "' + value + '"');
                              break;
                          }
                          if (error) {
                            break;
                          }
                          continue;
                        } else if (value <= 246) {
                          value -= 139;
                        } else if (value <= 250) {
                          value = (value - 247) * 256 + encoded[++i] + 108;
                        } else if (value <= 254) {
                          value = -((value - 251) * 256) - encoded[++i] - 108;
                        } else {
                          value = (encoded[++i] & 255) << 24 | (encoded[++i] & 255) << 16 | (encoded[++i] & 255) << 8 | (encoded[++i] & 255) << 0;
                        }
                        this.stack.push(value);
                      }
                      return error;
                    }
                  }, {
                    key: "executeCommand",
                    value: function executeCommand(howManyArgs, command, keepStack) {
                      var stackLength = this.stack.length;
                      if (howManyArgs > stackLength) {
                        return true;
                      }
                      var start = stackLength - howManyArgs;
                      for (var i = start; i < stackLength; i++) {
                        var value = this.stack[i];
                        if (Number.isInteger(value)) {
                          this.output.push(28, value >> 8 & 255, value & 255);
                        } else {
                          value = 65536 * value | 0;
                          this.output.push(255, value >> 24 & 255, value >> 16 & 255, value >> 8 & 255, value & 255);
                        }
                      }
                      this.output.push.apply(this.output, command);
                      if (keepStack) {
                        this.stack.splice(start, howManyArgs);
                      } else {
                        this.stack.length = 0;
                      }
                      return false;
                    }
                  }]);
                  return Type1CharString3;
                }();
                return Type1CharString2;
              }();
              var Type1Parser = function Type1ParserClosure() {
                var EEXEC_ENCRYPT_KEY = 55665;
                var CHAR_STRS_ENCRYPT_KEY = 4330;
                function isHexDigit(code) {
                  return code >= 48 && code <= 57 || code >= 65 && code <= 70 || code >= 97 && code <= 102;
                }
                function decrypt(data, key, discardNumber) {
                  if (discardNumber >= data.length) {
                    return new Uint8Array(0);
                  }
                  var c1 = 52845, c2 = 22719;
                  var r = key | 0, i, j;
                  for (i = 0; i < discardNumber; i++) {
                    r = (data[i] + r) * c1 + c2 & (1 << 16) - 1;
                  }
                  var count = data.length - discardNumber;
                  var decrypted = new Uint8Array(count);
                  for (i = discardNumber, j = 0; j < count; i++, j++) {
                    var value = data[i];
                    decrypted[j] = value ^ r >> 8;
                    r = (value + r) * c1 + c2 & (1 << 16) - 1;
                  }
                  return decrypted;
                }
                function decryptAscii(data, key, discardNumber) {
                  var c1 = 52845, c2 = 22719;
                  var r = key | 0;
                  var count = data.length, maybeLength = count >>> 1;
                  var decrypted = new Uint8Array(maybeLength);
                  var i, j;
                  for (i = 0, j = 0; i < count; i++) {
                    var digit1 = data[i];
                    if (!isHexDigit(digit1)) {
                      continue;
                    }
                    i++;
                    var digit2 = void 0;
                    while (i < count && !isHexDigit(digit2 = data[i])) {
                      i++;
                    }
                    if (i < count) {
                      var value = parseInt(String.fromCharCode(digit1, digit2), 16);
                      decrypted[j++] = value ^ r >> 8;
                      r = (value + r) * c1 + c2 & (1 << 16) - 1;
                    }
                  }
                  return decrypted.slice(discardNumber, j);
                }
                function isSpecial(c) {
                  return c === 47 || c === 91 || c === 93 || c === 123 || c === 125 || c === 40 || c === 41;
                }
                var Type1Parser2 = /* @__PURE__ */ function() {
                  function Type1Parser3(stream, encrypted, seacAnalysisEnabled) {
                    _classCallCheck(this, Type1Parser3);
                    if (encrypted) {
                      var data = stream.getBytes();
                      var isBinary = !((isHexDigit(data[0]) || (0, _core_utils.isWhiteSpace)(data[0])) && isHexDigit(data[1]) && isHexDigit(data[2]) && isHexDigit(data[3]) && isHexDigit(data[4]) && isHexDigit(data[5]) && isHexDigit(data[6]) && isHexDigit(data[7]));
                      stream = new _stream.Stream(isBinary ? decrypt(data, EEXEC_ENCRYPT_KEY, 4) : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4));
                    }
                    this.seacAnalysisEnabled = !!seacAnalysisEnabled;
                    this.stream = stream;
                    this.nextChar();
                  }
                  _createClass(Type1Parser3, [{
                    key: "readNumberArray",
                    value: function readNumberArray() {
                      this.getToken();
                      var array = [];
                      while (true) {
                        var token = this.getToken();
                        if (token === null || token === "]" || token === "}") {
                          break;
                        }
                        array.push(parseFloat(token || 0));
                      }
                      return array;
                    }
                  }, {
                    key: "readNumber",
                    value: function readNumber() {
                      var token = this.getToken();
                      return parseFloat(token || 0);
                    }
                  }, {
                    key: "readInt",
                    value: function readInt() {
                      var token = this.getToken();
                      return parseInt(token || 0, 10) | 0;
                    }
                  }, {
                    key: "readBoolean",
                    value: function readBoolean() {
                      var token = this.getToken();
                      return token === "true" ? 1 : 0;
                    }
                  }, {
                    key: "nextChar",
                    value: function nextChar() {
                      return this.currentChar = this.stream.getByte();
                    }
                  }, {
                    key: "getToken",
                    value: function getToken() {
                      var comment = false;
                      var ch = this.currentChar;
                      while (true) {
                        if (ch === -1) {
                          return null;
                        }
                        if (comment) {
                          if (ch === 10 || ch === 13) {
                            comment = false;
                          }
                        } else if (ch === 37) {
                          comment = true;
                        } else if (!(0, _core_utils.isWhiteSpace)(ch)) {
                          break;
                        }
                        ch = this.nextChar();
                      }
                      if (isSpecial(ch)) {
                        this.nextChar();
                        return String.fromCharCode(ch);
                      }
                      var token = "";
                      do {
                        token += String.fromCharCode(ch);
                        ch = this.nextChar();
                      } while (ch >= 0 && !(0, _core_utils.isWhiteSpace)(ch) && !isSpecial(ch));
                      return token;
                    }
                  }, {
                    key: "readCharStrings",
                    value: function readCharStrings(bytes, lenIV) {
                      if (lenIV === -1) {
                        return bytes;
                      }
                      return decrypt(bytes, CHAR_STRS_ENCRYPT_KEY, lenIV);
                    }
                  }, {
                    key: "extractFontProgram",
                    value: function extractFontProgram(properties) {
                      var stream = this.stream;
                      var subrs = [], charstrings = [];
                      var privateData = /* @__PURE__ */ Object.create(null);
                      privateData.lenIV = 4;
                      var program = {
                        subrs: [],
                        charstrings: [],
                        properties: {
                          privateData
                        }
                      };
                      var token, length, data, lenIV, encoded;
                      while ((token = this.getToken()) !== null) {
                        if (token !== "/") {
                          continue;
                        }
                        token = this.getToken();
                        switch (token) {
                          case "CharStrings":
                            this.getToken();
                            this.getToken();
                            this.getToken();
                            this.getToken();
                            while (true) {
                              token = this.getToken();
                              if (token === null || token === "end") {
                                break;
                              }
                              if (token !== "/") {
                                continue;
                              }
                              var glyph = this.getToken();
                              length = this.readInt();
                              this.getToken();
                              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);
                              lenIV = program.properties.privateData.lenIV;
                              encoded = this.readCharStrings(data, lenIV);
                              this.nextChar();
                              token = this.getToken();
                              if (token === "noaccess") {
                                this.getToken();
                              }
                              charstrings.push({
                                glyph,
                                encoded
                              });
                            }
                            break;
                          case "Subrs":
                            this.readInt();
                            this.getToken();
                            while (this.getToken() === "dup") {
                              var index = this.readInt();
                              length = this.readInt();
                              this.getToken();
                              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);
                              lenIV = program.properties.privateData.lenIV;
                              encoded = this.readCharStrings(data, lenIV);
                              this.nextChar();
                              token = this.getToken();
                              if (token === "noaccess") {
                                this.getToken();
                              }
                              subrs[index] = encoded;
                            }
                            break;
                          case "BlueValues":
                          case "OtherBlues":
                          case "FamilyBlues":
                          case "FamilyOtherBlues":
                            var blueArray = this.readNumberArray();
                            if (blueArray.length > 0 && blueArray.length % 2 === 0 && HINTING_ENABLED) {
                              program.properties.privateData[token] = blueArray;
                            }
                            break;
                          case "StemSnapH":
                          case "StemSnapV":
                            program.properties.privateData[token] = this.readNumberArray();
                            break;
                          case "StdHW":
                          case "StdVW":
                            program.properties.privateData[token] = this.readNumberArray()[0];
                            break;
                          case "BlueShift":
                          case "lenIV":
                          case "BlueFuzz":
                          case "BlueScale":
                          case "LanguageGroup":
                          case "ExpansionFactor":
                            program.properties.privateData[token] = this.readNumber();
                            break;
                          case "ForceBold":
                            program.properties.privateData[token] = this.readBoolean();
                            break;
                        }
                      }
                      for (var i = 0; i < charstrings.length; i++) {
                        var _glyph = charstrings[i].glyph;
                        encoded = charstrings[i].encoded;
                        var charString = new Type1CharString();
                        var error = charString.convert(encoded, subrs, this.seacAnalysisEnabled);
                        var output = charString.output;
                        if (error) {
                          output = [14];
                        }
                        var charStringObject = {
                          glyphName: _glyph,
                          charstring: output,
                          width: charString.width,
                          lsb: charString.lsb,
                          seac: charString.seac
                        };
                        if (_glyph === ".notdef") {
                          program.charstrings.unshift(charStringObject);
                        } else {
                          program.charstrings.push(charStringObject);
                        }
                        if (properties.builtInEncoding) {
                          var _index = properties.builtInEncoding.indexOf(_glyph);
                          if (_index > -1 && properties.widths[_index] === void 0 && _index >= properties.firstChar && _index <= properties.lastChar) {
                            properties.widths[_index] = charString.width;
                          }
                        }
                      }
                      return program;
                    }
                  }, {
                    key: "extractFontHeader",
                    value: function extractFontHeader(properties) {
                      var token;
                      while ((token = this.getToken()) !== null) {
                        if (token !== "/") {
                          continue;
                        }
                        token = this.getToken();
                        switch (token) {
                          case "FontMatrix":
                            var matrix = this.readNumberArray();
                            properties.fontMatrix = matrix;
                            break;
                          case "Encoding":
                            var encodingArg = this.getToken();
                            var encoding = void 0;
                            if (!/^\d+$/.test(encodingArg)) {
                              encoding = (0, _encodings.getEncoding)(encodingArg);
                            } else {
                              encoding = [];
                              var size = parseInt(encodingArg, 10) | 0;
                              this.getToken();
                              for (var j = 0; j < size; j++) {
                                token = this.getToken();
                                while (token !== "dup" && token !== "def") {
                                  token = this.getToken();
                                  if (token === null) {
                                    return;
                                  }
                                }
                                if (token === "def") {
                                  break;
                                }
                                var index = this.readInt();
                                this.getToken();
                                var glyph = this.getToken();
                                encoding[index] = glyph;
                                this.getToken();
                              }
                            }
                            properties.builtInEncoding = encoding;
                            break;
                          case "FontBBox":
                            var fontBBox = this.readNumberArray();
                            properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
                            properties.descent = Math.min(fontBBox[1], fontBBox[3]);
                            properties.ascentScaled = true;
                            break;
                        }
                      }
                    }
                  }]);
                  return Type1Parser3;
                }();
                return Type1Parser2;
              }();
              exports2.Type1Parser = Type1Parser;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Pattern = void 0;
              exports2.getTilingPatternIR = getTilingPatternIR;
              var _util = __w_pdfjs_require__2(4);
              var _colorspace = __w_pdfjs_require__2(154);
              var _primitives = __w_pdfjs_require__2(135);
              var _core_utils = __w_pdfjs_require__2(139);
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var ShadingType = {
                FUNCTION_BASED: 1,
                AXIAL: 2,
                RADIAL: 3,
                FREE_FORM_MESH: 4,
                LATTICE_FORM_MESH: 5,
                COONS_PATCH_MESH: 6,
                TENSOR_PATCH_MESH: 7
              };
              var Pattern = /* @__PURE__ */ function() {
                function Pattern2() {
                  _classCallCheck(this, Pattern2);
                  (0, _util.unreachable)("Cannot initialize Pattern.");
                }
                _createClass(Pattern2, null, [{
                  key: "parseShading",
                  value: function parseShading(shading, xref, res, handler, pdfFunctionFactory, localColorSpaceCache) {
                    var dict = (0, _primitives.isStream)(shading) ? shading.dict : shading;
                    var type = dict.get("ShadingType");
                    try {
                      switch (type) {
                        case ShadingType.AXIAL:
                        case ShadingType.RADIAL:
                          return new RadialAxialShading(dict, xref, res, pdfFunctionFactory, localColorSpaceCache);
                        case ShadingType.FREE_FORM_MESH:
                        case ShadingType.LATTICE_FORM_MESH:
                        case ShadingType.COONS_PATCH_MESH:
                        case ShadingType.TENSOR_PATCH_MESH:
                          return new MeshShading(shading, xref, res, pdfFunctionFactory, localColorSpaceCache);
                        default:
                          throw new _util.FormatError("Unsupported ShadingType: " + type);
                      }
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      handler.send("UnsupportedFeature", {
                        featureId: _util.UNSUPPORTED_FEATURES.shadingPattern
                      });
                      (0, _util.warn)(ex);
                      return new DummyShading();
                    }
                  }
                }]);
                return Pattern2;
              }();
              exports2.Pattern = Pattern;
              var BaseShading = /* @__PURE__ */ function() {
                function BaseShading2() {
                  _classCallCheck(this, BaseShading2);
                  if (this.constructor === BaseShading2) {
                    (0, _util.unreachable)("Cannot initialize BaseShading.");
                  }
                }
                _createClass(BaseShading2, [{
                  key: "getIR",
                  value: function getIR() {
                    (0, _util.unreachable)("Abstract method `getIR` called.");
                  }
                }], [{
                  key: "SMALL_NUMBER",
                  get: function get() {
                    return (0, _util.shadow)(this, "SMALL_NUMBER", 1e-6);
                  }
                }]);
                return BaseShading2;
              }();
              var RadialAxialShading = /* @__PURE__ */ function(_BaseShading) {
                _inherits(RadialAxialShading2, _BaseShading);
                var _super = _createSuper(RadialAxialShading2);
                function RadialAxialShading2(dict, xref, resources, pdfFunctionFactory, localColorSpaceCache) {
                  var _this;
                  _classCallCheck(this, RadialAxialShading2);
                  _this = _super.call(this);
                  _this.coordsArr = dict.getArray("Coords");
                  _this.shadingType = dict.get("ShadingType");
                  var cs = _colorspace.ColorSpace.parse({
                    cs: dict.getRaw("CS") || dict.getRaw("ColorSpace"),
                    xref,
                    resources,
                    pdfFunctionFactory,
                    localColorSpaceCache
                  });
                  var bbox = dict.getArray("BBox");
                  if (Array.isArray(bbox) && bbox.length === 4) {
                    _this.bbox = _util.Util.normalizeRect(bbox);
                  } else {
                    _this.bbox = null;
                  }
                  var t0 = 0, t1 = 1;
                  if (dict.has("Domain")) {
                    var domainArr = dict.getArray("Domain");
                    t0 = domainArr[0];
                    t1 = domainArr[1];
                  }
                  var extendStart = false, extendEnd = false;
                  if (dict.has("Extend")) {
                    var extendArr = dict.getArray("Extend");
                    extendStart = extendArr[0];
                    extendEnd = extendArr[1];
                  }
                  if (_this.shadingType === ShadingType.RADIAL && (!extendStart || !extendEnd)) {
                    var _this$coordsArr = _slicedToArray(_this.coordsArr, 6), x1 = _this$coordsArr[0], y1 = _this$coordsArr[1], r1 = _this$coordsArr[2], x2 = _this$coordsArr[3], y2 = _this$coordsArr[4], r2 = _this$coordsArr[5];
                    var distance = Math.hypot(x1 - x2, y1 - y2);
                    if (r1 <= r2 + distance && r2 <= r1 + distance) {
                      (0, _util.warn)("Unsupported radial gradient.");
                    }
                  }
                  _this.extendStart = extendStart;
                  _this.extendEnd = extendEnd;
                  var fnObj = dict.getRaw("Function");
                  var fn = pdfFunctionFactory.createFromArray(fnObj);
                  var NUMBER_OF_SAMPLES = 10;
                  var step = (t1 - t0) / NUMBER_OF_SAMPLES;
                  var colorStops = _this.colorStops = [];
                  if (t0 >= t1 || step <= 0) {
                    (0, _util.info)("Bad shading domain.");
                    return _possibleConstructorReturn(_this);
                  }
                  var color = new Float32Array(cs.numComps), ratio = new Float32Array(1);
                  var rgbColor;
                  for (var i = 0; i <= NUMBER_OF_SAMPLES; i++) {
                    ratio[0] = t0 + i * step;
                    fn(ratio, 0, color, 0);
                    rgbColor = cs.getRgb(color, 0);
                    var cssColor = _util.Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);
                    colorStops.push([i / NUMBER_OF_SAMPLES, cssColor]);
                  }
                  var background = "transparent";
                  if (dict.has("Background")) {
                    rgbColor = cs.getRgb(dict.get("Background"), 0);
                    background = _util.Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);
                  }
                  if (!extendStart) {
                    colorStops.unshift([0, background]);
                    colorStops[1][0] += BaseShading.SMALL_NUMBER;
                  }
                  if (!extendEnd) {
                    colorStops[colorStops.length - 1][0] -= BaseShading.SMALL_NUMBER;
                    colorStops.push([1, background]);
                  }
                  _this.colorStops = colorStops;
                  return _this;
                }
                _createClass(RadialAxialShading2, [{
                  key: "getIR",
                  value: function getIR() {
                    var coordsArr = this.coordsArr;
                    var shadingType = this.shadingType;
                    var type, p0, p1, r0, r1;
                    if (shadingType === ShadingType.AXIAL) {
                      p0 = [coordsArr[0], coordsArr[1]];
                      p1 = [coordsArr[2], coordsArr[3]];
                      r0 = null;
                      r1 = null;
                      type = "axial";
                    } else if (shadingType === ShadingType.RADIAL) {
                      p0 = [coordsArr[0], coordsArr[1]];
                      p1 = [coordsArr[3], coordsArr[4]];
                      r0 = coordsArr[2];
                      r1 = coordsArr[5];
                      type = "radial";
                    } else {
                      (0, _util.unreachable)("getPattern type unknown: ".concat(shadingType));
                    }
                    return ["RadialAxial", type, this.bbox, this.colorStops, p0, p1, r0, r1];
                  }
                }]);
                return RadialAxialShading2;
              }(BaseShading);
              var MeshStreamReader = /* @__PURE__ */ function() {
                function MeshStreamReader2(stream, context) {
                  _classCallCheck(this, MeshStreamReader2);
                  this.stream = stream;
                  this.context = context;
                  this.buffer = 0;
                  this.bufferLength = 0;
                  var numComps = context.numComps;
                  this.tmpCompsBuf = new Float32Array(numComps);
                  var csNumComps = context.colorSpace.numComps;
                  this.tmpCsCompsBuf = context.colorFn ? new Float32Array(csNumComps) : this.tmpCompsBuf;
                }
                _createClass(MeshStreamReader2, [{
                  key: "hasData",
                  get: function get() {
                    if (this.stream.end) {
                      return this.stream.pos < this.stream.end;
                    }
                    if (this.bufferLength > 0) {
                      return true;
                    }
                    var nextByte = this.stream.getByte();
                    if (nextByte < 0) {
                      return false;
                    }
                    this.buffer = nextByte;
                    this.bufferLength = 8;
                    return true;
                  }
                }, {
                  key: "readBits",
                  value: function readBits(n) {
                    var buffer = this.buffer;
                    var bufferLength = this.bufferLength;
                    if (n === 32) {
                      if (bufferLength === 0) {
                        return (this.stream.getByte() << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte()) >>> 0;
                      }
                      buffer = buffer << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte();
                      var nextByte = this.stream.getByte();
                      this.buffer = nextByte & (1 << bufferLength) - 1;
                      return (buffer << 8 - bufferLength | (nextByte & 255) >> bufferLength) >>> 0;
                    }
                    if (n === 8 && bufferLength === 0) {
                      return this.stream.getByte();
                    }
                    while (bufferLength < n) {
                      buffer = buffer << 8 | this.stream.getByte();
                      bufferLength += 8;
                    }
                    bufferLength -= n;
                    this.bufferLength = bufferLength;
                    this.buffer = buffer & (1 << bufferLength) - 1;
                    return buffer >> bufferLength;
                  }
                }, {
                  key: "align",
                  value: function align() {
                    this.buffer = 0;
                    this.bufferLength = 0;
                  }
                }, {
                  key: "readFlag",
                  value: function readFlag() {
                    return this.readBits(this.context.bitsPerFlag);
                  }
                }, {
                  key: "readCoordinate",
                  value: function readCoordinate() {
                    var bitsPerCoordinate = this.context.bitsPerCoordinate;
                    var xi = this.readBits(bitsPerCoordinate);
                    var yi = this.readBits(bitsPerCoordinate);
                    var decode = this.context.decode;
                    var scale = bitsPerCoordinate < 32 ? 1 / ((1 << bitsPerCoordinate) - 1) : 23283064365386963e-26;
                    return [xi * scale * (decode[1] - decode[0]) + decode[0], yi * scale * (decode[3] - decode[2]) + decode[2]];
                  }
                }, {
                  key: "readComponents",
                  value: function readComponents() {
                    var numComps = this.context.numComps;
                    var bitsPerComponent = this.context.bitsPerComponent;
                    var scale = bitsPerComponent < 32 ? 1 / ((1 << bitsPerComponent) - 1) : 23283064365386963e-26;
                    var decode = this.context.decode;
                    var components = this.tmpCompsBuf;
                    for (var i = 0, j = 4; i < numComps; i++, j += 2) {
                      var ci = this.readBits(bitsPerComponent);
                      components[i] = ci * scale * (decode[j + 1] - decode[j]) + decode[j];
                    }
                    var color = this.tmpCsCompsBuf;
                    if (this.context.colorFn) {
                      this.context.colorFn(components, 0, color, 0);
                    }
                    return this.context.colorSpace.getRgb(color, 0);
                  }
                }]);
                return MeshStreamReader2;
              }();
              var getB = function getBClosure() {
                function buildB(count) {
                  var lut = [];
                  for (var i = 0; i <= count; i++) {
                    var t = i / count, t_ = 1 - t;
                    lut.push(new Float32Array([t_ * t_ * t_, 3 * t * t_ * t_, 3 * t * t * t_, t * t * t]));
                  }
                  return lut;
                }
                var cache = [];
                return function(count) {
                  if (!cache[count]) {
                    cache[count] = buildB(count);
                  }
                  return cache[count];
                };
              }();
              var MeshShading = /* @__PURE__ */ function(_BaseShading2) {
                _inherits(MeshShading2, _BaseShading2);
                var _super2 = _createSuper(MeshShading2);
                function MeshShading2(stream, xref, resources, pdfFunctionFactory, localColorSpaceCache) {
                  var _this2;
                  _classCallCheck(this, MeshShading2);
                  _this2 = _super2.call(this);
                  if (!(0, _primitives.isStream)(stream)) {
                    throw new _util.FormatError("Mesh data is not a stream");
                  }
                  var dict = stream.dict;
                  _this2.shadingType = dict.get("ShadingType");
                  var bbox = dict.getArray("BBox");
                  if (Array.isArray(bbox) && bbox.length === 4) {
                    _this2.bbox = _util.Util.normalizeRect(bbox);
                  } else {
                    _this2.bbox = null;
                  }
                  var cs = _colorspace.ColorSpace.parse({
                    cs: dict.getRaw("CS") || dict.getRaw("ColorSpace"),
                    xref,
                    resources,
                    pdfFunctionFactory,
                    localColorSpaceCache
                  });
                  _this2.background = dict.has("Background") ? cs.getRgb(dict.get("Background"), 0) : null;
                  var fnObj = dict.getRaw("Function");
                  var fn = fnObj ? pdfFunctionFactory.createFromArray(fnObj) : null;
                  _this2.coords = [];
                  _this2.colors = [];
                  _this2.figures = [];
                  var decodeContext = {
                    bitsPerCoordinate: dict.get("BitsPerCoordinate"),
                    bitsPerComponent: dict.get("BitsPerComponent"),
                    bitsPerFlag: dict.get("BitsPerFlag"),
                    decode: dict.getArray("Decode"),
                    colorFn: fn,
                    colorSpace: cs,
                    numComps: fn ? 1 : cs.numComps
                  };
                  var reader = new MeshStreamReader(stream, decodeContext);
                  var patchMesh = false;
                  switch (_this2.shadingType) {
                    case ShadingType.FREE_FORM_MESH:
                      _this2._decodeType4Shading(reader);
                      break;
                    case ShadingType.LATTICE_FORM_MESH:
                      var verticesPerRow = dict.get("VerticesPerRow") | 0;
                      if (verticesPerRow < 2) {
                        throw new _util.FormatError("Invalid VerticesPerRow");
                      }
                      _this2._decodeType5Shading(reader, verticesPerRow);
                      break;
                    case ShadingType.COONS_PATCH_MESH:
                      _this2._decodeType6Shading(reader);
                      patchMesh = true;
                      break;
                    case ShadingType.TENSOR_PATCH_MESH:
                      _this2._decodeType7Shading(reader);
                      patchMesh = true;
                      break;
                    default:
                      (0, _util.unreachable)("Unsupported mesh type.");
                      break;
                  }
                  if (patchMesh) {
                    _this2._updateBounds();
                    for (var i = 0, ii = _this2.figures.length; i < ii; i++) {
                      _this2._buildFigureFromPatch(i);
                    }
                  }
                  _this2._updateBounds();
                  _this2._packData();
                  return _this2;
                }
                _createClass(MeshShading2, [{
                  key: "_decodeType4Shading",
                  value: function _decodeType4Shading(reader) {
                    var coords = this.coords;
                    var colors = this.colors;
                    var operators = [];
                    var ps = [];
                    var verticesLeft = 0;
                    while (reader.hasData) {
                      var f = reader.readFlag();
                      var coord = reader.readCoordinate();
                      var color = reader.readComponents();
                      if (verticesLeft === 0) {
                        if (!(0 <= f && f <= 2)) {
                          throw new _util.FormatError("Unknown type4 flag");
                        }
                        switch (f) {
                          case 0:
                            verticesLeft = 3;
                            break;
                          case 1:
                            ps.push(ps[ps.length - 2], ps[ps.length - 1]);
                            verticesLeft = 1;
                            break;
                          case 2:
                            ps.push(ps[ps.length - 3], ps[ps.length - 1]);
                            verticesLeft = 1;
                            break;
                        }
                        operators.push(f);
                      }
                      ps.push(coords.length);
                      coords.push(coord);
                      colors.push(color);
                      verticesLeft--;
                      reader.align();
                    }
                    this.figures.push({
                      type: "triangles",
                      coords: new Int32Array(ps),
                      colors: new Int32Array(ps)
                    });
                  }
                }, {
                  key: "_decodeType5Shading",
                  value: function _decodeType5Shading(reader, verticesPerRow) {
                    var coords = this.coords;
                    var colors = this.colors;
                    var ps = [];
                    while (reader.hasData) {
                      var coord = reader.readCoordinate();
                      var color = reader.readComponents();
                      ps.push(coords.length);
                      coords.push(coord);
                      colors.push(color);
                    }
                    this.figures.push({
                      type: "lattice",
                      coords: new Int32Array(ps),
                      colors: new Int32Array(ps),
                      verticesPerRow
                    });
                  }
                }, {
                  key: "_decodeType6Shading",
                  value: function _decodeType6Shading(reader) {
                    var coords = this.coords;
                    var colors = this.colors;
                    var ps = new Int32Array(16);
                    var cs = new Int32Array(4);
                    while (reader.hasData) {
                      var f = reader.readFlag();
                      if (!(0 <= f && f <= 3)) {
                        throw new _util.FormatError("Unknown type6 flag");
                      }
                      var pi = coords.length;
                      for (var i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {
                        coords.push(reader.readCoordinate());
                      }
                      var ci = colors.length;
                      for (var _i2 = 0, _ii = f !== 0 ? 2 : 4; _i2 < _ii; _i2++) {
                        colors.push(reader.readComponents());
                      }
                      var tmp1 = void 0, tmp2 = void 0, tmp3 = void 0, tmp4 = void 0;
                      switch (f) {
                        case 0:
                          ps[12] = pi + 3;
                          ps[13] = pi + 4;
                          ps[14] = pi + 5;
                          ps[15] = pi + 6;
                          ps[8] = pi + 2;
                          ps[11] = pi + 7;
                          ps[4] = pi + 1;
                          ps[7] = pi + 8;
                          ps[0] = pi;
                          ps[1] = pi + 11;
                          ps[2] = pi + 10;
                          ps[3] = pi + 9;
                          cs[2] = ci + 1;
                          cs[3] = ci + 2;
                          cs[0] = ci;
                          cs[1] = ci + 3;
                          break;
                        case 1:
                          tmp1 = ps[12];
                          tmp2 = ps[13];
                          tmp3 = ps[14];
                          tmp4 = ps[15];
                          ps[12] = tmp4;
                          ps[13] = pi + 0;
                          ps[14] = pi + 1;
                          ps[15] = pi + 2;
                          ps[8] = tmp3;
                          ps[11] = pi + 3;
                          ps[4] = tmp2;
                          ps[7] = pi + 4;
                          ps[0] = tmp1;
                          ps[1] = pi + 7;
                          ps[2] = pi + 6;
                          ps[3] = pi + 5;
                          tmp1 = cs[2];
                          tmp2 = cs[3];
                          cs[2] = tmp2;
                          cs[3] = ci;
                          cs[0] = tmp1;
                          cs[1] = ci + 1;
                          break;
                        case 2:
                          tmp1 = ps[15];
                          tmp2 = ps[11];
                          ps[12] = ps[3];
                          ps[13] = pi + 0;
                          ps[14] = pi + 1;
                          ps[15] = pi + 2;
                          ps[8] = ps[7];
                          ps[11] = pi + 3;
                          ps[4] = tmp2;
                          ps[7] = pi + 4;
                          ps[0] = tmp1;
                          ps[1] = pi + 7;
                          ps[2] = pi + 6;
                          ps[3] = pi + 5;
                          tmp1 = cs[3];
                          cs[2] = cs[1];
                          cs[3] = ci;
                          cs[0] = tmp1;
                          cs[1] = ci + 1;
                          break;
                        case 3:
                          ps[12] = ps[0];
                          ps[13] = pi + 0;
                          ps[14] = pi + 1;
                          ps[15] = pi + 2;
                          ps[8] = ps[1];
                          ps[11] = pi + 3;
                          ps[4] = ps[2];
                          ps[7] = pi + 4;
                          ps[0] = ps[3];
                          ps[1] = pi + 7;
                          ps[2] = pi + 6;
                          ps[3] = pi + 5;
                          cs[2] = cs[0];
                          cs[3] = ci;
                          cs[0] = cs[1];
                          cs[1] = ci + 1;
                          break;
                      }
                      ps[5] = coords.length;
                      coords.push([(-4 * coords[ps[0]][0] - coords[ps[15]][0] + 6 * (coords[ps[4]][0] + coords[ps[1]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[13]][0] + coords[ps[7]][0])) / 9, (-4 * coords[ps[0]][1] - coords[ps[15]][1] + 6 * (coords[ps[4]][1] + coords[ps[1]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[13]][1] + coords[ps[7]][1])) / 9]);
                      ps[6] = coords.length;
                      coords.push([(-4 * coords[ps[3]][0] - coords[ps[12]][0] + 6 * (coords[ps[2]][0] + coords[ps[7]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[4]][0] + coords[ps[14]][0])) / 9, (-4 * coords[ps[3]][1] - coords[ps[12]][1] + 6 * (coords[ps[2]][1] + coords[ps[7]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[4]][1] + coords[ps[14]][1])) / 9]);
                      ps[9] = coords.length;
                      coords.push([(-4 * coords[ps[12]][0] - coords[ps[3]][0] + 6 * (coords[ps[8]][0] + coords[ps[13]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[11]][0] + coords[ps[1]][0])) / 9, (-4 * coords[ps[12]][1] - coords[ps[3]][1] + 6 * (coords[ps[8]][1] + coords[ps[13]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[11]][1] + coords[ps[1]][1])) / 9]);
                      ps[10] = coords.length;
                      coords.push([(-4 * coords[ps[15]][0] - coords[ps[0]][0] + 6 * (coords[ps[11]][0] + coords[ps[14]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[2]][0] + coords[ps[8]][0])) / 9, (-4 * coords[ps[15]][1] - coords[ps[0]][1] + 6 * (coords[ps[11]][1] + coords[ps[14]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[2]][1] + coords[ps[8]][1])) / 9]);
                      this.figures.push({
                        type: "patch",
                        coords: new Int32Array(ps),
                        colors: new Int32Array(cs)
                      });
                    }
                  }
                }, {
                  key: "_decodeType7Shading",
                  value: function _decodeType7Shading(reader) {
                    var coords = this.coords;
                    var colors = this.colors;
                    var ps = new Int32Array(16);
                    var cs = new Int32Array(4);
                    while (reader.hasData) {
                      var f = reader.readFlag();
                      if (!(0 <= f && f <= 3)) {
                        throw new _util.FormatError("Unknown type7 flag");
                      }
                      var pi = coords.length;
                      for (var i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {
                        coords.push(reader.readCoordinate());
                      }
                      var ci = colors.length;
                      for (var _i3 = 0, _ii2 = f !== 0 ? 2 : 4; _i3 < _ii2; _i3++) {
                        colors.push(reader.readComponents());
                      }
                      var tmp1 = void 0, tmp2 = void 0, tmp3 = void 0, tmp4 = void 0;
                      switch (f) {
                        case 0:
                          ps[12] = pi + 3;
                          ps[13] = pi + 4;
                          ps[14] = pi + 5;
                          ps[15] = pi + 6;
                          ps[8] = pi + 2;
                          ps[9] = pi + 13;
                          ps[10] = pi + 14;
                          ps[11] = pi + 7;
                          ps[4] = pi + 1;
                          ps[5] = pi + 12;
                          ps[6] = pi + 15;
                          ps[7] = pi + 8;
                          ps[0] = pi;
                          ps[1] = pi + 11;
                          ps[2] = pi + 10;
                          ps[3] = pi + 9;
                          cs[2] = ci + 1;
                          cs[3] = ci + 2;
                          cs[0] = ci;
                          cs[1] = ci + 3;
                          break;
                        case 1:
                          tmp1 = ps[12];
                          tmp2 = ps[13];
                          tmp3 = ps[14];
                          tmp4 = ps[15];
                          ps[12] = tmp4;
                          ps[13] = pi + 0;
                          ps[14] = pi + 1;
                          ps[15] = pi + 2;
                          ps[8] = tmp3;
                          ps[9] = pi + 9;
                          ps[10] = pi + 10;
                          ps[11] = pi + 3;
                          ps[4] = tmp2;
                          ps[5] = pi + 8;
                          ps[6] = pi + 11;
                          ps[7] = pi + 4;
                          ps[0] = tmp1;
                          ps[1] = pi + 7;
                          ps[2] = pi + 6;
                          ps[3] = pi + 5;
                          tmp1 = cs[2];
                          tmp2 = cs[3];
                          cs[2] = tmp2;
                          cs[3] = ci;
                          cs[0] = tmp1;
                          cs[1] = ci + 1;
                          break;
                        case 2:
                          tmp1 = ps[15];
                          tmp2 = ps[11];
                          ps[12] = ps[3];
                          ps[13] = pi + 0;
                          ps[14] = pi + 1;
                          ps[15] = pi + 2;
                          ps[8] = ps[7];
                          ps[9] = pi + 9;
                          ps[10] = pi + 10;
                          ps[11] = pi + 3;
                          ps[4] = tmp2;
                          ps[5] = pi + 8;
                          ps[6] = pi + 11;
                          ps[7] = pi + 4;
                          ps[0] = tmp1;
                          ps[1] = pi + 7;
                          ps[2] = pi + 6;
                          ps[3] = pi + 5;
                          tmp1 = cs[3];
                          cs[2] = cs[1];
                          cs[3] = ci;
                          cs[0] = tmp1;
                          cs[1] = ci + 1;
                          break;
                        case 3:
                          ps[12] = ps[0];
                          ps[13] = pi + 0;
                          ps[14] = pi + 1;
                          ps[15] = pi + 2;
                          ps[8] = ps[1];
                          ps[9] = pi + 9;
                          ps[10] = pi + 10;
                          ps[11] = pi + 3;
                          ps[4] = ps[2];
                          ps[5] = pi + 8;
                          ps[6] = pi + 11;
                          ps[7] = pi + 4;
                          ps[0] = ps[3];
                          ps[1] = pi + 7;
                          ps[2] = pi + 6;
                          ps[3] = pi + 5;
                          cs[2] = cs[0];
                          cs[3] = ci;
                          cs[0] = cs[1];
                          cs[1] = ci + 1;
                          break;
                      }
                      this.figures.push({
                        type: "patch",
                        coords: new Int32Array(ps),
                        colors: new Int32Array(cs)
                      });
                    }
                  }
                }, {
                  key: "_buildFigureFromPatch",
                  value: function _buildFigureFromPatch(index) {
                    var figure = this.figures[index];
                    (0, _util.assert)(figure.type === "patch", "Unexpected patch mesh figure");
                    var coords = this.coords, colors = this.colors;
                    var pi = figure.coords;
                    var ci = figure.colors;
                    var figureMinX = Math.min(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);
                    var figureMinY = Math.min(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);
                    var figureMaxX = Math.max(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);
                    var figureMaxY = Math.max(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);
                    var splitXBy = Math.ceil((figureMaxX - figureMinX) * MeshShading2.TRIANGLE_DENSITY / (this.bounds[2] - this.bounds[0]));
                    splitXBy = Math.max(MeshShading2.MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MeshShading2.MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitXBy));
                    var splitYBy = Math.ceil((figureMaxY - figureMinY) * MeshShading2.TRIANGLE_DENSITY / (this.bounds[3] - this.bounds[1]));
                    splitYBy = Math.max(MeshShading2.MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MeshShading2.MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitYBy));
                    var verticesPerRow = splitXBy + 1;
                    var figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);
                    var figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);
                    var k = 0;
                    var cl = new Uint8Array(3), cr = new Uint8Array(3);
                    var c0 = colors[ci[0]], c1 = colors[ci[1]], c2 = colors[ci[2]], c3 = colors[ci[3]];
                    var bRow = getB(splitYBy), bCol = getB(splitXBy);
                    for (var row = 0; row <= splitYBy; row++) {
                      cl[0] = (c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy | 0;
                      cl[1] = (c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy | 0;
                      cl[2] = (c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy | 0;
                      cr[0] = (c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy | 0;
                      cr[1] = (c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy | 0;
                      cr[2] = (c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy | 0;
                      for (var col = 0; col <= splitXBy; col++, k++) {
                        if ((row === 0 || row === splitYBy) && (col === 0 || col === splitXBy)) {
                          continue;
                        }
                        var x = 0, y = 0;
                        var q = 0;
                        for (var i = 0; i <= 3; i++) {
                          for (var j = 0; j <= 3; j++, q++) {
                            var m = bRow[row][i] * bCol[col][j];
                            x += coords[pi[q]][0] * m;
                            y += coords[pi[q]][1] * m;
                          }
                        }
                        figureCoords[k] = coords.length;
                        coords.push([x, y]);
                        figureColors[k] = colors.length;
                        var newColor = new Uint8Array(3);
                        newColor[0] = (cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy | 0;
                        newColor[1] = (cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy | 0;
                        newColor[2] = (cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy | 0;
                        colors.push(newColor);
                      }
                    }
                    figureCoords[0] = pi[0];
                    figureColors[0] = ci[0];
                    figureCoords[splitXBy] = pi[3];
                    figureColors[splitXBy] = ci[1];
                    figureCoords[verticesPerRow * splitYBy] = pi[12];
                    figureColors[verticesPerRow * splitYBy] = ci[2];
                    figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];
                    figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];
                    this.figures[index] = {
                      type: "lattice",
                      coords: figureCoords,
                      colors: figureColors,
                      verticesPerRow
                    };
                  }
                }, {
                  key: "_updateBounds",
                  value: function _updateBounds() {
                    var minX = this.coords[0][0], minY = this.coords[0][1], maxX = minX, maxY = minY;
                    for (var i = 1, ii = this.coords.length; i < ii; i++) {
                      var x = this.coords[i][0], y = this.coords[i][1];
                      minX = minX > x ? x : minX;
                      minY = minY > y ? y : minY;
                      maxX = maxX < x ? x : maxX;
                      maxY = maxY < y ? y : maxY;
                    }
                    this.bounds = [minX, minY, maxX, maxY];
                  }
                }, {
                  key: "_packData",
                  value: function _packData() {
                    var i, ii, j, jj;
                    var coords = this.coords;
                    var coordsPacked = new Float32Array(coords.length * 2);
                    for (i = 0, j = 0, ii = coords.length; i < ii; i++) {
                      var xy = coords[i];
                      coordsPacked[j++] = xy[0];
                      coordsPacked[j++] = xy[1];
                    }
                    this.coords = coordsPacked;
                    var colors = this.colors;
                    var colorsPacked = new Uint8Array(colors.length * 3);
                    for (i = 0, j = 0, ii = colors.length; i < ii; i++) {
                      var c = colors[i];
                      colorsPacked[j++] = c[0];
                      colorsPacked[j++] = c[1];
                      colorsPacked[j++] = c[2];
                    }
                    this.colors = colorsPacked;
                    var figures = this.figures;
                    for (i = 0, ii = figures.length; i < ii; i++) {
                      var figure = figures[i], ps = figure.coords, cs = figure.colors;
                      for (j = 0, jj = ps.length; j < jj; j++) {
                        ps[j] *= 2;
                        cs[j] *= 3;
                      }
                    }
                  }
                }, {
                  key: "getIR",
                  value: function getIR() {
                    return ["Mesh", this.shadingType, this.coords, this.colors, this.figures, this.bounds, this.bbox, this.background];
                  }
                }], [{
                  key: "MIN_SPLIT_PATCH_CHUNKS_AMOUNT",
                  get: function get() {
                    return (0, _util.shadow)(this, "MIN_SPLIT_PATCH_CHUNKS_AMOUNT", 3);
                  }
                }, {
                  key: "MAX_SPLIT_PATCH_CHUNKS_AMOUNT",
                  get: function get() {
                    return (0, _util.shadow)(this, "MAX_SPLIT_PATCH_CHUNKS_AMOUNT", 20);
                  }
                }, {
                  key: "TRIANGLE_DENSITY",
                  get: function get() {
                    return (0, _util.shadow)(this, "TRIANGLE_DENSITY", 20);
                  }
                }]);
                return MeshShading2;
              }(BaseShading);
              var DummyShading = /* @__PURE__ */ function(_BaseShading3) {
                _inherits(DummyShading2, _BaseShading3);
                var _super3 = _createSuper(DummyShading2);
                function DummyShading2() {
                  _classCallCheck(this, DummyShading2);
                  return _super3.apply(this, arguments);
                }
                _createClass(DummyShading2, [{
                  key: "getIR",
                  value: function getIR() {
                    return ["Dummy"];
                  }
                }]);
                return DummyShading2;
              }(BaseShading);
              function getTilingPatternIR(operatorList, dict, color) {
                var matrix = dict.getArray("Matrix");
                var bbox = _util.Util.normalizeRect(dict.getArray("BBox"));
                var xstep = dict.get("XStep");
                var ystep = dict.get("YStep");
                var paintType = dict.get("PaintType");
                var tilingType = dict.get("TilingType");
                if (bbox[2] - bbox[0] === 0 || bbox[3] - bbox[1] === 0) {
                  throw new _util.FormatError("Invalid getTilingPatternIR /BBox array: [".concat(bbox, "]."));
                }
                return ["TilingPattern", color, operatorList, matrix, bbox, xstep, ystep, paintType, tilingType];
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.PostScriptEvaluator = exports2.PostScriptCompiler = exports2.PDFFunctionFactory = void 0;
              exports2.isPDFFunction = isPDFFunction;
              var _primitives = __w_pdfjs_require__2(135);
              var _util = __w_pdfjs_require__2(4);
              var _ps_parser = __w_pdfjs_require__2(187);
              var _image_utils = __w_pdfjs_require__2(188);
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var PDFFunctionFactory = /* @__PURE__ */ function() {
                function PDFFunctionFactory2(_ref) {
                  var xref = _ref.xref, _ref$isEvalSupported = _ref.isEvalSupported, isEvalSupported = _ref$isEvalSupported === void 0 ? true : _ref$isEvalSupported;
                  _classCallCheck(this, PDFFunctionFactory2);
                  this.xref = xref;
                  this.isEvalSupported = isEvalSupported !== false;
                }
                _createClass(PDFFunctionFactory2, [{
                  key: "create",
                  value: function create(fn) {
                    var cachedFunction = this.getCached(fn);
                    if (cachedFunction) {
                      return cachedFunction;
                    }
                    var parsedFunction = PDFFunction.parse({
                      xref: this.xref,
                      isEvalSupported: this.isEvalSupported,
                      fn: fn instanceof _primitives.Ref ? this.xref.fetch(fn) : fn
                    });
                    this._cache(fn, parsedFunction);
                    return parsedFunction;
                  }
                }, {
                  key: "createFromArray",
                  value: function createFromArray(fnObj) {
                    var cachedFunction = this.getCached(fnObj);
                    if (cachedFunction) {
                      return cachedFunction;
                    }
                    var parsedFunction = PDFFunction.parseArray({
                      xref: this.xref,
                      isEvalSupported: this.isEvalSupported,
                      fnObj: fnObj instanceof _primitives.Ref ? this.xref.fetch(fnObj) : fnObj
                    });
                    this._cache(fnObj, parsedFunction);
                    return parsedFunction;
                  }
                }, {
                  key: "getCached",
                  value: function getCached(cacheKey) {
                    var fnRef;
                    if (cacheKey instanceof _primitives.Ref) {
                      fnRef = cacheKey;
                    } else if (cacheKey instanceof _primitives.Dict) {
                      fnRef = cacheKey.objId;
                    } else if ((0, _primitives.isStream)(cacheKey)) {
                      fnRef = cacheKey.dict && cacheKey.dict.objId;
                    }
                    if (fnRef) {
                      var localFunction = this._localFunctionCache.getByRef(fnRef);
                      if (localFunction) {
                        return localFunction;
                      }
                    }
                    return null;
                  }
                }, {
                  key: "_cache",
                  value: function _cache(cacheKey, parsedFunction) {
                    if (!parsedFunction) {
                      throw new Error('PDFFunctionFactory._cache - expected "parsedFunction" argument.');
                    }
                    var fnRef;
                    if (cacheKey instanceof _primitives.Ref) {
                      fnRef = cacheKey;
                    } else if (cacheKey instanceof _primitives.Dict) {
                      fnRef = cacheKey.objId;
                    } else if ((0, _primitives.isStream)(cacheKey)) {
                      fnRef = cacheKey.dict && cacheKey.dict.objId;
                    }
                    if (fnRef) {
                      this._localFunctionCache.set(null, fnRef, parsedFunction);
                    }
                  }
                }, {
                  key: "_localFunctionCache",
                  get: function get() {
                    return (0, _util.shadow)(this, "_localFunctionCache", new _image_utils.LocalFunctionCache());
                  }
                }]);
                return PDFFunctionFactory2;
              }();
              exports2.PDFFunctionFactory = PDFFunctionFactory;
              function toNumberArray(arr) {
                if (!Array.isArray(arr)) {
                  return null;
                }
                var length = arr.length;
                for (var i = 0; i < length; i++) {
                  if (typeof arr[i] !== "number") {
                    var result = new Array(length);
                    for (var j = 0; j < length; j++) {
                      result[j] = +arr[j];
                    }
                    return result;
                  }
                }
                return arr;
              }
              var PDFFunction = /* @__PURE__ */ function() {
                function PDFFunction2() {
                  _classCallCheck(this, PDFFunction2);
                }
                _createClass(PDFFunction2, null, [{
                  key: "getSampleArray",
                  value: function getSampleArray(size, outputSize, bps, stream) {
                    var i, ii;
                    var length = 1;
                    for (i = 0, ii = size.length; i < ii; i++) {
                      length *= size[i];
                    }
                    length *= outputSize;
                    var array = new Array(length);
                    var codeSize = 0;
                    var codeBuf = 0;
                    var sampleMul = 1 / (Math.pow(2, bps) - 1);
                    var strBytes = stream.getBytes((length * bps + 7) / 8);
                    var strIdx = 0;
                    for (i = 0; i < length; i++) {
                      while (codeSize < bps) {
                        codeBuf <<= 8;
                        codeBuf |= strBytes[strIdx++];
                        codeSize += 8;
                      }
                      codeSize -= bps;
                      array[i] = (codeBuf >> codeSize) * sampleMul;
                      codeBuf &= (1 << codeSize) - 1;
                    }
                    return array;
                  }
                }, {
                  key: "parse",
                  value: function parse(_ref2) {
                    var xref = _ref2.xref, isEvalSupported = _ref2.isEvalSupported, fn = _ref2.fn;
                    var dict = fn.dict || fn;
                    var typeNum = dict.get("FunctionType");
                    switch (typeNum) {
                      case 0:
                        return this.constructSampled({
                          xref,
                          isEvalSupported,
                          fn,
                          dict
                        });
                      case 1:
                        break;
                      case 2:
                        return this.constructInterpolated({
                          xref,
                          isEvalSupported,
                          dict
                        });
                      case 3:
                        return this.constructStiched({
                          xref,
                          isEvalSupported,
                          dict
                        });
                      case 4:
                        return this.constructPostScript({
                          xref,
                          isEvalSupported,
                          fn,
                          dict
                        });
                    }
                    throw new _util.FormatError("Unknown type of function");
                  }
                }, {
                  key: "parseArray",
                  value: function parseArray(_ref3) {
                    var xref = _ref3.xref, isEvalSupported = _ref3.isEvalSupported, fnObj = _ref3.fnObj;
                    if (!Array.isArray(fnObj)) {
                      return this.parse({
                        xref,
                        isEvalSupported,
                        fn: fnObj
                      });
                    }
                    var fnArray = [];
                    for (var j = 0, jj = fnObj.length; j < jj; j++) {
                      fnArray.push(this.parse({
                        xref,
                        isEvalSupported,
                        fn: xref.fetchIfRef(fnObj[j])
                      }));
                    }
                    return function(src, srcOffset, dest, destOffset) {
                      for (var i = 0, ii = fnArray.length; i < ii; i++) {
                        fnArray[i](src, srcOffset, dest, destOffset + i);
                      }
                    };
                  }
                }, {
                  key: "constructSampled",
                  value: function constructSampled(_ref4) {
                    var xref = _ref4.xref, isEvalSupported = _ref4.isEvalSupported, fn = _ref4.fn, dict = _ref4.dict;
                    function toMultiArray(arr) {
                      var inputLength = arr.length;
                      var out = [];
                      var index = 0;
                      for (var i2 = 0; i2 < inputLength; i2 += 2) {
                        out[index++] = [arr[i2], arr[i2 + 1]];
                      }
                      return out;
                    }
                    function interpolate(x, xmin, xmax, ymin, ymax) {
                      return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));
                    }
                    var domain = toNumberArray(dict.getArray("Domain"));
                    var range = toNumberArray(dict.getArray("Range"));
                    if (!domain || !range) {
                      throw new _util.FormatError("No domain or range");
                    }
                    var inputSize = domain.length / 2;
                    var outputSize = range.length / 2;
                    domain = toMultiArray(domain);
                    range = toMultiArray(range);
                    var size = toNumberArray(dict.getArray("Size"));
                    var bps = dict.get("BitsPerSample");
                    var order = dict.get("Order") || 1;
                    if (order !== 1) {
                      (0, _util.info)("No support for cubic spline interpolation: " + order);
                    }
                    var encode = toNumberArray(dict.getArray("Encode"));
                    if (!encode) {
                      encode = [];
                      for (var i = 0; i < inputSize; ++i) {
                        encode.push([0, size[i] - 1]);
                      }
                    } else {
                      encode = toMultiArray(encode);
                    }
                    var decode = toNumberArray(dict.getArray("Decode"));
                    if (!decode) {
                      decode = range;
                    } else {
                      decode = toMultiArray(decode);
                    }
                    var samples = this.getSampleArray(size, outputSize, bps, fn);
                    return function constructSampledFn(src, srcOffset, dest, destOffset) {
                      var cubeVertices = 1 << inputSize;
                      var cubeN = new Float64Array(cubeVertices);
                      var cubeVertex = new Uint32Array(cubeVertices);
                      var i2, j;
                      for (j = 0; j < cubeVertices; j++) {
                        cubeN[j] = 1;
                      }
                      var k = outputSize, pos = 1;
                      for (i2 = 0; i2 < inputSize; ++i2) {
                        var domain_2i = domain[i2][0];
                        var domain_2i_1 = domain[i2][1];
                        var xi = Math.min(Math.max(src[srcOffset + i2], domain_2i), domain_2i_1);
                        var e = interpolate(xi, domain_2i, domain_2i_1, encode[i2][0], encode[i2][1]);
                        var size_i = size[i2];
                        e = Math.min(Math.max(e, 0), size_i - 1);
                        var e0 = e < size_i - 1 ? Math.floor(e) : e - 1;
                        var n0 = e0 + 1 - e;
                        var n1 = e - e0;
                        var offset0 = e0 * k;
                        var offset1 = offset0 + k;
                        for (j = 0; j < cubeVertices; j++) {
                          if (j & pos) {
                            cubeN[j] *= n1;
                            cubeVertex[j] += offset1;
                          } else {
                            cubeN[j] *= n0;
                            cubeVertex[j] += offset0;
                          }
                        }
                        k *= size_i;
                        pos <<= 1;
                      }
                      for (j = 0; j < outputSize; ++j) {
                        var rj = 0;
                        for (i2 = 0; i2 < cubeVertices; i2++) {
                          rj += samples[cubeVertex[i2] + j] * cubeN[i2];
                        }
                        rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);
                        dest[destOffset + j] = Math.min(Math.max(rj, range[j][0]), range[j][1]);
                      }
                    };
                  }
                }, {
                  key: "constructInterpolated",
                  value: function constructInterpolated(_ref5) {
                    var xref = _ref5.xref, isEvalSupported = _ref5.isEvalSupported, dict = _ref5.dict;
                    var c0 = toNumberArray(dict.getArray("C0")) || [0];
                    var c1 = toNumberArray(dict.getArray("C1")) || [1];
                    var n = dict.get("N");
                    var diff = [];
                    for (var i = 0, ii = c0.length; i < ii; ++i) {
                      diff.push(c1[i] - c0[i]);
                    }
                    var length = diff.length;
                    return function constructInterpolatedFn(src, srcOffset, dest, destOffset) {
                      var x = n === 1 ? src[srcOffset] : Math.pow(src[srcOffset], n);
                      for (var j = 0; j < length; ++j) {
                        dest[destOffset + j] = c0[j] + x * diff[j];
                      }
                    };
                  }
                }, {
                  key: "constructStiched",
                  value: function constructStiched(_ref6) {
                    var xref = _ref6.xref, isEvalSupported = _ref6.isEvalSupported, dict = _ref6.dict;
                    var domain = toNumberArray(dict.getArray("Domain"));
                    if (!domain) {
                      throw new _util.FormatError("No domain");
                    }
                    var inputSize = domain.length / 2;
                    if (inputSize !== 1) {
                      throw new _util.FormatError("Bad domain for stiched function");
                    }
                    var fnRefs = dict.get("Functions");
                    var fns = [];
                    for (var i = 0, ii = fnRefs.length; i < ii; ++i) {
                      fns.push(this.parse({
                        xref,
                        isEvalSupported,
                        fn: xref.fetchIfRef(fnRefs[i])
                      }));
                    }
                    var bounds = toNumberArray(dict.getArray("Bounds"));
                    var encode = toNumberArray(dict.getArray("Encode"));
                    var tmpBuf = new Float32Array(1);
                    return function constructStichedFn(src, srcOffset, dest, destOffset) {
                      var clip = function constructStichedFromIRClip(v2, min, max) {
                        if (v2 > max) {
                          v2 = max;
                        } else if (v2 < min) {
                          v2 = min;
                        }
                        return v2;
                      };
                      var v = clip(src[srcOffset], domain[0], domain[1]);
                      var length = bounds.length;
                      var i2;
                      for (i2 = 0; i2 < length; ++i2) {
                        if (v < bounds[i2]) {
                          break;
                        }
                      }
                      var dmin = domain[0];
                      if (i2 > 0) {
                        dmin = bounds[i2 - 1];
                      }
                      var dmax = domain[1];
                      if (i2 < bounds.length) {
                        dmax = bounds[i2];
                      }
                      var rmin = encode[2 * i2];
                      var rmax = encode[2 * i2 + 1];
                      tmpBuf[0] = dmin === dmax ? rmin : rmin + (v - dmin) * (rmax - rmin) / (dmax - dmin);
                      fns[i2](tmpBuf, 0, dest, destOffset);
                    };
                  }
                }, {
                  key: "constructPostScript",
                  value: function constructPostScript(_ref7) {
                    var xref = _ref7.xref, isEvalSupported = _ref7.isEvalSupported, fn = _ref7.fn, dict = _ref7.dict;
                    var domain = toNumberArray(dict.getArray("Domain"));
                    var range = toNumberArray(dict.getArray("Range"));
                    if (!domain) {
                      throw new _util.FormatError("No domain.");
                    }
                    if (!range) {
                      throw new _util.FormatError("No range.");
                    }
                    var lexer = new _ps_parser.PostScriptLexer(fn);
                    var parser = new _ps_parser.PostScriptParser(lexer);
                    var code = parser.parse();
                    if (isEvalSupported && _util.IsEvalSupportedCached.value) {
                      var compiled = new PostScriptCompiler().compile(code, domain, range);
                      if (compiled) {
                        return new Function("src", "srcOffset", "dest", "destOffset", compiled);
                      }
                    }
                    (0, _util.info)("Unable to compile PS function");
                    var numOutputs = range.length >> 1;
                    var numInputs = domain.length >> 1;
                    var evaluator = new PostScriptEvaluator(code);
                    var cache = /* @__PURE__ */ Object.create(null);
                    var MAX_CACHE_SIZE = 2048 * 4;
                    var cache_available = MAX_CACHE_SIZE;
                    var tmpBuf = new Float32Array(numInputs);
                    return function constructPostScriptFn(src, srcOffset, dest, destOffset) {
                      var i, value;
                      var key = "";
                      var input = tmpBuf;
                      for (i = 0; i < numInputs; i++) {
                        value = src[srcOffset + i];
                        input[i] = value;
                        key += value + "_";
                      }
                      var cachedValue = cache[key];
                      if (cachedValue !== void 0) {
                        dest.set(cachedValue, destOffset);
                        return;
                      }
                      var output = new Float32Array(numOutputs);
                      var stack = evaluator.execute(input);
                      var stackIndex = stack.length - numOutputs;
                      for (i = 0; i < numOutputs; i++) {
                        value = stack[stackIndex + i];
                        var bound = range[i * 2];
                        if (value < bound) {
                          value = bound;
                        } else {
                          bound = range[i * 2 + 1];
                          if (value > bound) {
                            value = bound;
                          }
                        }
                        output[i] = value;
                      }
                      if (cache_available > 0) {
                        cache_available--;
                        cache[key] = output;
                      }
                      dest.set(output, destOffset);
                    };
                  }
                }]);
                return PDFFunction2;
              }();
              function isPDFFunction(v) {
                var fnDict;
                if (_typeof(v) !== "object") {
                  return false;
                } else if ((0, _primitives.isDict)(v)) {
                  fnDict = v;
                } else if ((0, _primitives.isStream)(v)) {
                  fnDict = v.dict;
                } else {
                  return false;
                }
                return fnDict.has("FunctionType");
              }
              var PostScriptStack = /* @__PURE__ */ function() {
                function PostScriptStack2(initialStack) {
                  _classCallCheck(this, PostScriptStack2);
                  this.stack = !initialStack ? [] : Array.prototype.slice.call(initialStack, 0);
                }
                _createClass(PostScriptStack2, [{
                  key: "push",
                  value: function push(value) {
                    if (this.stack.length >= PostScriptStack2.MAX_STACK_SIZE) {
                      throw new Error("PostScript function stack overflow.");
                    }
                    this.stack.push(value);
                  }
                }, {
                  key: "pop",
                  value: function pop() {
                    if (this.stack.length <= 0) {
                      throw new Error("PostScript function stack underflow.");
                    }
                    return this.stack.pop();
                  }
                }, {
                  key: "copy",
                  value: function copy(n) {
                    if (this.stack.length + n >= PostScriptStack2.MAX_STACK_SIZE) {
                      throw new Error("PostScript function stack overflow.");
                    }
                    var stack = this.stack;
                    for (var i = stack.length - n, j = n - 1; j >= 0; j--, i++) {
                      stack.push(stack[i]);
                    }
                  }
                }, {
                  key: "index",
                  value: function index(n) {
                    this.push(this.stack[this.stack.length - n - 1]);
                  }
                }, {
                  key: "roll",
                  value: function roll(n, p) {
                    var stack = this.stack;
                    var l = stack.length - n;
                    var r = stack.length - 1;
                    var c = l + (p - Math.floor(p / n) * n);
                    for (var i = l, j = r; i < j; i++, j--) {
                      var t = stack[i];
                      stack[i] = stack[j];
                      stack[j] = t;
                    }
                    for (var _i = l, _j = c - 1; _i < _j; _i++, _j--) {
                      var _t = stack[_i];
                      stack[_i] = stack[_j];
                      stack[_j] = _t;
                    }
                    for (var _i2 = c, _j2 = r; _i2 < _j2; _i2++, _j2--) {
                      var _t2 = stack[_i2];
                      stack[_i2] = stack[_j2];
                      stack[_j2] = _t2;
                    }
                  }
                }], [{
                  key: "MAX_STACK_SIZE",
                  get: function get() {
                    return (0, _util.shadow)(this, "MAX_STACK_SIZE", 100);
                  }
                }]);
                return PostScriptStack2;
              }();
              var PostScriptEvaluator = /* @__PURE__ */ function() {
                function PostScriptEvaluator2(operators) {
                  _classCallCheck(this, PostScriptEvaluator2);
                  this.operators = operators;
                }
                _createClass(PostScriptEvaluator2, [{
                  key: "execute",
                  value: function execute(initialStack) {
                    var stack = new PostScriptStack(initialStack);
                    var counter = 0;
                    var operators = this.operators;
                    var length = operators.length;
                    var operator, a, b;
                    while (counter < length) {
                      operator = operators[counter++];
                      if (typeof operator === "number") {
                        stack.push(operator);
                        continue;
                      }
                      switch (operator) {
                        case "jz":
                          b = stack.pop();
                          a = stack.pop();
                          if (!a) {
                            counter = b;
                          }
                          break;
                        case "j":
                          a = stack.pop();
                          counter = a;
                          break;
                        case "abs":
                          a = stack.pop();
                          stack.push(Math.abs(a));
                          break;
                        case "add":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a + b);
                          break;
                        case "and":
                          b = stack.pop();
                          a = stack.pop();
                          if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {
                            stack.push(a && b);
                          } else {
                            stack.push(a & b);
                          }
                          break;
                        case "atan":
                          a = stack.pop();
                          stack.push(Math.atan(a));
                          break;
                        case "bitshift":
                          b = stack.pop();
                          a = stack.pop();
                          if (a > 0) {
                            stack.push(a << b);
                          } else {
                            stack.push(a >> b);
                          }
                          break;
                        case "ceiling":
                          a = stack.pop();
                          stack.push(Math.ceil(a));
                          break;
                        case "copy":
                          a = stack.pop();
                          stack.copy(a);
                          break;
                        case "cos":
                          a = stack.pop();
                          stack.push(Math.cos(a));
                          break;
                        case "cvi":
                          a = stack.pop() | 0;
                          stack.push(a);
                          break;
                        case "cvr":
                          break;
                        case "div":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a / b);
                          break;
                        case "dup":
                          stack.copy(1);
                          break;
                        case "eq":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a === b);
                          break;
                        case "exch":
                          stack.roll(2, 1);
                          break;
                        case "exp":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(Math.pow(a, b));
                          break;
                        case "false":
                          stack.push(false);
                          break;
                        case "floor":
                          a = stack.pop();
                          stack.push(Math.floor(a));
                          break;
                        case "ge":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a >= b);
                          break;
                        case "gt":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a > b);
                          break;
                        case "idiv":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a / b | 0);
                          break;
                        case "index":
                          a = stack.pop();
                          stack.index(a);
                          break;
                        case "le":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a <= b);
                          break;
                        case "ln":
                          a = stack.pop();
                          stack.push(Math.log(a));
                          break;
                        case "log":
                          a = stack.pop();
                          stack.push(Math.log(a) / Math.LN10);
                          break;
                        case "lt":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a < b);
                          break;
                        case "mod":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a % b);
                          break;
                        case "mul":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a * b);
                          break;
                        case "ne":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a !== b);
                          break;
                        case "neg":
                          a = stack.pop();
                          stack.push(-a);
                          break;
                        case "not":
                          a = stack.pop();
                          if ((0, _util.isBool)(a)) {
                            stack.push(!a);
                          } else {
                            stack.push(~a);
                          }
                          break;
                        case "or":
                          b = stack.pop();
                          a = stack.pop();
                          if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {
                            stack.push(a || b);
                          } else {
                            stack.push(a | b);
                          }
                          break;
                        case "pop":
                          stack.pop();
                          break;
                        case "roll":
                          b = stack.pop();
                          a = stack.pop();
                          stack.roll(a, b);
                          break;
                        case "round":
                          a = stack.pop();
                          stack.push(Math.round(a));
                          break;
                        case "sin":
                          a = stack.pop();
                          stack.push(Math.sin(a));
                          break;
                        case "sqrt":
                          a = stack.pop();
                          stack.push(Math.sqrt(a));
                          break;
                        case "sub":
                          b = stack.pop();
                          a = stack.pop();
                          stack.push(a - b);
                          break;
                        case "true":
                          stack.push(true);
                          break;
                        case "truncate":
                          a = stack.pop();
                          a = a < 0 ? Math.ceil(a) : Math.floor(a);
                          stack.push(a);
                          break;
                        case "xor":
                          b = stack.pop();
                          a = stack.pop();
                          if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {
                            stack.push(a !== b);
                          } else {
                            stack.push(a ^ b);
                          }
                          break;
                        default:
                          throw new _util.FormatError("Unknown operator ".concat(operator));
                      }
                    }
                    return stack.stack;
                  }
                }]);
                return PostScriptEvaluator2;
              }();
              exports2.PostScriptEvaluator = PostScriptEvaluator;
              var PostScriptCompiler = function PostScriptCompilerClosure() {
                var AstNode = /* @__PURE__ */ function() {
                  function AstNode2(type) {
                    _classCallCheck(this, AstNode2);
                    this.type = type;
                  }
                  _createClass(AstNode2, [{
                    key: "visit",
                    value: function visit(visitor) {
                      (0, _util.unreachable)("abstract method");
                    }
                  }]);
                  return AstNode2;
                }();
                var AstArgument = /* @__PURE__ */ function(_AstNode) {
                  _inherits(AstArgument2, _AstNode);
                  var _super = _createSuper(AstArgument2);
                  function AstArgument2(index, min, max) {
                    var _this;
                    _classCallCheck(this, AstArgument2);
                    _this = _super.call(this, "args");
                    _this.index = index;
                    _this.min = min;
                    _this.max = max;
                    return _this;
                  }
                  _createClass(AstArgument2, [{
                    key: "visit",
                    value: function visit(visitor) {
                      visitor.visitArgument(this);
                    }
                  }]);
                  return AstArgument2;
                }(AstNode);
                var AstLiteral = /* @__PURE__ */ function(_AstNode2) {
                  _inherits(AstLiteral2, _AstNode2);
                  var _super2 = _createSuper(AstLiteral2);
                  function AstLiteral2(number) {
                    var _this2;
                    _classCallCheck(this, AstLiteral2);
                    _this2 = _super2.call(this, "literal");
                    _this2.number = number;
                    _this2.min = number;
                    _this2.max = number;
                    return _this2;
                  }
                  _createClass(AstLiteral2, [{
                    key: "visit",
                    value: function visit(visitor) {
                      visitor.visitLiteral(this);
                    }
                  }]);
                  return AstLiteral2;
                }(AstNode);
                var AstBinaryOperation = /* @__PURE__ */ function(_AstNode3) {
                  _inherits(AstBinaryOperation2, _AstNode3);
                  var _super3 = _createSuper(AstBinaryOperation2);
                  function AstBinaryOperation2(op, arg1, arg2, min, max) {
                    var _this3;
                    _classCallCheck(this, AstBinaryOperation2);
                    _this3 = _super3.call(this, "binary");
                    _this3.op = op;
                    _this3.arg1 = arg1;
                    _this3.arg2 = arg2;
                    _this3.min = min;
                    _this3.max = max;
                    return _this3;
                  }
                  _createClass(AstBinaryOperation2, [{
                    key: "visit",
                    value: function visit(visitor) {
                      visitor.visitBinaryOperation(this);
                    }
                  }]);
                  return AstBinaryOperation2;
                }(AstNode);
                var AstMin = /* @__PURE__ */ function(_AstNode4) {
                  _inherits(AstMin2, _AstNode4);
                  var _super4 = _createSuper(AstMin2);
                  function AstMin2(arg, max) {
                    var _this4;
                    _classCallCheck(this, AstMin2);
                    _this4 = _super4.call(this, "max");
                    _this4.arg = arg;
                    _this4.min = arg.min;
                    _this4.max = max;
                    return _this4;
                  }
                  _createClass(AstMin2, [{
                    key: "visit",
                    value: function visit(visitor) {
                      visitor.visitMin(this);
                    }
                  }]);
                  return AstMin2;
                }(AstNode);
                var AstVariable = /* @__PURE__ */ function(_AstNode5) {
                  _inherits(AstVariable2, _AstNode5);
                  var _super5 = _createSuper(AstVariable2);
                  function AstVariable2(index, min, max) {
                    var _this5;
                    _classCallCheck(this, AstVariable2);
                    _this5 = _super5.call(this, "var");
                    _this5.index = index;
                    _this5.min = min;
                    _this5.max = max;
                    return _this5;
                  }
                  _createClass(AstVariable2, [{
                    key: "visit",
                    value: function visit(visitor) {
                      visitor.visitVariable(this);
                    }
                  }]);
                  return AstVariable2;
                }(AstNode);
                var AstVariableDefinition = /* @__PURE__ */ function(_AstNode6) {
                  _inherits(AstVariableDefinition2, _AstNode6);
                  var _super6 = _createSuper(AstVariableDefinition2);
                  function AstVariableDefinition2(variable, arg) {
                    var _this6;
                    _classCallCheck(this, AstVariableDefinition2);
                    _this6 = _super6.call(this, "definition");
                    _this6.variable = variable;
                    _this6.arg = arg;
                    return _this6;
                  }
                  _createClass(AstVariableDefinition2, [{
                    key: "visit",
                    value: function visit(visitor) {
                      visitor.visitVariableDefinition(this);
                    }
                  }]);
                  return AstVariableDefinition2;
                }(AstNode);
                var ExpressionBuilderVisitor = /* @__PURE__ */ function() {
                  function ExpressionBuilderVisitor2() {
                    _classCallCheck(this, ExpressionBuilderVisitor2);
                    this.parts = [];
                  }
                  _createClass(ExpressionBuilderVisitor2, [{
                    key: "visitArgument",
                    value: function visitArgument(arg) {
                      this.parts.push("Math.max(", arg.min, ", Math.min(", arg.max, ", src[srcOffset + ", arg.index, "]))");
                    }
                  }, {
                    key: "visitVariable",
                    value: function visitVariable(variable) {
                      this.parts.push("v", variable.index);
                    }
                  }, {
                    key: "visitLiteral",
                    value: function visitLiteral(literal) {
                      this.parts.push(literal.number);
                    }
                  }, {
                    key: "visitBinaryOperation",
                    value: function visitBinaryOperation(operation) {
                      this.parts.push("(");
                      operation.arg1.visit(this);
                      this.parts.push(" ", operation.op, " ");
                      operation.arg2.visit(this);
                      this.parts.push(")");
                    }
                  }, {
                    key: "visitVariableDefinition",
                    value: function visitVariableDefinition(definition) {
                      this.parts.push("var ");
                      definition.variable.visit(this);
                      this.parts.push(" = ");
                      definition.arg.visit(this);
                      this.parts.push(";");
                    }
                  }, {
                    key: "visitMin",
                    value: function visitMin(max) {
                      this.parts.push("Math.min(");
                      max.arg.visit(this);
                      this.parts.push(", ", max.max, ")");
                    }
                  }, {
                    key: "toString",
                    value: function toString() {
                      return this.parts.join("");
                    }
                  }]);
                  return ExpressionBuilderVisitor2;
                }();
                function buildAddOperation(num1, num2) {
                  if (num2.type === "literal" && num2.number === 0) {
                    return num1;
                  }
                  if (num1.type === "literal" && num1.number === 0) {
                    return num2;
                  }
                  if (num2.type === "literal" && num1.type === "literal") {
                    return new AstLiteral(num1.number + num2.number);
                  }
                  return new AstBinaryOperation("+", num1, num2, num1.min + num2.min, num1.max + num2.max);
                }
                function buildMulOperation(num1, num2) {
                  if (num2.type === "literal") {
                    if (num2.number === 0) {
                      return new AstLiteral(0);
                    } else if (num2.number === 1) {
                      return num1;
                    } else if (num1.type === "literal") {
                      return new AstLiteral(num1.number * num2.number);
                    }
                  }
                  if (num1.type === "literal") {
                    if (num1.number === 0) {
                      return new AstLiteral(0);
                    } else if (num1.number === 1) {
                      return num2;
                    }
                  }
                  var min = Math.min(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);
                  var max = Math.max(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);
                  return new AstBinaryOperation("*", num1, num2, min, max);
                }
                function buildSubOperation(num1, num2) {
                  if (num2.type === "literal") {
                    if (num2.number === 0) {
                      return num1;
                    } else if (num1.type === "literal") {
                      return new AstLiteral(num1.number - num2.number);
                    }
                  }
                  if (num2.type === "binary" && num2.op === "-" && num1.type === "literal" && num1.number === 1 && num2.arg1.type === "literal" && num2.arg1.number === 1) {
                    return num2.arg2;
                  }
                  return new AstBinaryOperation("-", num1, num2, num1.min - num2.max, num1.max - num2.min);
                }
                function buildMinOperation(num1, max) {
                  if (num1.min >= max) {
                    return new AstLiteral(max);
                  } else if (num1.max <= max) {
                    return num1;
                  }
                  return new AstMin(num1, max);
                }
                var PostScriptCompiler2 = /* @__PURE__ */ function() {
                  function PostScriptCompiler3() {
                    _classCallCheck(this, PostScriptCompiler3);
                  }
                  _createClass(PostScriptCompiler3, [{
                    key: "compile",
                    value: function compile(code, domain, range) {
                      var stack = [];
                      var instructions = [];
                      var inputSize = domain.length >> 1, outputSize = range.length >> 1;
                      var lastRegister = 0;
                      var n, j;
                      var num1, num2, ast1, ast2, tmpVar, item;
                      for (var i = 0; i < inputSize; i++) {
                        stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));
                      }
                      for (var _i3 = 0, ii = code.length; _i3 < ii; _i3++) {
                        item = code[_i3];
                        if (typeof item === "number") {
                          stack.push(new AstLiteral(item));
                          continue;
                        }
                        switch (item) {
                          case "add":
                            if (stack.length < 2) {
                              return null;
                            }
                            num2 = stack.pop();
                            num1 = stack.pop();
                            stack.push(buildAddOperation(num1, num2));
                            break;
                          case "cvr":
                            if (stack.length < 1) {
                              return null;
                            }
                            break;
                          case "mul":
                            if (stack.length < 2) {
                              return null;
                            }
                            num2 = stack.pop();
                            num1 = stack.pop();
                            stack.push(buildMulOperation(num1, num2));
                            break;
                          case "sub":
                            if (stack.length < 2) {
                              return null;
                            }
                            num2 = stack.pop();
                            num1 = stack.pop();
                            stack.push(buildSubOperation(num1, num2));
                            break;
                          case "exch":
                            if (stack.length < 2) {
                              return null;
                            }
                            ast1 = stack.pop();
                            ast2 = stack.pop();
                            stack.push(ast1, ast2);
                            break;
                          case "pop":
                            if (stack.length < 1) {
                              return null;
                            }
                            stack.pop();
                            break;
                          case "index":
                            if (stack.length < 1) {
                              return null;
                            }
                            num1 = stack.pop();
                            if (num1.type !== "literal") {
                              return null;
                            }
                            n = num1.number;
                            if (n < 0 || !Number.isInteger(n) || stack.length < n) {
                              return null;
                            }
                            ast1 = stack[stack.length - n - 1];
                            if (ast1.type === "literal" || ast1.type === "var") {
                              stack.push(ast1);
                              break;
                            }
                            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);
                            stack[stack.length - n - 1] = tmpVar;
                            stack.push(tmpVar);
                            instructions.push(new AstVariableDefinition(tmpVar, ast1));
                            break;
                          case "dup":
                            if (stack.length < 1) {
                              return null;
                            }
                            if (typeof code[_i3 + 1] === "number" && code[_i3 + 2] === "gt" && code[_i3 + 3] === _i3 + 7 && code[_i3 + 4] === "jz" && code[_i3 + 5] === "pop" && code[_i3 + 6] === code[_i3 + 1]) {
                              num1 = stack.pop();
                              stack.push(buildMinOperation(num1, code[_i3 + 1]));
                              _i3 += 6;
                              break;
                            }
                            ast1 = stack[stack.length - 1];
                            if (ast1.type === "literal" || ast1.type === "var") {
                              stack.push(ast1);
                              break;
                            }
                            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);
                            stack[stack.length - 1] = tmpVar;
                            stack.push(tmpVar);
                            instructions.push(new AstVariableDefinition(tmpVar, ast1));
                            break;
                          case "roll":
                            if (stack.length < 2) {
                              return null;
                            }
                            num2 = stack.pop();
                            num1 = stack.pop();
                            if (num2.type !== "literal" || num1.type !== "literal") {
                              return null;
                            }
                            j = num2.number;
                            n = num1.number;
                            if (n <= 0 || !Number.isInteger(n) || !Number.isInteger(j) || stack.length < n) {
                              return null;
                            }
                            j = (j % n + n) % n;
                            if (j === 0) {
                              break;
                            }
                            Array.prototype.push.apply(stack, stack.splice(stack.length - n, n - j));
                            break;
                          default:
                            return null;
                        }
                      }
                      if (stack.length !== outputSize) {
                        return null;
                      }
                      var result = [];
                      for (var _i4 = 0, _instructions = instructions; _i4 < _instructions.length; _i4++) {
                        var instruction = _instructions[_i4];
                        var statementBuilder = new ExpressionBuilderVisitor();
                        instruction.visit(statementBuilder);
                        result.push(statementBuilder.toString());
                      }
                      for (var _i5 = 0, _ii = stack.length; _i5 < _ii; _i5++) {
                        var expr = stack[_i5], _statementBuilder = new ExpressionBuilderVisitor();
                        expr.visit(_statementBuilder);
                        var min = range[_i5 * 2], max = range[_i5 * 2 + 1];
                        var out = [_statementBuilder.toString()];
                        if (min > expr.min) {
                          out.unshift("Math.max(", min, ", ");
                          out.push(")");
                        }
                        if (max < expr.max) {
                          out.unshift("Math.min(", max, ", ");
                          out.push(")");
                        }
                        out.unshift("dest[destOffset + ", _i5, "] = ");
                        out.push(";");
                        result.push(out.join(""));
                      }
                      return result.join("\n");
                    }
                  }]);
                  return PostScriptCompiler3;
                }();
                return PostScriptCompiler2;
              }();
              exports2.PostScriptCompiler = PostScriptCompiler;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.PostScriptParser = exports2.PostScriptLexer = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _core_utils = __w_pdfjs_require__2(139);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var PostScriptParser = /* @__PURE__ */ function() {
                function PostScriptParser2(lexer) {
                  _classCallCheck(this, PostScriptParser2);
                  this.lexer = lexer;
                  this.operators = [];
                  this.token = null;
                  this.prev = null;
                }
                _createClass(PostScriptParser2, [{
                  key: "nextToken",
                  value: function nextToken() {
                    this.prev = this.token;
                    this.token = this.lexer.getToken();
                  }
                }, {
                  key: "accept",
                  value: function accept(type) {
                    if (this.token.type === type) {
                      this.nextToken();
                      return true;
                    }
                    return false;
                  }
                }, {
                  key: "expect",
                  value: function expect(type) {
                    if (this.accept(type)) {
                      return true;
                    }
                    throw new _util.FormatError("Unexpected symbol: found ".concat(this.token.type, " expected ").concat(type, "."));
                  }
                }, {
                  key: "parse",
                  value: function parse() {
                    this.nextToken();
                    this.expect(PostScriptTokenTypes.LBRACE);
                    this.parseBlock();
                    this.expect(PostScriptTokenTypes.RBRACE);
                    return this.operators;
                  }
                }, {
                  key: "parseBlock",
                  value: function parseBlock() {
                    while (true) {
                      if (this.accept(PostScriptTokenTypes.NUMBER)) {
                        this.operators.push(this.prev.value);
                      } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {
                        this.operators.push(this.prev.value);
                      } else if (this.accept(PostScriptTokenTypes.LBRACE)) {
                        this.parseCondition();
                      } else {
                        return;
                      }
                    }
                  }
                }, {
                  key: "parseCondition",
                  value: function parseCondition() {
                    var conditionLocation = this.operators.length;
                    this.operators.push(null, null);
                    this.parseBlock();
                    this.expect(PostScriptTokenTypes.RBRACE);
                    if (this.accept(PostScriptTokenTypes.IF)) {
                      this.operators[conditionLocation] = this.operators.length;
                      this.operators[conditionLocation + 1] = "jz";
                    } else if (this.accept(PostScriptTokenTypes.LBRACE)) {
                      var jumpLocation = this.operators.length;
                      this.operators.push(null, null);
                      var endOfTrue = this.operators.length;
                      this.parseBlock();
                      this.expect(PostScriptTokenTypes.RBRACE);
                      this.expect(PostScriptTokenTypes.IFELSE);
                      this.operators[jumpLocation] = this.operators.length;
                      this.operators[jumpLocation + 1] = "j";
                      this.operators[conditionLocation] = endOfTrue;
                      this.operators[conditionLocation + 1] = "jz";
                    } else {
                      throw new _util.FormatError("PS Function: error parsing conditional.");
                    }
                  }
                }]);
                return PostScriptParser2;
              }();
              exports2.PostScriptParser = PostScriptParser;
              var PostScriptTokenTypes = {
                LBRACE: 0,
                RBRACE: 1,
                NUMBER: 2,
                OPERATOR: 3,
                IF: 4,
                IFELSE: 5
              };
              var PostScriptToken = /* @__PURE__ */ function() {
                function PostScriptToken2(type, value) {
                  _classCallCheck(this, PostScriptToken2);
                  this.type = type;
                  this.value = value;
                }
                _createClass(PostScriptToken2, null, [{
                  key: "opCache",
                  get: function get() {
                    return (0, _util.shadow)(this, "opCache", /* @__PURE__ */ Object.create(null));
                  }
                }, {
                  key: "getOperator",
                  value: function getOperator(op) {
                    var opValue = PostScriptToken2.opCache[op];
                    if (opValue) {
                      return opValue;
                    }
                    return PostScriptToken2.opCache[op] = new PostScriptToken2(PostScriptTokenTypes.OPERATOR, op);
                  }
                }, {
                  key: "LBRACE",
                  get: function get() {
                    return (0, _util.shadow)(this, "LBRACE", new PostScriptToken2(PostScriptTokenTypes.LBRACE, "{"));
                  }
                }, {
                  key: "RBRACE",
                  get: function get() {
                    return (0, _util.shadow)(this, "RBRACE", new PostScriptToken2(PostScriptTokenTypes.RBRACE, "}"));
                  }
                }, {
                  key: "IF",
                  get: function get() {
                    return (0, _util.shadow)(this, "IF", new PostScriptToken2(PostScriptTokenTypes.IF, "IF"));
                  }
                }, {
                  key: "IFELSE",
                  get: function get() {
                    return (0, _util.shadow)(this, "IFELSE", new PostScriptToken2(PostScriptTokenTypes.IFELSE, "IFELSE"));
                  }
                }]);
                return PostScriptToken2;
              }();
              var PostScriptLexer = /* @__PURE__ */ function() {
                function PostScriptLexer2(stream) {
                  _classCallCheck(this, PostScriptLexer2);
                  this.stream = stream;
                  this.nextChar();
                  this.strBuf = [];
                }
                _createClass(PostScriptLexer2, [{
                  key: "nextChar",
                  value: function nextChar() {
                    return this.currentChar = this.stream.getByte();
                  }
                }, {
                  key: "getToken",
                  value: function getToken() {
                    var comment = false;
                    var ch = this.currentChar;
                    while (true) {
                      if (ch < 0) {
                        return _primitives.EOF;
                      }
                      if (comment) {
                        if (ch === 10 || ch === 13) {
                          comment = false;
                        }
                      } else if (ch === 37) {
                        comment = true;
                      } else if (!(0, _core_utils.isWhiteSpace)(ch)) {
                        break;
                      }
                      ch = this.nextChar();
                    }
                    switch (ch | 0) {
                      case 48:
                      case 49:
                      case 50:
                      case 51:
                      case 52:
                      case 53:
                      case 54:
                      case 55:
                      case 56:
                      case 57:
                      case 43:
                      case 45:
                      case 46:
                        return new PostScriptToken(PostScriptTokenTypes.NUMBER, this.getNumber());
                      case 123:
                        this.nextChar();
                        return PostScriptToken.LBRACE;
                      case 125:
                        this.nextChar();
                        return PostScriptToken.RBRACE;
                    }
                    var strBuf = this.strBuf;
                    strBuf.length = 0;
                    strBuf[0] = String.fromCharCode(ch);
                    while ((ch = this.nextChar()) >= 0 && (ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122)) {
                      strBuf.push(String.fromCharCode(ch));
                    }
                    var str = strBuf.join("");
                    switch (str.toLowerCase()) {
                      case "if":
                        return PostScriptToken.IF;
                      case "ifelse":
                        return PostScriptToken.IFELSE;
                      default:
                        return PostScriptToken.getOperator(str);
                    }
                  }
                }, {
                  key: "getNumber",
                  value: function getNumber() {
                    var ch = this.currentChar;
                    var strBuf = this.strBuf;
                    strBuf.length = 0;
                    strBuf[0] = String.fromCharCode(ch);
                    while ((ch = this.nextChar()) >= 0) {
                      if (ch >= 48 && ch <= 57 || ch === 45 || ch === 46) {
                        strBuf.push(String.fromCharCode(ch));
                      } else {
                        break;
                      }
                    }
                    var value = parseFloat(strBuf.join(""));
                    if (isNaN(value)) {
                      throw new _util.FormatError("Invalid floating point number: ".concat(value));
                    }
                    return value;
                  }
                }]);
                return PostScriptLexer2;
              }();
              exports2.PostScriptLexer = PostScriptLexer;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.LocalTilingPatternCache = exports2.LocalImageCache = exports2.LocalGStateCache = exports2.LocalFunctionCache = exports2.LocalColorSpaceCache = exports2.GlobalImageCache = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var BaseLocalCache = /* @__PURE__ */ function() {
                function BaseLocalCache2(options) {
                  _classCallCheck(this, BaseLocalCache2);
                  if (this.constructor === BaseLocalCache2) {
                    (0, _util.unreachable)("Cannot initialize BaseLocalCache.");
                  }
                  this._onlyRefs = (options && options.onlyRefs) === true;
                  if (!this._onlyRefs) {
                    this._nameRefMap = /* @__PURE__ */ new Map();
                    this._imageMap = /* @__PURE__ */ new Map();
                  }
                  this._imageCache = new _primitives.RefSetCache();
                }
                _createClass(BaseLocalCache2, [{
                  key: "getByName",
                  value: function getByName(name) {
                    if (this._onlyRefs) {
                      (0, _util.unreachable)("Should not call `getByName` method.");
                    }
                    var ref = this._nameRefMap.get(name);
                    if (ref) {
                      return this.getByRef(ref);
                    }
                    return this._imageMap.get(name) || null;
                  }
                }, {
                  key: "getByRef",
                  value: function getByRef(ref) {
                    return this._imageCache.get(ref) || null;
                  }
                }, {
                  key: "set",
                  value: function set(name, ref, data) {
                    (0, _util.unreachable)("Abstract method `set` called.");
                  }
                }]);
                return BaseLocalCache2;
              }();
              var LocalImageCache = /* @__PURE__ */ function(_BaseLocalCache) {
                _inherits(LocalImageCache2, _BaseLocalCache);
                var _super = _createSuper(LocalImageCache2);
                function LocalImageCache2() {
                  _classCallCheck(this, LocalImageCache2);
                  return _super.apply(this, arguments);
                }
                _createClass(LocalImageCache2, [{
                  key: "set",
                  value: function set(name) {
                    var ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                    var data = arguments.length > 2 ? arguments[2] : void 0;
                    if (typeof name !== "string") {
                      throw new Error('LocalImageCache.set - expected "name" argument.');
                    }
                    if (ref) {
                      if (this._imageCache.has(ref)) {
                        return;
                      }
                      this._nameRefMap.set(name, ref);
                      this._imageCache.put(ref, data);
                      return;
                    }
                    if (this._imageMap.has(name)) {
                      return;
                    }
                    this._imageMap.set(name, data);
                  }
                }]);
                return LocalImageCache2;
              }(BaseLocalCache);
              exports2.LocalImageCache = LocalImageCache;
              var LocalColorSpaceCache = /* @__PURE__ */ function(_BaseLocalCache2) {
                _inherits(LocalColorSpaceCache2, _BaseLocalCache2);
                var _super2 = _createSuper(LocalColorSpaceCache2);
                function LocalColorSpaceCache2() {
                  _classCallCheck(this, LocalColorSpaceCache2);
                  return _super2.apply(this, arguments);
                }
                _createClass(LocalColorSpaceCache2, [{
                  key: "set",
                  value: function set() {
                    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                    var ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                    var data = arguments.length > 2 ? arguments[2] : void 0;
                    if (typeof name !== "string" && !ref) {
                      throw new Error('LocalColorSpaceCache.set - expected "name" and/or "ref" argument.');
                    }
                    if (ref) {
                      if (this._imageCache.has(ref)) {
                        return;
                      }
                      if (name !== null) {
                        this._nameRefMap.set(name, ref);
                      }
                      this._imageCache.put(ref, data);
                      return;
                    }
                    if (this._imageMap.has(name)) {
                      return;
                    }
                    this._imageMap.set(name, data);
                  }
                }]);
                return LocalColorSpaceCache2;
              }(BaseLocalCache);
              exports2.LocalColorSpaceCache = LocalColorSpaceCache;
              var LocalFunctionCache = /* @__PURE__ */ function(_BaseLocalCache3) {
                _inherits(LocalFunctionCache2, _BaseLocalCache3);
                var _super3 = _createSuper(LocalFunctionCache2);
                function LocalFunctionCache2(options) {
                  _classCallCheck(this, LocalFunctionCache2);
                  return _super3.call(this, {
                    onlyRefs: true
                  });
                }
                _createClass(LocalFunctionCache2, [{
                  key: "set",
                  value: function set() {
                    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                    var ref = arguments.length > 1 ? arguments[1] : void 0;
                    var data = arguments.length > 2 ? arguments[2] : void 0;
                    if (!ref) {
                      throw new Error('LocalFunctionCache.set - expected "ref" argument.');
                    }
                    if (this._imageCache.has(ref)) {
                      return;
                    }
                    this._imageCache.put(ref, data);
                  }
                }]);
                return LocalFunctionCache2;
              }(BaseLocalCache);
              exports2.LocalFunctionCache = LocalFunctionCache;
              var LocalGStateCache = /* @__PURE__ */ function(_BaseLocalCache4) {
                _inherits(LocalGStateCache2, _BaseLocalCache4);
                var _super4 = _createSuper(LocalGStateCache2);
                function LocalGStateCache2() {
                  _classCallCheck(this, LocalGStateCache2);
                  return _super4.apply(this, arguments);
                }
                _createClass(LocalGStateCache2, [{
                  key: "set",
                  value: function set(name) {
                    var ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                    var data = arguments.length > 2 ? arguments[2] : void 0;
                    if (typeof name !== "string") {
                      throw new Error('LocalGStateCache.set - expected "name" argument.');
                    }
                    if (ref) {
                      if (this._imageCache.has(ref)) {
                        return;
                      }
                      this._nameRefMap.set(name, ref);
                      this._imageCache.put(ref, data);
                      return;
                    }
                    if (this._imageMap.has(name)) {
                      return;
                    }
                    this._imageMap.set(name, data);
                  }
                }]);
                return LocalGStateCache2;
              }(BaseLocalCache);
              exports2.LocalGStateCache = LocalGStateCache;
              var LocalTilingPatternCache = /* @__PURE__ */ function(_BaseLocalCache5) {
                _inherits(LocalTilingPatternCache2, _BaseLocalCache5);
                var _super5 = _createSuper(LocalTilingPatternCache2);
                function LocalTilingPatternCache2(options) {
                  _classCallCheck(this, LocalTilingPatternCache2);
                  return _super5.call(this, {
                    onlyRefs: true
                  });
                }
                _createClass(LocalTilingPatternCache2, [{
                  key: "set",
                  value: function set() {
                    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                    var ref = arguments.length > 1 ? arguments[1] : void 0;
                    var data = arguments.length > 2 ? arguments[2] : void 0;
                    if (!ref) {
                      throw new Error('LocalTilingPatternCache.set - expected "ref" argument.');
                    }
                    if (this._imageCache.has(ref)) {
                      return;
                    }
                    this._imageCache.put(ref, data);
                  }
                }]);
                return LocalTilingPatternCache2;
              }(BaseLocalCache);
              exports2.LocalTilingPatternCache = LocalTilingPatternCache;
              var GlobalImageCache = /* @__PURE__ */ function() {
                function GlobalImageCache2() {
                  _classCallCheck(this, GlobalImageCache2);
                  this._refCache = new _primitives.RefSetCache();
                  this._imageCache = new _primitives.RefSetCache();
                }
                _createClass(GlobalImageCache2, [{
                  key: "_byteSize",
                  get: function get() {
                    var byteSize = 0;
                    this._imageCache.forEach(function(imageData) {
                      byteSize += imageData.byteSize;
                    });
                    return byteSize;
                  }
                }, {
                  key: "_cacheLimitReached",
                  get: function get() {
                    if (this._imageCache.size < GlobalImageCache2.MIN_IMAGES_TO_CACHE) {
                      return false;
                    }
                    if (this._byteSize < GlobalImageCache2.MAX_BYTE_SIZE) {
                      return false;
                    }
                    return true;
                  }
                }, {
                  key: "shouldCache",
                  value: function shouldCache(ref, pageIndex) {
                    var pageIndexSet = this._refCache.get(ref);
                    var numPages = pageIndexSet ? pageIndexSet.size + (pageIndexSet.has(pageIndex) ? 0 : 1) : 1;
                    if (numPages < GlobalImageCache2.NUM_PAGES_THRESHOLD) {
                      return false;
                    }
                    if (!this._imageCache.has(ref) && this._cacheLimitReached) {
                      return false;
                    }
                    return true;
                  }
                }, {
                  key: "addPageIndex",
                  value: function addPageIndex(ref, pageIndex) {
                    var pageIndexSet = this._refCache.get(ref);
                    if (!pageIndexSet) {
                      pageIndexSet = /* @__PURE__ */ new Set();
                      this._refCache.put(ref, pageIndexSet);
                    }
                    pageIndexSet.add(pageIndex);
                  }
                }, {
                  key: "addByteSize",
                  value: function addByteSize(ref, byteSize) {
                    var imageData = this._imageCache.get(ref);
                    if (!imageData) {
                      return;
                    }
                    if (imageData.byteSize) {
                      return;
                    }
                    imageData.byteSize = byteSize;
                  }
                }, {
                  key: "getData",
                  value: function getData(ref, pageIndex) {
                    var pageIndexSet = this._refCache.get(ref);
                    if (!pageIndexSet) {
                      return null;
                    }
                    if (pageIndexSet.size < GlobalImageCache2.NUM_PAGES_THRESHOLD) {
                      return null;
                    }
                    var imageData = this._imageCache.get(ref);
                    if (!imageData) {
                      return null;
                    }
                    pageIndexSet.add(pageIndex);
                    return imageData;
                  }
                }, {
                  key: "setData",
                  value: function setData(ref, data) {
                    if (!this._refCache.has(ref)) {
                      throw new Error('GlobalImageCache.setData - expected "addPageIndex" to have been called.');
                    }
                    if (this._imageCache.has(ref)) {
                      return;
                    }
                    if (this._cacheLimitReached) {
                      (0, _util.warn)("GlobalImageCache.setData - cache limit reached.");
                      return;
                    }
                    this._imageCache.put(ref, data);
                  }
                }, {
                  key: "clear",
                  value: function clear() {
                    var onlyData = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    if (!onlyData) {
                      this._refCache.clear();
                    }
                    this._imageCache.clear();
                  }
                }], [{
                  key: "NUM_PAGES_THRESHOLD",
                  get: function get() {
                    return (0, _util.shadow)(this, "NUM_PAGES_THRESHOLD", 2);
                  }
                }, {
                  key: "MIN_IMAGES_TO_CACHE",
                  get: function get() {
                    return (0, _util.shadow)(this, "MIN_IMAGES_TO_CACHE", 10);
                  }
                }, {
                  key: "MAX_BYTE_SIZE",
                  get: function get() {
                    return (0, _util.shadow)(this, "MAX_BYTE_SIZE", 4e7);
                  }
                }]);
                return GlobalImageCache2;
              }();
              exports2.GlobalImageCache = GlobalImageCache;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.bidi = bidi;
              var _util = __w_pdfjs_require__2(4);
              var baseTypes = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "ON", "ON", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "ON", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "ON", "ET", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "L", "ON", "ON", "BN", "ON", "ON", "ET", "ET", "EN", "EN", "ON", "L", "ON", "ON", "ON", "EN", "L", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L"];
              var arabicTypes = ["AN", "AN", "AN", "AN", "AN", "AN", "ON", "ON", "AL", "ET", "ET", "AL", "CS", "AL", "ON", "ON", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "ON", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "ON", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL"];
              function isOdd(i) {
                return (i & 1) !== 0;
              }
              function isEven(i) {
                return (i & 1) === 0;
              }
              function findUnequal(arr, start, value) {
                var j, jj;
                for (j = start, jj = arr.length; j < jj; ++j) {
                  if (arr[j] !== value) {
                    return j;
                  }
                }
                return j;
              }
              function setValues(arr, start, end, value) {
                for (var j = start; j < end; ++j) {
                  arr[j] = value;
                }
              }
              function reverseValues(arr, start, end) {
                for (var i = start, j = end - 1; i < j; ++i, --j) {
                  var temp = arr[i];
                  arr[i] = arr[j];
                  arr[j] = temp;
                }
              }
              function createBidiText(str, isLTR) {
                var vertical = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                var dir = "ltr";
                if (vertical) {
                  dir = "ttb";
                } else if (!isLTR) {
                  dir = "rtl";
                }
                return {
                  str,
                  dir
                };
              }
              var chars = [];
              var types = [];
              function bidi(str) {
                var startLevel = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
                var vertical = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                var isLTR = true;
                var strLength = str.length;
                if (strLength === 0 || vertical) {
                  return createBidiText(str, isLTR, vertical);
                }
                chars.length = strLength;
                types.length = strLength;
                var numBidi = 0;
                var i, ii;
                for (i = 0; i < strLength; ++i) {
                  chars[i] = str.charAt(i);
                  var charCode = str.charCodeAt(i);
                  var charType = "L";
                  if (charCode <= 255) {
                    charType = baseTypes[charCode];
                  } else if (1424 <= charCode && charCode <= 1524) {
                    charType = "R";
                  } else if (1536 <= charCode && charCode <= 1791) {
                    charType = arabicTypes[charCode & 255];
                    if (!charType) {
                      (0, _util.warn)("Bidi: invalid Unicode character " + charCode.toString(16));
                    }
                  } else if (1792 <= charCode && charCode <= 2220) {
                    charType = "AL";
                  }
                  if (charType === "R" || charType === "AL" || charType === "AN") {
                    numBidi++;
                  }
                  types[i] = charType;
                }
                if (numBidi === 0) {
                  isLTR = true;
                  return createBidiText(str, isLTR);
                }
                if (startLevel === -1) {
                  if (numBidi / strLength < 0.3 && strLength > 4) {
                    isLTR = true;
                    startLevel = 0;
                  } else {
                    isLTR = false;
                    startLevel = 1;
                  }
                }
                var levels = [];
                for (i = 0; i < strLength; ++i) {
                  levels[i] = startLevel;
                }
                var e = isOdd(startLevel) ? "R" : "L";
                var sor = e;
                var eor = sor;
                var lastType = sor;
                for (i = 0; i < strLength; ++i) {
                  if (types[i] === "NSM") {
                    types[i] = lastType;
                  } else {
                    lastType = types[i];
                  }
                }
                lastType = sor;
                var t;
                for (i = 0; i < strLength; ++i) {
                  t = types[i];
                  if (t === "EN") {
                    types[i] = lastType === "AL" ? "AN" : "EN";
                  } else if (t === "R" || t === "L" || t === "AL") {
                    lastType = t;
                  }
                }
                for (i = 0; i < strLength; ++i) {
                  t = types[i];
                  if (t === "AL") {
                    types[i] = "R";
                  }
                }
                for (i = 1; i < strLength - 1; ++i) {
                  if (types[i] === "ES" && types[i - 1] === "EN" && types[i + 1] === "EN") {
                    types[i] = "EN";
                  }
                  if (types[i] === "CS" && (types[i - 1] === "EN" || types[i - 1] === "AN") && types[i + 1] === types[i - 1]) {
                    types[i] = types[i - 1];
                  }
                }
                for (i = 0; i < strLength; ++i) {
                  if (types[i] === "EN") {
                    for (var j = i - 1; j >= 0; --j) {
                      if (types[j] !== "ET") {
                        break;
                      }
                      types[j] = "EN";
                    }
                    for (var _j = i + 1; _j < strLength; ++_j) {
                      if (types[_j] !== "ET") {
                        break;
                      }
                      types[_j] = "EN";
                    }
                  }
                }
                for (i = 0; i < strLength; ++i) {
                  t = types[i];
                  if (t === "WS" || t === "ES" || t === "ET" || t === "CS") {
                    types[i] = "ON";
                  }
                }
                lastType = sor;
                for (i = 0; i < strLength; ++i) {
                  t = types[i];
                  if (t === "EN") {
                    types[i] = lastType === "L" ? "L" : "EN";
                  } else if (t === "R" || t === "L") {
                    lastType = t;
                  }
                }
                for (i = 0; i < strLength; ++i) {
                  if (types[i] === "ON") {
                    var end = findUnequal(types, i + 1, "ON");
                    var before = sor;
                    if (i > 0) {
                      before = types[i - 1];
                    }
                    var after = eor;
                    if (end + 1 < strLength) {
                      after = types[end + 1];
                    }
                    if (before !== "L") {
                      before = "R";
                    }
                    if (after !== "L") {
                      after = "R";
                    }
                    if (before === after) {
                      setValues(types, i, end, before);
                    }
                    i = end - 1;
                  }
                }
                for (i = 0; i < strLength; ++i) {
                  if (types[i] === "ON") {
                    types[i] = e;
                  }
                }
                for (i = 0; i < strLength; ++i) {
                  t = types[i];
                  if (isEven(levels[i])) {
                    if (t === "R") {
                      levels[i] += 1;
                    } else if (t === "AN" || t === "EN") {
                      levels[i] += 2;
                    }
                  } else {
                    if (t === "L" || t === "AN" || t === "EN") {
                      levels[i] += 1;
                    }
                  }
                }
                var highestLevel = -1;
                var lowestOddLevel = 99;
                var level;
                for (i = 0, ii = levels.length; i < ii; ++i) {
                  level = levels[i];
                  if (highestLevel < level) {
                    highestLevel = level;
                  }
                  if (lowestOddLevel > level && isOdd(level)) {
                    lowestOddLevel = level;
                  }
                }
                for (level = highestLevel; level >= lowestOddLevel; --level) {
                  var start = -1;
                  for (i = 0, ii = levels.length; i < ii; ++i) {
                    if (levels[i] < level) {
                      if (start >= 0) {
                        reverseValues(chars, start, i);
                        start = -1;
                      }
                    } else if (start < 0) {
                      start = i;
                    }
                  }
                  if (start >= 0) {
                    reverseValues(chars, start, levels.length);
                  }
                }
                for (i = 0, ii = chars.length; i < ii; ++i) {
                  var ch = chars[i];
                  if (ch === "<" || ch === ">") {
                    chars[i] = "";
                  }
                }
                return createBidiText(chars.join(""), isLTR);
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.getMetrics = void 0;
              var _core_utils = __w_pdfjs_require__2(139);
              var getMetrics = (0, _core_utils.getLookupTableFactory)(function(t) {
                t.Courier = 600;
                t["Courier-Bold"] = 600;
                t["Courier-BoldOblique"] = 600;
                t["Courier-Oblique"] = 600;
                t.Helvetica = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 278;
                  t2.exclam = 278;
                  t2.quotedbl = 355;
                  t2.numbersign = 556;
                  t2.dollar = 556;
                  t2.percent = 889;
                  t2.ampersand = 667;
                  t2.quoteright = 222;
                  t2.parenleft = 333;
                  t2.parenright = 333;
                  t2.asterisk = 389;
                  t2.plus = 584;
                  t2.comma = 278;
                  t2.hyphen = 333;
                  t2.period = 278;
                  t2.slash = 278;
                  t2.zero = 556;
                  t2.one = 556;
                  t2.two = 556;
                  t2.three = 556;
                  t2.four = 556;
                  t2.five = 556;
                  t2.six = 556;
                  t2.seven = 556;
                  t2.eight = 556;
                  t2.nine = 556;
                  t2.colon = 278;
                  t2.semicolon = 278;
                  t2.less = 584;
                  t2.equal = 584;
                  t2.greater = 584;
                  t2.question = 556;
                  t2.at = 1015;
                  t2.A = 667;
                  t2.B = 667;
                  t2.C = 722;
                  t2.D = 722;
                  t2.E = 667;
                  t2.F = 611;
                  t2.G = 778;
                  t2.H = 722;
                  t2.I = 278;
                  t2.J = 500;
                  t2.K = 667;
                  t2.L = 556;
                  t2.M = 833;
                  t2.N = 722;
                  t2.O = 778;
                  t2.P = 667;
                  t2.Q = 778;
                  t2.R = 722;
                  t2.S = 667;
                  t2.T = 611;
                  t2.U = 722;
                  t2.V = 667;
                  t2.W = 944;
                  t2.X = 667;
                  t2.Y = 667;
                  t2.Z = 611;
                  t2.bracketleft = 278;
                  t2.backslash = 278;
                  t2.bracketright = 278;
                  t2.asciicircum = 469;
                  t2.underscore = 556;
                  t2.quoteleft = 222;
                  t2.a = 556;
                  t2.b = 556;
                  t2.c = 500;
                  t2.d = 556;
                  t2.e = 556;
                  t2.f = 278;
                  t2.g = 556;
                  t2.h = 556;
                  t2.i = 222;
                  t2.j = 222;
                  t2.k = 500;
                  t2.l = 222;
                  t2.m = 833;
                  t2.n = 556;
                  t2.o = 556;
                  t2.p = 556;
                  t2.q = 556;
                  t2.r = 333;
                  t2.s = 500;
                  t2.t = 278;
                  t2.u = 556;
                  t2.v = 500;
                  t2.w = 722;
                  t2.x = 500;
                  t2.y = 500;
                  t2.z = 500;
                  t2.braceleft = 334;
                  t2.bar = 260;
                  t2.braceright = 334;
                  t2.asciitilde = 584;
                  t2.exclamdown = 333;
                  t2.cent = 556;
                  t2.sterling = 556;
                  t2.fraction = 167;
                  t2.yen = 556;
                  t2.florin = 556;
                  t2.section = 556;
                  t2.currency = 556;
                  t2.quotesingle = 191;
                  t2.quotedblleft = 333;
                  t2.guillemotleft = 556;
                  t2.guilsinglleft = 333;
                  t2.guilsinglright = 333;
                  t2.fi = 500;
                  t2.fl = 500;
                  t2.endash = 556;
                  t2.dagger = 556;
                  t2.daggerdbl = 556;
                  t2.periodcentered = 278;
                  t2.paragraph = 537;
                  t2.bullet = 350;
                  t2.quotesinglbase = 222;
                  t2.quotedblbase = 333;
                  t2.quotedblright = 333;
                  t2.guillemotright = 556;
                  t2.ellipsis = 1e3;
                  t2.perthousand = 1e3;
                  t2.questiondown = 611;
                  t2.grave = 333;
                  t2.acute = 333;
                  t2.circumflex = 333;
                  t2.tilde = 333;
                  t2.macron = 333;
                  t2.breve = 333;
                  t2.dotaccent = 333;
                  t2.dieresis = 333;
                  t2.ring = 333;
                  t2.cedilla = 333;
                  t2.hungarumlaut = 333;
                  t2.ogonek = 333;
                  t2.caron = 333;
                  t2.emdash = 1e3;
                  t2.AE = 1e3;
                  t2.ordfeminine = 370;
                  t2.Lslash = 556;
                  t2.Oslash = 778;
                  t2.OE = 1e3;
                  t2.ordmasculine = 365;
                  t2.ae = 889;
                  t2.dotlessi = 278;
                  t2.lslash = 222;
                  t2.oslash = 611;
                  t2.oe = 944;
                  t2.germandbls = 611;
                  t2.Idieresis = 278;
                  t2.eacute = 556;
                  t2.abreve = 556;
                  t2.uhungarumlaut = 556;
                  t2.ecaron = 556;
                  t2.Ydieresis = 667;
                  t2.divide = 584;
                  t2.Yacute = 667;
                  t2.Acircumflex = 667;
                  t2.aacute = 556;
                  t2.Ucircumflex = 722;
                  t2.yacute = 500;
                  t2.scommaaccent = 500;
                  t2.ecircumflex = 556;
                  t2.Uring = 722;
                  t2.Udieresis = 722;
                  t2.aogonek = 556;
                  t2.Uacute = 722;
                  t2.uogonek = 556;
                  t2.Edieresis = 667;
                  t2.Dcroat = 722;
                  t2.commaaccent = 250;
                  t2.copyright = 737;
                  t2.Emacron = 667;
                  t2.ccaron = 500;
                  t2.aring = 556;
                  t2.Ncommaaccent = 722;
                  t2.lacute = 222;
                  t2.agrave = 556;
                  t2.Tcommaaccent = 611;
                  t2.Cacute = 722;
                  t2.atilde = 556;
                  t2.Edotaccent = 667;
                  t2.scaron = 500;
                  t2.scedilla = 500;
                  t2.iacute = 278;
                  t2.lozenge = 471;
                  t2.Rcaron = 722;
                  t2.Gcommaaccent = 778;
                  t2.ucircumflex = 556;
                  t2.acircumflex = 556;
                  t2.Amacron = 667;
                  t2.rcaron = 333;
                  t2.ccedilla = 500;
                  t2.Zdotaccent = 611;
                  t2.Thorn = 667;
                  t2.Omacron = 778;
                  t2.Racute = 722;
                  t2.Sacute = 667;
                  t2.dcaron = 643;
                  t2.Umacron = 722;
                  t2.uring = 556;
                  t2.threesuperior = 333;
                  t2.Ograve = 778;
                  t2.Agrave = 667;
                  t2.Abreve = 667;
                  t2.multiply = 584;
                  t2.uacute = 556;
                  t2.Tcaron = 611;
                  t2.partialdiff = 476;
                  t2.ydieresis = 500;
                  t2.Nacute = 722;
                  t2.icircumflex = 278;
                  t2.Ecircumflex = 667;
                  t2.adieresis = 556;
                  t2.edieresis = 556;
                  t2.cacute = 500;
                  t2.nacute = 556;
                  t2.umacron = 556;
                  t2.Ncaron = 722;
                  t2.Iacute = 278;
                  t2.plusminus = 584;
                  t2.brokenbar = 260;
                  t2.registered = 737;
                  t2.Gbreve = 778;
                  t2.Idotaccent = 278;
                  t2.summation = 600;
                  t2.Egrave = 667;
                  t2.racute = 333;
                  t2.omacron = 556;
                  t2.Zacute = 611;
                  t2.Zcaron = 611;
                  t2.greaterequal = 549;
                  t2.Eth = 722;
                  t2.Ccedilla = 722;
                  t2.lcommaaccent = 222;
                  t2.tcaron = 317;
                  t2.eogonek = 556;
                  t2.Uogonek = 722;
                  t2.Aacute = 667;
                  t2.Adieresis = 667;
                  t2.egrave = 556;
                  t2.zacute = 500;
                  t2.iogonek = 222;
                  t2.Oacute = 778;
                  t2.oacute = 556;
                  t2.amacron = 556;
                  t2.sacute = 500;
                  t2.idieresis = 278;
                  t2.Ocircumflex = 778;
                  t2.Ugrave = 722;
                  t2.Delta = 612;
                  t2.thorn = 556;
                  t2.twosuperior = 333;
                  t2.Odieresis = 778;
                  t2.mu = 556;
                  t2.igrave = 278;
                  t2.ohungarumlaut = 556;
                  t2.Eogonek = 667;
                  t2.dcroat = 556;
                  t2.threequarters = 834;
                  t2.Scedilla = 667;
                  t2.lcaron = 299;
                  t2.Kcommaaccent = 667;
                  t2.Lacute = 556;
                  t2.trademark = 1e3;
                  t2.edotaccent = 556;
                  t2.Igrave = 278;
                  t2.Imacron = 278;
                  t2.Lcaron = 556;
                  t2.onehalf = 834;
                  t2.lessequal = 549;
                  t2.ocircumflex = 556;
                  t2.ntilde = 556;
                  t2.Uhungarumlaut = 722;
                  t2.Eacute = 667;
                  t2.emacron = 556;
                  t2.gbreve = 556;
                  t2.onequarter = 834;
                  t2.Scaron = 667;
                  t2.Scommaaccent = 667;
                  t2.Ohungarumlaut = 778;
                  t2.degree = 400;
                  t2.ograve = 556;
                  t2.Ccaron = 722;
                  t2.ugrave = 556;
                  t2.radical = 453;
                  t2.Dcaron = 722;
                  t2.rcommaaccent = 333;
                  t2.Ntilde = 722;
                  t2.otilde = 556;
                  t2.Rcommaaccent = 722;
                  t2.Lcommaaccent = 556;
                  t2.Atilde = 667;
                  t2.Aogonek = 667;
                  t2.Aring = 667;
                  t2.Otilde = 778;
                  t2.zdotaccent = 500;
                  t2.Ecaron = 667;
                  t2.Iogonek = 278;
                  t2.kcommaaccent = 500;
                  t2.minus = 584;
                  t2.Icircumflex = 278;
                  t2.ncaron = 556;
                  t2.tcommaaccent = 278;
                  t2.logicalnot = 584;
                  t2.odieresis = 556;
                  t2.udieresis = 556;
                  t2.notequal = 549;
                  t2.gcommaaccent = 556;
                  t2.eth = 556;
                  t2.zcaron = 500;
                  t2.ncommaaccent = 556;
                  t2.onesuperior = 333;
                  t2.imacron = 278;
                  t2.Euro = 556;
                });
                t["Helvetica-Bold"] = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 278;
                  t2.exclam = 333;
                  t2.quotedbl = 474;
                  t2.numbersign = 556;
                  t2.dollar = 556;
                  t2.percent = 889;
                  t2.ampersand = 722;
                  t2.quoteright = 278;
                  t2.parenleft = 333;
                  t2.parenright = 333;
                  t2.asterisk = 389;
                  t2.plus = 584;
                  t2.comma = 278;
                  t2.hyphen = 333;
                  t2.period = 278;
                  t2.slash = 278;
                  t2.zero = 556;
                  t2.one = 556;
                  t2.two = 556;
                  t2.three = 556;
                  t2.four = 556;
                  t2.five = 556;
                  t2.six = 556;
                  t2.seven = 556;
                  t2.eight = 556;
                  t2.nine = 556;
                  t2.colon = 333;
                  t2.semicolon = 333;
                  t2.less = 584;
                  t2.equal = 584;
                  t2.greater = 584;
                  t2.question = 611;
                  t2.at = 975;
                  t2.A = 722;
                  t2.B = 722;
                  t2.C = 722;
                  t2.D = 722;
                  t2.E = 667;
                  t2.F = 611;
                  t2.G = 778;
                  t2.H = 722;
                  t2.I = 278;
                  t2.J = 556;
                  t2.K = 722;
                  t2.L = 611;
                  t2.M = 833;
                  t2.N = 722;
                  t2.O = 778;
                  t2.P = 667;
                  t2.Q = 778;
                  t2.R = 722;
                  t2.S = 667;
                  t2.T = 611;
                  t2.U = 722;
                  t2.V = 667;
                  t2.W = 944;
                  t2.X = 667;
                  t2.Y = 667;
                  t2.Z = 611;
                  t2.bracketleft = 333;
                  t2.backslash = 278;
                  t2.bracketright = 333;
                  t2.asciicircum = 584;
                  t2.underscore = 556;
                  t2.quoteleft = 278;
                  t2.a = 556;
                  t2.b = 611;
                  t2.c = 556;
                  t2.d = 611;
                  t2.e = 556;
                  t2.f = 333;
                  t2.g = 611;
                  t2.h = 611;
                  t2.i = 278;
                  t2.j = 278;
                  t2.k = 556;
                  t2.l = 278;
                  t2.m = 889;
                  t2.n = 611;
                  t2.o = 611;
                  t2.p = 611;
                  t2.q = 611;
                  t2.r = 389;
                  t2.s = 556;
                  t2.t = 333;
                  t2.u = 611;
                  t2.v = 556;
                  t2.w = 778;
                  t2.x = 556;
                  t2.y = 556;
                  t2.z = 500;
                  t2.braceleft = 389;
                  t2.bar = 280;
                  t2.braceright = 389;
                  t2.asciitilde = 584;
                  t2.exclamdown = 333;
                  t2.cent = 556;
                  t2.sterling = 556;
                  t2.fraction = 167;
                  t2.yen = 556;
                  t2.florin = 556;
                  t2.section = 556;
                  t2.currency = 556;
                  t2.quotesingle = 238;
                  t2.quotedblleft = 500;
                  t2.guillemotleft = 556;
                  t2.guilsinglleft = 333;
                  t2.guilsinglright = 333;
                  t2.fi = 611;
                  t2.fl = 611;
                  t2.endash = 556;
                  t2.dagger = 556;
                  t2.daggerdbl = 556;
                  t2.periodcentered = 278;
                  t2.paragraph = 556;
                  t2.bullet = 350;
                  t2.quotesinglbase = 278;
                  t2.quotedblbase = 500;
                  t2.quotedblright = 500;
                  t2.guillemotright = 556;
                  t2.ellipsis = 1e3;
                  t2.perthousand = 1e3;
                  t2.questiondown = 611;
                  t2.grave = 333;
                  t2.acute = 333;
                  t2.circumflex = 333;
                  t2.tilde = 333;
                  t2.macron = 333;
                  t2.breve = 333;
                  t2.dotaccent = 333;
                  t2.dieresis = 333;
                  t2.ring = 333;
                  t2.cedilla = 333;
                  t2.hungarumlaut = 333;
                  t2.ogonek = 333;
                  t2.caron = 333;
                  t2.emdash = 1e3;
                  t2.AE = 1e3;
                  t2.ordfeminine = 370;
                  t2.Lslash = 611;
                  t2.Oslash = 778;
                  t2.OE = 1e3;
                  t2.ordmasculine = 365;
                  t2.ae = 889;
                  t2.dotlessi = 278;
                  t2.lslash = 278;
                  t2.oslash = 611;
                  t2.oe = 944;
                  t2.germandbls = 611;
                  t2.Idieresis = 278;
                  t2.eacute = 556;
                  t2.abreve = 556;
                  t2.uhungarumlaut = 611;
                  t2.ecaron = 556;
                  t2.Ydieresis = 667;
                  t2.divide = 584;
                  t2.Yacute = 667;
                  t2.Acircumflex = 722;
                  t2.aacute = 556;
                  t2.Ucircumflex = 722;
                  t2.yacute = 556;
                  t2.scommaaccent = 556;
                  t2.ecircumflex = 556;
                  t2.Uring = 722;
                  t2.Udieresis = 722;
                  t2.aogonek = 556;
                  t2.Uacute = 722;
                  t2.uogonek = 611;
                  t2.Edieresis = 667;
                  t2.Dcroat = 722;
                  t2.commaaccent = 250;
                  t2.copyright = 737;
                  t2.Emacron = 667;
                  t2.ccaron = 556;
                  t2.aring = 556;
                  t2.Ncommaaccent = 722;
                  t2.lacute = 278;
                  t2.agrave = 556;
                  t2.Tcommaaccent = 611;
                  t2.Cacute = 722;
                  t2.atilde = 556;
                  t2.Edotaccent = 667;
                  t2.scaron = 556;
                  t2.scedilla = 556;
                  t2.iacute = 278;
                  t2.lozenge = 494;
                  t2.Rcaron = 722;
                  t2.Gcommaaccent = 778;
                  t2.ucircumflex = 611;
                  t2.acircumflex = 556;
                  t2.Amacron = 722;
                  t2.rcaron = 389;
                  t2.ccedilla = 556;
                  t2.Zdotaccent = 611;
                  t2.Thorn = 667;
                  t2.Omacron = 778;
                  t2.Racute = 722;
                  t2.Sacute = 667;
                  t2.dcaron = 743;
                  t2.Umacron = 722;
                  t2.uring = 611;
                  t2.threesuperior = 333;
                  t2.Ograve = 778;
                  t2.Agrave = 722;
                  t2.Abreve = 722;
                  t2.multiply = 584;
                  t2.uacute = 611;
                  t2.Tcaron = 611;
                  t2.partialdiff = 494;
                  t2.ydieresis = 556;
                  t2.Nacute = 722;
                  t2.icircumflex = 278;
                  t2.Ecircumflex = 667;
                  t2.adieresis = 556;
                  t2.edieresis = 556;
                  t2.cacute = 556;
                  t2.nacute = 611;
                  t2.umacron = 611;
                  t2.Ncaron = 722;
                  t2.Iacute = 278;
                  t2.plusminus = 584;
                  t2.brokenbar = 280;
                  t2.registered = 737;
                  t2.Gbreve = 778;
                  t2.Idotaccent = 278;
                  t2.summation = 600;
                  t2.Egrave = 667;
                  t2.racute = 389;
                  t2.omacron = 611;
                  t2.Zacute = 611;
                  t2.Zcaron = 611;
                  t2.greaterequal = 549;
                  t2.Eth = 722;
                  t2.Ccedilla = 722;
                  t2.lcommaaccent = 278;
                  t2.tcaron = 389;
                  t2.eogonek = 556;
                  t2.Uogonek = 722;
                  t2.Aacute = 722;
                  t2.Adieresis = 722;
                  t2.egrave = 556;
                  t2.zacute = 500;
                  t2.iogonek = 278;
                  t2.Oacute = 778;
                  t2.oacute = 611;
                  t2.amacron = 556;
                  t2.sacute = 556;
                  t2.idieresis = 278;
                  t2.Ocircumflex = 778;
                  t2.Ugrave = 722;
                  t2.Delta = 612;
                  t2.thorn = 611;
                  t2.twosuperior = 333;
                  t2.Odieresis = 778;
                  t2.mu = 611;
                  t2.igrave = 278;
                  t2.ohungarumlaut = 611;
                  t2.Eogonek = 667;
                  t2.dcroat = 611;
                  t2.threequarters = 834;
                  t2.Scedilla = 667;
                  t2.lcaron = 400;
                  t2.Kcommaaccent = 722;
                  t2.Lacute = 611;
                  t2.trademark = 1e3;
                  t2.edotaccent = 556;
                  t2.Igrave = 278;
                  t2.Imacron = 278;
                  t2.Lcaron = 611;
                  t2.onehalf = 834;
                  t2.lessequal = 549;
                  t2.ocircumflex = 611;
                  t2.ntilde = 611;
                  t2.Uhungarumlaut = 722;
                  t2.Eacute = 667;
                  t2.emacron = 556;
                  t2.gbreve = 611;
                  t2.onequarter = 834;
                  t2.Scaron = 667;
                  t2.Scommaaccent = 667;
                  t2.Ohungarumlaut = 778;
                  t2.degree = 400;
                  t2.ograve = 611;
                  t2.Ccaron = 722;
                  t2.ugrave = 611;
                  t2.radical = 549;
                  t2.Dcaron = 722;
                  t2.rcommaaccent = 389;
                  t2.Ntilde = 722;
                  t2.otilde = 611;
                  t2.Rcommaaccent = 722;
                  t2.Lcommaaccent = 611;
                  t2.Atilde = 722;
                  t2.Aogonek = 722;
                  t2.Aring = 722;
                  t2.Otilde = 778;
                  t2.zdotaccent = 500;
                  t2.Ecaron = 667;
                  t2.Iogonek = 278;
                  t2.kcommaaccent = 556;
                  t2.minus = 584;
                  t2.Icircumflex = 278;
                  t2.ncaron = 611;
                  t2.tcommaaccent = 333;
                  t2.logicalnot = 584;
                  t2.odieresis = 611;
                  t2.udieresis = 611;
                  t2.notequal = 549;
                  t2.gcommaaccent = 611;
                  t2.eth = 611;
                  t2.zcaron = 500;
                  t2.ncommaaccent = 611;
                  t2.onesuperior = 333;
                  t2.imacron = 278;
                  t2.Euro = 556;
                });
                t["Helvetica-BoldOblique"] = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 278;
                  t2.exclam = 333;
                  t2.quotedbl = 474;
                  t2.numbersign = 556;
                  t2.dollar = 556;
                  t2.percent = 889;
                  t2.ampersand = 722;
                  t2.quoteright = 278;
                  t2.parenleft = 333;
                  t2.parenright = 333;
                  t2.asterisk = 389;
                  t2.plus = 584;
                  t2.comma = 278;
                  t2.hyphen = 333;
                  t2.period = 278;
                  t2.slash = 278;
                  t2.zero = 556;
                  t2.one = 556;
                  t2.two = 556;
                  t2.three = 556;
                  t2.four = 556;
                  t2.five = 556;
                  t2.six = 556;
                  t2.seven = 556;
                  t2.eight = 556;
                  t2.nine = 556;
                  t2.colon = 333;
                  t2.semicolon = 333;
                  t2.less = 584;
                  t2.equal = 584;
                  t2.greater = 584;
                  t2.question = 611;
                  t2.at = 975;
                  t2.A = 722;
                  t2.B = 722;
                  t2.C = 722;
                  t2.D = 722;
                  t2.E = 667;
                  t2.F = 611;
                  t2.G = 778;
                  t2.H = 722;
                  t2.I = 278;
                  t2.J = 556;
                  t2.K = 722;
                  t2.L = 611;
                  t2.M = 833;
                  t2.N = 722;
                  t2.O = 778;
                  t2.P = 667;
                  t2.Q = 778;
                  t2.R = 722;
                  t2.S = 667;
                  t2.T = 611;
                  t2.U = 722;
                  t2.V = 667;
                  t2.W = 944;
                  t2.X = 667;
                  t2.Y = 667;
                  t2.Z = 611;
                  t2.bracketleft = 333;
                  t2.backslash = 278;
                  t2.bracketright = 333;
                  t2.asciicircum = 584;
                  t2.underscore = 556;
                  t2.quoteleft = 278;
                  t2.a = 556;
                  t2.b = 611;
                  t2.c = 556;
                  t2.d = 611;
                  t2.e = 556;
                  t2.f = 333;
                  t2.g = 611;
                  t2.h = 611;
                  t2.i = 278;
                  t2.j = 278;
                  t2.k = 556;
                  t2.l = 278;
                  t2.m = 889;
                  t2.n = 611;
                  t2.o = 611;
                  t2.p = 611;
                  t2.q = 611;
                  t2.r = 389;
                  t2.s = 556;
                  t2.t = 333;
                  t2.u = 611;
                  t2.v = 556;
                  t2.w = 778;
                  t2.x = 556;
                  t2.y = 556;
                  t2.z = 500;
                  t2.braceleft = 389;
                  t2.bar = 280;
                  t2.braceright = 389;
                  t2.asciitilde = 584;
                  t2.exclamdown = 333;
                  t2.cent = 556;
                  t2.sterling = 556;
                  t2.fraction = 167;
                  t2.yen = 556;
                  t2.florin = 556;
                  t2.section = 556;
                  t2.currency = 556;
                  t2.quotesingle = 238;
                  t2.quotedblleft = 500;
                  t2.guillemotleft = 556;
                  t2.guilsinglleft = 333;
                  t2.guilsinglright = 333;
                  t2.fi = 611;
                  t2.fl = 611;
                  t2.endash = 556;
                  t2.dagger = 556;
                  t2.daggerdbl = 556;
                  t2.periodcentered = 278;
                  t2.paragraph = 556;
                  t2.bullet = 350;
                  t2.quotesinglbase = 278;
                  t2.quotedblbase = 500;
                  t2.quotedblright = 500;
                  t2.guillemotright = 556;
                  t2.ellipsis = 1e3;
                  t2.perthousand = 1e3;
                  t2.questiondown = 611;
                  t2.grave = 333;
                  t2.acute = 333;
                  t2.circumflex = 333;
                  t2.tilde = 333;
                  t2.macron = 333;
                  t2.breve = 333;
                  t2.dotaccent = 333;
                  t2.dieresis = 333;
                  t2.ring = 333;
                  t2.cedilla = 333;
                  t2.hungarumlaut = 333;
                  t2.ogonek = 333;
                  t2.caron = 333;
                  t2.emdash = 1e3;
                  t2.AE = 1e3;
                  t2.ordfeminine = 370;
                  t2.Lslash = 611;
                  t2.Oslash = 778;
                  t2.OE = 1e3;
                  t2.ordmasculine = 365;
                  t2.ae = 889;
                  t2.dotlessi = 278;
                  t2.lslash = 278;
                  t2.oslash = 611;
                  t2.oe = 944;
                  t2.germandbls = 611;
                  t2.Idieresis = 278;
                  t2.eacute = 556;
                  t2.abreve = 556;
                  t2.uhungarumlaut = 611;
                  t2.ecaron = 556;
                  t2.Ydieresis = 667;
                  t2.divide = 584;
                  t2.Yacute = 667;
                  t2.Acircumflex = 722;
                  t2.aacute = 556;
                  t2.Ucircumflex = 722;
                  t2.yacute = 556;
                  t2.scommaaccent = 556;
                  t2.ecircumflex = 556;
                  t2.Uring = 722;
                  t2.Udieresis = 722;
                  t2.aogonek = 556;
                  t2.Uacute = 722;
                  t2.uogonek = 611;
                  t2.Edieresis = 667;
                  t2.Dcroat = 722;
                  t2.commaaccent = 250;
                  t2.copyright = 737;
                  t2.Emacron = 667;
                  t2.ccaron = 556;
                  t2.aring = 556;
                  t2.Ncommaaccent = 722;
                  t2.lacute = 278;
                  t2.agrave = 556;
                  t2.Tcommaaccent = 611;
                  t2.Cacute = 722;
                  t2.atilde = 556;
                  t2.Edotaccent = 667;
                  t2.scaron = 556;
                  t2.scedilla = 556;
                  t2.iacute = 278;
                  t2.lozenge = 494;
                  t2.Rcaron = 722;
                  t2.Gcommaaccent = 778;
                  t2.ucircumflex = 611;
                  t2.acircumflex = 556;
                  t2.Amacron = 722;
                  t2.rcaron = 389;
                  t2.ccedilla = 556;
                  t2.Zdotaccent = 611;
                  t2.Thorn = 667;
                  t2.Omacron = 778;
                  t2.Racute = 722;
                  t2.Sacute = 667;
                  t2.dcaron = 743;
                  t2.Umacron = 722;
                  t2.uring = 611;
                  t2.threesuperior = 333;
                  t2.Ograve = 778;
                  t2.Agrave = 722;
                  t2.Abreve = 722;
                  t2.multiply = 584;
                  t2.uacute = 611;
                  t2.Tcaron = 611;
                  t2.partialdiff = 494;
                  t2.ydieresis = 556;
                  t2.Nacute = 722;
                  t2.icircumflex = 278;
                  t2.Ecircumflex = 667;
                  t2.adieresis = 556;
                  t2.edieresis = 556;
                  t2.cacute = 556;
                  t2.nacute = 611;
                  t2.umacron = 611;
                  t2.Ncaron = 722;
                  t2.Iacute = 278;
                  t2.plusminus = 584;
                  t2.brokenbar = 280;
                  t2.registered = 737;
                  t2.Gbreve = 778;
                  t2.Idotaccent = 278;
                  t2.summation = 600;
                  t2.Egrave = 667;
                  t2.racute = 389;
                  t2.omacron = 611;
                  t2.Zacute = 611;
                  t2.Zcaron = 611;
                  t2.greaterequal = 549;
                  t2.Eth = 722;
                  t2.Ccedilla = 722;
                  t2.lcommaaccent = 278;
                  t2.tcaron = 389;
                  t2.eogonek = 556;
                  t2.Uogonek = 722;
                  t2.Aacute = 722;
                  t2.Adieresis = 722;
                  t2.egrave = 556;
                  t2.zacute = 500;
                  t2.iogonek = 278;
                  t2.Oacute = 778;
                  t2.oacute = 611;
                  t2.amacron = 556;
                  t2.sacute = 556;
                  t2.idieresis = 278;
                  t2.Ocircumflex = 778;
                  t2.Ugrave = 722;
                  t2.Delta = 612;
                  t2.thorn = 611;
                  t2.twosuperior = 333;
                  t2.Odieresis = 778;
                  t2.mu = 611;
                  t2.igrave = 278;
                  t2.ohungarumlaut = 611;
                  t2.Eogonek = 667;
                  t2.dcroat = 611;
                  t2.threequarters = 834;
                  t2.Scedilla = 667;
                  t2.lcaron = 400;
                  t2.Kcommaaccent = 722;
                  t2.Lacute = 611;
                  t2.trademark = 1e3;
                  t2.edotaccent = 556;
                  t2.Igrave = 278;
                  t2.Imacron = 278;
                  t2.Lcaron = 611;
                  t2.onehalf = 834;
                  t2.lessequal = 549;
                  t2.ocircumflex = 611;
                  t2.ntilde = 611;
                  t2.Uhungarumlaut = 722;
                  t2.Eacute = 667;
                  t2.emacron = 556;
                  t2.gbreve = 611;
                  t2.onequarter = 834;
                  t2.Scaron = 667;
                  t2.Scommaaccent = 667;
                  t2.Ohungarumlaut = 778;
                  t2.degree = 400;
                  t2.ograve = 611;
                  t2.Ccaron = 722;
                  t2.ugrave = 611;
                  t2.radical = 549;
                  t2.Dcaron = 722;
                  t2.rcommaaccent = 389;
                  t2.Ntilde = 722;
                  t2.otilde = 611;
                  t2.Rcommaaccent = 722;
                  t2.Lcommaaccent = 611;
                  t2.Atilde = 722;
                  t2.Aogonek = 722;
                  t2.Aring = 722;
                  t2.Otilde = 778;
                  t2.zdotaccent = 500;
                  t2.Ecaron = 667;
                  t2.Iogonek = 278;
                  t2.kcommaaccent = 556;
                  t2.minus = 584;
                  t2.Icircumflex = 278;
                  t2.ncaron = 611;
                  t2.tcommaaccent = 333;
                  t2.logicalnot = 584;
                  t2.odieresis = 611;
                  t2.udieresis = 611;
                  t2.notequal = 549;
                  t2.gcommaaccent = 611;
                  t2.eth = 611;
                  t2.zcaron = 500;
                  t2.ncommaaccent = 611;
                  t2.onesuperior = 333;
                  t2.imacron = 278;
                  t2.Euro = 556;
                });
                t["Helvetica-Oblique"] = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 278;
                  t2.exclam = 278;
                  t2.quotedbl = 355;
                  t2.numbersign = 556;
                  t2.dollar = 556;
                  t2.percent = 889;
                  t2.ampersand = 667;
                  t2.quoteright = 222;
                  t2.parenleft = 333;
                  t2.parenright = 333;
                  t2.asterisk = 389;
                  t2.plus = 584;
                  t2.comma = 278;
                  t2.hyphen = 333;
                  t2.period = 278;
                  t2.slash = 278;
                  t2.zero = 556;
                  t2.one = 556;
                  t2.two = 556;
                  t2.three = 556;
                  t2.four = 556;
                  t2.five = 556;
                  t2.six = 556;
                  t2.seven = 556;
                  t2.eight = 556;
                  t2.nine = 556;
                  t2.colon = 278;
                  t2.semicolon = 278;
                  t2.less = 584;
                  t2.equal = 584;
                  t2.greater = 584;
                  t2.question = 556;
                  t2.at = 1015;
                  t2.A = 667;
                  t2.B = 667;
                  t2.C = 722;
                  t2.D = 722;
                  t2.E = 667;
                  t2.F = 611;
                  t2.G = 778;
                  t2.H = 722;
                  t2.I = 278;
                  t2.J = 500;
                  t2.K = 667;
                  t2.L = 556;
                  t2.M = 833;
                  t2.N = 722;
                  t2.O = 778;
                  t2.P = 667;
                  t2.Q = 778;
                  t2.R = 722;
                  t2.S = 667;
                  t2.T = 611;
                  t2.U = 722;
                  t2.V = 667;
                  t2.W = 944;
                  t2.X = 667;
                  t2.Y = 667;
                  t2.Z = 611;
                  t2.bracketleft = 278;
                  t2.backslash = 278;
                  t2.bracketright = 278;
                  t2.asciicircum = 469;
                  t2.underscore = 556;
                  t2.quoteleft = 222;
                  t2.a = 556;
                  t2.b = 556;
                  t2.c = 500;
                  t2.d = 556;
                  t2.e = 556;
                  t2.f = 278;
                  t2.g = 556;
                  t2.h = 556;
                  t2.i = 222;
                  t2.j = 222;
                  t2.k = 500;
                  t2.l = 222;
                  t2.m = 833;
                  t2.n = 556;
                  t2.o = 556;
                  t2.p = 556;
                  t2.q = 556;
                  t2.r = 333;
                  t2.s = 500;
                  t2.t = 278;
                  t2.u = 556;
                  t2.v = 500;
                  t2.w = 722;
                  t2.x = 500;
                  t2.y = 500;
                  t2.z = 500;
                  t2.braceleft = 334;
                  t2.bar = 260;
                  t2.braceright = 334;
                  t2.asciitilde = 584;
                  t2.exclamdown = 333;
                  t2.cent = 556;
                  t2.sterling = 556;
                  t2.fraction = 167;
                  t2.yen = 556;
                  t2.florin = 556;
                  t2.section = 556;
                  t2.currency = 556;
                  t2.quotesingle = 191;
                  t2.quotedblleft = 333;
                  t2.guillemotleft = 556;
                  t2.guilsinglleft = 333;
                  t2.guilsinglright = 333;
                  t2.fi = 500;
                  t2.fl = 500;
                  t2.endash = 556;
                  t2.dagger = 556;
                  t2.daggerdbl = 556;
                  t2.periodcentered = 278;
                  t2.paragraph = 537;
                  t2.bullet = 350;
                  t2.quotesinglbase = 222;
                  t2.quotedblbase = 333;
                  t2.quotedblright = 333;
                  t2.guillemotright = 556;
                  t2.ellipsis = 1e3;
                  t2.perthousand = 1e3;
                  t2.questiondown = 611;
                  t2.grave = 333;
                  t2.acute = 333;
                  t2.circumflex = 333;
                  t2.tilde = 333;
                  t2.macron = 333;
                  t2.breve = 333;
                  t2.dotaccent = 333;
                  t2.dieresis = 333;
                  t2.ring = 333;
                  t2.cedilla = 333;
                  t2.hungarumlaut = 333;
                  t2.ogonek = 333;
                  t2.caron = 333;
                  t2.emdash = 1e3;
                  t2.AE = 1e3;
                  t2.ordfeminine = 370;
                  t2.Lslash = 556;
                  t2.Oslash = 778;
                  t2.OE = 1e3;
                  t2.ordmasculine = 365;
                  t2.ae = 889;
                  t2.dotlessi = 278;
                  t2.lslash = 222;
                  t2.oslash = 611;
                  t2.oe = 944;
                  t2.germandbls = 611;
                  t2.Idieresis = 278;
                  t2.eacute = 556;
                  t2.abreve = 556;
                  t2.uhungarumlaut = 556;
                  t2.ecaron = 556;
                  t2.Ydieresis = 667;
                  t2.divide = 584;
                  t2.Yacute = 667;
                  t2.Acircumflex = 667;
                  t2.aacute = 556;
                  t2.Ucircumflex = 722;
                  t2.yacute = 500;
                  t2.scommaaccent = 500;
                  t2.ecircumflex = 556;
                  t2.Uring = 722;
                  t2.Udieresis = 722;
                  t2.aogonek = 556;
                  t2.Uacute = 722;
                  t2.uogonek = 556;
                  t2.Edieresis = 667;
                  t2.Dcroat = 722;
                  t2.commaaccent = 250;
                  t2.copyright = 737;
                  t2.Emacron = 667;
                  t2.ccaron = 500;
                  t2.aring = 556;
                  t2.Ncommaaccent = 722;
                  t2.lacute = 222;
                  t2.agrave = 556;
                  t2.Tcommaaccent = 611;
                  t2.Cacute = 722;
                  t2.atilde = 556;
                  t2.Edotaccent = 667;
                  t2.scaron = 500;
                  t2.scedilla = 500;
                  t2.iacute = 278;
                  t2.lozenge = 471;
                  t2.Rcaron = 722;
                  t2.Gcommaaccent = 778;
                  t2.ucircumflex = 556;
                  t2.acircumflex = 556;
                  t2.Amacron = 667;
                  t2.rcaron = 333;
                  t2.ccedilla = 500;
                  t2.Zdotaccent = 611;
                  t2.Thorn = 667;
                  t2.Omacron = 778;
                  t2.Racute = 722;
                  t2.Sacute = 667;
                  t2.dcaron = 643;
                  t2.Umacron = 722;
                  t2.uring = 556;
                  t2.threesuperior = 333;
                  t2.Ograve = 778;
                  t2.Agrave = 667;
                  t2.Abreve = 667;
                  t2.multiply = 584;
                  t2.uacute = 556;
                  t2.Tcaron = 611;
                  t2.partialdiff = 476;
                  t2.ydieresis = 500;
                  t2.Nacute = 722;
                  t2.icircumflex = 278;
                  t2.Ecircumflex = 667;
                  t2.adieresis = 556;
                  t2.edieresis = 556;
                  t2.cacute = 500;
                  t2.nacute = 556;
                  t2.umacron = 556;
                  t2.Ncaron = 722;
                  t2.Iacute = 278;
                  t2.plusminus = 584;
                  t2.brokenbar = 260;
                  t2.registered = 737;
                  t2.Gbreve = 778;
                  t2.Idotaccent = 278;
                  t2.summation = 600;
                  t2.Egrave = 667;
                  t2.racute = 333;
                  t2.omacron = 556;
                  t2.Zacute = 611;
                  t2.Zcaron = 611;
                  t2.greaterequal = 549;
                  t2.Eth = 722;
                  t2.Ccedilla = 722;
                  t2.lcommaaccent = 222;
                  t2.tcaron = 317;
                  t2.eogonek = 556;
                  t2.Uogonek = 722;
                  t2.Aacute = 667;
                  t2.Adieresis = 667;
                  t2.egrave = 556;
                  t2.zacute = 500;
                  t2.iogonek = 222;
                  t2.Oacute = 778;
                  t2.oacute = 556;
                  t2.amacron = 556;
                  t2.sacute = 500;
                  t2.idieresis = 278;
                  t2.Ocircumflex = 778;
                  t2.Ugrave = 722;
                  t2.Delta = 612;
                  t2.thorn = 556;
                  t2.twosuperior = 333;
                  t2.Odieresis = 778;
                  t2.mu = 556;
                  t2.igrave = 278;
                  t2.ohungarumlaut = 556;
                  t2.Eogonek = 667;
                  t2.dcroat = 556;
                  t2.threequarters = 834;
                  t2.Scedilla = 667;
                  t2.lcaron = 299;
                  t2.Kcommaaccent = 667;
                  t2.Lacute = 556;
                  t2.trademark = 1e3;
                  t2.edotaccent = 556;
                  t2.Igrave = 278;
                  t2.Imacron = 278;
                  t2.Lcaron = 556;
                  t2.onehalf = 834;
                  t2.lessequal = 549;
                  t2.ocircumflex = 556;
                  t2.ntilde = 556;
                  t2.Uhungarumlaut = 722;
                  t2.Eacute = 667;
                  t2.emacron = 556;
                  t2.gbreve = 556;
                  t2.onequarter = 834;
                  t2.Scaron = 667;
                  t2.Scommaaccent = 667;
                  t2.Ohungarumlaut = 778;
                  t2.degree = 400;
                  t2.ograve = 556;
                  t2.Ccaron = 722;
                  t2.ugrave = 556;
                  t2.radical = 453;
                  t2.Dcaron = 722;
                  t2.rcommaaccent = 333;
                  t2.Ntilde = 722;
                  t2.otilde = 556;
                  t2.Rcommaaccent = 722;
                  t2.Lcommaaccent = 556;
                  t2.Atilde = 667;
                  t2.Aogonek = 667;
                  t2.Aring = 667;
                  t2.Otilde = 778;
                  t2.zdotaccent = 500;
                  t2.Ecaron = 667;
                  t2.Iogonek = 278;
                  t2.kcommaaccent = 500;
                  t2.minus = 584;
                  t2.Icircumflex = 278;
                  t2.ncaron = 556;
                  t2.tcommaaccent = 278;
                  t2.logicalnot = 584;
                  t2.odieresis = 556;
                  t2.udieresis = 556;
                  t2.notequal = 549;
                  t2.gcommaaccent = 556;
                  t2.eth = 556;
                  t2.zcaron = 500;
                  t2.ncommaaccent = 556;
                  t2.onesuperior = 333;
                  t2.imacron = 278;
                  t2.Euro = 556;
                });
                t.Symbol = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 250;
                  t2.exclam = 333;
                  t2.universal = 713;
                  t2.numbersign = 500;
                  t2.existential = 549;
                  t2.percent = 833;
                  t2.ampersand = 778;
                  t2.suchthat = 439;
                  t2.parenleft = 333;
                  t2.parenright = 333;
                  t2.asteriskmath = 500;
                  t2.plus = 549;
                  t2.comma = 250;
                  t2.minus = 549;
                  t2.period = 250;
                  t2.slash = 278;
                  t2.zero = 500;
                  t2.one = 500;
                  t2.two = 500;
                  t2.three = 500;
                  t2.four = 500;
                  t2.five = 500;
                  t2.six = 500;
                  t2.seven = 500;
                  t2.eight = 500;
                  t2.nine = 500;
                  t2.colon = 278;
                  t2.semicolon = 278;
                  t2.less = 549;
                  t2.equal = 549;
                  t2.greater = 549;
                  t2.question = 444;
                  t2.congruent = 549;
                  t2.Alpha = 722;
                  t2.Beta = 667;
                  t2.Chi = 722;
                  t2.Delta = 612;
                  t2.Epsilon = 611;
                  t2.Phi = 763;
                  t2.Gamma = 603;
                  t2.Eta = 722;
                  t2.Iota = 333;
                  t2.theta1 = 631;
                  t2.Kappa = 722;
                  t2.Lambda = 686;
                  t2.Mu = 889;
                  t2.Nu = 722;
                  t2.Omicron = 722;
                  t2.Pi = 768;
                  t2.Theta = 741;
                  t2.Rho = 556;
                  t2.Sigma = 592;
                  t2.Tau = 611;
                  t2.Upsilon = 690;
                  t2.sigma1 = 439;
                  t2.Omega = 768;
                  t2.Xi = 645;
                  t2.Psi = 795;
                  t2.Zeta = 611;
                  t2.bracketleft = 333;
                  t2.therefore = 863;
                  t2.bracketright = 333;
                  t2.perpendicular = 658;
                  t2.underscore = 500;
                  t2.radicalex = 500;
                  t2.alpha = 631;
                  t2.beta = 549;
                  t2.chi = 549;
                  t2.delta = 494;
                  t2.epsilon = 439;
                  t2.phi = 521;
                  t2.gamma = 411;
                  t2.eta = 603;
                  t2.iota = 329;
                  t2.phi1 = 603;
                  t2.kappa = 549;
                  t2.lambda = 549;
                  t2.mu = 576;
                  t2.nu = 521;
                  t2.omicron = 549;
                  t2.pi = 549;
                  t2.theta = 521;
                  t2.rho = 549;
                  t2.sigma = 603;
                  t2.tau = 439;
                  t2.upsilon = 576;
                  t2.omega1 = 713;
                  t2.omega = 686;
                  t2.xi = 493;
                  t2.psi = 686;
                  t2.zeta = 494;
                  t2.braceleft = 480;
                  t2.bar = 200;
                  t2.braceright = 480;
                  t2.similar = 549;
                  t2.Euro = 750;
                  t2.Upsilon1 = 620;
                  t2.minute = 247;
                  t2.lessequal = 549;
                  t2.fraction = 167;
                  t2.infinity = 713;
                  t2.florin = 500;
                  t2.club = 753;
                  t2.diamond = 753;
                  t2.heart = 753;
                  t2.spade = 753;
                  t2.arrowboth = 1042;
                  t2.arrowleft = 987;
                  t2.arrowup = 603;
                  t2.arrowright = 987;
                  t2.arrowdown = 603;
                  t2.degree = 400;
                  t2.plusminus = 549;
                  t2.second = 411;
                  t2.greaterequal = 549;
                  t2.multiply = 549;
                  t2.proportional = 713;
                  t2.partialdiff = 494;
                  t2.bullet = 460;
                  t2.divide = 549;
                  t2.notequal = 549;
                  t2.equivalence = 549;
                  t2.approxequal = 549;
                  t2.ellipsis = 1e3;
                  t2.arrowvertex = 603;
                  t2.arrowhorizex = 1e3;
                  t2.carriagereturn = 658;
                  t2.aleph = 823;
                  t2.Ifraktur = 686;
                  t2.Rfraktur = 795;
                  t2.weierstrass = 987;
                  t2.circlemultiply = 768;
                  t2.circleplus = 768;
                  t2.emptyset = 823;
                  t2.intersection = 768;
                  t2.union = 768;
                  t2.propersuperset = 713;
                  t2.reflexsuperset = 713;
                  t2.notsubset = 713;
                  t2.propersubset = 713;
                  t2.reflexsubset = 713;
                  t2.element = 713;
                  t2.notelement = 713;
                  t2.angle = 768;
                  t2.gradient = 713;
                  t2.registerserif = 790;
                  t2.copyrightserif = 790;
                  t2.trademarkserif = 890;
                  t2.product = 823;
                  t2.radical = 549;
                  t2.dotmath = 250;
                  t2.logicalnot = 713;
                  t2.logicaland = 603;
                  t2.logicalor = 603;
                  t2.arrowdblboth = 1042;
                  t2.arrowdblleft = 987;
                  t2.arrowdblup = 603;
                  t2.arrowdblright = 987;
                  t2.arrowdbldown = 603;
                  t2.lozenge = 494;
                  t2.angleleft = 329;
                  t2.registersans = 790;
                  t2.copyrightsans = 790;
                  t2.trademarksans = 786;
                  t2.summation = 713;
                  t2.parenlefttp = 384;
                  t2.parenleftex = 384;
                  t2.parenleftbt = 384;
                  t2.bracketlefttp = 384;
                  t2.bracketleftex = 384;
                  t2.bracketleftbt = 384;
                  t2.bracelefttp = 494;
                  t2.braceleftmid = 494;
                  t2.braceleftbt = 494;
                  t2.braceex = 494;
                  t2.angleright = 329;
                  t2.integral = 274;
                  t2.integraltp = 686;
                  t2.integralex = 686;
                  t2.integralbt = 686;
                  t2.parenrighttp = 384;
                  t2.parenrightex = 384;
                  t2.parenrightbt = 384;
                  t2.bracketrighttp = 384;
                  t2.bracketrightex = 384;
                  t2.bracketrightbt = 384;
                  t2.bracerighttp = 494;
                  t2.bracerightmid = 494;
                  t2.bracerightbt = 494;
                  t2.apple = 790;
                });
                t["Times-Roman"] = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 250;
                  t2.exclam = 333;
                  t2.quotedbl = 408;
                  t2.numbersign = 500;
                  t2.dollar = 500;
                  t2.percent = 833;
                  t2.ampersand = 778;
                  t2.quoteright = 333;
                  t2.parenleft = 333;
                  t2.parenright = 333;
                  t2.asterisk = 500;
                  t2.plus = 564;
                  t2.comma = 250;
                  t2.hyphen = 333;
                  t2.period = 250;
                  t2.slash = 278;
                  t2.zero = 500;
                  t2.one = 500;
                  t2.two = 500;
                  t2.three = 500;
                  t2.four = 500;
                  t2.five = 500;
                  t2.six = 500;
                  t2.seven = 500;
                  t2.eight = 500;
                  t2.nine = 500;
                  t2.colon = 278;
                  t2.semicolon = 278;
                  t2.less = 564;
                  t2.equal = 564;
                  t2.greater = 564;
                  t2.question = 444;
                  t2.at = 921;
                  t2.A = 722;
                  t2.B = 667;
                  t2.C = 667;
                  t2.D = 722;
                  t2.E = 611;
                  t2.F = 556;
                  t2.G = 722;
                  t2.H = 722;
                  t2.I = 333;
                  t2.J = 389;
                  t2.K = 722;
                  t2.L = 611;
                  t2.M = 889;
                  t2.N = 722;
                  t2.O = 722;
                  t2.P = 556;
                  t2.Q = 722;
                  t2.R = 667;
                  t2.S = 556;
                  t2.T = 611;
                  t2.U = 722;
                  t2.V = 722;
                  t2.W = 944;
                  t2.X = 722;
                  t2.Y = 722;
                  t2.Z = 611;
                  t2.bracketleft = 333;
                  t2.backslash = 278;
                  t2.bracketright = 333;
                  t2.asciicircum = 469;
                  t2.underscore = 500;
                  t2.quoteleft = 333;
                  t2.a = 444;
                  t2.b = 500;
                  t2.c = 444;
                  t2.d = 500;
                  t2.e = 444;
                  t2.f = 333;
                  t2.g = 500;
                  t2.h = 500;
                  t2.i = 278;
                  t2.j = 278;
                  t2.k = 500;
                  t2.l = 278;
                  t2.m = 778;
                  t2.n = 500;
                  t2.o = 500;
                  t2.p = 500;
                  t2.q = 500;
                  t2.r = 333;
                  t2.s = 389;
                  t2.t = 278;
                  t2.u = 500;
                  t2.v = 500;
                  t2.w = 722;
                  t2.x = 500;
                  t2.y = 500;
                  t2.z = 444;
                  t2.braceleft = 480;
                  t2.bar = 200;
                  t2.braceright = 480;
                  t2.asciitilde = 541;
                  t2.exclamdown = 333;
                  t2.cent = 500;
                  t2.sterling = 500;
                  t2.fraction = 167;
                  t2.yen = 500;
                  t2.florin = 500;
                  t2.section = 500;
                  t2.currency = 500;
                  t2.quotesingle = 180;
                  t2.quotedblleft = 444;
                  t2.guillemotleft = 500;
                  t2.guilsinglleft = 333;
                  t2.guilsinglright = 333;
                  t2.fi = 556;
                  t2.fl = 556;
                  t2.endash = 500;
                  t2.dagger = 500;
                  t2.daggerdbl = 500;
                  t2.periodcentered = 250;
                  t2.paragraph = 453;
                  t2.bullet = 350;
                  t2.quotesinglbase = 333;
                  t2.quotedblbase = 444;
                  t2.quotedblright = 444;
                  t2.guillemotright = 500;
                  t2.ellipsis = 1e3;
                  t2.perthousand = 1e3;
                  t2.questiondown = 444;
                  t2.grave = 333;
                  t2.acute = 333;
                  t2.circumflex = 333;
                  t2.tilde = 333;
                  t2.macron = 333;
                  t2.breve = 333;
                  t2.dotaccent = 333;
                  t2.dieresis = 333;
                  t2.ring = 333;
                  t2.cedilla = 333;
                  t2.hungarumlaut = 333;
                  t2.ogonek = 333;
                  t2.caron = 333;
                  t2.emdash = 1e3;
                  t2.AE = 889;
                  t2.ordfeminine = 276;
                  t2.Lslash = 611;
                  t2.Oslash = 722;
                  t2.OE = 889;
                  t2.ordmasculine = 310;
                  t2.ae = 667;
                  t2.dotlessi = 278;
                  t2.lslash = 278;
                  t2.oslash = 500;
                  t2.oe = 722;
                  t2.germandbls = 500;
                  t2.Idieresis = 333;
                  t2.eacute = 444;
                  t2.abreve = 444;
                  t2.uhungarumlaut = 500;
                  t2.ecaron = 444;
                  t2.Ydieresis = 722;
                  t2.divide = 564;
                  t2.Yacute = 722;
                  t2.Acircumflex = 722;
                  t2.aacute = 444;
                  t2.Ucircumflex = 722;
                  t2.yacute = 500;
                  t2.scommaaccent = 389;
                  t2.ecircumflex = 444;
                  t2.Uring = 722;
                  t2.Udieresis = 722;
                  t2.aogonek = 444;
                  t2.Uacute = 722;
                  t2.uogonek = 500;
                  t2.Edieresis = 611;
                  t2.Dcroat = 722;
                  t2.commaaccent = 250;
                  t2.copyright = 760;
                  t2.Emacron = 611;
                  t2.ccaron = 444;
                  t2.aring = 444;
                  t2.Ncommaaccent = 722;
                  t2.lacute = 278;
                  t2.agrave = 444;
                  t2.Tcommaaccent = 611;
                  t2.Cacute = 667;
                  t2.atilde = 444;
                  t2.Edotaccent = 611;
                  t2.scaron = 389;
                  t2.scedilla = 389;
                  t2.iacute = 278;
                  t2.lozenge = 471;
                  t2.Rcaron = 667;
                  t2.Gcommaaccent = 722;
                  t2.ucircumflex = 500;
                  t2.acircumflex = 444;
                  t2.Amacron = 722;
                  t2.rcaron = 333;
                  t2.ccedilla = 444;
                  t2.Zdotaccent = 611;
                  t2.Thorn = 556;
                  t2.Omacron = 722;
                  t2.Racute = 667;
                  t2.Sacute = 556;
                  t2.dcaron = 588;
                  t2.Umacron = 722;
                  t2.uring = 500;
                  t2.threesuperior = 300;
                  t2.Ograve = 722;
                  t2.Agrave = 722;
                  t2.Abreve = 722;
                  t2.multiply = 564;
                  t2.uacute = 500;
                  t2.Tcaron = 611;
                  t2.partialdiff = 476;
                  t2.ydieresis = 500;
                  t2.Nacute = 722;
                  t2.icircumflex = 278;
                  t2.Ecircumflex = 611;
                  t2.adieresis = 444;
                  t2.edieresis = 444;
                  t2.cacute = 444;
                  t2.nacute = 500;
                  t2.umacron = 500;
                  t2.Ncaron = 722;
                  t2.Iacute = 333;
                  t2.plusminus = 564;
                  t2.brokenbar = 200;
                  t2.registered = 760;
                  t2.Gbreve = 722;
                  t2.Idotaccent = 333;
                  t2.summation = 600;
                  t2.Egrave = 611;
                  t2.racute = 333;
                  t2.omacron = 500;
                  t2.Zacute = 611;
                  t2.Zcaron = 611;
                  t2.greaterequal = 549;
                  t2.Eth = 722;
                  t2.Ccedilla = 667;
                  t2.lcommaaccent = 278;
                  t2.tcaron = 326;
                  t2.eogonek = 444;
                  t2.Uogonek = 722;
                  t2.Aacute = 722;
                  t2.Adieresis = 722;
                  t2.egrave = 444;
                  t2.zacute = 444;
                  t2.iogonek = 278;
                  t2.Oacute = 722;
                  t2.oacute = 500;
                  t2.amacron = 444;
                  t2.sacute = 389;
                  t2.idieresis = 278;
                  t2.Ocircumflex = 722;
                  t2.Ugrave = 722;
                  t2.Delta = 612;
                  t2.thorn = 500;
                  t2.twosuperior = 300;
                  t2.Odieresis = 722;
                  t2.mu = 500;
                  t2.igrave = 278;
                  t2.ohungarumlaut = 500;
                  t2.Eogonek = 611;
                  t2.dcroat = 500;
                  t2.threequarters = 750;
                  t2.Scedilla = 556;
                  t2.lcaron = 344;
                  t2.Kcommaaccent = 722;
                  t2.Lacute = 611;
                  t2.trademark = 980;
                  t2.edotaccent = 444;
                  t2.Igrave = 333;
                  t2.Imacron = 333;
                  t2.Lcaron = 611;
                  t2.onehalf = 750;
                  t2.lessequal = 549;
                  t2.ocircumflex = 500;
                  t2.ntilde = 500;
                  t2.Uhungarumlaut = 722;
                  t2.Eacute = 611;
                  t2.emacron = 444;
                  t2.gbreve = 500;
                  t2.onequarter = 750;
                  t2.Scaron = 556;
                  t2.Scommaaccent = 556;
                  t2.Ohungarumlaut = 722;
                  t2.degree = 400;
                  t2.ograve = 500;
                  t2.Ccaron = 667;
                  t2.ugrave = 500;
                  t2.radical = 453;
                  t2.Dcaron = 722;
                  t2.rcommaaccent = 333;
                  t2.Ntilde = 722;
                  t2.otilde = 500;
                  t2.Rcommaaccent = 667;
                  t2.Lcommaaccent = 611;
                  t2.Atilde = 722;
                  t2.Aogonek = 722;
                  t2.Aring = 722;
                  t2.Otilde = 722;
                  t2.zdotaccent = 444;
                  t2.Ecaron = 611;
                  t2.Iogonek = 333;
                  t2.kcommaaccent = 500;
                  t2.minus = 564;
                  t2.Icircumflex = 333;
                  t2.ncaron = 500;
                  t2.tcommaaccent = 278;
                  t2.logicalnot = 564;
                  t2.odieresis = 500;
                  t2.udieresis = 500;
                  t2.notequal = 549;
                  t2.gcommaaccent = 500;
                  t2.eth = 500;
                  t2.zcaron = 444;
                  t2.ncommaaccent = 500;
                  t2.onesuperior = 300;
                  t2.imacron = 278;
                  t2.Euro = 500;
                });
                t["Times-Bold"] = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 250;
                  t2.exclam = 333;
                  t2.quotedbl = 555;
                  t2.numbersign = 500;
                  t2.dollar = 500;
                  t2.percent = 1e3;
                  t2.ampersand = 833;
                  t2.quoteright = 333;
                  t2.parenleft = 333;
                  t2.parenright = 333;
                  t2.asterisk = 500;
                  t2.plus = 570;
                  t2.comma = 250;
                  t2.hyphen = 333;
                  t2.period = 250;
                  t2.slash = 278;
                  t2.zero = 500;
                  t2.one = 500;
                  t2.two = 500;
                  t2.three = 500;
                  t2.four = 500;
                  t2.five = 500;
                  t2.six = 500;
                  t2.seven = 500;
                  t2.eight = 500;
                  t2.nine = 500;
                  t2.colon = 333;
                  t2.semicolon = 333;
                  t2.less = 570;
                  t2.equal = 570;
                  t2.greater = 570;
                  t2.question = 500;
                  t2.at = 930;
                  t2.A = 722;
                  t2.B = 667;
                  t2.C = 722;
                  t2.D = 722;
                  t2.E = 667;
                  t2.F = 611;
                  t2.G = 778;
                  t2.H = 778;
                  t2.I = 389;
                  t2.J = 500;
                  t2.K = 778;
                  t2.L = 667;
                  t2.M = 944;
                  t2.N = 722;
                  t2.O = 778;
                  t2.P = 611;
                  t2.Q = 778;
                  t2.R = 722;
                  t2.S = 556;
                  t2.T = 667;
                  t2.U = 722;
                  t2.V = 722;
                  t2.W = 1e3;
                  t2.X = 722;
                  t2.Y = 722;
                  t2.Z = 667;
                  t2.bracketleft = 333;
                  t2.backslash = 278;
                  t2.bracketright = 333;
                  t2.asciicircum = 581;
                  t2.underscore = 500;
                  t2.quoteleft = 333;
                  t2.a = 500;
                  t2.b = 556;
                  t2.c = 444;
                  t2.d = 556;
                  t2.e = 444;
                  t2.f = 333;
                  t2.g = 500;
                  t2.h = 556;
                  t2.i = 278;
                  t2.j = 333;
                  t2.k = 556;
                  t2.l = 278;
                  t2.m = 833;
                  t2.n = 556;
                  t2.o = 500;
                  t2.p = 556;
                  t2.q = 556;
                  t2.r = 444;
                  t2.s = 389;
                  t2.t = 333;
                  t2.u = 556;
                  t2.v = 500;
                  t2.w = 722;
                  t2.x = 500;
                  t2.y = 500;
                  t2.z = 444;
                  t2.braceleft = 394;
                  t2.bar = 220;
                  t2.braceright = 394;
                  t2.asciitilde = 520;
                  t2.exclamdown = 333;
                  t2.cent = 500;
                  t2.sterling = 500;
                  t2.fraction = 167;
                  t2.yen = 500;
                  t2.florin = 500;
                  t2.section = 500;
                  t2.currency = 500;
                  t2.quotesingle = 278;
                  t2.quotedblleft = 500;
                  t2.guillemotleft = 500;
                  t2.guilsinglleft = 333;
                  t2.guilsinglright = 333;
                  t2.fi = 556;
                  t2.fl = 556;
                  t2.endash = 500;
                  t2.dagger = 500;
                  t2.daggerdbl = 500;
                  t2.periodcentered = 250;
                  t2.paragraph = 540;
                  t2.bullet = 350;
                  t2.quotesinglbase = 333;
                  t2.quotedblbase = 500;
                  t2.quotedblright = 500;
                  t2.guillemotright = 500;
                  t2.ellipsis = 1e3;
                  t2.perthousand = 1e3;
                  t2.questiondown = 500;
                  t2.grave = 333;
                  t2.acute = 333;
                  t2.circumflex = 333;
                  t2.tilde = 333;
                  t2.macron = 333;
                  t2.breve = 333;
                  t2.dotaccent = 333;
                  t2.dieresis = 333;
                  t2.ring = 333;
                  t2.cedilla = 333;
                  t2.hungarumlaut = 333;
                  t2.ogonek = 333;
                  t2.caron = 333;
                  t2.emdash = 1e3;
                  t2.AE = 1e3;
                  t2.ordfeminine = 300;
                  t2.Lslash = 667;
                  t2.Oslash = 778;
                  t2.OE = 1e3;
                  t2.ordmasculine = 330;
                  t2.ae = 722;
                  t2.dotlessi = 278;
                  t2.lslash = 278;
                  t2.oslash = 500;
                  t2.oe = 722;
                  t2.germandbls = 556;
                  t2.Idieresis = 389;
                  t2.eacute = 444;
                  t2.abreve = 500;
                  t2.uhungarumlaut = 556;
                  t2.ecaron = 444;
                  t2.Ydieresis = 722;
                  t2.divide = 570;
                  t2.Yacute = 722;
                  t2.Acircumflex = 722;
                  t2.aacute = 500;
                  t2.Ucircumflex = 722;
                  t2.yacute = 500;
                  t2.scommaaccent = 389;
                  t2.ecircumflex = 444;
                  t2.Uring = 722;
                  t2.Udieresis = 722;
                  t2.aogonek = 500;
                  t2.Uacute = 722;
                  t2.uogonek = 556;
                  t2.Edieresis = 667;
                  t2.Dcroat = 722;
                  t2.commaaccent = 250;
                  t2.copyright = 747;
                  t2.Emacron = 667;
                  t2.ccaron = 444;
                  t2.aring = 500;
                  t2.Ncommaaccent = 722;
                  t2.lacute = 278;
                  t2.agrave = 500;
                  t2.Tcommaaccent = 667;
                  t2.Cacute = 722;
                  t2.atilde = 500;
                  t2.Edotaccent = 667;
                  t2.scaron = 389;
                  t2.scedilla = 389;
                  t2.iacute = 278;
                  t2.lozenge = 494;
                  t2.Rcaron = 722;
                  t2.Gcommaaccent = 778;
                  t2.ucircumflex = 556;
                  t2.acircumflex = 500;
                  t2.Amacron = 722;
                  t2.rcaron = 444;
                  t2.ccedilla = 444;
                  t2.Zdotaccent = 667;
                  t2.Thorn = 611;
                  t2.Omacron = 778;
                  t2.Racute = 722;
                  t2.Sacute = 556;
                  t2.dcaron = 672;
                  t2.Umacron = 722;
                  t2.uring = 556;
                  t2.threesuperior = 300;
                  t2.Ograve = 778;
                  t2.Agrave = 722;
                  t2.Abreve = 722;
                  t2.multiply = 570;
                  t2.uacute = 556;
                  t2.Tcaron = 667;
                  t2.partialdiff = 494;
                  t2.ydieresis = 500;
                  t2.Nacute = 722;
                  t2.icircumflex = 278;
                  t2.Ecircumflex = 667;
                  t2.adieresis = 500;
                  t2.edieresis = 444;
                  t2.cacute = 444;
                  t2.nacute = 556;
                  t2.umacron = 556;
                  t2.Ncaron = 722;
                  t2.Iacute = 389;
                  t2.plusminus = 570;
                  t2.brokenbar = 220;
                  t2.registered = 747;
                  t2.Gbreve = 778;
                  t2.Idotaccent = 389;
                  t2.summation = 600;
                  t2.Egrave = 667;
                  t2.racute = 444;
                  t2.omacron = 500;
                  t2.Zacute = 667;
                  t2.Zcaron = 667;
                  t2.greaterequal = 549;
                  t2.Eth = 722;
                  t2.Ccedilla = 722;
                  t2.lcommaaccent = 278;
                  t2.tcaron = 416;
                  t2.eogonek = 444;
                  t2.Uogonek = 722;
                  t2.Aacute = 722;
                  t2.Adieresis = 722;
                  t2.egrave = 444;
                  t2.zacute = 444;
                  t2.iogonek = 278;
                  t2.Oacute = 778;
                  t2.oacute = 500;
                  t2.amacron = 500;
                  t2.sacute = 389;
                  t2.idieresis = 278;
                  t2.Ocircumflex = 778;
                  t2.Ugrave = 722;
                  t2.Delta = 612;
                  t2.thorn = 556;
                  t2.twosuperior = 300;
                  t2.Odieresis = 778;
                  t2.mu = 556;
                  t2.igrave = 278;
                  t2.ohungarumlaut = 500;
                  t2.Eogonek = 667;
                  t2.dcroat = 556;
                  t2.threequarters = 750;
                  t2.Scedilla = 556;
                  t2.lcaron = 394;
                  t2.Kcommaaccent = 778;
                  t2.Lacute = 667;
                  t2.trademark = 1e3;
                  t2.edotaccent = 444;
                  t2.Igrave = 389;
                  t2.Imacron = 389;
                  t2.Lcaron = 667;
                  t2.onehalf = 750;
                  t2.lessequal = 549;
                  t2.ocircumflex = 500;
                  t2.ntilde = 556;
                  t2.Uhungarumlaut = 722;
                  t2.Eacute = 667;
                  t2.emacron = 444;
                  t2.gbreve = 500;
                  t2.onequarter = 750;
                  t2.Scaron = 556;
                  t2.Scommaaccent = 556;
                  t2.Ohungarumlaut = 778;
                  t2.degree = 400;
                  t2.ograve = 500;
                  t2.Ccaron = 722;
                  t2.ugrave = 556;
                  t2.radical = 549;
                  t2.Dcaron = 722;
                  t2.rcommaaccent = 444;
                  t2.Ntilde = 722;
                  t2.otilde = 500;
                  t2.Rcommaaccent = 722;
                  t2.Lcommaaccent = 667;
                  t2.Atilde = 722;
                  t2.Aogonek = 722;
                  t2.Aring = 722;
                  t2.Otilde = 778;
                  t2.zdotaccent = 444;
                  t2.Ecaron = 667;
                  t2.Iogonek = 389;
                  t2.kcommaaccent = 556;
                  t2.minus = 570;
                  t2.Icircumflex = 389;
                  t2.ncaron = 556;
                  t2.tcommaaccent = 333;
                  t2.logicalnot = 570;
                  t2.odieresis = 500;
                  t2.udieresis = 556;
                  t2.notequal = 549;
                  t2.gcommaaccent = 500;
                  t2.eth = 500;
                  t2.zcaron = 444;
                  t2.ncommaaccent = 556;
                  t2.onesuperior = 300;
                  t2.imacron = 278;
                  t2.Euro = 500;
                });
                t["Times-BoldItalic"] = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 250;
                  t2.exclam = 389;
                  t2.quotedbl = 555;
                  t2.numbersign = 500;
                  t2.dollar = 500;
                  t2.percent = 833;
                  t2.ampersand = 778;
                  t2.quoteright = 333;
                  t2.parenleft = 333;
                  t2.parenright = 333;
                  t2.asterisk = 500;
                  t2.plus = 570;
                  t2.comma = 250;
                  t2.hyphen = 333;
                  t2.period = 250;
                  t2.slash = 278;
                  t2.zero = 500;
                  t2.one = 500;
                  t2.two = 500;
                  t2.three = 500;
                  t2.four = 500;
                  t2.five = 500;
                  t2.six = 500;
                  t2.seven = 500;
                  t2.eight = 500;
                  t2.nine = 500;
                  t2.colon = 333;
                  t2.semicolon = 333;
                  t2.less = 570;
                  t2.equal = 570;
                  t2.greater = 570;
                  t2.question = 500;
                  t2.at = 832;
                  t2.A = 667;
                  t2.B = 667;
                  t2.C = 667;
                  t2.D = 722;
                  t2.E = 667;
                  t2.F = 667;
                  t2.G = 722;
                  t2.H = 778;
                  t2.I = 389;
                  t2.J = 500;
                  t2.K = 667;
                  t2.L = 611;
                  t2.M = 889;
                  t2.N = 722;
                  t2.O = 722;
                  t2.P = 611;
                  t2.Q = 722;
                  t2.R = 667;
                  t2.S = 556;
                  t2.T = 611;
                  t2.U = 722;
                  t2.V = 667;
                  t2.W = 889;
                  t2.X = 667;
                  t2.Y = 611;
                  t2.Z = 611;
                  t2.bracketleft = 333;
                  t2.backslash = 278;
                  t2.bracketright = 333;
                  t2.asciicircum = 570;
                  t2.underscore = 500;
                  t2.quoteleft = 333;
                  t2.a = 500;
                  t2.b = 500;
                  t2.c = 444;
                  t2.d = 500;
                  t2.e = 444;
                  t2.f = 333;
                  t2.g = 500;
                  t2.h = 556;
                  t2.i = 278;
                  t2.j = 278;
                  t2.k = 500;
                  t2.l = 278;
                  t2.m = 778;
                  t2.n = 556;
                  t2.o = 500;
                  t2.p = 500;
                  t2.q = 500;
                  t2.r = 389;
                  t2.s = 389;
                  t2.t = 278;
                  t2.u = 556;
                  t2.v = 444;
                  t2.w = 667;
                  t2.x = 500;
                  t2.y = 444;
                  t2.z = 389;
                  t2.braceleft = 348;
                  t2.bar = 220;
                  t2.braceright = 348;
                  t2.asciitilde = 570;
                  t2.exclamdown = 389;
                  t2.cent = 500;
                  t2.sterling = 500;
                  t2.fraction = 167;
                  t2.yen = 500;
                  t2.florin = 500;
                  t2.section = 500;
                  t2.currency = 500;
                  t2.quotesingle = 278;
                  t2.quotedblleft = 500;
                  t2.guillemotleft = 500;
                  t2.guilsinglleft = 333;
                  t2.guilsinglright = 333;
                  t2.fi = 556;
                  t2.fl = 556;
                  t2.endash = 500;
                  t2.dagger = 500;
                  t2.daggerdbl = 500;
                  t2.periodcentered = 250;
                  t2.paragraph = 500;
                  t2.bullet = 350;
                  t2.quotesinglbase = 333;
                  t2.quotedblbase = 500;
                  t2.quotedblright = 500;
                  t2.guillemotright = 500;
                  t2.ellipsis = 1e3;
                  t2.perthousand = 1e3;
                  t2.questiondown = 500;
                  t2.grave = 333;
                  t2.acute = 333;
                  t2.circumflex = 333;
                  t2.tilde = 333;
                  t2.macron = 333;
                  t2.breve = 333;
                  t2.dotaccent = 333;
                  t2.dieresis = 333;
                  t2.ring = 333;
                  t2.cedilla = 333;
                  t2.hungarumlaut = 333;
                  t2.ogonek = 333;
                  t2.caron = 333;
                  t2.emdash = 1e3;
                  t2.AE = 944;
                  t2.ordfeminine = 266;
                  t2.Lslash = 611;
                  t2.Oslash = 722;
                  t2.OE = 944;
                  t2.ordmasculine = 300;
                  t2.ae = 722;
                  t2.dotlessi = 278;
                  t2.lslash = 278;
                  t2.oslash = 500;
                  t2.oe = 722;
                  t2.germandbls = 500;
                  t2.Idieresis = 389;
                  t2.eacute = 444;
                  t2.abreve = 500;
                  t2.uhungarumlaut = 556;
                  t2.ecaron = 444;
                  t2.Ydieresis = 611;
                  t2.divide = 570;
                  t2.Yacute = 611;
                  t2.Acircumflex = 667;
                  t2.aacute = 500;
                  t2.Ucircumflex = 722;
                  t2.yacute = 444;
                  t2.scommaaccent = 389;
                  t2.ecircumflex = 444;
                  t2.Uring = 722;
                  t2.Udieresis = 722;
                  t2.aogonek = 500;
                  t2.Uacute = 722;
                  t2.uogonek = 556;
                  t2.Edieresis = 667;
                  t2.Dcroat = 722;
                  t2.commaaccent = 250;
                  t2.copyright = 747;
                  t2.Emacron = 667;
                  t2.ccaron = 444;
                  t2.aring = 500;
                  t2.Ncommaaccent = 722;
                  t2.lacute = 278;
                  t2.agrave = 500;
                  t2.Tcommaaccent = 611;
                  t2.Cacute = 667;
                  t2.atilde = 500;
                  t2.Edotaccent = 667;
                  t2.scaron = 389;
                  t2.scedilla = 389;
                  t2.iacute = 278;
                  t2.lozenge = 494;
                  t2.Rcaron = 667;
                  t2.Gcommaaccent = 722;
                  t2.ucircumflex = 556;
                  t2.acircumflex = 500;
                  t2.Amacron = 667;
                  t2.rcaron = 389;
                  t2.ccedilla = 444;
                  t2.Zdotaccent = 611;
                  t2.Thorn = 611;
                  t2.Omacron = 722;
                  t2.Racute = 667;
                  t2.Sacute = 556;
                  t2.dcaron = 608;
                  t2.Umacron = 722;
                  t2.uring = 556;
                  t2.threesuperior = 300;
                  t2.Ograve = 722;
                  t2.Agrave = 667;
                  t2.Abreve = 667;
                  t2.multiply = 570;
                  t2.uacute = 556;
                  t2.Tcaron = 611;
                  t2.partialdiff = 494;
                  t2.ydieresis = 444;
                  t2.Nacute = 722;
                  t2.icircumflex = 278;
                  t2.Ecircumflex = 667;
                  t2.adieresis = 500;
                  t2.edieresis = 444;
                  t2.cacute = 444;
                  t2.nacute = 556;
                  t2.umacron = 556;
                  t2.Ncaron = 722;
                  t2.Iacute = 389;
                  t2.plusminus = 570;
                  t2.brokenbar = 220;
                  t2.registered = 747;
                  t2.Gbreve = 722;
                  t2.Idotaccent = 389;
                  t2.summation = 600;
                  t2.Egrave = 667;
                  t2.racute = 389;
                  t2.omacron = 500;
                  t2.Zacute = 611;
                  t2.Zcaron = 611;
                  t2.greaterequal = 549;
                  t2.Eth = 722;
                  t2.Ccedilla = 667;
                  t2.lcommaaccent = 278;
                  t2.tcaron = 366;
                  t2.eogonek = 444;
                  t2.Uogonek = 722;
                  t2.Aacute = 667;
                  t2.Adieresis = 667;
                  t2.egrave = 444;
                  t2.zacute = 389;
                  t2.iogonek = 278;
                  t2.Oacute = 722;
                  t2.oacute = 500;
                  t2.amacron = 500;
                  t2.sacute = 389;
                  t2.idieresis = 278;
                  t2.Ocircumflex = 722;
                  t2.Ugrave = 722;
                  t2.Delta = 612;
                  t2.thorn = 500;
                  t2.twosuperior = 300;
                  t2.Odieresis = 722;
                  t2.mu = 576;
                  t2.igrave = 278;
                  t2.ohungarumlaut = 500;
                  t2.Eogonek = 667;
                  t2.dcroat = 500;
                  t2.threequarters = 750;
                  t2.Scedilla = 556;
                  t2.lcaron = 382;
                  t2.Kcommaaccent = 667;
                  t2.Lacute = 611;
                  t2.trademark = 1e3;
                  t2.edotaccent = 444;
                  t2.Igrave = 389;
                  t2.Imacron = 389;
                  t2.Lcaron = 611;
                  t2.onehalf = 750;
                  t2.lessequal = 549;
                  t2.ocircumflex = 500;
                  t2.ntilde = 556;
                  t2.Uhungarumlaut = 722;
                  t2.Eacute = 667;
                  t2.emacron = 444;
                  t2.gbreve = 500;
                  t2.onequarter = 750;
                  t2.Scaron = 556;
                  t2.Scommaaccent = 556;
                  t2.Ohungarumlaut = 722;
                  t2.degree = 400;
                  t2.ograve = 500;
                  t2.Ccaron = 667;
                  t2.ugrave = 556;
                  t2.radical = 549;
                  t2.Dcaron = 722;
                  t2.rcommaaccent = 389;
                  t2.Ntilde = 722;
                  t2.otilde = 500;
                  t2.Rcommaaccent = 667;
                  t2.Lcommaaccent = 611;
                  t2.Atilde = 667;
                  t2.Aogonek = 667;
                  t2.Aring = 667;
                  t2.Otilde = 722;
                  t2.zdotaccent = 389;
                  t2.Ecaron = 667;
                  t2.Iogonek = 389;
                  t2.kcommaaccent = 500;
                  t2.minus = 606;
                  t2.Icircumflex = 389;
                  t2.ncaron = 556;
                  t2.tcommaaccent = 278;
                  t2.logicalnot = 606;
                  t2.odieresis = 500;
                  t2.udieresis = 556;
                  t2.notequal = 549;
                  t2.gcommaaccent = 500;
                  t2.eth = 500;
                  t2.zcaron = 389;
                  t2.ncommaaccent = 556;
                  t2.onesuperior = 300;
                  t2.imacron = 278;
                  t2.Euro = 500;
                });
                t["Times-Italic"] = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 250;
                  t2.exclam = 333;
                  t2.quotedbl = 420;
                  t2.numbersign = 500;
                  t2.dollar = 500;
                  t2.percent = 833;
                  t2.ampersand = 778;
                  t2.quoteright = 333;
                  t2.parenleft = 333;
                  t2.parenright = 333;
                  t2.asterisk = 500;
                  t2.plus = 675;
                  t2.comma = 250;
                  t2.hyphen = 333;
                  t2.period = 250;
                  t2.slash = 278;
                  t2.zero = 500;
                  t2.one = 500;
                  t2.two = 500;
                  t2.three = 500;
                  t2.four = 500;
                  t2.five = 500;
                  t2.six = 500;
                  t2.seven = 500;
                  t2.eight = 500;
                  t2.nine = 500;
                  t2.colon = 333;
                  t2.semicolon = 333;
                  t2.less = 675;
                  t2.equal = 675;
                  t2.greater = 675;
                  t2.question = 500;
                  t2.at = 920;
                  t2.A = 611;
                  t2.B = 611;
                  t2.C = 667;
                  t2.D = 722;
                  t2.E = 611;
                  t2.F = 611;
                  t2.G = 722;
                  t2.H = 722;
                  t2.I = 333;
                  t2.J = 444;
                  t2.K = 667;
                  t2.L = 556;
                  t2.M = 833;
                  t2.N = 667;
                  t2.O = 722;
                  t2.P = 611;
                  t2.Q = 722;
                  t2.R = 611;
                  t2.S = 500;
                  t2.T = 556;
                  t2.U = 722;
                  t2.V = 611;
                  t2.W = 833;
                  t2.X = 611;
                  t2.Y = 556;
                  t2.Z = 556;
                  t2.bracketleft = 389;
                  t2.backslash = 278;
                  t2.bracketright = 389;
                  t2.asciicircum = 422;
                  t2.underscore = 500;
                  t2.quoteleft = 333;
                  t2.a = 500;
                  t2.b = 500;
                  t2.c = 444;
                  t2.d = 500;
                  t2.e = 444;
                  t2.f = 278;
                  t2.g = 500;
                  t2.h = 500;
                  t2.i = 278;
                  t2.j = 278;
                  t2.k = 444;
                  t2.l = 278;
                  t2.m = 722;
                  t2.n = 500;
                  t2.o = 500;
                  t2.p = 500;
                  t2.q = 500;
                  t2.r = 389;
                  t2.s = 389;
                  t2.t = 278;
                  t2.u = 500;
                  t2.v = 444;
                  t2.w = 667;
                  t2.x = 444;
                  t2.y = 444;
                  t2.z = 389;
                  t2.braceleft = 400;
                  t2.bar = 275;
                  t2.braceright = 400;
                  t2.asciitilde = 541;
                  t2.exclamdown = 389;
                  t2.cent = 500;
                  t2.sterling = 500;
                  t2.fraction = 167;
                  t2.yen = 500;
                  t2.florin = 500;
                  t2.section = 500;
                  t2.currency = 500;
                  t2.quotesingle = 214;
                  t2.quotedblleft = 556;
                  t2.guillemotleft = 500;
                  t2.guilsinglleft = 333;
                  t2.guilsinglright = 333;
                  t2.fi = 500;
                  t2.fl = 500;
                  t2.endash = 500;
                  t2.dagger = 500;
                  t2.daggerdbl = 500;
                  t2.periodcentered = 250;
                  t2.paragraph = 523;
                  t2.bullet = 350;
                  t2.quotesinglbase = 333;
                  t2.quotedblbase = 556;
                  t2.quotedblright = 556;
                  t2.guillemotright = 500;
                  t2.ellipsis = 889;
                  t2.perthousand = 1e3;
                  t2.questiondown = 500;
                  t2.grave = 333;
                  t2.acute = 333;
                  t2.circumflex = 333;
                  t2.tilde = 333;
                  t2.macron = 333;
                  t2.breve = 333;
                  t2.dotaccent = 333;
                  t2.dieresis = 333;
                  t2.ring = 333;
                  t2.cedilla = 333;
                  t2.hungarumlaut = 333;
                  t2.ogonek = 333;
                  t2.caron = 333;
                  t2.emdash = 889;
                  t2.AE = 889;
                  t2.ordfeminine = 276;
                  t2.Lslash = 556;
                  t2.Oslash = 722;
                  t2.OE = 944;
                  t2.ordmasculine = 310;
                  t2.ae = 667;
                  t2.dotlessi = 278;
                  t2.lslash = 278;
                  t2.oslash = 500;
                  t2.oe = 667;
                  t2.germandbls = 500;
                  t2.Idieresis = 333;
                  t2.eacute = 444;
                  t2.abreve = 500;
                  t2.uhungarumlaut = 500;
                  t2.ecaron = 444;
                  t2.Ydieresis = 556;
                  t2.divide = 675;
                  t2.Yacute = 556;
                  t2.Acircumflex = 611;
                  t2.aacute = 500;
                  t2.Ucircumflex = 722;
                  t2.yacute = 444;
                  t2.scommaaccent = 389;
                  t2.ecircumflex = 444;
                  t2.Uring = 722;
                  t2.Udieresis = 722;
                  t2.aogonek = 500;
                  t2.Uacute = 722;
                  t2.uogonek = 500;
                  t2.Edieresis = 611;
                  t2.Dcroat = 722;
                  t2.commaaccent = 250;
                  t2.copyright = 760;
                  t2.Emacron = 611;
                  t2.ccaron = 444;
                  t2.aring = 500;
                  t2.Ncommaaccent = 667;
                  t2.lacute = 278;
                  t2.agrave = 500;
                  t2.Tcommaaccent = 556;
                  t2.Cacute = 667;
                  t2.atilde = 500;
                  t2.Edotaccent = 611;
                  t2.scaron = 389;
                  t2.scedilla = 389;
                  t2.iacute = 278;
                  t2.lozenge = 471;
                  t2.Rcaron = 611;
                  t2.Gcommaaccent = 722;
                  t2.ucircumflex = 500;
                  t2.acircumflex = 500;
                  t2.Amacron = 611;
                  t2.rcaron = 389;
                  t2.ccedilla = 444;
                  t2.Zdotaccent = 556;
                  t2.Thorn = 611;
                  t2.Omacron = 722;
                  t2.Racute = 611;
                  t2.Sacute = 500;
                  t2.dcaron = 544;
                  t2.Umacron = 722;
                  t2.uring = 500;
                  t2.threesuperior = 300;
                  t2.Ograve = 722;
                  t2.Agrave = 611;
                  t2.Abreve = 611;
                  t2.multiply = 675;
                  t2.uacute = 500;
                  t2.Tcaron = 556;
                  t2.partialdiff = 476;
                  t2.ydieresis = 444;
                  t2.Nacute = 667;
                  t2.icircumflex = 278;
                  t2.Ecircumflex = 611;
                  t2.adieresis = 500;
                  t2.edieresis = 444;
                  t2.cacute = 444;
                  t2.nacute = 500;
                  t2.umacron = 500;
                  t2.Ncaron = 667;
                  t2.Iacute = 333;
                  t2.plusminus = 675;
                  t2.brokenbar = 275;
                  t2.registered = 760;
                  t2.Gbreve = 722;
                  t2.Idotaccent = 333;
                  t2.summation = 600;
                  t2.Egrave = 611;
                  t2.racute = 389;
                  t2.omacron = 500;
                  t2.Zacute = 556;
                  t2.Zcaron = 556;
                  t2.greaterequal = 549;
                  t2.Eth = 722;
                  t2.Ccedilla = 667;
                  t2.lcommaaccent = 278;
                  t2.tcaron = 300;
                  t2.eogonek = 444;
                  t2.Uogonek = 722;
                  t2.Aacute = 611;
                  t2.Adieresis = 611;
                  t2.egrave = 444;
                  t2.zacute = 389;
                  t2.iogonek = 278;
                  t2.Oacute = 722;
                  t2.oacute = 500;
                  t2.amacron = 500;
                  t2.sacute = 389;
                  t2.idieresis = 278;
                  t2.Ocircumflex = 722;
                  t2.Ugrave = 722;
                  t2.Delta = 612;
                  t2.thorn = 500;
                  t2.twosuperior = 300;
                  t2.Odieresis = 722;
                  t2.mu = 500;
                  t2.igrave = 278;
                  t2.ohungarumlaut = 500;
                  t2.Eogonek = 611;
                  t2.dcroat = 500;
                  t2.threequarters = 750;
                  t2.Scedilla = 500;
                  t2.lcaron = 300;
                  t2.Kcommaaccent = 667;
                  t2.Lacute = 556;
                  t2.trademark = 980;
                  t2.edotaccent = 444;
                  t2.Igrave = 333;
                  t2.Imacron = 333;
                  t2.Lcaron = 611;
                  t2.onehalf = 750;
                  t2.lessequal = 549;
                  t2.ocircumflex = 500;
                  t2.ntilde = 500;
                  t2.Uhungarumlaut = 722;
                  t2.Eacute = 611;
                  t2.emacron = 444;
                  t2.gbreve = 500;
                  t2.onequarter = 750;
                  t2.Scaron = 500;
                  t2.Scommaaccent = 500;
                  t2.Ohungarumlaut = 722;
                  t2.degree = 400;
                  t2.ograve = 500;
                  t2.Ccaron = 667;
                  t2.ugrave = 500;
                  t2.radical = 453;
                  t2.Dcaron = 722;
                  t2.rcommaaccent = 389;
                  t2.Ntilde = 667;
                  t2.otilde = 500;
                  t2.Rcommaaccent = 611;
                  t2.Lcommaaccent = 556;
                  t2.Atilde = 611;
                  t2.Aogonek = 611;
                  t2.Aring = 611;
                  t2.Otilde = 722;
                  t2.zdotaccent = 389;
                  t2.Ecaron = 611;
                  t2.Iogonek = 333;
                  t2.kcommaaccent = 444;
                  t2.minus = 675;
                  t2.Icircumflex = 333;
                  t2.ncaron = 500;
                  t2.tcommaaccent = 278;
                  t2.logicalnot = 675;
                  t2.odieresis = 500;
                  t2.udieresis = 500;
                  t2.notequal = 549;
                  t2.gcommaaccent = 500;
                  t2.eth = 500;
                  t2.zcaron = 389;
                  t2.ncommaaccent = 500;
                  t2.onesuperior = 300;
                  t2.imacron = 278;
                  t2.Euro = 500;
                });
                t.ZapfDingbats = (0, _core_utils.getLookupTableFactory)(function(t2) {
                  t2.space = 278;
                  t2.a1 = 974;
                  t2.a2 = 961;
                  t2.a202 = 974;
                  t2.a3 = 980;
                  t2.a4 = 719;
                  t2.a5 = 789;
                  t2.a119 = 790;
                  t2.a118 = 791;
                  t2.a117 = 690;
                  t2.a11 = 960;
                  t2.a12 = 939;
                  t2.a13 = 549;
                  t2.a14 = 855;
                  t2.a15 = 911;
                  t2.a16 = 933;
                  t2.a105 = 911;
                  t2.a17 = 945;
                  t2.a18 = 974;
                  t2.a19 = 755;
                  t2.a20 = 846;
                  t2.a21 = 762;
                  t2.a22 = 761;
                  t2.a23 = 571;
                  t2.a24 = 677;
                  t2.a25 = 763;
                  t2.a26 = 760;
                  t2.a27 = 759;
                  t2.a28 = 754;
                  t2.a6 = 494;
                  t2.a7 = 552;
                  t2.a8 = 537;
                  t2.a9 = 577;
                  t2.a10 = 692;
                  t2.a29 = 786;
                  t2.a30 = 788;
                  t2.a31 = 788;
                  t2.a32 = 790;
                  t2.a33 = 793;
                  t2.a34 = 794;
                  t2.a35 = 816;
                  t2.a36 = 823;
                  t2.a37 = 789;
                  t2.a38 = 841;
                  t2.a39 = 823;
                  t2.a40 = 833;
                  t2.a41 = 816;
                  t2.a42 = 831;
                  t2.a43 = 923;
                  t2.a44 = 744;
                  t2.a45 = 723;
                  t2.a46 = 749;
                  t2.a47 = 790;
                  t2.a48 = 792;
                  t2.a49 = 695;
                  t2.a50 = 776;
                  t2.a51 = 768;
                  t2.a52 = 792;
                  t2.a53 = 759;
                  t2.a54 = 707;
                  t2.a55 = 708;
                  t2.a56 = 682;
                  t2.a57 = 701;
                  t2.a58 = 826;
                  t2.a59 = 815;
                  t2.a60 = 789;
                  t2.a61 = 789;
                  t2.a62 = 707;
                  t2.a63 = 687;
                  t2.a64 = 696;
                  t2.a65 = 689;
                  t2.a66 = 786;
                  t2.a67 = 787;
                  t2.a68 = 713;
                  t2.a69 = 791;
                  t2.a70 = 785;
                  t2.a71 = 791;
                  t2.a72 = 873;
                  t2.a73 = 761;
                  t2.a74 = 762;
                  t2.a203 = 762;
                  t2.a75 = 759;
                  t2.a204 = 759;
                  t2.a76 = 892;
                  t2.a77 = 892;
                  t2.a78 = 788;
                  t2.a79 = 784;
                  t2.a81 = 438;
                  t2.a82 = 138;
                  t2.a83 = 277;
                  t2.a84 = 415;
                  t2.a97 = 392;
                  t2.a98 = 392;
                  t2.a99 = 668;
                  t2.a100 = 668;
                  t2.a89 = 390;
                  t2.a90 = 390;
                  t2.a93 = 317;
                  t2.a94 = 317;
                  t2.a91 = 276;
                  t2.a92 = 276;
                  t2.a205 = 509;
                  t2.a85 = 509;
                  t2.a206 = 410;
                  t2.a86 = 410;
                  t2.a87 = 234;
                  t2.a88 = 234;
                  t2.a95 = 334;
                  t2.a96 = 334;
                  t2.a101 = 732;
                  t2.a102 = 544;
                  t2.a103 = 544;
                  t2.a104 = 910;
                  t2.a106 = 667;
                  t2.a107 = 760;
                  t2.a108 = 760;
                  t2.a112 = 776;
                  t2.a111 = 595;
                  t2.a110 = 694;
                  t2.a109 = 626;
                  t2.a120 = 788;
                  t2.a121 = 788;
                  t2.a122 = 788;
                  t2.a123 = 788;
                  t2.a124 = 788;
                  t2.a125 = 788;
                  t2.a126 = 788;
                  t2.a127 = 788;
                  t2.a128 = 788;
                  t2.a129 = 788;
                  t2.a130 = 788;
                  t2.a131 = 788;
                  t2.a132 = 788;
                  t2.a133 = 788;
                  t2.a134 = 788;
                  t2.a135 = 788;
                  t2.a136 = 788;
                  t2.a137 = 788;
                  t2.a138 = 788;
                  t2.a139 = 788;
                  t2.a140 = 788;
                  t2.a141 = 788;
                  t2.a142 = 788;
                  t2.a143 = 788;
                  t2.a144 = 788;
                  t2.a145 = 788;
                  t2.a146 = 788;
                  t2.a147 = 788;
                  t2.a148 = 788;
                  t2.a149 = 788;
                  t2.a150 = 788;
                  t2.a151 = 788;
                  t2.a152 = 788;
                  t2.a153 = 788;
                  t2.a154 = 788;
                  t2.a155 = 788;
                  t2.a156 = 788;
                  t2.a157 = 788;
                  t2.a158 = 788;
                  t2.a159 = 788;
                  t2.a160 = 894;
                  t2.a161 = 838;
                  t2.a163 = 1016;
                  t2.a164 = 458;
                  t2.a196 = 748;
                  t2.a165 = 924;
                  t2.a192 = 748;
                  t2.a166 = 918;
                  t2.a167 = 927;
                  t2.a168 = 928;
                  t2.a169 = 928;
                  t2.a170 = 834;
                  t2.a171 = 873;
                  t2.a172 = 828;
                  t2.a173 = 924;
                  t2.a162 = 924;
                  t2.a174 = 917;
                  t2.a175 = 930;
                  t2.a176 = 931;
                  t2.a177 = 463;
                  t2.a178 = 883;
                  t2.a179 = 836;
                  t2.a193 = 836;
                  t2.a180 = 867;
                  t2.a199 = 867;
                  t2.a181 = 696;
                  t2.a200 = 696;
                  t2.a182 = 874;
                  t2.a201 = 874;
                  t2.a183 = 760;
                  t2.a184 = 946;
                  t2.a197 = 771;
                  t2.a185 = 865;
                  t2.a194 = 771;
                  t2.a198 = 888;
                  t2.a186 = 967;
                  t2.a195 = 888;
                  t2.a187 = 831;
                  t2.a188 = 873;
                  t2.a189 = 927;
                  t2.a190 = 970;
                  t2.a191 = 918;
                });
              });
              exports2.getMetrics = getMetrics;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.MurmurHash3_64 = void 0;
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var SEED = 3285377520;
              var MASK_HIGH = 4294901760;
              var MASK_LOW = 65535;
              var MurmurHash3_64 = /* @__PURE__ */ function() {
                function MurmurHash3_642(seed) {
                  _classCallCheck(this, MurmurHash3_642);
                  this.h1 = seed ? seed & 4294967295 : SEED;
                  this.h2 = seed ? seed & 4294967295 : SEED;
                }
                _createClass(MurmurHash3_642, [{
                  key: "update",
                  value: function update(input) {
                    var data, length;
                    if ((0, _util.isString)(input)) {
                      data = new Uint8Array(input.length * 2);
                      length = 0;
                      for (var i = 0, ii = input.length; i < ii; i++) {
                        var code = input.charCodeAt(i);
                        if (code <= 255) {
                          data[length++] = code;
                        } else {
                          data[length++] = code >>> 8;
                          data[length++] = code & 255;
                        }
                      }
                    } else if ((0, _util.isArrayBuffer)(input)) {
                      data = input.slice();
                      length = data.byteLength;
                    } else {
                      throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");
                    }
                    var blockCounts = length >> 2;
                    var tailLength = length - blockCounts * 4;
                    var dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);
                    var k1 = 0, k2 = 0;
                    var h1 = this.h1, h2 = this.h2;
                    var C1 = 3432918353, C2 = 461845907;
                    var C1_LOW = C1 & MASK_LOW, C2_LOW = C2 & MASK_LOW;
                    for (var _i = 0; _i < blockCounts; _i++) {
                      if (_i & 1) {
                        k1 = dataUint32[_i];
                        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
                        k1 = k1 << 15 | k1 >>> 17;
                        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
                        h1 ^= k1;
                        h1 = h1 << 13 | h1 >>> 19;
                        h1 = h1 * 5 + 3864292196;
                      } else {
                        k2 = dataUint32[_i];
                        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;
                        k2 = k2 << 15 | k2 >>> 17;
                        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;
                        h2 ^= k2;
                        h2 = h2 << 13 | h2 >>> 19;
                        h2 = h2 * 5 + 3864292196;
                      }
                    }
                    k1 = 0;
                    switch (tailLength) {
                      case 3:
                        k1 ^= data[blockCounts * 4 + 2] << 16;
                      case 2:
                        k1 ^= data[blockCounts * 4 + 1] << 8;
                      case 1:
                        k1 ^= data[blockCounts * 4];
                        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
                        k1 = k1 << 15 | k1 >>> 17;
                        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
                        if (blockCounts & 1) {
                          h1 ^= k1;
                        } else {
                          h2 ^= k1;
                        }
                    }
                    this.h1 = h1;
                    this.h2 = h2;
                  }
                }, {
                  key: "hexdigest",
                  value: function hexdigest() {
                    var h1 = this.h1, h2 = this.h2;
                    h1 ^= h2 >>> 1;
                    h1 = h1 * 3981806797 & MASK_HIGH | h1 * 36045 & MASK_LOW;
                    h2 = h2 * 4283543511 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 2950163797 & MASK_HIGH) >>> 16;
                    h1 ^= h2 >>> 1;
                    h1 = h1 * 444984403 & MASK_HIGH | h1 * 60499 & MASK_LOW;
                    h2 = h2 * 3301882366 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 3120437893 & MASK_HIGH) >>> 16;
                    h1 ^= h2 >>> 1;
                    var hex1 = (h1 >>> 0).toString(16), hex2 = (h2 >>> 0).toString(16);
                    return hex1.padStart(8, "0") + hex2.padStart(8, "0");
                  }
                }]);
                return MurmurHash3_642;
              }();
              exports2.MurmurHash3_64 = MurmurHash3_64;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.OperatorList = void 0;
              var _util = __w_pdfjs_require__2(4);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function addState(parentState, pattern, checkFn, iterateFn, processFn) {
                var state = parentState;
                for (var i = 0, ii = pattern.length - 1; i < ii; i++) {
                  var item = pattern[i];
                  state = state[item] || (state[item] = []);
                }
                state[pattern[pattern.length - 1]] = {
                  checkFn,
                  iterateFn,
                  processFn
                };
              }
              function handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray) {
                var iFirstPIMXO = iFirstSave + 2;
                var i;
                for (i = 0; i < count; i++) {
                  var arg = argsArray[iFirstPIMXO + 4 * i];
                  var imageMask = arg.length === 1 && arg[0];
                  if (imageMask && imageMask.width === 1 && imageMask.height === 1 && (!imageMask.data.length || imageMask.data.length === 1 && imageMask.data[0] === 0)) {
                    fnArray[iFirstPIMXO + 4 * i] = _util.OPS.paintSolidColorImageMask;
                    continue;
                  }
                  break;
                }
                return count - i;
              }
              var InitialState = [];
              addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintInlineImageXObject, _util.OPS.restore], null, function iterateInlineImageGroup(context, i) {
                var fnArray = context.fnArray;
                var iFirstSave = context.iCurr - 3;
                var pos = (i - iFirstSave) % 4;
                switch (pos) {
                  case 0:
                    return fnArray[i] === _util.OPS.save;
                  case 1:
                    return fnArray[i] === _util.OPS.transform;
                  case 2:
                    return fnArray[i] === _util.OPS.paintInlineImageXObject;
                  case 3:
                    return fnArray[i] === _util.OPS.restore;
                }
                throw new Error("iterateInlineImageGroup - invalid pos: ".concat(pos));
              }, function foundInlineImageGroup(context, i) {
                var MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;
                var MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;
                var MAX_WIDTH = 1e3;
                var IMAGE_PADDING = 1;
                var fnArray = context.fnArray, argsArray = context.argsArray;
                var curr = context.iCurr;
                var iFirstSave = curr - 3;
                var iFirstTransform = curr - 2;
                var iFirstPIIXO = curr - 1;
                var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_INLINE_IMAGES_BLOCK);
                if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {
                  return i - (i - iFirstSave) % 4;
                }
                var maxX = 0;
                var map = [];
                var maxLineHeight = 0;
                var currentX = IMAGE_PADDING, currentY = IMAGE_PADDING;
                for (var q = 0; q < count; q++) {
                  var transform = argsArray[iFirstTransform + (q << 2)];
                  var img = argsArray[iFirstPIIXO + (q << 2)][0];
                  if (currentX + img.width > MAX_WIDTH) {
                    maxX = Math.max(maxX, currentX);
                    currentY += maxLineHeight + 2 * IMAGE_PADDING;
                    currentX = 0;
                    maxLineHeight = 0;
                  }
                  map.push({
                    transform,
                    x: currentX,
                    y: currentY,
                    w: img.width,
                    h: img.height
                  });
                  currentX += img.width + 2 * IMAGE_PADDING;
                  maxLineHeight = Math.max(maxLineHeight, img.height);
                }
                var imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;
                var imgHeight = currentY + maxLineHeight + IMAGE_PADDING;
                var imgData = new Uint8ClampedArray(imgWidth * imgHeight * 4);
                var imgRowSize = imgWidth << 2;
                for (var _q = 0; _q < count; _q++) {
                  var data = argsArray[iFirstPIIXO + (_q << 2)][0].data;
                  var rowSize = map[_q].w << 2;
                  var dataOffset = 0;
                  var offset = map[_q].x + map[_q].y * imgWidth << 2;
                  imgData.set(data.subarray(0, rowSize), offset - imgRowSize);
                  for (var k = 0, kk = map[_q].h; k < kk; k++) {
                    imgData.set(data.subarray(dataOffset, dataOffset + rowSize), offset);
                    dataOffset += rowSize;
                    offset += imgRowSize;
                  }
                  imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);
                  while (offset >= 0) {
                    data[offset - 4] = data[offset];
                    data[offset - 3] = data[offset + 1];
                    data[offset - 2] = data[offset + 2];
                    data[offset - 1] = data[offset + 3];
                    data[offset + rowSize] = data[offset + rowSize - 4];
                    data[offset + rowSize + 1] = data[offset + rowSize - 3];
                    data[offset + rowSize + 2] = data[offset + rowSize - 2];
                    data[offset + rowSize + 3] = data[offset + rowSize - 1];
                    offset -= imgRowSize;
                  }
                }
                fnArray.splice(iFirstSave, count * 4, _util.OPS.paintInlineImageXObjectGroup);
                argsArray.splice(iFirstSave, count * 4, [{
                  width: imgWidth,
                  height: imgHeight,
                  kind: _util.ImageKind.RGBA_32BPP,
                  data: imgData
                }, map]);
                return iFirstSave + 1;
              });
              addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageMaskXObject, _util.OPS.restore], null, function iterateImageMaskGroup(context, i) {
                var fnArray = context.fnArray;
                var iFirstSave = context.iCurr - 3;
                var pos = (i - iFirstSave) % 4;
                switch (pos) {
                  case 0:
                    return fnArray[i] === _util.OPS.save;
                  case 1:
                    return fnArray[i] === _util.OPS.transform;
                  case 2:
                    return fnArray[i] === _util.OPS.paintImageMaskXObject;
                  case 3:
                    return fnArray[i] === _util.OPS.restore;
                }
                throw new Error("iterateImageMaskGroup - invalid pos: ".concat(pos));
              }, function foundImageMaskGroup(context, i) {
                var MIN_IMAGES_IN_MASKS_BLOCK = 10;
                var MAX_IMAGES_IN_MASKS_BLOCK = 100;
                var MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1e3;
                var fnArray = context.fnArray, argsArray = context.argsArray;
                var curr = context.iCurr;
                var iFirstSave = curr - 3;
                var iFirstTransform = curr - 2;
                var iFirstPIMXO = curr - 1;
                var count = Math.floor((i - iFirstSave) / 4);
                count = handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray);
                if (count < MIN_IMAGES_IN_MASKS_BLOCK) {
                  return i - (i - iFirstSave) % 4;
                }
                var isSameImage = false;
                var iTransform, transformArgs;
                var firstPIMXOArg0 = argsArray[iFirstPIMXO][0];
                var firstTransformArg0 = argsArray[iFirstTransform][0], firstTransformArg1 = argsArray[iFirstTransform][1], firstTransformArg2 = argsArray[iFirstTransform][2], firstTransformArg3 = argsArray[iFirstTransform][3];
                if (firstTransformArg1 === firstTransformArg2) {
                  isSameImage = true;
                  iTransform = iFirstTransform + 4;
                  var iPIMXO = iFirstPIMXO + 4;
                  for (var q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {
                    transformArgs = argsArray[iTransform];
                    if (argsArray[iPIMXO][0] !== firstPIMXOArg0 || transformArgs[0] !== firstTransformArg0 || transformArgs[1] !== firstTransformArg1 || transformArgs[2] !== firstTransformArg2 || transformArgs[3] !== firstTransformArg3) {
                      if (q < MIN_IMAGES_IN_MASKS_BLOCK) {
                        isSameImage = false;
                      } else {
                        count = q;
                      }
                      break;
                    }
                  }
                }
                if (isSameImage) {
                  count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);
                  var positions = new Float32Array(count * 2);
                  iTransform = iFirstTransform;
                  for (var _q2 = 0; _q2 < count; _q2++, iTransform += 4) {
                    transformArgs = argsArray[iTransform];
                    positions[_q2 << 1] = transformArgs[4];
                    positions[(_q2 << 1) + 1] = transformArgs[5];
                  }
                  fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectRepeat);
                  argsArray.splice(iFirstSave, count * 4, [firstPIMXOArg0, firstTransformArg0, firstTransformArg1, firstTransformArg2, firstTransformArg3, positions]);
                } else {
                  count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);
                  var images = [];
                  for (var _q3 = 0; _q3 < count; _q3++) {
                    transformArgs = argsArray[iFirstTransform + (_q3 << 2)];
                    var maskParams = argsArray[iFirstPIMXO + (_q3 << 2)][0];
                    images.push({
                      data: maskParams.data,
                      width: maskParams.width,
                      height: maskParams.height,
                      transform: transformArgs
                    });
                  }
                  fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectGroup);
                  argsArray.splice(iFirstSave, count * 4, [images]);
                }
                return iFirstSave + 1;
              });
              addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageXObject, _util.OPS.restore], function(context) {
                var argsArray = context.argsArray;
                var iFirstTransform = context.iCurr - 2;
                return argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0;
              }, function iterateImageGroup(context, i) {
                var fnArray = context.fnArray, argsArray = context.argsArray;
                var iFirstSave = context.iCurr - 3;
                var pos = (i - iFirstSave) % 4;
                switch (pos) {
                  case 0:
                    return fnArray[i] === _util.OPS.save;
                  case 1:
                    if (fnArray[i] !== _util.OPS.transform) {
                      return false;
                    }
                    var iFirstTransform = context.iCurr - 2;
                    var firstTransformArg0 = argsArray[iFirstTransform][0];
                    var firstTransformArg3 = argsArray[iFirstTransform][3];
                    if (argsArray[i][0] !== firstTransformArg0 || argsArray[i][1] !== 0 || argsArray[i][2] !== 0 || argsArray[i][3] !== firstTransformArg3) {
                      return false;
                    }
                    return true;
                  case 2:
                    if (fnArray[i] !== _util.OPS.paintImageXObject) {
                      return false;
                    }
                    var iFirstPIXO = context.iCurr - 1;
                    var firstPIXOArg0 = argsArray[iFirstPIXO][0];
                    if (argsArray[i][0] !== firstPIXOArg0) {
                      return false;
                    }
                    return true;
                  case 3:
                    return fnArray[i] === _util.OPS.restore;
                }
                throw new Error("iterateImageGroup - invalid pos: ".concat(pos));
              }, function(context, i) {
                var MIN_IMAGES_IN_BLOCK = 3;
                var MAX_IMAGES_IN_BLOCK = 1e3;
                var fnArray = context.fnArray, argsArray = context.argsArray;
                var curr = context.iCurr;
                var iFirstSave = curr - 3;
                var iFirstTransform = curr - 2;
                var iFirstPIXO = curr - 1;
                var firstPIXOArg0 = argsArray[iFirstPIXO][0];
                var firstTransformArg0 = argsArray[iFirstTransform][0];
                var firstTransformArg3 = argsArray[iFirstTransform][3];
                var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_BLOCK);
                if (count < MIN_IMAGES_IN_BLOCK) {
                  return i - (i - iFirstSave) % 4;
                }
                var positions = new Float32Array(count * 2);
                var iTransform = iFirstTransform;
                for (var q = 0; q < count; q++, iTransform += 4) {
                  var transformArgs = argsArray[iTransform];
                  positions[q << 1] = transformArgs[4];
                  positions[(q << 1) + 1] = transformArgs[5];
                }
                var args = [firstPIXOArg0, firstTransformArg0, firstTransformArg3, positions];
                fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageXObjectRepeat);
                argsArray.splice(iFirstSave, count * 4, args);
                return iFirstSave + 1;
              });
              addState(InitialState, [_util.OPS.beginText, _util.OPS.setFont, _util.OPS.setTextMatrix, _util.OPS.showText, _util.OPS.endText], null, function iterateShowTextGroup(context, i) {
                var fnArray = context.fnArray, argsArray = context.argsArray;
                var iFirstSave = context.iCurr - 4;
                var pos = (i - iFirstSave) % 5;
                switch (pos) {
                  case 0:
                    return fnArray[i] === _util.OPS.beginText;
                  case 1:
                    return fnArray[i] === _util.OPS.setFont;
                  case 2:
                    return fnArray[i] === _util.OPS.setTextMatrix;
                  case 3:
                    if (fnArray[i] !== _util.OPS.showText) {
                      return false;
                    }
                    var iFirstSetFont = context.iCurr - 3;
                    var firstSetFontArg0 = argsArray[iFirstSetFont][0];
                    var firstSetFontArg1 = argsArray[iFirstSetFont][1];
                    if (argsArray[i][0] !== firstSetFontArg0 || argsArray[i][1] !== firstSetFontArg1) {
                      return false;
                    }
                    return true;
                  case 4:
                    return fnArray[i] === _util.OPS.endText;
                }
                throw new Error("iterateShowTextGroup - invalid pos: ".concat(pos));
              }, function(context, i) {
                var MIN_CHARS_IN_BLOCK = 3;
                var MAX_CHARS_IN_BLOCK = 1e3;
                var fnArray = context.fnArray, argsArray = context.argsArray;
                var curr = context.iCurr;
                var iFirstBeginText = curr - 4;
                var iFirstSetFont = curr - 3;
                var iFirstSetTextMatrix = curr - 2;
                var iFirstShowText = curr - 1;
                var iFirstEndText = curr;
                var firstSetFontArg0 = argsArray[iFirstSetFont][0];
                var firstSetFontArg1 = argsArray[iFirstSetFont][1];
                var count = Math.min(Math.floor((i - iFirstBeginText) / 5), MAX_CHARS_IN_BLOCK);
                if (count < MIN_CHARS_IN_BLOCK) {
                  return i - (i - iFirstBeginText) % 5;
                }
                var iFirst = iFirstBeginText;
                if (iFirstBeginText >= 4 && fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] && fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] && fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] && fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] && argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 && argsArray[iFirstBeginText - 4][1] === firstSetFontArg1) {
                  count++;
                  iFirst -= 5;
                }
                var iEndText = iFirst + 4;
                for (var q = 1; q < count; q++) {
                  fnArray.splice(iEndText, 3);
                  argsArray.splice(iEndText, 3);
                  iEndText += 2;
                }
                return iEndText + 1;
              });
              var NullOptimizer = /* @__PURE__ */ function() {
                function NullOptimizer2(queue) {
                  _classCallCheck(this, NullOptimizer2);
                  this.queue = queue;
                }
                _createClass(NullOptimizer2, [{
                  key: "_optimize",
                  value: function _optimize() {
                  }
                }, {
                  key: "push",
                  value: function push(fn, args) {
                    this.queue.fnArray.push(fn);
                    this.queue.argsArray.push(args);
                    this._optimize();
                  }
                }, {
                  key: "flush",
                  value: function flush() {
                  }
                }, {
                  key: "reset",
                  value: function reset() {
                  }
                }]);
                return NullOptimizer2;
              }();
              var QueueOptimizer = /* @__PURE__ */ function(_NullOptimizer) {
                _inherits(QueueOptimizer2, _NullOptimizer);
                var _super = _createSuper(QueueOptimizer2);
                function QueueOptimizer2(queue) {
                  var _this;
                  _classCallCheck(this, QueueOptimizer2);
                  _this = _super.call(this, queue);
                  _this.state = null;
                  _this.context = {
                    iCurr: 0,
                    fnArray: queue.fnArray,
                    argsArray: queue.argsArray
                  };
                  _this.match = null;
                  _this.lastProcessed = 0;
                  return _this;
                }
                _createClass(QueueOptimizer2, [{
                  key: "_optimize",
                  value: function _optimize() {
                    var fnArray = this.queue.fnArray;
                    var i = this.lastProcessed, ii = fnArray.length;
                    var state = this.state;
                    var match = this.match;
                    if (!state && !match && i + 1 === ii && !InitialState[fnArray[i]]) {
                      this.lastProcessed = ii;
                      return;
                    }
                    var context = this.context;
                    while (i < ii) {
                      if (match) {
                        var iterate = (0, match.iterateFn)(context, i);
                        if (iterate) {
                          i++;
                          continue;
                        }
                        i = (0, match.processFn)(context, i + 1);
                        ii = fnArray.length;
                        match = null;
                        state = null;
                        if (i >= ii) {
                          break;
                        }
                      }
                      state = (state || InitialState)[fnArray[i]];
                      if (!state || Array.isArray(state)) {
                        i++;
                        continue;
                      }
                      context.iCurr = i;
                      i++;
                      if (state.checkFn && !(0, state.checkFn)(context)) {
                        state = null;
                        continue;
                      }
                      match = state;
                      state = null;
                    }
                    this.state = state;
                    this.match = match;
                    this.lastProcessed = i;
                  }
                }, {
                  key: "flush",
                  value: function flush() {
                    while (this.match) {
                      var length = this.queue.fnArray.length;
                      this.lastProcessed = (0, this.match.processFn)(this.context, length);
                      this.match = null;
                      this.state = null;
                      this._optimize();
                    }
                  }
                }, {
                  key: "reset",
                  value: function reset() {
                    this.state = null;
                    this.match = null;
                    this.lastProcessed = 0;
                  }
                }]);
                return QueueOptimizer2;
              }(NullOptimizer);
              var OperatorList = /* @__PURE__ */ function() {
                function OperatorList2() {
                  var intent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var streamSink = arguments.length > 1 ? arguments[1] : void 0;
                  _classCallCheck(this, OperatorList2);
                  this._streamSink = streamSink;
                  this.fnArray = [];
                  this.argsArray = [];
                  if (streamSink && !(intent & _util.RenderingIntentFlag.OPLIST)) {
                    this.optimizer = new QueueOptimizer(this);
                  } else {
                    this.optimizer = new NullOptimizer(this);
                  }
                  this.dependencies = /* @__PURE__ */ new Set();
                  this._totalLength = 0;
                  this.weight = 0;
                  this._resolved = streamSink ? null : Promise.resolve();
                }
                _createClass(OperatorList2, [{
                  key: "length",
                  get: function get() {
                    return this.argsArray.length;
                  }
                }, {
                  key: "ready",
                  get: function get() {
                    return this._resolved || this._streamSink.ready;
                  }
                }, {
                  key: "totalLength",
                  get: function get() {
                    return this._totalLength + this.length;
                  }
                }, {
                  key: "addOp",
                  value: function addOp(fn, args) {
                    this.optimizer.push(fn, args);
                    this.weight++;
                    if (this._streamSink) {
                      if (this.weight >= OperatorList2.CHUNK_SIZE) {
                        this.flush();
                      } else if (this.weight >= OperatorList2.CHUNK_SIZE_ABOUT && (fn === _util.OPS.restore || fn === _util.OPS.endText)) {
                        this.flush();
                      }
                    }
                  }
                }, {
                  key: "addDependency",
                  value: function addDependency(dependency) {
                    if (this.dependencies.has(dependency)) {
                      return;
                    }
                    this.dependencies.add(dependency);
                    this.addOp(_util.OPS.dependency, [dependency]);
                  }
                }, {
                  key: "addDependencies",
                  value: function addDependencies(dependencies) {
                    var _iterator = _createForOfIteratorHelper(dependencies), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var dependency = _step.value;
                        this.addDependency(dependency);
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                  }
                }, {
                  key: "addOpList",
                  value: function addOpList(opList) {
                    if (!(opList instanceof OperatorList2)) {
                      (0, _util.warn)('addOpList - ignoring invalid "opList" parameter.');
                      return;
                    }
                    var _iterator2 = _createForOfIteratorHelper(opList.dependencies), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var dependency = _step2.value;
                        this.dependencies.add(dependency);
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    for (var i = 0, ii = opList.length; i < ii; i++) {
                      this.addOp(opList.fnArray[i], opList.argsArray[i]);
                    }
                  }
                }, {
                  key: "getIR",
                  value: function getIR() {
                    return {
                      fnArray: this.fnArray,
                      argsArray: this.argsArray,
                      length: this.length
                    };
                  }
                }, {
                  key: "_transfers",
                  get: function get() {
                    var transfers = [];
                    var fnArray = this.fnArray, argsArray = this.argsArray, length = this.length;
                    for (var i = 0; i < length; i++) {
                      switch (fnArray[i]) {
                        case _util.OPS.paintInlineImageXObject:
                        case _util.OPS.paintInlineImageXObjectGroup:
                        case _util.OPS.paintImageMaskXObject:
                          var arg = argsArray[i][0];
                          ;
                          if (!arg.cached) {
                            transfers.push(arg.data.buffer);
                          }
                          break;
                      }
                    }
                    return transfers;
                  }
                }, {
                  key: "flush",
                  value: function flush() {
                    var lastChunk = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    this.optimizer.flush();
                    var length = this.length;
                    this._totalLength += length;
                    this._streamSink.enqueue({
                      fnArray: this.fnArray,
                      argsArray: this.argsArray,
                      lastChunk,
                      length
                    }, 1, this._transfers);
                    this.dependencies.clear();
                    this.fnArray.length = 0;
                    this.argsArray.length = 0;
                    this.weight = 0;
                    this.optimizer.reset();
                  }
                }], [{
                  key: "CHUNK_SIZE",
                  get: function get() {
                    return (0, _util.shadow)(this, "CHUNK_SIZE", 1e3);
                  }
                }, {
                  key: "CHUNK_SIZE_ABOUT",
                  get: function get() {
                    return (0, _util.shadow)(this, "CHUNK_SIZE_ABOUT", this.CHUNK_SIZE - 5);
                  }
                }]);
                return OperatorList2;
              }();
              exports2.OperatorList = OperatorList;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.PDFImage = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _colorspace = __w_pdfjs_require__2(154);
              var _decode_stream = __w_pdfjs_require__2(159);
              var _jpeg_stream = __w_pdfjs_require__2(167);
              var _jpx = __w_pdfjs_require__2(170);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function decodeAndClamp(value, addend, coefficient, max) {
                value = addend + value * coefficient;
                if (value < 0) {
                  value = 0;
                } else if (value > max) {
                  value = max;
                }
                return value;
              }
              function resizeImageMask(src, bpc, w1, h1, w2, h2) {
                var length = w2 * h2;
                var dest;
                if (bpc <= 8) {
                  dest = new Uint8Array(length);
                } else if (bpc <= 16) {
                  dest = new Uint16Array(length);
                } else {
                  dest = new Uint32Array(length);
                }
                var xRatio = w1 / w2;
                var yRatio = h1 / h2;
                var i, j, py, newIndex = 0, oldIndex;
                var xScaled = new Uint16Array(w2);
                var w1Scanline = w1;
                for (i = 0; i < w2; i++) {
                  xScaled[i] = Math.floor(i * xRatio);
                }
                for (i = 0; i < h2; i++) {
                  py = Math.floor(i * yRatio) * w1Scanline;
                  for (j = 0; j < w2; j++) {
                    oldIndex = py + xScaled[j];
                    dest[newIndex++] = src[oldIndex];
                  }
                }
                return dest;
              }
              var PDFImage = /* @__PURE__ */ function() {
                function PDFImage2(_ref) {
                  var xref = _ref.xref, res = _ref.res, image = _ref.image, _ref$isInline = _ref.isInline, isInline = _ref$isInline === void 0 ? false : _ref$isInline, _ref$smask = _ref.smask, smask = _ref$smask === void 0 ? null : _ref$smask, _ref$mask = _ref.mask, mask = _ref$mask === void 0 ? null : _ref$mask, _ref$isMask = _ref.isMask, isMask = _ref$isMask === void 0 ? false : _ref$isMask, pdfFunctionFactory = _ref.pdfFunctionFactory, localColorSpaceCache = _ref.localColorSpaceCache;
                  _classCallCheck(this, PDFImage2);
                  this.image = image;
                  var dict = image.dict;
                  var filter = dict.get("F", "Filter");
                  if ((0, _primitives.isName)(filter)) {
                    switch (filter.name) {
                      case "JPXDecode":
                        var jpxImage = new _jpx.JpxImage();
                        jpxImage.parseImageProperties(image.stream);
                        image.stream.reset();
                        image.width = jpxImage.width;
                        image.height = jpxImage.height;
                        image.bitsPerComponent = jpxImage.bitsPerComponent;
                        image.numComps = jpxImage.componentsCount;
                        break;
                      case "JBIG2Decode":
                        image.bitsPerComponent = 1;
                        image.numComps = 1;
                        break;
                    }
                  }
                  var width = dict.get("W", "Width");
                  var height = dict.get("H", "Height");
                  if (Number.isInteger(image.width) && image.width > 0 && Number.isInteger(image.height) && image.height > 0 && (image.width !== width || image.height !== height)) {
                    (0, _util.warn)("PDFImage - using the Width/Height of the image data, rather than the image dictionary.");
                    width = image.width;
                    height = image.height;
                  }
                  if (width < 1 || height < 1) {
                    throw new _util.FormatError("Invalid image width: ".concat(width, " or height: ").concat(height));
                  }
                  this.width = width;
                  this.height = height;
                  this.interpolate = dict.get("I", "Interpolate");
                  this.imageMask = dict.get("IM", "ImageMask") || false;
                  this.matte = dict.get("Matte") || false;
                  var bitsPerComponent = image.bitsPerComponent;
                  if (!bitsPerComponent) {
                    bitsPerComponent = dict.get("BPC", "BitsPerComponent");
                    if (!bitsPerComponent) {
                      if (this.imageMask) {
                        bitsPerComponent = 1;
                      } else {
                        throw new _util.FormatError("Bits per component missing in image: ".concat(this.imageMask));
                      }
                    }
                  }
                  this.bpc = bitsPerComponent;
                  if (!this.imageMask) {
                    var colorSpace = dict.getRaw("CS") || dict.getRaw("ColorSpace");
                    if (!colorSpace) {
                      (0, _util.info)("JPX images (which do not require color spaces)");
                      switch (image.numComps) {
                        case 1:
                          colorSpace = _primitives.Name.get("DeviceGray");
                          break;
                        case 3:
                          colorSpace = _primitives.Name.get("DeviceRGB");
                          break;
                        case 4:
                          colorSpace = _primitives.Name.get("DeviceCMYK");
                          break;
                        default:
                          throw new Error("JPX images with ".concat(image.numComps, " color components not supported."));
                      }
                    }
                    this.colorSpace = _colorspace.ColorSpace.parse({
                      cs: colorSpace,
                      xref,
                      resources: isInline ? res : null,
                      pdfFunctionFactory,
                      localColorSpaceCache
                    });
                    this.numComps = this.colorSpace.numComps;
                  }
                  this.decode = dict.getArray("D", "Decode");
                  this.needsDecode = false;
                  if (this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent) || isMask && !_colorspace.ColorSpace.isDefaultDecode(this.decode, 1))) {
                    this.needsDecode = true;
                    var max = (1 << bitsPerComponent) - 1;
                    this.decodeCoefficients = [];
                    this.decodeAddends = [];
                    var isIndexed = this.colorSpace && this.colorSpace.name === "Indexed";
                    for (var i = 0, j = 0; i < this.decode.length; i += 2, ++j) {
                      var dmin = this.decode[i];
                      var dmax = this.decode[i + 1];
                      this.decodeCoefficients[j] = isIndexed ? (dmax - dmin) / max : dmax - dmin;
                      this.decodeAddends[j] = isIndexed ? dmin : max * dmin;
                    }
                  }
                  if (smask) {
                    this.smask = new PDFImage2({
                      xref,
                      res,
                      image: smask,
                      isInline,
                      pdfFunctionFactory,
                      localColorSpaceCache
                    });
                  } else if (mask) {
                    if ((0, _primitives.isStream)(mask)) {
                      var maskDict = mask.dict, imageMask = maskDict.get("IM", "ImageMask");
                      if (!imageMask) {
                        (0, _util.warn)("Ignoring /Mask in image without /ImageMask.");
                      } else {
                        this.mask = new PDFImage2({
                          xref,
                          res,
                          image: mask,
                          isInline,
                          isMask: true,
                          pdfFunctionFactory,
                          localColorSpaceCache
                        });
                      }
                    } else {
                      this.mask = mask;
                    }
                  }
                }
                _createClass(PDFImage2, [{
                  key: "drawWidth",
                  get: function get() {
                    return Math.max(this.width, this.smask && this.smask.width || 0, this.mask && this.mask.width || 0);
                  }
                }, {
                  key: "drawHeight",
                  get: function get() {
                    return Math.max(this.height, this.smask && this.smask.height || 0, this.mask && this.mask.height || 0);
                  }
                }, {
                  key: "decodeBuffer",
                  value: function decodeBuffer(buffer) {
                    var bpc = this.bpc;
                    var numComps = this.numComps;
                    var decodeAddends = this.decodeAddends;
                    var decodeCoefficients = this.decodeCoefficients;
                    var max = (1 << bpc) - 1;
                    var i, ii;
                    if (bpc === 1) {
                      for (i = 0, ii = buffer.length; i < ii; i++) {
                        buffer[i] = +!buffer[i];
                      }
                      return;
                    }
                    var index = 0;
                    for (i = 0, ii = this.width * this.height; i < ii; i++) {
                      for (var j = 0; j < numComps; j++) {
                        buffer[index] = decodeAndClamp(buffer[index], decodeAddends[j], decodeCoefficients[j], max);
                        index++;
                      }
                    }
                  }
                }, {
                  key: "getComponents",
                  value: function getComponents(buffer) {
                    var bpc = this.bpc;
                    if (bpc === 8) {
                      return buffer;
                    }
                    var width = this.width;
                    var height = this.height;
                    var numComps = this.numComps;
                    var length = width * height * numComps;
                    var bufferPos = 0;
                    var output;
                    if (bpc <= 8) {
                      output = new Uint8Array(length);
                    } else if (bpc <= 16) {
                      output = new Uint16Array(length);
                    } else {
                      output = new Uint32Array(length);
                    }
                    var rowComps = width * numComps;
                    var max = (1 << bpc) - 1;
                    var i = 0, ii, buf;
                    if (bpc === 1) {
                      var mask, loop1End, loop2End;
                      for (var j = 0; j < height; j++) {
                        loop1End = i + (rowComps & ~7);
                        loop2End = i + rowComps;
                        while (i < loop1End) {
                          buf = buffer[bufferPos++];
                          output[i] = buf >> 7 & 1;
                          output[i + 1] = buf >> 6 & 1;
                          output[i + 2] = buf >> 5 & 1;
                          output[i + 3] = buf >> 4 & 1;
                          output[i + 4] = buf >> 3 & 1;
                          output[i + 5] = buf >> 2 & 1;
                          output[i + 6] = buf >> 1 & 1;
                          output[i + 7] = buf & 1;
                          i += 8;
                        }
                        if (i < loop2End) {
                          buf = buffer[bufferPos++];
                          mask = 128;
                          while (i < loop2End) {
                            output[i++] = +!!(buf & mask);
                            mask >>= 1;
                          }
                        }
                      }
                    } else {
                      var bits = 0;
                      buf = 0;
                      for (i = 0, ii = length; i < ii; ++i) {
                        if (i % rowComps === 0) {
                          buf = 0;
                          bits = 0;
                        }
                        while (bits < bpc) {
                          buf = buf << 8 | buffer[bufferPos++];
                          bits += 8;
                        }
                        var remainingBits = bits - bpc;
                        var value = buf >> remainingBits;
                        if (value < 0) {
                          value = 0;
                        } else if (value > max) {
                          value = max;
                        }
                        output[i] = value;
                        buf &= (1 << remainingBits) - 1;
                        bits = remainingBits;
                      }
                    }
                    return output;
                  }
                }, {
                  key: "fillOpacity",
                  value: function fillOpacity(rgbaBuf, width, height, actualHeight, image) {
                    var smask = this.smask;
                    var mask = this.mask;
                    var alphaBuf, sw, sh, i, ii, j;
                    if (smask) {
                      sw = smask.width;
                      sh = smask.height;
                      alphaBuf = new Uint8ClampedArray(sw * sh);
                      smask.fillGrayBuffer(alphaBuf);
                      if (sw !== width || sh !== height) {
                        alphaBuf = resizeImageMask(alphaBuf, smask.bpc, sw, sh, width, height);
                      }
                    } else if (mask) {
                      if (mask instanceof PDFImage2) {
                        sw = mask.width;
                        sh = mask.height;
                        alphaBuf = new Uint8ClampedArray(sw * sh);
                        mask.numComps = 1;
                        mask.fillGrayBuffer(alphaBuf);
                        for (i = 0, ii = sw * sh; i < ii; ++i) {
                          alphaBuf[i] = 255 - alphaBuf[i];
                        }
                        if (sw !== width || sh !== height) {
                          alphaBuf = resizeImageMask(alphaBuf, mask.bpc, sw, sh, width, height);
                        }
                      } else if (Array.isArray(mask)) {
                        alphaBuf = new Uint8ClampedArray(width * height);
                        var numComps = this.numComps;
                        for (i = 0, ii = width * height; i < ii; ++i) {
                          var opacity = 0;
                          var imageOffset = i * numComps;
                          for (j = 0; j < numComps; ++j) {
                            var color = image[imageOffset + j];
                            var maskOffset = j * 2;
                            if (color < mask[maskOffset] || color > mask[maskOffset + 1]) {
                              opacity = 255;
                              break;
                            }
                          }
                          alphaBuf[i] = opacity;
                        }
                      } else {
                        throw new _util.FormatError("Unknown mask format.");
                      }
                    }
                    if (alphaBuf) {
                      for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {
                        rgbaBuf[j] = alphaBuf[i];
                      }
                    } else {
                      for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {
                        rgbaBuf[j] = 255;
                      }
                    }
                  }
                }, {
                  key: "undoPreblend",
                  value: function undoPreblend(buffer, width, height) {
                    var matte = this.smask && this.smask.matte;
                    if (!matte) {
                      return;
                    }
                    var matteRgb = this.colorSpace.getRgb(matte, 0);
                    var matteR = matteRgb[0];
                    var matteG = matteRgb[1];
                    var matteB = matteRgb[2];
                    var length = width * height * 4;
                    for (var i = 0; i < length; i += 4) {
                      var alpha = buffer[i + 3];
                      if (alpha === 0) {
                        buffer[i] = 255;
                        buffer[i + 1] = 255;
                        buffer[i + 2] = 255;
                        continue;
                      }
                      var k = 255 / alpha;
                      buffer[i] = (buffer[i] - matteR) * k + matteR;
                      buffer[i + 1] = (buffer[i + 1] - matteG) * k + matteG;
                      buffer[i + 2] = (buffer[i + 2] - matteB) * k + matteB;
                    }
                  }
                }, {
                  key: "createImageData",
                  value: function createImageData() {
                    var forceRGBA = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    var drawWidth = this.drawWidth;
                    var drawHeight = this.drawHeight;
                    var imgData = {
                      width: drawWidth,
                      height: drawHeight,
                      interpolate: this.interpolate,
                      kind: 0,
                      data: null
                    };
                    var numComps = this.numComps;
                    var originalWidth = this.width;
                    var originalHeight = this.height;
                    var bpc = this.bpc;
                    var rowBytes = originalWidth * numComps * bpc + 7 >> 3;
                    var imgArray;
                    if (!forceRGBA) {
                      var kind;
                      if (this.colorSpace.name === "DeviceGray" && bpc === 1) {
                        kind = _util.ImageKind.GRAYSCALE_1BPP;
                      } else if (this.colorSpace.name === "DeviceRGB" && bpc === 8 && !this.needsDecode) {
                        kind = _util.ImageKind.RGB_24BPP;
                      }
                      if (kind && !this.smask && !this.mask && drawWidth === originalWidth && drawHeight === originalHeight) {
                        imgData.kind = kind;
                        imgArray = this.getImageBytes(originalHeight * rowBytes);
                        if (this.image instanceof _decode_stream.DecodeStream) {
                          imgData.data = imgArray;
                        } else {
                          var newArray = new Uint8ClampedArray(imgArray.length);
                          newArray.set(imgArray);
                          imgData.data = newArray;
                        }
                        if (this.needsDecode) {
                          (0, _util.assert)(kind === _util.ImageKind.GRAYSCALE_1BPP, "PDFImage.createImageData: The image must be grayscale.");
                          var buffer = imgData.data;
                          for (var i = 0, ii = buffer.length; i < ii; i++) {
                            buffer[i] ^= 255;
                          }
                        }
                        return imgData;
                      }
                      if (this.image instanceof _jpeg_stream.JpegStream && !this.smask && !this.mask) {
                        var imageLength = originalHeight * rowBytes;
                        switch (this.colorSpace.name) {
                          case "DeviceGray":
                            imageLength *= 3;
                          case "DeviceRGB":
                          case "DeviceCMYK":
                            imgData.kind = _util.ImageKind.RGB_24BPP;
                            imgData.data = this.getImageBytes(imageLength, drawWidth, drawHeight, true);
                            return imgData;
                        }
                      }
                    }
                    imgArray = this.getImageBytes(originalHeight * rowBytes);
                    var actualHeight = 0 | imgArray.length / rowBytes * drawHeight / originalHeight;
                    var comps = this.getComponents(imgArray);
                    var alpha01, maybeUndoPreblend;
                    if (!forceRGBA && !this.smask && !this.mask) {
                      imgData.kind = _util.ImageKind.RGB_24BPP;
                      imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 3);
                      alpha01 = 0;
                      maybeUndoPreblend = false;
                    } else {
                      imgData.kind = _util.ImageKind.RGBA_32BPP;
                      imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 4);
                      alpha01 = 1;
                      maybeUndoPreblend = true;
                      this.fillOpacity(imgData.data, drawWidth, drawHeight, actualHeight, comps);
                    }
                    if (this.needsDecode) {
                      this.decodeBuffer(comps);
                    }
                    this.colorSpace.fillRgb(imgData.data, originalWidth, originalHeight, drawWidth, drawHeight, actualHeight, bpc, comps, alpha01);
                    if (maybeUndoPreblend) {
                      this.undoPreblend(imgData.data, drawWidth, actualHeight);
                    }
                    return imgData;
                  }
                }, {
                  key: "fillGrayBuffer",
                  value: function fillGrayBuffer(buffer) {
                    var numComps = this.numComps;
                    if (numComps !== 1) {
                      throw new _util.FormatError("Reading gray scale from a color image: ".concat(numComps));
                    }
                    var width = this.width;
                    var height = this.height;
                    var bpc = this.bpc;
                    var rowBytes = width * numComps * bpc + 7 >> 3;
                    var imgArray = this.getImageBytes(height * rowBytes);
                    var comps = this.getComponents(imgArray);
                    var i, length;
                    if (bpc === 1) {
                      length = width * height;
                      if (this.needsDecode) {
                        for (i = 0; i < length; ++i) {
                          buffer[i] = comps[i] - 1 & 255;
                        }
                      } else {
                        for (i = 0; i < length; ++i) {
                          buffer[i] = -comps[i] & 255;
                        }
                      }
                      return;
                    }
                    if (this.needsDecode) {
                      this.decodeBuffer(comps);
                    }
                    length = width * height;
                    var scale = 255 / ((1 << bpc) - 1);
                    for (i = 0; i < length; ++i) {
                      buffer[i] = scale * comps[i];
                    }
                  }
                }, {
                  key: "getImageBytes",
                  value: function getImageBytes(length, drawWidth, drawHeight) {
                    var forceRGB = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
                    this.image.reset();
                    this.image.drawWidth = drawWidth || this.width;
                    this.image.drawHeight = drawHeight || this.height;
                    this.image.forceRGB = !!forceRGB;
                    return this.image.getBytes(length, true);
                  }
                }], [{
                  key: "buildImage",
                  value: function() {
                    var _buildImage = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(_ref2) {
                      var xref, res, image, _ref2$isInline, isInline, pdfFunctionFactory, localColorSpaceCache, imageData, smaskData, maskData, smask, mask;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              xref = _ref2.xref, res = _ref2.res, image = _ref2.image, _ref2$isInline = _ref2.isInline, isInline = _ref2$isInline === void 0 ? false : _ref2$isInline, pdfFunctionFactory = _ref2.pdfFunctionFactory, localColorSpaceCache = _ref2.localColorSpaceCache;
                              imageData = image;
                              smaskData = null;
                              maskData = null;
                              smask = image.dict.get("SMask");
                              mask = image.dict.get("Mask");
                              if (smask) {
                                smaskData = smask;
                              } else if (mask) {
                                if ((0, _primitives.isStream)(mask) || Array.isArray(mask)) {
                                  maskData = mask;
                                } else {
                                  (0, _util.warn)("Unsupported mask format.");
                                }
                              }
                              return _context.abrupt("return", new PDFImage2({
                                xref,
                                res,
                                image: imageData,
                                isInline,
                                smask: smaskData,
                                mask: maskData,
                                pdfFunctionFactory,
                                localColorSpaceCache
                              }));
                            case 8:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));
                    function buildImage(_x) {
                      return _buildImage.apply(this, arguments);
                    }
                    return buildImage;
                  }()
                }, {
                  key: "createMask",
                  value: function createMask(_ref3) {
                    var imgArray = _ref3.imgArray, width = _ref3.width, height = _ref3.height, imageIsFromDecodeStream = _ref3.imageIsFromDecodeStream, inverseDecode = _ref3.inverseDecode, interpolate = _ref3.interpolate;
                    var computedLength = (width + 7 >> 3) * height;
                    var actualLength = imgArray.byteLength;
                    var haveFullData = computedLength === actualLength;
                    var data, i;
                    if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {
                      data = imgArray;
                    } else if (!inverseDecode) {
                      data = new Uint8ClampedArray(actualLength);
                      data.set(imgArray);
                    } else {
                      data = new Uint8ClampedArray(computedLength);
                      data.set(imgArray);
                      for (i = actualLength; i < computedLength; i++) {
                        data[i] = 255;
                      }
                    }
                    if (inverseDecode) {
                      for (i = 0; i < actualLength; i++) {
                        data[i] ^= 255;
                      }
                    }
                    return {
                      data,
                      width,
                      height,
                      interpolate
                    };
                  }
                }]);
                return PDFImage2;
              }();
              exports2.PDFImage = PDFImage;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Catalog = void 0;
              var _primitives = __w_pdfjs_require__2(135);
              var _core_utils = __w_pdfjs_require__2(139);
              var _util = __w_pdfjs_require__2(4);
              var _name_number_tree = __w_pdfjs_require__2(195);
              var _base_stream = __w_pdfjs_require__2(136);
              var _colorspace = __w_pdfjs_require__2(154);
              var _file_spec = __w_pdfjs_require__2(196);
              var _image_utils = __w_pdfjs_require__2(188);
              var _metadata_parser = __w_pdfjs_require__2(197);
              var _struct_tree = __w_pdfjs_require__2(199);
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
              }
              function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                  return Array.from(iter);
              }
              function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr))
                  return _arrayLikeToArray(arr);
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function fetchDestination(dest) {
                if (dest instanceof _primitives.Dict) {
                  dest = dest.get("D");
                }
                return Array.isArray(dest) ? dest : null;
              }
              var Catalog = /* @__PURE__ */ function() {
                function Catalog2(pdfManager, xref) {
                  _classCallCheck(this, Catalog2);
                  this.pdfManager = pdfManager;
                  this.xref = xref;
                  this._catDict = xref.getCatalogObj();
                  if (!(this._catDict instanceof _primitives.Dict)) {
                    throw new _util.FormatError("Catalog object is not a dictionary.");
                  }
                  this.toplevelPagesDict;
                  this._actualNumPages = null;
                  this.fontCache = new _primitives.RefSetCache();
                  this.builtInCMapCache = /* @__PURE__ */ new Map();
                  this.standardFontDataCache = /* @__PURE__ */ new Map();
                  this.globalImageCache = new _image_utils.GlobalImageCache();
                  this.pageKidsCountCache = new _primitives.RefSetCache();
                  this.pageIndexCache = new _primitives.RefSetCache();
                  this.nonBlendModesSet = new _primitives.RefSet();
                }
                _createClass(Catalog2, [{
                  key: "version",
                  get: function get() {
                    var version = this._catDict.get("Version");
                    return (0, _util.shadow)(this, "version", version instanceof _primitives.Name ? version.name : null);
                  }
                }, {
                  key: "lang",
                  get: function get() {
                    var lang = this._catDict.get("Lang");
                    return (0, _util.shadow)(this, "lang", typeof lang === "string" ? (0, _util.stringToPDFString)(lang) : null);
                  }
                }, {
                  key: "needsRendering",
                  get: function get() {
                    var needsRendering = this._catDict.get("NeedsRendering");
                    return (0, _util.shadow)(this, "needsRendering", typeof needsRendering === "boolean" ? needsRendering : false);
                  }
                }, {
                  key: "collection",
                  get: function get() {
                    var collection = null;
                    try {
                      var obj = this._catDict.get("Collection");
                      if ((0, _primitives.isDict)(obj) && obj.size > 0) {
                        collection = obj;
                      }
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.info)("Cannot fetch Collection entry; assuming no collection is present.");
                    }
                    return (0, _util.shadow)(this, "collection", collection);
                  }
                }, {
                  key: "acroForm",
                  get: function get() {
                    var acroForm = null;
                    try {
                      var obj = this._catDict.get("AcroForm");
                      if ((0, _primitives.isDict)(obj) && obj.size > 0) {
                        acroForm = obj;
                      }
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.info)("Cannot fetch AcroForm entry; assuming no forms are present.");
                    }
                    return (0, _util.shadow)(this, "acroForm", acroForm);
                  }
                }, {
                  key: "acroFormRef",
                  get: function get() {
                    var value = this._catDict.getRaw("AcroForm");
                    return (0, _util.shadow)(this, "acroFormRef", (0, _primitives.isRef)(value) ? value : null);
                  }
                }, {
                  key: "metadata",
                  get: function get() {
                    var streamRef = this._catDict.getRaw("Metadata");
                    if (!(streamRef instanceof _primitives.Ref)) {
                      return (0, _util.shadow)(this, "metadata", null);
                    }
                    var metadata = null;
                    try {
                      var suppressEncryption = !(this.xref.encrypt && this.xref.encrypt.encryptMetadata);
                      var stream = this.xref.fetch(streamRef, suppressEncryption);
                      if (stream instanceof _base_stream.BaseStream && stream.dict instanceof _primitives.Dict) {
                        var type = stream.dict.get("Type");
                        var subtype = stream.dict.get("Subtype");
                        if ((0, _primitives.isName)(type, "Metadata") && (0, _primitives.isName)(subtype, "XML")) {
                          var data = (0, _util.stringToUTF8String)(stream.getString());
                          if (data) {
                            metadata = new _metadata_parser.MetadataParser(data).serializable;
                          }
                        }
                      }
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.info)('Skipping invalid Metadata: "'.concat(ex, '".'));
                    }
                    return (0, _util.shadow)(this, "metadata", metadata);
                  }
                }, {
                  key: "markInfo",
                  get: function get() {
                    var markInfo = null;
                    try {
                      markInfo = this._readMarkInfo();
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)("Unable to read mark info.");
                    }
                    return (0, _util.shadow)(this, "markInfo", markInfo);
                  }
                }, {
                  key: "_readMarkInfo",
                  value: function _readMarkInfo() {
                    var obj = this._catDict.get("MarkInfo");
                    if (!(0, _primitives.isDict)(obj)) {
                      return null;
                    }
                    var markInfo = Object.assign(/* @__PURE__ */ Object.create(null), {
                      Marked: false,
                      UserProperties: false,
                      Suspects: false
                    });
                    for (var key in markInfo) {
                      if (!obj.has(key)) {
                        continue;
                      }
                      var value = obj.get(key);
                      if (!(0, _util.isBool)(value)) {
                        continue;
                      }
                      markInfo[key] = value;
                    }
                    return markInfo;
                  }
                }, {
                  key: "structTreeRoot",
                  get: function get() {
                    var structTree = null;
                    try {
                      structTree = this._readStructTreeRoot();
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)("Unable read to structTreeRoot info.");
                    }
                    return (0, _util.shadow)(this, "structTreeRoot", structTree);
                  }
                }, {
                  key: "_readStructTreeRoot",
                  value: function _readStructTreeRoot() {
                    var obj = this._catDict.get("StructTreeRoot");
                    if (!(0, _primitives.isDict)(obj)) {
                      return null;
                    }
                    var root = new _struct_tree.StructTreeRoot(obj);
                    root.init();
                    return root;
                  }
                }, {
                  key: "toplevelPagesDict",
                  get: function get() {
                    var pagesObj = this._catDict.get("Pages");
                    if (!(0, _primitives.isDict)(pagesObj)) {
                      throw new _util.FormatError("Invalid top-level pages dictionary.");
                    }
                    return (0, _util.shadow)(this, "toplevelPagesDict", pagesObj);
                  }
                }, {
                  key: "documentOutline",
                  get: function get() {
                    var obj = null;
                    try {
                      obj = this._readDocumentOutline();
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)("Unable to read document outline.");
                    }
                    return (0, _util.shadow)(this, "documentOutline", obj);
                  }
                }, {
                  key: "_readDocumentOutline",
                  value: function _readDocumentOutline() {
                    var obj = this._catDict.get("Outlines");
                    if (!(0, _primitives.isDict)(obj)) {
                      return null;
                    }
                    obj = obj.getRaw("First");
                    if (!(0, _primitives.isRef)(obj)) {
                      return null;
                    }
                    var root = {
                      items: []
                    };
                    var queue = [{
                      obj,
                      parent: root
                    }];
                    var processed = new _primitives.RefSet();
                    processed.put(obj);
                    var xref = this.xref, blackColor = new Uint8ClampedArray(3);
                    while (queue.length > 0) {
                      var i = queue.shift();
                      var outlineDict = xref.fetchIfRef(i.obj);
                      if (outlineDict === null) {
                        continue;
                      }
                      if (!outlineDict.has("Title")) {
                        throw new _util.FormatError("Invalid outline item encountered.");
                      }
                      var data = {
                        url: null,
                        dest: null
                      };
                      Catalog2.parseDestDictionary({
                        destDict: outlineDict,
                        resultObj: data,
                        docBaseUrl: this.pdfManager.docBaseUrl
                      });
                      var title = outlineDict.get("Title");
                      var flags = outlineDict.get("F") || 0;
                      var color = outlineDict.getArray("C");
                      var count = outlineDict.get("Count");
                      var rgbColor = blackColor;
                      if (Array.isArray(color) && color.length === 3 && (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)) {
                        rgbColor = _colorspace.ColorSpace.singletons.rgb.getRgb(color, 0);
                      }
                      var outlineItem = {
                        dest: data.dest,
                        url: data.url,
                        unsafeUrl: data.unsafeUrl,
                        newWindow: data.newWindow,
                        title: (0, _util.stringToPDFString)(title),
                        color: rgbColor,
                        count: Number.isInteger(count) ? count : void 0,
                        bold: !!(flags & 2),
                        italic: !!(flags & 1),
                        items: []
                      };
                      i.parent.items.push(outlineItem);
                      obj = outlineDict.getRaw("First");
                      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {
                        queue.push({
                          obj,
                          parent: outlineItem
                        });
                        processed.put(obj);
                      }
                      obj = outlineDict.getRaw("Next");
                      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {
                        queue.push({
                          obj,
                          parent: i.parent
                        });
                        processed.put(obj);
                      }
                    }
                    return root.items.length > 0 ? root.items : null;
                  }
                }, {
                  key: "permissions",
                  get: function get() {
                    var permissions = null;
                    try {
                      permissions = this._readPermissions();
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)("Unable to read permissions.");
                    }
                    return (0, _util.shadow)(this, "permissions", permissions);
                  }
                }, {
                  key: "_readPermissions",
                  value: function _readPermissions() {
                    var encrypt = this.xref.trailer.get("Encrypt");
                    if (!(0, _primitives.isDict)(encrypt)) {
                      return null;
                    }
                    var flags = encrypt.get("P");
                    if (!(0, _util.isNum)(flags)) {
                      return null;
                    }
                    flags += Math.pow(2, 32);
                    var permissions = [];
                    for (var key in _util.PermissionFlag) {
                      var value = _util.PermissionFlag[key];
                      if (flags & value) {
                        permissions.push(value);
                      }
                    }
                    return permissions;
                  }
                }, {
                  key: "optionalContentConfig",
                  get: function get() {
                    var config = null;
                    try {
                      var properties = this._catDict.get("OCProperties");
                      if (!properties) {
                        return (0, _util.shadow)(this, "optionalContentConfig", null);
                      }
                      var defaultConfig = properties.get("D");
                      if (!defaultConfig) {
                        return (0, _util.shadow)(this, "optionalContentConfig", null);
                      }
                      var groupsData = properties.get("OCGs");
                      if (!Array.isArray(groupsData)) {
                        return (0, _util.shadow)(this, "optionalContentConfig", null);
                      }
                      var groups = [];
                      var groupRefs = [];
                      var _iterator = _createForOfIteratorHelper(groupsData), _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                          var groupRef = _step.value;
                          if (!(0, _primitives.isRef)(groupRef)) {
                            continue;
                          }
                          groupRefs.push(groupRef);
                          var group = this.xref.fetchIfRef(groupRef);
                          groups.push({
                            id: groupRef.toString(),
                            name: (0, _util.isString)(group.get("Name")) ? (0, _util.stringToPDFString)(group.get("Name")) : null,
                            intent: (0, _util.isString)(group.get("Intent")) ? (0, _util.stringToPDFString)(group.get("Intent")) : null
                          });
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                      config = this._readOptionalContentConfig(defaultConfig, groupRefs);
                      config.groups = groups;
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)("Unable to read optional content config: ".concat(ex));
                    }
                    return (0, _util.shadow)(this, "optionalContentConfig", config);
                  }
                }, {
                  key: "_readOptionalContentConfig",
                  value: function _readOptionalContentConfig(config, contentGroupRefs) {
                    function parseOnOff(refs) {
                      var onParsed = [];
                      if (Array.isArray(refs)) {
                        var _iterator2 = _createForOfIteratorHelper(refs), _step2;
                        try {
                          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                            var value = _step2.value;
                            if (!(0, _primitives.isRef)(value)) {
                              continue;
                            }
                            if (contentGroupRefs.includes(value)) {
                              onParsed.push(value.toString());
                            }
                          }
                        } catch (err) {
                          _iterator2.e(err);
                        } finally {
                          _iterator2.f();
                        }
                      }
                      return onParsed;
                    }
                    function parseOrder(refs) {
                      var nestedLevels = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                      if (!Array.isArray(refs)) {
                        return null;
                      }
                      var order = [];
                      var _iterator3 = _createForOfIteratorHelper(refs), _step3;
                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                          var value = _step3.value;
                          if ((0, _primitives.isRef)(value) && contentGroupRefs.includes(value)) {
                            parsedOrderRefs.put(value);
                            order.push(value.toString());
                            continue;
                          }
                          var nestedOrder = parseNestedOrder(value, nestedLevels);
                          if (nestedOrder) {
                            order.push(nestedOrder);
                          }
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                      if (nestedLevels > 0) {
                        return order;
                      }
                      var hiddenGroups = [];
                      var _iterator4 = _createForOfIteratorHelper(contentGroupRefs), _step4;
                      try {
                        for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                          var groupRef = _step4.value;
                          if (parsedOrderRefs.has(groupRef)) {
                            continue;
                          }
                          hiddenGroups.push(groupRef.toString());
                        }
                      } catch (err) {
                        _iterator4.e(err);
                      } finally {
                        _iterator4.f();
                      }
                      if (hiddenGroups.length) {
                        order.push({
                          name: null,
                          order: hiddenGroups
                        });
                      }
                      return order;
                    }
                    function parseNestedOrder(ref, nestedLevels) {
                      if (++nestedLevels > MAX_NESTED_LEVELS) {
                        (0, _util.warn)("parseNestedOrder - reached MAX_NESTED_LEVELS.");
                        return null;
                      }
                      var value = xref.fetchIfRef(ref);
                      if (!Array.isArray(value)) {
                        return null;
                      }
                      var nestedName = xref.fetchIfRef(value[0]);
                      if (typeof nestedName !== "string") {
                        return null;
                      }
                      var nestedOrder = parseOrder(value.slice(1), nestedLevels);
                      if (!nestedOrder || !nestedOrder.length) {
                        return null;
                      }
                      return {
                        name: (0, _util.stringToPDFString)(nestedName),
                        order: nestedOrder
                      };
                    }
                    var xref = this.xref, parsedOrderRefs = new _primitives.RefSet(), MAX_NESTED_LEVELS = 10;
                    return {
                      name: (0, _util.isString)(config.get("Name")) ? (0, _util.stringToPDFString)(config.get("Name")) : null,
                      creator: (0, _util.isString)(config.get("Creator")) ? (0, _util.stringToPDFString)(config.get("Creator")) : null,
                      baseState: (0, _primitives.isName)(config.get("BaseState")) ? config.get("BaseState").name : null,
                      on: parseOnOff(config.get("ON")),
                      off: parseOnOff(config.get("OFF")),
                      order: parseOrder(config.get("Order")),
                      groups: null
                    };
                  }
                }, {
                  key: "setActualNumPages",
                  value: function setActualNumPages() {
                    var num = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                    this._actualNumPages = num;
                  }
                }, {
                  key: "hasActualNumPages",
                  get: function get() {
                    return this._actualNumPages !== null;
                  }
                }, {
                  key: "_pagesCount",
                  get: function get() {
                    var obj = this.toplevelPagesDict.get("Count");
                    if (!Number.isInteger(obj)) {
                      throw new _util.FormatError("Page count in top-level pages dictionary is not an integer.");
                    }
                    return (0, _util.shadow)(this, "_pagesCount", obj);
                  }
                }, {
                  key: "numPages",
                  get: function get() {
                    return this.hasActualNumPages ? this._actualNumPages : this._pagesCount;
                  }
                }, {
                  key: "destinations",
                  get: function get() {
                    var obj = this._readDests(), dests = /* @__PURE__ */ Object.create(null);
                    if (obj instanceof _name_number_tree.NameTree) {
                      var _iterator5 = _createForOfIteratorHelper(obj.getAll()), _step5;
                      try {
                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                          var _step5$value = _slicedToArray(_step5.value, 2), key = _step5$value[0], value = _step5$value[1];
                          var dest = fetchDestination(value);
                          if (dest) {
                            dests[key] = dest;
                          }
                        }
                      } catch (err) {
                        _iterator5.e(err);
                      } finally {
                        _iterator5.f();
                      }
                    } else if (obj instanceof _primitives.Dict) {
                      obj.forEach(function(key2, value2) {
                        var dest2 = fetchDestination(value2);
                        if (dest2) {
                          dests[key2] = dest2;
                        }
                      });
                    }
                    return (0, _util.shadow)(this, "destinations", dests);
                  }
                }, {
                  key: "getDestination",
                  value: function getDestination(id) {
                    var obj = this._readDests();
                    if (obj instanceof _name_number_tree.NameTree) {
                      var dest = fetchDestination(obj.get(id));
                      if (dest) {
                        return dest;
                      }
                      var allDest = this.destinations[id];
                      if (allDest) {
                        (0, _util.warn)('Found "'.concat(id, '" at an incorrect position in the NameTree.'));
                        return allDest;
                      }
                    } else if (obj instanceof _primitives.Dict) {
                      var _dest = fetchDestination(obj.get(id));
                      if (_dest) {
                        return _dest;
                      }
                    }
                    return null;
                  }
                }, {
                  key: "_readDests",
                  value: function _readDests() {
                    var obj = this._catDict.get("Names");
                    if (obj && obj.has("Dests")) {
                      return new _name_number_tree.NameTree(obj.getRaw("Dests"), this.xref);
                    } else if (this._catDict.has("Dests")) {
                      return this._catDict.get("Dests");
                    }
                    return void 0;
                  }
                }, {
                  key: "pageLabels",
                  get: function get() {
                    var obj = null;
                    try {
                      obj = this._readPageLabels();
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)("Unable to read page labels.");
                    }
                    return (0, _util.shadow)(this, "pageLabels", obj);
                  }
                }, {
                  key: "_readPageLabels",
                  value: function _readPageLabels() {
                    var obj = this._catDict.getRaw("PageLabels");
                    if (!obj) {
                      return null;
                    }
                    var pageLabels = new Array(this.numPages);
                    var style = null, prefix = "";
                    var numberTree = new _name_number_tree.NumberTree(obj, this.xref);
                    var nums = numberTree.getAll();
                    var currentLabel = "", currentIndex = 1;
                    for (var i = 0, ii = this.numPages; i < ii; i++) {
                      var labelDict = nums.get(i);
                      if (labelDict !== void 0) {
                        if (!(0, _primitives.isDict)(labelDict)) {
                          throw new _util.FormatError("PageLabel is not a dictionary.");
                        }
                        if (labelDict.has("Type") && !(0, _primitives.isName)(labelDict.get("Type"), "PageLabel")) {
                          throw new _util.FormatError("Invalid type in PageLabel dictionary.");
                        }
                        if (labelDict.has("S")) {
                          var s = labelDict.get("S");
                          if (!(0, _primitives.isName)(s)) {
                            throw new _util.FormatError("Invalid style in PageLabel dictionary.");
                          }
                          style = s.name;
                        } else {
                          style = null;
                        }
                        if (labelDict.has("P")) {
                          var p = labelDict.get("P");
                          if (!(0, _util.isString)(p)) {
                            throw new _util.FormatError("Invalid prefix in PageLabel dictionary.");
                          }
                          prefix = (0, _util.stringToPDFString)(p);
                        } else {
                          prefix = "";
                        }
                        if (labelDict.has("St")) {
                          var st = labelDict.get("St");
                          if (!(Number.isInteger(st) && st >= 1)) {
                            throw new _util.FormatError("Invalid start in PageLabel dictionary.");
                          }
                          currentIndex = st;
                        } else {
                          currentIndex = 1;
                        }
                      }
                      switch (style) {
                        case "D":
                          currentLabel = currentIndex;
                          break;
                        case "R":
                        case "r":
                          currentLabel = (0, _core_utils.toRomanNumerals)(currentIndex, style === "r");
                          break;
                        case "A":
                        case "a":
                          var LIMIT = 26;
                          var A_UPPER_CASE = 65, A_LOWER_CASE = 97;
                          var baseCharCode = style === "a" ? A_LOWER_CASE : A_UPPER_CASE;
                          var letterIndex = currentIndex - 1;
                          var character = String.fromCharCode(baseCharCode + letterIndex % LIMIT);
                          var charBuf = [];
                          for (var j = 0, jj = letterIndex / LIMIT | 0; j <= jj; j++) {
                            charBuf.push(character);
                          }
                          currentLabel = charBuf.join("");
                          break;
                        default:
                          if (style) {
                            throw new _util.FormatError('Invalid style "'.concat(style, '" in PageLabel dictionary.'));
                          }
                          currentLabel = "";
                      }
                      pageLabels[i] = prefix + currentLabel;
                      currentIndex++;
                    }
                    return pageLabels;
                  }
                }, {
                  key: "pageLayout",
                  get: function get() {
                    var obj = this._catDict.get("PageLayout");
                    var pageLayout = "";
                    if ((0, _primitives.isName)(obj)) {
                      switch (obj.name) {
                        case "SinglePage":
                        case "OneColumn":
                        case "TwoColumnLeft":
                        case "TwoColumnRight":
                        case "TwoPageLeft":
                        case "TwoPageRight":
                          pageLayout = obj.name;
                      }
                    }
                    return (0, _util.shadow)(this, "pageLayout", pageLayout);
                  }
                }, {
                  key: "pageMode",
                  get: function get() {
                    var obj = this._catDict.get("PageMode");
                    var pageMode = "UseNone";
                    if ((0, _primitives.isName)(obj)) {
                      switch (obj.name) {
                        case "UseNone":
                        case "UseOutlines":
                        case "UseThumbs":
                        case "FullScreen":
                        case "UseOC":
                        case "UseAttachments":
                          pageMode = obj.name;
                      }
                    }
                    return (0, _util.shadow)(this, "pageMode", pageMode);
                  }
                }, {
                  key: "viewerPreferences",
                  get: function get() {
                    var _this = this;
                    var ViewerPreferencesValidators = {
                      HideToolbar: _util.isBool,
                      HideMenubar: _util.isBool,
                      HideWindowUI: _util.isBool,
                      FitWindow: _util.isBool,
                      CenterWindow: _util.isBool,
                      DisplayDocTitle: _util.isBool,
                      NonFullScreenPageMode: _primitives.isName,
                      Direction: _primitives.isName,
                      ViewArea: _primitives.isName,
                      ViewClip: _primitives.isName,
                      PrintArea: _primitives.isName,
                      PrintClip: _primitives.isName,
                      PrintScaling: _primitives.isName,
                      Duplex: _primitives.isName,
                      PickTrayByPDFSize: _util.isBool,
                      PrintPageRange: Array.isArray,
                      NumCopies: Number.isInteger
                    };
                    var obj = this._catDict.get("ViewerPreferences");
                    var prefs = null;
                    if ((0, _primitives.isDict)(obj)) {
                      for (var key in ViewerPreferencesValidators) {
                        if (!obj.has(key)) {
                          continue;
                        }
                        var value = obj.get(key);
                        if (!ViewerPreferencesValidators[key](value)) {
                          (0, _util.info)('Bad value in ViewerPreferences for "'.concat(key, '".'));
                          continue;
                        }
                        var prefValue = void 0;
                        switch (key) {
                          case "NonFullScreenPageMode":
                            switch (value.name) {
                              case "UseNone":
                              case "UseOutlines":
                              case "UseThumbs":
                              case "UseOC":
                                prefValue = value.name;
                                break;
                              default:
                                prefValue = "UseNone";
                            }
                            break;
                          case "Direction":
                            switch (value.name) {
                              case "L2R":
                              case "R2L":
                                prefValue = value.name;
                                break;
                              default:
                                prefValue = "L2R";
                            }
                            break;
                          case "ViewArea":
                          case "ViewClip":
                          case "PrintArea":
                          case "PrintClip":
                            switch (value.name) {
                              case "MediaBox":
                              case "CropBox":
                              case "BleedBox":
                              case "TrimBox":
                              case "ArtBox":
                                prefValue = value.name;
                                break;
                              default:
                                prefValue = "CropBox";
                            }
                            break;
                          case "PrintScaling":
                            switch (value.name) {
                              case "None":
                              case "AppDefault":
                                prefValue = value.name;
                                break;
                              default:
                                prefValue = "AppDefault";
                            }
                            break;
                          case "Duplex":
                            switch (value.name) {
                              case "Simplex":
                              case "DuplexFlipShortEdge":
                              case "DuplexFlipLongEdge":
                                prefValue = value.name;
                                break;
                              default:
                                prefValue = "None";
                            }
                            break;
                          case "PrintPageRange":
                            var length = value.length;
                            if (length % 2 !== 0) {
                              break;
                            }
                            var isValid = value.every(function(page, i, arr) {
                              return Number.isInteger(page) && page > 0 && (i === 0 || page >= arr[i - 1]) && page <= _this.numPages;
                            });
                            if (isValid) {
                              prefValue = value;
                            }
                            break;
                          case "NumCopies":
                            if (value > 0) {
                              prefValue = value;
                            }
                            break;
                          default:
                            if (typeof value !== "boolean") {
                              throw new _util.FormatError("viewerPreferences - expected a boolean value for: ".concat(key));
                            }
                            prefValue = value;
                        }
                        if (prefValue !== void 0) {
                          if (!prefs) {
                            prefs = /* @__PURE__ */ Object.create(null);
                          }
                          prefs[key] = prefValue;
                        } else {
                          (0, _util.info)('Bad value in ViewerPreferences for "'.concat(key, '".'));
                        }
                      }
                    }
                    return (0, _util.shadow)(this, "viewerPreferences", prefs);
                  }
                }, {
                  key: "openAction",
                  get: function get() {
                    var obj = this._catDict.get("OpenAction");
                    var openAction = /* @__PURE__ */ Object.create(null);
                    if ((0, _primitives.isDict)(obj)) {
                      var destDict = new _primitives.Dict(this.xref);
                      destDict.set("A", obj);
                      var resultObj = {
                        url: null,
                        dest: null,
                        action: null
                      };
                      Catalog2.parseDestDictionary({
                        destDict,
                        resultObj
                      });
                      if (Array.isArray(resultObj.dest)) {
                        openAction.dest = resultObj.dest;
                      } else if (resultObj.action) {
                        openAction.action = resultObj.action;
                      }
                    } else if (Array.isArray(obj)) {
                      openAction.dest = obj;
                    }
                    return (0, _util.shadow)(this, "openAction", (0, _util.objectSize)(openAction) > 0 ? openAction : null);
                  }
                }, {
                  key: "attachments",
                  get: function get() {
                    var obj = this._catDict.get("Names");
                    var attachments = null;
                    if (obj instanceof _primitives.Dict && obj.has("EmbeddedFiles")) {
                      var nameTree = new _name_number_tree.NameTree(obj.getRaw("EmbeddedFiles"), this.xref);
                      var _iterator6 = _createForOfIteratorHelper(nameTree.getAll()), _step6;
                      try {
                        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                          var _step6$value = _slicedToArray(_step6.value, 2), key = _step6$value[0], value = _step6$value[1];
                          var fs = new _file_spec.FileSpec(value, this.xref);
                          if (!attachments) {
                            attachments = /* @__PURE__ */ Object.create(null);
                          }
                          attachments[(0, _util.stringToPDFString)(key)] = fs.serializable;
                        }
                      } catch (err) {
                        _iterator6.e(err);
                      } finally {
                        _iterator6.f();
                      }
                    }
                    return (0, _util.shadow)(this, "attachments", attachments);
                  }
                }, {
                  key: "xfaImages",
                  get: function get() {
                    var obj = this._catDict.get("Names");
                    var xfaImages = null;
                    if (obj instanceof _primitives.Dict && obj.has("XFAImages")) {
                      var nameTree = new _name_number_tree.NameTree(obj.getRaw("XFAImages"), this.xref);
                      var _iterator7 = _createForOfIteratorHelper(nameTree.getAll()), _step7;
                      try {
                        for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                          var _step7$value = _slicedToArray(_step7.value, 2), key = _step7$value[0], value = _step7$value[1];
                          if (!xfaImages) {
                            xfaImages = new _primitives.Dict(this.xref);
                          }
                          xfaImages.set(key, value);
                        }
                      } catch (err) {
                        _iterator7.e(err);
                      } finally {
                        _iterator7.f();
                      }
                    }
                    return (0, _util.shadow)(this, "xfaImages", xfaImages);
                  }
                }, {
                  key: "_collectJavaScript",
                  value: function _collectJavaScript() {
                    var obj = this._catDict.get("Names");
                    var javaScript = null;
                    function appendIfJavaScriptDict(name, jsDict) {
                      if (!(jsDict instanceof _primitives.Dict)) {
                        return;
                      }
                      if (!(0, _primitives.isName)(jsDict.get("S"), "JavaScript")) {
                        return;
                      }
                      var js = jsDict.get("JS");
                      if ((0, _primitives.isStream)(js)) {
                        js = js.getString();
                      } else if (typeof js !== "string") {
                        return;
                      }
                      if (javaScript === null) {
                        javaScript = /* @__PURE__ */ new Map();
                      }
                      javaScript.set(name, (0, _util.stringToPDFString)(js));
                    }
                    if (obj instanceof _primitives.Dict && obj.has("JavaScript")) {
                      var nameTree = new _name_number_tree.NameTree(obj.getRaw("JavaScript"), this.xref);
                      var _iterator8 = _createForOfIteratorHelper(nameTree.getAll()), _step8;
                      try {
                        for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                          var _step8$value = _slicedToArray(_step8.value, 2), key = _step8$value[0], value = _step8$value[1];
                          appendIfJavaScriptDict(key, value);
                        }
                      } catch (err) {
                        _iterator8.e(err);
                      } finally {
                        _iterator8.f();
                      }
                    }
                    var openAction = this._catDict.get("OpenAction");
                    if (openAction) {
                      appendIfJavaScriptDict("OpenAction", openAction);
                    }
                    return javaScript;
                  }
                }, {
                  key: "javaScript",
                  get: function get() {
                    var javaScript = this._collectJavaScript();
                    return (0, _util.shadow)(this, "javaScript", javaScript ? _toConsumableArray(javaScript.values()) : null);
                  }
                }, {
                  key: "jsActions",
                  get: function get() {
                    var javaScript = this._collectJavaScript();
                    var actions = (0, _core_utils.collectActions)(this.xref, this._catDict, _util.DocumentActionEventType);
                    if (javaScript) {
                      if (!actions) {
                        actions = /* @__PURE__ */ Object.create(null);
                      }
                      var _iterator9 = _createForOfIteratorHelper(javaScript), _step9;
                      try {
                        for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                          var _step9$value = _slicedToArray(_step9.value, 2), key = _step9$value[0], val = _step9$value[1];
                          if (key in actions) {
                            actions[key].push(val);
                          } else {
                            actions[key] = [val];
                          }
                        }
                      } catch (err) {
                        _iterator9.e(err);
                      } finally {
                        _iterator9.f();
                      }
                    }
                    return (0, _util.shadow)(this, "jsActions", actions);
                  }
                }, {
                  key: "fontFallback",
                  value: function fontFallback(id, handler) {
                    var promises = [];
                    this.fontCache.forEach(function(promise) {
                      promises.push(promise);
                    });
                    return Promise.all(promises).then(function(translatedFonts) {
                      var _iterator10 = _createForOfIteratorHelper(translatedFonts), _step10;
                      try {
                        for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                          var translatedFont = _step10.value;
                          if (translatedFont.loadedName === id) {
                            translatedFont.fallback(handler);
                            return;
                          }
                        }
                      } catch (err) {
                        _iterator10.e(err);
                      } finally {
                        _iterator10.f();
                      }
                    });
                  }
                }, {
                  key: "cleanup",
                  value: function cleanup() {
                    var _this2 = this;
                    var manuallyTriggered = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    (0, _primitives.clearPrimitiveCaches)();
                    this.globalImageCache.clear(manuallyTriggered);
                    this.pageKidsCountCache.clear();
                    this.pageIndexCache.clear();
                    this.nonBlendModesSet.clear();
                    var promises = [];
                    this.fontCache.forEach(function(promise) {
                      promises.push(promise);
                    });
                    return Promise.all(promises).then(function(translatedFonts) {
                      var _iterator11 = _createForOfIteratorHelper(translatedFonts), _step11;
                      try {
                        for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                          var dict = _step11.value.dict;
                          delete dict.cacheKey;
                        }
                      } catch (err) {
                        _iterator11.e(err);
                      } finally {
                        _iterator11.f();
                      }
                      _this2.fontCache.clear();
                      _this2.builtInCMapCache.clear();
                      _this2.standardFontDataCache.clear();
                    });
                  }
                }, {
                  key: "getPageDict",
                  value: function getPageDict(pageIndex) {
                    var capability = (0, _util.createPromiseCapability)();
                    var nodesToVisit = [this.toplevelPagesDict];
                    var visitedNodes = new _primitives.RefSet();
                    var pagesRef = this._catDict.getRaw("Pages");
                    if (pagesRef instanceof _primitives.Ref) {
                      visitedNodes.put(pagesRef);
                    }
                    var xref = this.xref, pageKidsCountCache = this.pageKidsCountCache;
                    var currentPageIndex = 0;
                    function next() {
                      var _loop = function _loop2() {
                        var currentNode = nodesToVisit.pop();
                        if (currentNode instanceof _primitives.Ref) {
                          var _count = pageKidsCountCache.get(currentNode);
                          if (_count >= 0 && currentPageIndex + _count <= pageIndex) {
                            currentPageIndex += _count;
                            return "continue";
                          }
                          if (visitedNodes.has(currentNode)) {
                            capability.reject(new _util.FormatError("Pages tree contains circular reference."));
                            return {
                              v: void 0
                            };
                          }
                          visitedNodes.put(currentNode);
                          xref.fetchAsync(currentNode).then(function(obj) {
                            if ((0, _primitives.isDict)(obj, "Page") || (0, _primitives.isDict)(obj) && !obj.has("Kids")) {
                              if (currentNode && !pageKidsCountCache.has(currentNode)) {
                                pageKidsCountCache.put(currentNode, 1);
                              }
                              if (pageIndex === currentPageIndex) {
                                capability.resolve([obj, currentNode]);
                              } else {
                                currentPageIndex++;
                                next();
                              }
                              return;
                            }
                            nodesToVisit.push(obj);
                            next();
                          }, capability.reject);
                          return {
                            v: void 0
                          };
                        }
                        if (!(currentNode instanceof _primitives.Dict)) {
                          capability.reject(new _util.FormatError("Page dictionary kid reference points to wrong type of object."));
                          return {
                            v: void 0
                          };
                        }
                        var count = void 0;
                        try {
                          count = currentNode.get("Count");
                        } catch (ex) {
                          if (ex instanceof _core_utils.MissingDataException) {
                            throw ex;
                          }
                        }
                        if (Number.isInteger(count) && count >= 0) {
                          var objId = currentNode.objId;
                          if (objId && !pageKidsCountCache.has(objId)) {
                            pageKidsCountCache.put(objId, count);
                          }
                          if (currentPageIndex + count <= pageIndex) {
                            currentPageIndex += count;
                            return "continue";
                          }
                        }
                        var kids = void 0;
                        try {
                          kids = currentNode.get("Kids");
                        } catch (ex) {
                          if (ex instanceof _core_utils.MissingDataException) {
                            throw ex;
                          }
                        }
                        if (!Array.isArray(kids)) {
                          var type;
                          try {
                            type = currentNode.get("Type");
                          } catch (ex) {
                            if (ex instanceof _core_utils.MissingDataException) {
                              throw ex;
                            }
                          }
                          if ((0, _primitives.isName)(type, "Page") || !currentNode.has("Type") && currentNode.has("Contents")) {
                            if (currentPageIndex === pageIndex) {
                              capability.resolve([currentNode, null]);
                              return {
                                v: void 0
                              };
                            }
                            currentPageIndex++;
                            return "continue";
                          }
                          capability.reject(new _util.FormatError("Page dictionary kids object is not an array."));
                          return {
                            v: void 0
                          };
                        }
                        for (var last = kids.length - 1; last >= 0; last--) {
                          nodesToVisit.push(kids[last]);
                        }
                      };
                      while (nodesToVisit.length) {
                        var _ret = _loop();
                        if (_ret === "continue")
                          continue;
                        if (_typeof(_ret) === "object")
                          return _ret.v;
                      }
                      capability.reject(new Error("Page index ".concat(pageIndex, " not found.")));
                    }
                    next();
                    return capability.promise;
                  }
                }, {
                  key: "getAllPageDicts",
                  value: function getAllPageDicts() {
                    var recoveryMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    var queue = [{
                      currentNode: this.toplevelPagesDict,
                      posInKids: 0
                    }];
                    var visitedNodes = new _primitives.RefSet();
                    var pagesRef = this._catDict.getRaw("Pages");
                    if (pagesRef instanceof _primitives.Ref) {
                      visitedNodes.put(pagesRef);
                    }
                    var map = /* @__PURE__ */ new Map();
                    var pageIndex = 0;
                    function addPageDict(pageDict, pageRef) {
                      map.set(pageIndex++, [pageDict, pageRef]);
                    }
                    function addPageError(error) {
                      map.set(pageIndex++, [error, null]);
                    }
                    while (queue.length > 0) {
                      var queueItem = queue[queue.length - 1];
                      var currentNode = queueItem.currentNode, posInKids = queueItem.posInKids;
                      var kids = void 0;
                      try {
                        kids = currentNode.get("Kids");
                      } catch (ex) {
                        if (ex instanceof _core_utils.MissingDataException) {
                          throw ex;
                        }
                        if (ex instanceof _core_utils.XRefEntryException && !recoveryMode) {
                          throw ex;
                        }
                        addPageError(ex);
                        break;
                      }
                      if (!Array.isArray(kids)) {
                        addPageError(new _util.FormatError("Page dictionary kids object is not an array."));
                        break;
                      }
                      if (posInKids >= kids.length) {
                        queue.pop();
                        continue;
                      }
                      var kidObj = kids[posInKids];
                      var obj = void 0;
                      if (kidObj instanceof _primitives.Ref) {
                        try {
                          obj = this.xref.fetch(kidObj);
                        } catch (ex) {
                          if (ex instanceof _core_utils.MissingDataException) {
                            throw ex;
                          }
                          if (ex instanceof _core_utils.XRefEntryException && !recoveryMode) {
                            throw ex;
                          }
                          addPageError(ex);
                          break;
                        }
                        if (visitedNodes.has(kidObj)) {
                          addPageError(new _util.FormatError("Pages tree contains circular reference."));
                          break;
                        }
                        visitedNodes.put(kidObj);
                      } else {
                        obj = kidObj;
                      }
                      if (!(obj instanceof _primitives.Dict)) {
                        addPageError(new _util.FormatError("Page dictionary kid reference points to wrong type of object."));
                        break;
                      }
                      if ((0, _primitives.isDict)(obj, "Page") || !obj.has("Kids")) {
                        addPageDict(obj, kidObj instanceof _primitives.Ref ? kidObj : null);
                      } else {
                        queue.push({
                          currentNode: obj,
                          posInKids: 0
                        });
                      }
                      queueItem.posInKids++;
                    }
                    return map;
                  }
                }, {
                  key: "getPageIndex",
                  value: function getPageIndex(pageRef) {
                    var _this3 = this;
                    var cachedPageIndex = this.pageIndexCache.get(pageRef);
                    if (cachedPageIndex !== void 0) {
                      return Promise.resolve(cachedPageIndex);
                    }
                    var xref = this.xref;
                    function pagesBeforeRef(kidRef) {
                      var total2 = 0, parentRef;
                      return xref.fetchAsync(kidRef).then(function(node) {
                        if ((0, _primitives.isRefsEqual)(kidRef, pageRef) && !(0, _primitives.isDict)(node, "Page") && !((0, _primitives.isDict)(node) && !node.has("Type") && node.has("Contents"))) {
                          throw new _util.FormatError("The reference does not point to a /Page dictionary.");
                        }
                        if (!node) {
                          return null;
                        }
                        if (!(0, _primitives.isDict)(node)) {
                          throw new _util.FormatError("Node must be a dictionary.");
                        }
                        parentRef = node.getRaw("Parent");
                        return node.getAsync("Parent");
                      }).then(function(parent) {
                        if (!parent) {
                          return null;
                        }
                        if (!(0, _primitives.isDict)(parent)) {
                          throw new _util.FormatError("Parent must be a dictionary.");
                        }
                        return parent.getAsync("Kids");
                      }).then(function(kids) {
                        if (!kids) {
                          return null;
                        }
                        var kidPromises = [];
                        var found = false;
                        for (var i = 0, ii = kids.length; i < ii; i++) {
                          var kid = kids[i];
                          if (!(0, _primitives.isRef)(kid)) {
                            throw new _util.FormatError("Kid must be a reference.");
                          }
                          if ((0, _primitives.isRefsEqual)(kid, kidRef)) {
                            found = true;
                            break;
                          }
                          kidPromises.push(xref.fetchAsync(kid).then(function(obj) {
                            if (!(0, _primitives.isDict)(obj)) {
                              throw new _util.FormatError("Kid node must be a dictionary.");
                            }
                            if (obj.has("Count")) {
                              total2 += obj.get("Count");
                            } else {
                              total2++;
                            }
                          }));
                        }
                        if (!found) {
                          throw new _util.FormatError("Kid reference not found in parent's kids.");
                        }
                        return Promise.all(kidPromises).then(function() {
                          return [total2, parentRef];
                        });
                      });
                    }
                    var total = 0;
                    var next = function next2(ref) {
                      return pagesBeforeRef(ref).then(function(args) {
                        if (!args) {
                          _this3.pageIndexCache.put(pageRef, total);
                          return total;
                        }
                        var _args = _slicedToArray(args, 2), count = _args[0], parentRef = _args[1];
                        total += count;
                        return next2(parentRef);
                      });
                    };
                    return next(pageRef);
                  }
                }], [{
                  key: "parseDestDictionary",
                  value: function parseDestDictionary(params) {
                    var destDict = params.destDict;
                    if (!(0, _primitives.isDict)(destDict)) {
                      (0, _util.warn)("parseDestDictionary: `destDict` must be a dictionary.");
                      return;
                    }
                    var resultObj = params.resultObj;
                    if (_typeof(resultObj) !== "object") {
                      (0, _util.warn)("parseDestDictionary: `resultObj` must be an object.");
                      return;
                    }
                    var docBaseUrl = params.docBaseUrl || null;
                    var action = destDict.get("A"), url, dest;
                    if (!(0, _primitives.isDict)(action)) {
                      if (destDict.has("Dest")) {
                        action = destDict.get("Dest");
                      } else {
                        action = destDict.get("AA");
                        if ((0, _primitives.isDict)(action)) {
                          if (action.has("D")) {
                            action = action.get("D");
                          } else if (action.has("U")) {
                            action = action.get("U");
                          }
                        }
                      }
                    }
                    if ((0, _primitives.isDict)(action)) {
                      var actionType = action.get("S");
                      if (!(0, _primitives.isName)(actionType)) {
                        (0, _util.warn)("parseDestDictionary: Invalid type in Action dictionary.");
                        return;
                      }
                      var actionName = actionType.name;
                      switch (actionName) {
                        case "ResetForm":
                          var flags = action.get("Flags");
                          var include = (((0, _util.isNum)(flags) ? flags : 0) & 1) === 0;
                          var fields = [];
                          var refs = [];
                          var _iterator12 = _createForOfIteratorHelper(action.get("Fields") || []), _step12;
                          try {
                            for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                              var obj = _step12.value;
                              if ((0, _primitives.isRef)(obj)) {
                                refs.push(obj.toString());
                              } else if ((0, _util.isString)(obj)) {
                                fields.push((0, _util.stringToPDFString)(obj));
                              }
                            }
                          } catch (err) {
                            _iterator12.e(err);
                          } finally {
                            _iterator12.f();
                          }
                          resultObj.resetForm = {
                            fields,
                            refs,
                            include
                          };
                          break;
                        case "URI":
                          url = action.get("URI");
                          if (url instanceof _primitives.Name) {
                            url = "/" + url.name;
                          }
                          break;
                        case "GoTo":
                          dest = action.get("D");
                          break;
                        case "Launch":
                        case "GoToR":
                          var urlDict = action.get("F");
                          if ((0, _primitives.isDict)(urlDict)) {
                            url = urlDict.get("F") || null;
                          } else if ((0, _util.isString)(urlDict)) {
                            url = urlDict;
                          }
                          var remoteDest = action.get("D");
                          if (remoteDest) {
                            if ((0, _primitives.isName)(remoteDest)) {
                              remoteDest = remoteDest.name;
                            }
                            if ((0, _util.isString)(url)) {
                              var baseUrl = url.split("#")[0];
                              if ((0, _util.isString)(remoteDest)) {
                                url = baseUrl + "#" + remoteDest;
                              } else if (Array.isArray(remoteDest)) {
                                url = baseUrl + "#" + JSON.stringify(remoteDest);
                              }
                            }
                          }
                          var newWindow = action.get("NewWindow");
                          if ((0, _util.isBool)(newWindow)) {
                            resultObj.newWindow = newWindow;
                          }
                          break;
                        case "Named":
                          var namedAction = action.get("N");
                          if ((0, _primitives.isName)(namedAction)) {
                            resultObj.action = namedAction.name;
                          }
                          break;
                        case "JavaScript":
                          var jsAction = action.get("JS");
                          var js;
                          if ((0, _primitives.isStream)(jsAction)) {
                            js = jsAction.getString();
                          } else if ((0, _util.isString)(jsAction)) {
                            js = jsAction;
                          }
                          var jsURL = js && (0, _core_utils.recoverJsURL)((0, _util.stringToPDFString)(js));
                          if (jsURL) {
                            url = jsURL.url;
                            resultObj.newWindow = jsURL.newWindow;
                            break;
                          }
                        default:
                          if (actionName === "JavaScript" || actionName === "SubmitForm") {
                            break;
                          }
                          (0, _util.warn)('parseDestDictionary - unsupported action: "'.concat(actionName, '".'));
                          break;
                      }
                    } else if (destDict.has("Dest")) {
                      dest = destDict.get("Dest");
                    }
                    if ((0, _util.isString)(url)) {
                      var absoluteUrl = (0, _util.createValidAbsoluteUrl)(url, docBaseUrl, {
                        addDefaultProtocol: true,
                        tryConvertEncoding: true
                      });
                      if (absoluteUrl) {
                        resultObj.url = absoluteUrl.href;
                      }
                      resultObj.unsafeUrl = url;
                    }
                    if (dest) {
                      if ((0, _primitives.isName)(dest)) {
                        dest = dest.name;
                      }
                      if ((0, _util.isString)(dest) || Array.isArray(dest)) {
                        resultObj.dest = dest;
                      }
                    }
                  }
                }]);
                return Catalog2;
              }();
              exports2.Catalog = Catalog;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.NumberTree = exports2.NameTree = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var NameOrNumberTree = /* @__PURE__ */ function() {
                function NameOrNumberTree2(root, xref, type) {
                  _classCallCheck(this, NameOrNumberTree2);
                  if (this.constructor === NameOrNumberTree2) {
                    (0, _util.unreachable)("Cannot initialize NameOrNumberTree.");
                  }
                  this.root = root;
                  this.xref = xref;
                  this._type = type;
                }
                _createClass(NameOrNumberTree2, [{
                  key: "getAll",
                  value: function getAll() {
                    var map = /* @__PURE__ */ new Map();
                    if (!this.root) {
                      return map;
                    }
                    var xref = this.xref;
                    var processed = new _primitives.RefSet();
                    processed.put(this.root);
                    var queue = [this.root];
                    while (queue.length > 0) {
                      var obj = xref.fetchIfRef(queue.shift());
                      if (!(0, _primitives.isDict)(obj)) {
                        continue;
                      }
                      if (obj.has("Kids")) {
                        var kids = obj.get("Kids");
                        for (var i = 0, ii = kids.length; i < ii; i++) {
                          var kid = kids[i];
                          if (processed.has(kid)) {
                            throw new _util.FormatError('Duplicate entry in "'.concat(this._type, '" tree.'));
                          }
                          queue.push(kid);
                          processed.put(kid);
                        }
                        continue;
                      }
                      var entries = obj.get(this._type);
                      if (!Array.isArray(entries)) {
                        continue;
                      }
                      for (var _i = 0, _ii = entries.length; _i < _ii; _i += 2) {
                        map.set(xref.fetchIfRef(entries[_i]), xref.fetchIfRef(entries[_i + 1]));
                      }
                    }
                    return map;
                  }
                }, {
                  key: "get",
                  value: function get(key) {
                    if (!this.root) {
                      return null;
                    }
                    var xref = this.xref;
                    var kidsOrEntries = xref.fetchIfRef(this.root);
                    var loopCount = 0;
                    var MAX_LEVELS = 10;
                    while (kidsOrEntries.has("Kids")) {
                      if (++loopCount > MAX_LEVELS) {
                        (0, _util.warn)('Search depth limit reached for "'.concat(this._type, '" tree.'));
                        return null;
                      }
                      var kids = kidsOrEntries.get("Kids");
                      if (!Array.isArray(kids)) {
                        return null;
                      }
                      var l = 0, r = kids.length - 1;
                      while (l <= r) {
                        var m = l + r >> 1;
                        var kid = xref.fetchIfRef(kids[m]);
                        var limits = kid.get("Limits");
                        if (key < xref.fetchIfRef(limits[0])) {
                          r = m - 1;
                        } else if (key > xref.fetchIfRef(limits[1])) {
                          l = m + 1;
                        } else {
                          kidsOrEntries = xref.fetchIfRef(kids[m]);
                          break;
                        }
                      }
                      if (l > r) {
                        return null;
                      }
                    }
                    var entries = kidsOrEntries.get(this._type);
                    if (Array.isArray(entries)) {
                      var _l = 0, _r = entries.length - 2;
                      while (_l <= _r) {
                        var tmp = _l + _r >> 1, _m = tmp + (tmp & 1);
                        var currentKey = xref.fetchIfRef(entries[_m]);
                        if (key < currentKey) {
                          _r = _m - 2;
                        } else if (key > currentKey) {
                          _l = _m + 2;
                        } else {
                          return xref.fetchIfRef(entries[_m + 1]);
                        }
                      }
                    }
                    return null;
                  }
                }]);
                return NameOrNumberTree2;
              }();
              var NameTree = /* @__PURE__ */ function(_NameOrNumberTree) {
                _inherits(NameTree2, _NameOrNumberTree);
                var _super = _createSuper(NameTree2);
                function NameTree2(root, xref) {
                  _classCallCheck(this, NameTree2);
                  return _super.call(this, root, xref, "Names");
                }
                return NameTree2;
              }(NameOrNumberTree);
              exports2.NameTree = NameTree;
              var NumberTree = /* @__PURE__ */ function(_NameOrNumberTree2) {
                _inherits(NumberTree2, _NameOrNumberTree2);
                var _super2 = _createSuper(NumberTree2);
                function NumberTree2(root, xref) {
                  _classCallCheck(this, NumberTree2);
                  return _super2.call(this, root, xref, "Nums");
                }
                return NumberTree2;
              }(NameOrNumberTree);
              exports2.NumberTree = NumberTree;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.FileSpec = void 0;
              var _primitives = __w_pdfjs_require__2(135);
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function pickPlatformItem(dict) {
                if (dict.has("UF")) {
                  return dict.get("UF");
                } else if (dict.has("F")) {
                  return dict.get("F");
                } else if (dict.has("Unix")) {
                  return dict.get("Unix");
                } else if (dict.has("Mac")) {
                  return dict.get("Mac");
                } else if (dict.has("DOS")) {
                  return dict.get("DOS");
                }
                return null;
              }
              var FileSpec = /* @__PURE__ */ function() {
                function FileSpec2(root, xref) {
                  _classCallCheck(this, FileSpec2);
                  if (!root || !(0, _primitives.isDict)(root)) {
                    return;
                  }
                  this.xref = xref;
                  this.root = root;
                  if (root.has("FS")) {
                    this.fs = root.get("FS");
                  }
                  this.description = root.has("Desc") ? (0, _util.stringToPDFString)(root.get("Desc")) : "";
                  if (root.has("RF")) {
                    (0, _util.warn)("Related file specifications are not supported");
                  }
                  this.contentAvailable = true;
                  if (!root.has("EF")) {
                    this.contentAvailable = false;
                    (0, _util.warn)("Non-embedded file specifications are not supported");
                  }
                }
                _createClass(FileSpec2, [{
                  key: "filename",
                  get: function get() {
                    if (!this._filename && this.root) {
                      var filename = pickPlatformItem(this.root) || "unnamed";
                      this._filename = (0, _util.stringToPDFString)(filename).replace(/\\\\/g, "\\").replace(/\\\//g, "/").replace(/\\/g, "/");
                    }
                    return this._filename;
                  }
                }, {
                  key: "content",
                  get: function get() {
                    if (!this.contentAvailable) {
                      return null;
                    }
                    if (!this.contentRef && this.root) {
                      this.contentRef = pickPlatformItem(this.root.get("EF"));
                    }
                    var content = null;
                    if (this.contentRef) {
                      var fileObj = this.xref.fetchIfRef(this.contentRef);
                      if (fileObj && (0, _primitives.isStream)(fileObj)) {
                        content = fileObj.getBytes();
                      } else {
                        (0, _util.warn)("Embedded file specification points to non-existing/invalid content");
                      }
                    } else {
                      (0, _util.warn)("Embedded file specification does not have a content");
                    }
                    return content;
                  }
                }, {
                  key: "serializable",
                  get: function get() {
                    return {
                      filename: this.filename,
                      content: this.content
                    };
                  }
                }]);
                return FileSpec2;
              }();
              exports2.FileSpec = FileSpec;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.MetadataParser = void 0;
              var _xml_parser = __w_pdfjs_require__2(198);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var MetadataParser = /* @__PURE__ */ function() {
                function MetadataParser2(data) {
                  _classCallCheck(this, MetadataParser2);
                  data = this._repair(data);
                  var parser = new _xml_parser.SimpleXMLParser({
                    lowerCaseName: true
                  });
                  var xmlDocument = parser.parseFromString(data);
                  this._metadataMap = /* @__PURE__ */ new Map();
                  this._data = data;
                  if (xmlDocument) {
                    this._parse(xmlDocument);
                  }
                }
                _createClass(MetadataParser2, [{
                  key: "_repair",
                  value: function _repair(data) {
                    return data.replace(/^[^<]+/, "").replace(/>\\376\\377([^<]+)/g, function(all, codes) {
                      var bytes = codes.replace(/\\([0-3])([0-7])([0-7])/g, function(code2, d1, d2, d3) {
                        return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);
                      }).replace(/&(amp|apos|gt|lt|quot);/g, function(str, name) {
                        switch (name) {
                          case "amp":
                            return "&";
                          case "apos":
                            return "'";
                          case "gt":
                            return ">";
                          case "lt":
                            return "<";
                          case "quot":
                            return '"';
                        }
                        throw new Error("_repair: ".concat(name, " isn't defined."));
                      });
                      var charBuf = [];
                      for (var i = 0, ii = bytes.length; i < ii; i += 2) {
                        var code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);
                        if (code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38) {
                          charBuf.push(String.fromCharCode(code));
                        } else {
                          charBuf.push("&#x" + (65536 + code).toString(16).substring(1) + ";");
                        }
                      }
                      return ">" + charBuf.join("");
                    });
                  }
                }, {
                  key: "_getSequence",
                  value: function _getSequence(entry) {
                    var name = entry.nodeName;
                    if (name !== "rdf:bag" && name !== "rdf:seq" && name !== "rdf:alt") {
                      return null;
                    }
                    return entry.childNodes.filter(function(node) {
                      return node.nodeName === "rdf:li";
                    });
                  }
                }, {
                  key: "_parseArray",
                  value: function _parseArray(entry) {
                    if (!entry.hasChildNodes()) {
                      return;
                    }
                    var _entry$childNodes = _slicedToArray(entry.childNodes, 1), seqNode = _entry$childNodes[0];
                    var sequence = this._getSequence(seqNode) || [];
                    this._metadataMap.set(entry.nodeName, sequence.map(function(node) {
                      return node.textContent.trim();
                    }));
                  }
                }, {
                  key: "_parse",
                  value: function _parse(xmlDocument) {
                    var rdf = xmlDocument.documentElement;
                    if (rdf.nodeName !== "rdf:rdf") {
                      rdf = rdf.firstChild;
                      while (rdf && rdf.nodeName !== "rdf:rdf") {
                        rdf = rdf.nextSibling;
                      }
                    }
                    if (!rdf || rdf.nodeName !== "rdf:rdf" || !rdf.hasChildNodes()) {
                      return;
                    }
                    var _iterator = _createForOfIteratorHelper(rdf.childNodes), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var desc = _step.value;
                        if (desc.nodeName !== "rdf:description") {
                          continue;
                        }
                        var _iterator2 = _createForOfIteratorHelper(desc.childNodes), _step2;
                        try {
                          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                            var entry = _step2.value;
                            var name = entry.nodeName;
                            switch (name) {
                              case "#text":
                                continue;
                              case "dc:creator":
                              case "dc:subject":
                                this._parseArray(entry);
                                continue;
                            }
                            this._metadataMap.set(name, entry.textContent.trim());
                          }
                        } catch (err) {
                          _iterator2.e(err);
                        } finally {
                          _iterator2.f();
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                  }
                }, {
                  key: "serializable",
                  get: function get() {
                    return {
                      parsedData: this._metadataMap,
                      rawData: this._data
                    };
                  }
                }]);
                return MetadataParser2;
              }();
              exports2.MetadataParser = MetadataParser;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.XMLParserErrorCode = exports2.XMLParserBase = exports2.SimpleXMLParser = exports2.SimpleDOMNode = void 0;
              var _core_utils = __w_pdfjs_require__2(139);
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var XMLParserErrorCode = {
                NoError: 0,
                EndOfDocument: -1,
                UnterminatedCdat: -2,
                UnterminatedXmlDeclaration: -3,
                UnterminatedDoctypeDeclaration: -4,
                UnterminatedComment: -5,
                MalformedElement: -6,
                OutOfMemory: -7,
                UnterminatedAttributeValue: -8,
                UnterminatedElement: -9,
                ElementNeverBegun: -10
              };
              exports2.XMLParserErrorCode = XMLParserErrorCode;
              function isWhitespace(s, index) {
                var ch = s[index];
                return ch === " " || ch === "\n" || ch === "\r" || ch === "	";
              }
              function isWhitespaceString(s) {
                for (var i = 0, ii = s.length; i < ii; i++) {
                  if (!isWhitespace(s, i)) {
                    return false;
                  }
                }
                return true;
              }
              var XMLParserBase = /* @__PURE__ */ function() {
                function XMLParserBase2() {
                  _classCallCheck(this, XMLParserBase2);
                }
                _createClass(XMLParserBase2, [{
                  key: "_resolveEntities",
                  value: function _resolveEntities(s) {
                    var _this = this;
                    return s.replace(/&([^;]+);/g, function(all, entity) {
                      if (entity.substring(0, 2) === "#x") {
                        return String.fromCodePoint(parseInt(entity.substring(2), 16));
                      } else if (entity.substring(0, 1) === "#") {
                        return String.fromCodePoint(parseInt(entity.substring(1), 10));
                      }
                      switch (entity) {
                        case "lt":
                          return "<";
                        case "gt":
                          return ">";
                        case "amp":
                          return "&";
                        case "quot":
                          return '"';
                        case "apos":
                          return "'";
                      }
                      return _this.onResolveEntity(entity);
                    });
                  }
                }, {
                  key: "_parseContent",
                  value: function _parseContent(s, start) {
                    var attributes = [];
                    var pos = start;
                    function skipWs() {
                      while (pos < s.length && isWhitespace(s, pos)) {
                        ++pos;
                      }
                    }
                    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {
                      ++pos;
                    }
                    var name = s.substring(start, pos);
                    skipWs();
                    while (pos < s.length && s[pos] !== ">" && s[pos] !== "/" && s[pos] !== "?") {
                      skipWs();
                      var attrName = "", attrValue = "";
                      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== "=") {
                        attrName += s[pos];
                        ++pos;
                      }
                      skipWs();
                      if (s[pos] !== "=") {
                        return null;
                      }
                      ++pos;
                      skipWs();
                      var attrEndChar = s[pos];
                      if (attrEndChar !== '"' && attrEndChar !== "'") {
                        return null;
                      }
                      var attrEndIndex = s.indexOf(attrEndChar, ++pos);
                      if (attrEndIndex < 0) {
                        return null;
                      }
                      attrValue = s.substring(pos, attrEndIndex);
                      attributes.push({
                        name: attrName,
                        value: this._resolveEntities(attrValue)
                      });
                      pos = attrEndIndex + 1;
                      skipWs();
                    }
                    return {
                      name,
                      attributes,
                      parsed: pos - start
                    };
                  }
                }, {
                  key: "_parseProcessingInstruction",
                  value: function _parseProcessingInstruction(s, start) {
                    var pos = start;
                    function skipWs() {
                      while (pos < s.length && isWhitespace(s, pos)) {
                        ++pos;
                      }
                    }
                    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "?" && s[pos] !== "/") {
                      ++pos;
                    }
                    var name = s.substring(start, pos);
                    skipWs();
                    var attrStart = pos;
                    while (pos < s.length && (s[pos] !== "?" || s[pos + 1] !== ">")) {
                      ++pos;
                    }
                    var value = s.substring(attrStart, pos);
                    return {
                      name,
                      value,
                      parsed: pos - start
                    };
                  }
                }, {
                  key: "parseXml",
                  value: function parseXml(s) {
                    var i = 0;
                    while (i < s.length) {
                      var ch = s[i];
                      var j = i;
                      if (ch === "<") {
                        ++j;
                        var ch2 = s[j];
                        var q = void 0;
                        switch (ch2) {
                          case "/":
                            ++j;
                            q = s.indexOf(">", j);
                            if (q < 0) {
                              this.onError(XMLParserErrorCode.UnterminatedElement);
                              return;
                            }
                            this.onEndElement(s.substring(j, q));
                            j = q + 1;
                            break;
                          case "?":
                            ++j;
                            var pi = this._parseProcessingInstruction(s, j);
                            if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== "?>") {
                              this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);
                              return;
                            }
                            this.onPi(pi.name, pi.value);
                            j += pi.parsed + 2;
                            break;
                          case "!":
                            if (s.substring(j + 1, j + 3) === "--") {
                              q = s.indexOf("-->", j + 3);
                              if (q < 0) {
                                this.onError(XMLParserErrorCode.UnterminatedComment);
                                return;
                              }
                              this.onComment(s.substring(j + 3, q));
                              j = q + 3;
                            } else if (s.substring(j + 1, j + 8) === "[CDATA[") {
                              q = s.indexOf("]]>", j + 8);
                              if (q < 0) {
                                this.onError(XMLParserErrorCode.UnterminatedCdat);
                                return;
                              }
                              this.onCdata(s.substring(j + 8, q));
                              j = q + 3;
                            } else if (s.substring(j + 1, j + 8) === "DOCTYPE") {
                              var q2 = s.indexOf("[", j + 8);
                              var complexDoctype = false;
                              q = s.indexOf(">", j + 8);
                              if (q < 0) {
                                this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);
                                return;
                              }
                              if (q2 > 0 && q > q2) {
                                q = s.indexOf("]>", j + 8);
                                if (q < 0) {
                                  this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);
                                  return;
                                }
                                complexDoctype = true;
                              }
                              var doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));
                              this.onDoctype(doctypeContent);
                              j = q + (complexDoctype ? 2 : 1);
                            } else {
                              this.onError(XMLParserErrorCode.MalformedElement);
                              return;
                            }
                            break;
                          default:
                            var content = this._parseContent(s, j);
                            if (content === null) {
                              this.onError(XMLParserErrorCode.MalformedElement);
                              return;
                            }
                            var isClosed = false;
                            if (s.substring(j + content.parsed, j + content.parsed + 2) === "/>") {
                              isClosed = true;
                            } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== ">") {
                              this.onError(XMLParserErrorCode.UnterminatedElement);
                              return;
                            }
                            this.onBeginElement(content.name, content.attributes, isClosed);
                            j += content.parsed + (isClosed ? 2 : 1);
                            break;
                        }
                      } else {
                        while (j < s.length && s[j] !== "<") {
                          j++;
                        }
                        var text = s.substring(i, j);
                        this.onText(this._resolveEntities(text));
                      }
                      i = j;
                    }
                  }
                }, {
                  key: "onResolveEntity",
                  value: function onResolveEntity(name) {
                    return "&".concat(name, ";");
                  }
                }, {
                  key: "onPi",
                  value: function onPi(name, value) {
                  }
                }, {
                  key: "onComment",
                  value: function onComment(text) {
                  }
                }, {
                  key: "onCdata",
                  value: function onCdata(text) {
                  }
                }, {
                  key: "onDoctype",
                  value: function onDoctype(doctypeContent) {
                  }
                }, {
                  key: "onText",
                  value: function onText(text) {
                  }
                }, {
                  key: "onBeginElement",
                  value: function onBeginElement(name, attributes, isEmpty) {
                  }
                }, {
                  key: "onEndElement",
                  value: function onEndElement(name) {
                  }
                }, {
                  key: "onError",
                  value: function onError(code) {
                  }
                }]);
                return XMLParserBase2;
              }();
              exports2.XMLParserBase = XMLParserBase;
              var SimpleDOMNode = /* @__PURE__ */ function() {
                function SimpleDOMNode2(nodeName, nodeValue) {
                  _classCallCheck(this, SimpleDOMNode2);
                  this.nodeName = nodeName;
                  this.nodeValue = nodeValue;
                  Object.defineProperty(this, "parentNode", {
                    value: null,
                    writable: true
                  });
                }
                _createClass(SimpleDOMNode2, [{
                  key: "firstChild",
                  get: function get() {
                    return this.childNodes && this.childNodes[0];
                  }
                }, {
                  key: "nextSibling",
                  get: function get() {
                    var childNodes = this.parentNode.childNodes;
                    if (!childNodes) {
                      return void 0;
                    }
                    var index = childNodes.indexOf(this);
                    if (index === -1) {
                      return void 0;
                    }
                    return childNodes[index + 1];
                  }
                }, {
                  key: "textContent",
                  get: function get() {
                    if (!this.childNodes) {
                      return this.nodeValue || "";
                    }
                    return this.childNodes.map(function(child) {
                      return child.textContent;
                    }).join("");
                  }
                }, {
                  key: "hasChildNodes",
                  value: function hasChildNodes() {
                    return this.childNodes && this.childNodes.length > 0;
                  }
                }, {
                  key: "searchNode",
                  value: function searchNode(paths, pos) {
                    if (pos >= paths.length) {
                      return this;
                    }
                    var component = paths[pos];
                    var stack = [];
                    var node = this;
                    while (true) {
                      if (component.name === node.nodeName) {
                        if (component.pos === 0) {
                          var res = node.searchNode(paths, pos + 1);
                          if (res !== null) {
                            return res;
                          }
                        } else if (stack.length === 0) {
                          return null;
                        } else {
                          var _stack$pop = stack.pop(), _stack$pop2 = _slicedToArray(_stack$pop, 1), parent = _stack$pop2[0];
                          var siblingPos = 0;
                          var _iterator = _createForOfIteratorHelper(parent.childNodes), _step;
                          try {
                            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                              var child = _step.value;
                              if (component.name === child.nodeName) {
                                if (siblingPos === component.pos) {
                                  return child.searchNode(paths, pos + 1);
                                }
                                siblingPos++;
                              }
                            }
                          } catch (err) {
                            _iterator.e(err);
                          } finally {
                            _iterator.f();
                          }
                          return node.searchNode(paths, pos + 1);
                        }
                      }
                      if (node.childNodes && node.childNodes.length !== 0) {
                        stack.push([node, 0]);
                        node = node.childNodes[0];
                      } else if (stack.length === 0) {
                        return null;
                      } else {
                        while (stack.length !== 0) {
                          var _stack$pop3 = stack.pop(), _stack$pop4 = _slicedToArray(_stack$pop3, 2), _parent = _stack$pop4[0], currentPos = _stack$pop4[1];
                          var newPos = currentPos + 1;
                          if (newPos < _parent.childNodes.length) {
                            stack.push([_parent, newPos]);
                            node = _parent.childNodes[newPos];
                            break;
                          }
                        }
                        if (stack.length === 0) {
                          return null;
                        }
                      }
                    }
                  }
                }, {
                  key: "dump",
                  value: function dump(buffer) {
                    if (this.nodeName === "#text") {
                      buffer.push((0, _core_utils.encodeToXmlString)(this.nodeValue));
                      return;
                    }
                    buffer.push("<".concat(this.nodeName));
                    if (this.attributes) {
                      var _iterator2 = _createForOfIteratorHelper(this.attributes), _step2;
                      try {
                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                          var attribute = _step2.value;
                          buffer.push(" ".concat(attribute.name, '="').concat((0, _core_utils.encodeToXmlString)(attribute.value), '"'));
                        }
                      } catch (err) {
                        _iterator2.e(err);
                      } finally {
                        _iterator2.f();
                      }
                    }
                    if (this.hasChildNodes()) {
                      buffer.push(">");
                      var _iterator3 = _createForOfIteratorHelper(this.childNodes), _step3;
                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                          var child = _step3.value;
                          child.dump(buffer);
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                      buffer.push("</".concat(this.nodeName, ">"));
                    } else if (this.nodeValue) {
                      buffer.push(">".concat((0, _core_utils.encodeToXmlString)(this.nodeValue), "</").concat(this.nodeName, ">"));
                    } else {
                      buffer.push("/>");
                    }
                  }
                }]);
                return SimpleDOMNode2;
              }();
              exports2.SimpleDOMNode = SimpleDOMNode;
              var SimpleXMLParser = /* @__PURE__ */ function(_XMLParserBase) {
                _inherits(SimpleXMLParser2, _XMLParserBase);
                var _super = _createSuper(SimpleXMLParser2);
                function SimpleXMLParser2(_ref) {
                  var _this2;
                  var _ref$hasAttributes = _ref.hasAttributes, hasAttributes = _ref$hasAttributes === void 0 ? false : _ref$hasAttributes, _ref$lowerCaseName = _ref.lowerCaseName, lowerCaseName = _ref$lowerCaseName === void 0 ? false : _ref$lowerCaseName;
                  _classCallCheck(this, SimpleXMLParser2);
                  _this2 = _super.call(this);
                  _this2._currentFragment = null;
                  _this2._stack = null;
                  _this2._errorCode = XMLParserErrorCode.NoError;
                  _this2._hasAttributes = hasAttributes;
                  _this2._lowerCaseName = lowerCaseName;
                  return _this2;
                }
                _createClass(SimpleXMLParser2, [{
                  key: "parseFromString",
                  value: function parseFromString(data) {
                    this._currentFragment = [];
                    this._stack = [];
                    this._errorCode = XMLParserErrorCode.NoError;
                    this.parseXml(data);
                    if (this._errorCode !== XMLParserErrorCode.NoError) {
                      return void 0;
                    }
                    var _this$_currentFragmen = _slicedToArray(this._currentFragment, 1), documentElement = _this$_currentFragmen[0];
                    if (!documentElement) {
                      return void 0;
                    }
                    return {
                      documentElement
                    };
                  }
                }, {
                  key: "onText",
                  value: function onText(text) {
                    if (isWhitespaceString(text)) {
                      return;
                    }
                    var node = new SimpleDOMNode("#text", text);
                    this._currentFragment.push(node);
                  }
                }, {
                  key: "onCdata",
                  value: function onCdata(text) {
                    var node = new SimpleDOMNode("#text", text);
                    this._currentFragment.push(node);
                  }
                }, {
                  key: "onBeginElement",
                  value: function onBeginElement(name, attributes, isEmpty) {
                    if (this._lowerCaseName) {
                      name = name.toLowerCase();
                    }
                    var node = new SimpleDOMNode(name);
                    node.childNodes = [];
                    if (this._hasAttributes) {
                      node.attributes = attributes;
                    }
                    this._currentFragment.push(node);
                    if (isEmpty) {
                      return;
                    }
                    this._stack.push(this._currentFragment);
                    this._currentFragment = node.childNodes;
                  }
                }, {
                  key: "onEndElement",
                  value: function onEndElement(name) {
                    this._currentFragment = this._stack.pop() || [];
                    var lastElement = this._currentFragment[this._currentFragment.length - 1];
                    if (!lastElement) {
                      return;
                    }
                    for (var i = 0, ii = lastElement.childNodes.length; i < ii; i++) {
                      lastElement.childNodes[i].parentNode = lastElement;
                    }
                  }
                }, {
                  key: "onError",
                  value: function onError(code) {
                    this._errorCode = code;
                  }
                }]);
                return SimpleXMLParser2;
              }(XMLParserBase);
              exports2.SimpleXMLParser = SimpleXMLParser;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.StructTreeRoot = exports2.StructTreePage = void 0;
              var _primitives = __w_pdfjs_require__2(135);
              var _util = __w_pdfjs_require__2(4);
              var _name_number_tree = __w_pdfjs_require__2(195);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var MAX_DEPTH = 40;
              var StructElementType = {
                PAGE_CONTENT: "PAGE_CONTENT",
                STREAM_CONTENT: "STREAM_CONTENT",
                OBJECT: "OBJECT",
                ELEMENT: "ELEMENT"
              };
              var StructTreeRoot = /* @__PURE__ */ function() {
                function StructTreeRoot2(rootDict) {
                  _classCallCheck(this, StructTreeRoot2);
                  this.dict = rootDict;
                  this.roleMap = /* @__PURE__ */ new Map();
                }
                _createClass(StructTreeRoot2, [{
                  key: "init",
                  value: function init() {
                    this.readRoleMap();
                  }
                }, {
                  key: "readRoleMap",
                  value: function readRoleMap() {
                    var _this = this;
                    var roleMapDict = this.dict.get("RoleMap");
                    if (!(0, _primitives.isDict)(roleMapDict)) {
                      return;
                    }
                    roleMapDict.forEach(function(key, value) {
                      if (!(0, _primitives.isName)(value)) {
                        return;
                      }
                      _this.roleMap.set(key, value.name);
                    });
                  }
                }]);
                return StructTreeRoot2;
              }();
              exports2.StructTreeRoot = StructTreeRoot;
              var StructElementNode = /* @__PURE__ */ function() {
                function StructElementNode2(tree, dict) {
                  _classCallCheck(this, StructElementNode2);
                  this.tree = tree;
                  this.dict = dict;
                  this.kids = [];
                  this.parseKids();
                }
                _createClass(StructElementNode2, [{
                  key: "role",
                  get: function get() {
                    var nameObj = this.dict.get("S");
                    var name = (0, _primitives.isName)(nameObj) ? nameObj.name : "";
                    var root = this.tree.root;
                    if (root.roleMap.has(name)) {
                      return root.roleMap.get(name);
                    }
                    return name;
                  }
                }, {
                  key: "parseKids",
                  value: function parseKids() {
                    var pageObjId = null;
                    var objRef = this.dict.getRaw("Pg");
                    if ((0, _primitives.isRef)(objRef)) {
                      pageObjId = objRef.toString();
                    }
                    var kids = this.dict.get("K");
                    if (Array.isArray(kids)) {
                      var _iterator = _createForOfIteratorHelper(kids), _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                          var kid = _step.value;
                          var element = this.parseKid(pageObjId, kid);
                          if (element) {
                            this.kids.push(element);
                          }
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                    } else {
                      var _element = this.parseKid(pageObjId, kids);
                      if (_element) {
                        this.kids.push(_element);
                      }
                    }
                  }
                }, {
                  key: "parseKid",
                  value: function parseKid(pageObjId, kid) {
                    if (Number.isInteger(kid)) {
                      if (this.tree.pageDict.objId !== pageObjId) {
                        return null;
                      }
                      return new StructElement({
                        type: StructElementType.PAGE_CONTENT,
                        mcid: kid,
                        pageObjId
                      });
                    }
                    var kidDict = null;
                    if ((0, _primitives.isRef)(kid)) {
                      kidDict = this.dict.xref.fetch(kid);
                    } else if ((0, _primitives.isDict)(kid)) {
                      kidDict = kid;
                    }
                    if (!kidDict) {
                      return null;
                    }
                    var pageRef = kidDict.getRaw("Pg");
                    if ((0, _primitives.isRef)(pageRef)) {
                      pageObjId = pageRef.toString();
                    }
                    var type = (0, _primitives.isName)(kidDict.get("Type")) ? kidDict.get("Type").name : null;
                    if (type === "MCR") {
                      if (this.tree.pageDict.objId !== pageObjId) {
                        return null;
                      }
                      return new StructElement({
                        type: StructElementType.STREAM_CONTENT,
                        refObjId: (0, _primitives.isRef)(kidDict.getRaw("Stm")) ? kidDict.getRaw("Stm").toString() : null,
                        pageObjId,
                        mcid: kidDict.get("MCID")
                      });
                    }
                    if (type === "OBJR") {
                      if (this.tree.pageDict.objId !== pageObjId) {
                        return null;
                      }
                      return new StructElement({
                        type: StructElementType.OBJECT,
                        refObjId: (0, _primitives.isRef)(kidDict.getRaw("Obj")) ? kidDict.getRaw("Obj").toString() : null,
                        pageObjId
                      });
                    }
                    return new StructElement({
                      type: StructElementType.ELEMENT,
                      dict: kidDict
                    });
                  }
                }]);
                return StructElementNode2;
              }();
              var StructElement = function StructElement2(_ref) {
                var type = _ref.type, _ref$dict = _ref.dict, dict = _ref$dict === void 0 ? null : _ref$dict, _ref$mcid = _ref.mcid, mcid = _ref$mcid === void 0 ? null : _ref$mcid, _ref$pageObjId = _ref.pageObjId, pageObjId = _ref$pageObjId === void 0 ? null : _ref$pageObjId, _ref$refObjId = _ref.refObjId, refObjId = _ref$refObjId === void 0 ? null : _ref$refObjId;
                _classCallCheck(this, StructElement2);
                this.type = type;
                this.dict = dict;
                this.mcid = mcid;
                this.pageObjId = pageObjId;
                this.refObjId = refObjId;
                this.parentNode = null;
              };
              var StructTreePage = /* @__PURE__ */ function() {
                function StructTreePage2(structTreeRoot, pageDict) {
                  _classCallCheck(this, StructTreePage2);
                  this.root = structTreeRoot;
                  this.rootDict = structTreeRoot ? structTreeRoot.dict : null;
                  this.pageDict = pageDict;
                  this.nodes = [];
                }
                _createClass(StructTreePage2, [{
                  key: "parse",
                  value: function parse() {
                    if (!this.root || !this.rootDict) {
                      return;
                    }
                    var parentTree = this.rootDict.get("ParentTree");
                    if (!parentTree) {
                      return;
                    }
                    var id = this.pageDict.get("StructParents");
                    if (!Number.isInteger(id)) {
                      return;
                    }
                    var numberTree = new _name_number_tree.NumberTree(parentTree, this.rootDict.xref);
                    var parentArray = numberTree.get(id);
                    if (!Array.isArray(parentArray)) {
                      return;
                    }
                    var map = /* @__PURE__ */ new Map();
                    var _iterator2 = _createForOfIteratorHelper(parentArray), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var ref = _step2.value;
                        if ((0, _primitives.isRef)(ref)) {
                          this.addNode(this.rootDict.xref.fetch(ref), map);
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                  }
                }, {
                  key: "addNode",
                  value: function addNode(dict, map) {
                    var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
                    if (level > MAX_DEPTH) {
                      (0, _util.warn)("StructTree MAX_DEPTH reached.");
                      return null;
                    }
                    if (map.has(dict)) {
                      return map.get(dict);
                    }
                    var element = new StructElementNode(this, dict);
                    map.set(dict, element);
                    var parent = dict.get("P");
                    if (!parent || (0, _primitives.isName)(parent.get("Type"), "StructTreeRoot")) {
                      if (!this.addTopLevelNode(dict, element)) {
                        map["delete"](dict);
                      }
                      return element;
                    }
                    var parentNode = this.addNode(parent, map, level + 1);
                    if (!parentNode) {
                      return element;
                    }
                    var save = false;
                    var _iterator3 = _createForOfIteratorHelper(parentNode.kids), _step3;
                    try {
                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                        var kid = _step3.value;
                        if (kid.type === StructElementType.ELEMENT && kid.dict === dict) {
                          kid.parentNode = element;
                          save = true;
                        }
                      }
                    } catch (err) {
                      _iterator3.e(err);
                    } finally {
                      _iterator3.f();
                    }
                    if (!save) {
                      map["delete"](dict);
                    }
                    return element;
                  }
                }, {
                  key: "addTopLevelNode",
                  value: function addTopLevelNode(dict, element) {
                    var obj = this.rootDict.get("K");
                    if (!obj) {
                      return false;
                    }
                    if ((0, _primitives.isDict)(obj)) {
                      if (obj.objId !== dict.objId) {
                        return false;
                      }
                      this.nodes[0] = element;
                      return true;
                    }
                    if (!Array.isArray(obj)) {
                      return true;
                    }
                    var save = false;
                    for (var i = 0; i < obj.length; i++) {
                      var kidRef = obj[i];
                      if (kidRef && kidRef.toString() === dict.objId) {
                        this.nodes[i] = element;
                        save = true;
                      }
                    }
                    return save;
                  }
                }, {
                  key: "serializable",
                  get: function get() {
                    function nodeToSerializable(node, parent) {
                      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
                      if (level > MAX_DEPTH) {
                        (0, _util.warn)("StructTree too deep to be fully serialized.");
                        return;
                      }
                      var obj = /* @__PURE__ */ Object.create(null);
                      obj.role = node.role;
                      obj.children = [];
                      parent.children.push(obj);
                      var alt = node.dict.get("Alt");
                      if ((0, _util.isString)(alt)) {
                        obj.alt = (0, _util.stringToPDFString)(alt);
                      }
                      var lang = node.dict.get("Lang");
                      if ((0, _util.isString)(lang)) {
                        obj.lang = (0, _util.stringToPDFString)(lang);
                      }
                      var _iterator4 = _createForOfIteratorHelper(node.kids), _step4;
                      try {
                        for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                          var kid = _step4.value;
                          var kidElement = kid.type === StructElementType.ELEMENT ? kid.parentNode : null;
                          if (kidElement) {
                            nodeToSerializable(kidElement, obj, level + 1);
                            continue;
                          } else if (kid.type === StructElementType.PAGE_CONTENT || kid.type === StructElementType.STREAM_CONTENT) {
                            obj.children.push({
                              type: "content",
                              id: "page".concat(kid.pageObjId, "_mcid").concat(kid.mcid)
                            });
                          } else if (kid.type === StructElementType.OBJECT) {
                            obj.children.push({
                              type: "object",
                              id: kid.refObjId
                            });
                          }
                        }
                      } catch (err) {
                        _iterator4.e(err);
                      } finally {
                        _iterator4.f();
                      }
                    }
                    var root = /* @__PURE__ */ Object.create(null);
                    root.children = [];
                    root.role = "Root";
                    var _iterator5 = _createForOfIteratorHelper(this.nodes), _step5;
                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                        var child = _step5.value;
                        if (!child) {
                          continue;
                        }
                        nodeToSerializable(child, root);
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                    return root;
                  }
                }]);
                return StructTreePage2;
              }();
              exports2.StructTreePage = StructTreePage;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.ObjectLoader = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _primitives = __w_pdfjs_require__2(135);
              var _core_utils = __w_pdfjs_require__2(139);
              var _util = __w_pdfjs_require__2(4);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function mayHaveChildren(value) {
                return value instanceof _primitives.Ref || value instanceof _primitives.Dict || Array.isArray(value) || (0, _primitives.isStream)(value);
              }
              function addChildren(node, nodesToVisit) {
                if (node instanceof _primitives.Dict) {
                  node = node.getRawValues();
                } else if ((0, _primitives.isStream)(node)) {
                  node = node.dict.getRawValues();
                } else if (!Array.isArray(node)) {
                  return;
                }
                var _iterator = _createForOfIteratorHelper(node), _step;
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    var rawValue = _step.value;
                    if (mayHaveChildren(rawValue)) {
                      nodesToVisit.push(rawValue);
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
              }
              var ObjectLoader = /* @__PURE__ */ function() {
                function ObjectLoader2(dict, keys, xref) {
                  _classCallCheck(this, ObjectLoader2);
                  this.dict = dict;
                  this.keys = keys;
                  this.xref = xref;
                  this.refSet = null;
                }
                _createClass(ObjectLoader2, [{
                  key: "load",
                  value: function() {
                    var _load = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee() {
                      var keys, dict, nodesToVisit, i, ii, rawValue;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              if (!this.xref.stream.isDataLoaded) {
                                _context.next = 2;
                                break;
                              }
                              return _context.abrupt("return", void 0);
                            case 2:
                              keys = this.keys, dict = this.dict;
                              this.refSet = new _primitives.RefSet();
                              nodesToVisit = [];
                              for (i = 0, ii = keys.length; i < ii; i++) {
                                rawValue = dict.getRaw(keys[i]);
                                if (rawValue !== void 0) {
                                  nodesToVisit.push(rawValue);
                                }
                              }
                              return _context.abrupt("return", this._walk(nodesToVisit));
                            case 7:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));
                    function load() {
                      return _load.apply(this, arguments);
                    }
                    return load;
                  }()
                }, {
                  key: "_walk",
                  value: function() {
                    var _walk2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee2(nodesToVisit) {
                      var nodesToRevisit, pendingRequests, currentNode, manager, baseStreams, foundMissingData, _iterator2, _step2, stream, _iterator3, _step3, node;
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              nodesToRevisit = [];
                              pendingRequests = [];
                            case 2:
                              if (!nodesToVisit.length) {
                                _context2.next = 48;
                                break;
                              }
                              currentNode = nodesToVisit.pop();
                              if (!(currentNode instanceof _primitives.Ref)) {
                                _context2.next = 21;
                                break;
                              }
                              if (!this.refSet.has(currentNode)) {
                                _context2.next = 7;
                                break;
                              }
                              return _context2.abrupt("continue", 2);
                            case 7:
                              _context2.prev = 7;
                              this.refSet.put(currentNode);
                              currentNode = this.xref.fetch(currentNode);
                              _context2.next = 21;
                              break;
                            case 12:
                              _context2.prev = 12;
                              _context2.t0 = _context2["catch"](7);
                              if (_context2.t0 instanceof _core_utils.MissingDataException) {
                                _context2.next = 19;
                                break;
                              }
                              (0, _util.warn)('ObjectLoader._walk - requesting all data: "'.concat(_context2.t0, '".'));
                              this.refSet = null;
                              manager = this.xref.stream.manager;
                              return _context2.abrupt("return", manager.requestAllChunks());
                            case 19:
                              nodesToRevisit.push(currentNode);
                              pendingRequests.push({
                                begin: _context2.t0.begin,
                                end: _context2.t0.end
                              });
                            case 21:
                              if (!(0, _primitives.isStream)(currentNode)) {
                                _context2.next = 45;
                                break;
                              }
                              baseStreams = currentNode.getBaseStreams();
                              if (!baseStreams) {
                                _context2.next = 45;
                                break;
                              }
                              foundMissingData = false;
                              _iterator2 = _createForOfIteratorHelper(baseStreams);
                              _context2.prev = 26;
                              _iterator2.s();
                            case 28:
                              if ((_step2 = _iterator2.n()).done) {
                                _context2.next = 36;
                                break;
                              }
                              stream = _step2.value;
                              if (!stream.isDataLoaded) {
                                _context2.next = 32;
                                break;
                              }
                              return _context2.abrupt("continue", 34);
                            case 32:
                              foundMissingData = true;
                              pendingRequests.push({
                                begin: stream.start,
                                end: stream.end
                              });
                            case 34:
                              _context2.next = 28;
                              break;
                            case 36:
                              _context2.next = 41;
                              break;
                            case 38:
                              _context2.prev = 38;
                              _context2.t1 = _context2["catch"](26);
                              _iterator2.e(_context2.t1);
                            case 41:
                              _context2.prev = 41;
                              _iterator2.f();
                              return _context2.finish(41);
                            case 44:
                              if (foundMissingData) {
                                nodesToRevisit.push(currentNode);
                              }
                            case 45:
                              addChildren(currentNode, nodesToVisit);
                              _context2.next = 2;
                              break;
                            case 48:
                              if (!pendingRequests.length) {
                                _context2.next = 54;
                                break;
                              }
                              _context2.next = 51;
                              return this.xref.stream.manager.requestRanges(pendingRequests);
                            case 51:
                              _iterator3 = _createForOfIteratorHelper(nodesToRevisit);
                              try {
                                for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                                  node = _step3.value;
                                  if (node instanceof _primitives.Ref) {
                                    this.refSet.remove(node);
                                  }
                                }
                              } catch (err) {
                                _iterator3.e(err);
                              } finally {
                                _iterator3.f();
                              }
                              return _context2.abrupt("return", this._walk(nodesToRevisit));
                            case 54:
                              this.refSet = null;
                              return _context2.abrupt("return", void 0);
                            case 56:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2, this, [[7, 12], [26, 38, 41, 44]]);
                    }));
                    function _walk(_x) {
                      return _walk2.apply(this, arguments);
                    }
                    return _walk;
                  }()
                }]);
                return ObjectLoader2;
              }();
              exports2.ObjectLoader = ObjectLoader;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.incrementalUpdate = incrementalUpdate;
              exports2.writeDict = writeDict;
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _core_utils = __w_pdfjs_require__2(139);
              var _xml_parser = __w_pdfjs_require__2(198);
              var _crypto = __w_pdfjs_require__2(202);
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function writeDict(dict, buffer, transform) {
                buffer.push("<<");
                var _iterator = _createForOfIteratorHelper(dict.getKeys()), _step;
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    var key = _step.value;
                    buffer.push(" /".concat((0, _core_utils.escapePDFName)(key), " "));
                    writeValue(dict.getRaw(key), buffer, transform);
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
                buffer.push(">>");
              }
              function writeStream(stream, buffer, transform) {
                writeDict(stream.dict, buffer, transform);
                buffer.push(" stream\n");
                var string = stream.getString();
                if (transform !== null) {
                  string = transform.encryptString(string);
                }
                buffer.push(string, "\nendstream\n");
              }
              function writeArray(array, buffer, transform) {
                buffer.push("[");
                var first = true;
                var _iterator2 = _createForOfIteratorHelper(array), _step2;
                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                    var val = _step2.value;
                    if (!first) {
                      buffer.push(" ");
                    } else {
                      first = false;
                    }
                    writeValue(val, buffer, transform);
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }
                buffer.push("]");
              }
              function numberToString(value) {
                if (Number.isInteger(value)) {
                  return value.toString();
                }
                var roundedValue = Math.round(value * 100);
                if (roundedValue % 100 === 0) {
                  return (roundedValue / 100).toString();
                }
                if (roundedValue % 10 === 0) {
                  return value.toFixed(1);
                }
                return value.toFixed(2);
              }
              function writeValue(value, buffer, transform) {
                if ((0, _primitives.isName)(value)) {
                  buffer.push("/".concat((0, _core_utils.escapePDFName)(value.name)));
                } else if ((0, _primitives.isRef)(value)) {
                  buffer.push("".concat(value.num, " ").concat(value.gen, " R"));
                } else if (Array.isArray(value)) {
                  writeArray(value, buffer, transform);
                } else if (typeof value === "string") {
                  if (transform !== null) {
                    value = transform.encryptString(value);
                  }
                  buffer.push("(".concat((0, _util.escapeString)(value), ")"));
                } else if (typeof value === "number") {
                  buffer.push(numberToString(value));
                } else if (typeof value === "boolean") {
                  buffer.push(value.toString());
                } else if ((0, _primitives.isDict)(value)) {
                  writeDict(value, buffer, transform);
                } else if ((0, _primitives.isStream)(value)) {
                  writeStream(value, buffer, transform);
                } else if (value === null) {
                  buffer.push("null");
                } else {
                  (0, _util.warn)("Unhandled value in writer: ".concat(_typeof(value), ", please file a bug."));
                }
              }
              function writeInt(number, size, offset, buffer) {
                for (var i = size + offset - 1; i > offset - 1; i--) {
                  buffer[i] = number & 255;
                  number >>= 8;
                }
                return offset + size;
              }
              function writeString(string, offset, buffer) {
                for (var i = 0, len = string.length; i < len; i++) {
                  buffer[offset + i] = string.charCodeAt(i) & 255;
                }
              }
              function computeMD5(filesize, xrefInfo) {
                var time = Math.floor(Date.now() / 1e3);
                var filename = xrefInfo.filename || "";
                var md5Buffer = [time.toString(), filename, filesize.toString()];
                var md5BufferLen = md5Buffer.reduce(function(a, str2) {
                  return a + str2.length;
                }, 0);
                for (var _i = 0, _Object$values = Object.values(xrefInfo.info); _i < _Object$values.length; _i++) {
                  var value = _Object$values[_i];
                  md5Buffer.push(value);
                  md5BufferLen += value.length;
                }
                var array = new Uint8Array(md5BufferLen);
                var offset = 0;
                for (var _i2 = 0, _md5Buffer = md5Buffer; _i2 < _md5Buffer.length; _i2++) {
                  var str = _md5Buffer[_i2];
                  writeString(str, offset, array);
                  offset += str.length;
                }
                return (0, _util.bytesToString)((0, _crypto.calculateMD5)(array));
              }
              function writeXFADataForAcroform(str, newRefs) {
                var xml = new _xml_parser.SimpleXMLParser({
                  hasAttributes: true
                }).parseFromString(str);
                var _iterator3 = _createForOfIteratorHelper(newRefs), _step3;
                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                    var xfa = _step3.value.xfa;
                    if (!xfa) {
                      continue;
                    }
                    var path = xfa.path, value = xfa.value;
                    if (!path) {
                      continue;
                    }
                    var node = xml.documentElement.searchNode((0, _core_utils.parseXFAPath)(path), 0);
                    if (node) {
                      node.childNodes = [new _xml_parser.SimpleDOMNode("#text", value)];
                    } else {
                      (0, _util.warn)("Node not found for path: ".concat(path));
                    }
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }
                var buffer = [];
                xml.documentElement.dump(buffer);
                return buffer.join("");
              }
              function updateXFA(_ref) {
                var xfaData = _ref.xfaData, xfaDatasetsRef = _ref.xfaDatasetsRef, hasXfaDatasetsEntry = _ref.hasXfaDatasetsEntry, acroFormRef = _ref.acroFormRef, acroForm = _ref.acroForm, newRefs = _ref.newRefs, xref = _ref.xref, xrefInfo = _ref.xrefInfo;
                if (xref === null) {
                  return;
                }
                if (!hasXfaDatasetsEntry) {
                  if (!acroFormRef) {
                    (0, _util.warn)("XFA - Cannot save it");
                    return;
                  }
                  var oldXfa = acroForm.get("XFA");
                  var newXfa = oldXfa.slice();
                  newXfa.splice(2, 0, "datasets");
                  newXfa.splice(3, 0, xfaDatasetsRef);
                  acroForm.set("XFA", newXfa);
                  var _encrypt = xref.encrypt;
                  var transform = null;
                  if (_encrypt) {
                    transform = _encrypt.createCipherTransform(acroFormRef.num, acroFormRef.gen);
                  }
                  var buffer = ["".concat(acroFormRef.num, " ").concat(acroFormRef.gen, " obj\n")];
                  writeDict(acroForm, buffer, transform);
                  buffer.push("\n");
                  acroForm.set("XFA", oldXfa);
                  newRefs.push({
                    ref: acroFormRef,
                    data: buffer.join("")
                  });
                }
                if (xfaData === null) {
                  var datasets = xref.fetchIfRef(xfaDatasetsRef);
                  xfaData = writeXFADataForAcroform(datasets.getString(), newRefs);
                }
                var encrypt = xref.encrypt;
                if (encrypt) {
                  var _transform = encrypt.createCipherTransform(xfaDatasetsRef.num, xfaDatasetsRef.gen);
                  xfaData = _transform.encryptString(xfaData);
                }
                var data = "".concat(xfaDatasetsRef.num, " ").concat(xfaDatasetsRef.gen, " obj\n") + "<< /Type /EmbeddedFile /Length ".concat(xfaData.length, ">>\nstream\n") + xfaData + "\nendstream\nendobj\n";
                newRefs.push({
                  ref: xfaDatasetsRef,
                  data
                });
              }
              function incrementalUpdate(_ref2) {
                var originalData = _ref2.originalData, xrefInfo = _ref2.xrefInfo, newRefs = _ref2.newRefs, _ref2$xref = _ref2.xref, xref = _ref2$xref === void 0 ? null : _ref2$xref, _ref2$hasXfa = _ref2.hasXfa, hasXfa = _ref2$hasXfa === void 0 ? false : _ref2$hasXfa, _ref2$xfaDatasetsRef = _ref2.xfaDatasetsRef, xfaDatasetsRef = _ref2$xfaDatasetsRef === void 0 ? null : _ref2$xfaDatasetsRef, _ref2$hasXfaDatasetsE = _ref2.hasXfaDatasetsEntry, hasXfaDatasetsEntry = _ref2$hasXfaDatasetsE === void 0 ? false : _ref2$hasXfaDatasetsE, _ref2$acroFormRef = _ref2.acroFormRef, acroFormRef = _ref2$acroFormRef === void 0 ? null : _ref2$acroFormRef, _ref2$acroForm = _ref2.acroForm, acroForm = _ref2$acroForm === void 0 ? null : _ref2$acroForm, _ref2$xfaData = _ref2.xfaData, xfaData = _ref2$xfaData === void 0 ? null : _ref2$xfaData;
                if (hasXfa) {
                  updateXFA({
                    xfaData,
                    xfaDatasetsRef,
                    hasXfaDatasetsEntry,
                    acroFormRef,
                    acroForm,
                    newRefs,
                    xref,
                    xrefInfo
                  });
                }
                var newXref = new _primitives.Dict(null);
                var refForXrefTable = xrefInfo.newRef;
                var buffer, baseOffset;
                var lastByte = originalData[originalData.length - 1];
                if (lastByte === 10 || lastByte === 13) {
                  buffer = [];
                  baseOffset = originalData.length;
                } else {
                  buffer = ["\n"];
                  baseOffset = originalData.length + 1;
                }
                newXref.set("Size", refForXrefTable.num + 1);
                newXref.set("Prev", xrefInfo.startXRef);
                newXref.set("Type", _primitives.Name.get("XRef"));
                if (xrefInfo.rootRef !== null) {
                  newXref.set("Root", xrefInfo.rootRef);
                }
                if (xrefInfo.infoRef !== null) {
                  newXref.set("Info", xrefInfo.infoRef);
                }
                if (xrefInfo.encryptRef !== null) {
                  newXref.set("Encrypt", xrefInfo.encryptRef);
                }
                newRefs.push({
                  ref: refForXrefTable,
                  data: ""
                });
                newRefs = newRefs.sort(function(a, b) {
                  return a.ref.num - b.ref.num;
                });
                var xrefTableData = [[0, 1, 65535]];
                var indexes = [0, 1];
                var maxOffset = 0;
                var _iterator4 = _createForOfIteratorHelper(newRefs), _step4;
                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                    var _step4$value = _step4.value, ref = _step4$value.ref, data = _step4$value.data;
                    maxOffset = Math.max(maxOffset, baseOffset);
                    xrefTableData.push([1, baseOffset, Math.min(ref.gen, 65535)]);
                    baseOffset += data.length;
                    indexes.push(ref.num, 1);
                    buffer.push(data);
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
                newXref.set("Index", indexes);
                if (Array.isArray(xrefInfo.fileIds) && xrefInfo.fileIds.length > 0) {
                  var md5 = computeMD5(baseOffset, xrefInfo);
                  newXref.set("ID", [xrefInfo.fileIds[0], md5]);
                }
                var offsetSize = Math.ceil(Math.log2(maxOffset) / 8);
                var sizes = [1, offsetSize, 2];
                var structSize = sizes[0] + sizes[1] + sizes[2];
                var tableLength = structSize * xrefTableData.length;
                newXref.set("W", sizes);
                newXref.set("Length", tableLength);
                buffer.push("".concat(refForXrefTable.num, " ").concat(refForXrefTable.gen, " obj\n"));
                writeDict(newXref, buffer, null);
                buffer.push(" stream\n");
                var bufferLen = buffer.reduce(function(a, str2) {
                  return a + str2.length;
                }, 0);
                var footer = "\nendstream\nendobj\nstartxref\n".concat(baseOffset, "\n%%EOF\n");
                var array = new Uint8Array(originalData.length + bufferLen + tableLength + footer.length);
                array.set(originalData);
                var offset = originalData.length;
                var _iterator5 = _createForOfIteratorHelper(buffer), _step5;
                try {
                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                    var str = _step5.value;
                    writeString(str, offset, array);
                    offset += str.length;
                  }
                } catch (err) {
                  _iterator5.e(err);
                } finally {
                  _iterator5.f();
                }
                for (var _i3 = 0, _xrefTableData = xrefTableData; _i3 < _xrefTableData.length; _i3++) {
                  var _xrefTableData$_i = _slicedToArray(_xrefTableData[_i3], 3), type = _xrefTableData$_i[0], objOffset = _xrefTableData$_i[1], gen = _xrefTableData$_i[2];
                  offset = writeInt(type, sizes[0], offset, array);
                  offset = writeInt(objOffset, sizes[1], offset, array);
                  offset = writeInt(gen, sizes[2], offset, array);
                }
                writeString(footer, offset, array);
                return array;
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.calculateSHA256 = exports2.calculateMD5 = exports2.PDF20 = exports2.PDF17 = exports2.CipherTransformFactory = exports2.ARCFourCipher = exports2.AES256Cipher = exports2.AES128Cipher = void 0;
              exports2.calculateSHA384 = calculateSHA384;
              exports2.calculateSHA512 = void 0;
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _decrypt_stream = __w_pdfjs_require__2(203);
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var ARCFourCipher = /* @__PURE__ */ function() {
                function ARCFourCipher2(key) {
                  _classCallCheck(this, ARCFourCipher2);
                  this.a = 0;
                  this.b = 0;
                  var s = new Uint8Array(256);
                  var keyLength = key.length;
                  for (var i = 0; i < 256; ++i) {
                    s[i] = i;
                  }
                  for (var _i = 0, j = 0; _i < 256; ++_i) {
                    var tmp = s[_i];
                    j = j + tmp + key[_i % keyLength] & 255;
                    s[_i] = s[j];
                    s[j] = tmp;
                  }
                  this.s = s;
                }
                _createClass(ARCFourCipher2, [{
                  key: "encryptBlock",
                  value: function encryptBlock(data) {
                    var a = this.a, b = this.b;
                    var s = this.s;
                    var n = data.length;
                    var output = new Uint8Array(n);
                    for (var i = 0; i < n; ++i) {
                      a = a + 1 & 255;
                      var tmp = s[a];
                      b = b + tmp & 255;
                      var tmp2 = s[b];
                      s[a] = tmp2;
                      s[b] = tmp;
                      output[i] = data[i] ^ s[tmp + tmp2 & 255];
                    }
                    this.a = a;
                    this.b = b;
                    return output;
                  }
                }, {
                  key: "decryptBlock",
                  value: function decryptBlock(data) {
                    return this.encryptBlock(data);
                  }
                }, {
                  key: "encrypt",
                  value: function encrypt(data) {
                    return this.encryptBlock(data);
                  }
                }]);
                return ARCFourCipher2;
              }();
              exports2.ARCFourCipher = ARCFourCipher;
              var calculateMD5 = function calculateMD5Closure() {
                var r = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);
                var k = new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]);
                function hash(data, offset, length) {
                  var h0 = 1732584193, h1 = -271733879, h2 = -1732584194, h3 = 271733878;
                  var paddedLength = length + 72 & ~63;
                  var padded = new Uint8Array(paddedLength);
                  var i, j;
                  for (i = 0; i < length; ++i) {
                    padded[i] = data[offset++];
                  }
                  padded[i++] = 128;
                  var n = paddedLength - 8;
                  while (i < n) {
                    padded[i++] = 0;
                  }
                  padded[i++] = length << 3 & 255;
                  padded[i++] = length >> 5 & 255;
                  padded[i++] = length >> 13 & 255;
                  padded[i++] = length >> 21 & 255;
                  padded[i++] = length >>> 29 & 255;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  var w = new Int32Array(16);
                  for (i = 0; i < paddedLength; ) {
                    for (j = 0; j < 16; ++j, i += 4) {
                      w[j] = padded[i] | padded[i + 1] << 8 | padded[i + 2] << 16 | padded[i + 3] << 24;
                    }
                    var a = h0, b = h1, c = h2, d = h3, f = void 0, g = void 0;
                    for (j = 0; j < 64; ++j) {
                      if (j < 16) {
                        f = b & c | ~b & d;
                        g = j;
                      } else if (j < 32) {
                        f = d & b | ~d & c;
                        g = 5 * j + 1 & 15;
                      } else if (j < 48) {
                        f = b ^ c ^ d;
                        g = 3 * j + 5 & 15;
                      } else {
                        f = c ^ (b | ~d);
                        g = 7 * j & 15;
                      }
                      var tmp = d, rotateArg = a + f + k[j] + w[g] | 0, rotate = r[j];
                      d = c;
                      c = b;
                      b = b + (rotateArg << rotate | rotateArg >>> 32 - rotate) | 0;
                      a = tmp;
                    }
                    h0 = h0 + a | 0;
                    h1 = h1 + b | 0;
                    h2 = h2 + c | 0;
                    h3 = h3 + d | 0;
                  }
                  return new Uint8Array([h0 & 255, h0 >> 8 & 255, h0 >> 16 & 255, h0 >>> 24 & 255, h1 & 255, h1 >> 8 & 255, h1 >> 16 & 255, h1 >>> 24 & 255, h2 & 255, h2 >> 8 & 255, h2 >> 16 & 255, h2 >>> 24 & 255, h3 & 255, h3 >> 8 & 255, h3 >> 16 & 255, h3 >>> 24 & 255]);
                }
                return hash;
              }();
              exports2.calculateMD5 = calculateMD5;
              var Word64 = /* @__PURE__ */ function() {
                function Word642(highInteger, lowInteger) {
                  _classCallCheck(this, Word642);
                  this.high = highInteger | 0;
                  this.low = lowInteger | 0;
                }
                _createClass(Word642, [{
                  key: "and",
                  value: function and(word) {
                    this.high &= word.high;
                    this.low &= word.low;
                  }
                }, {
                  key: "xor",
                  value: function xor(word) {
                    this.high ^= word.high;
                    this.low ^= word.low;
                  }
                }, {
                  key: "or",
                  value: function or(word) {
                    this.high |= word.high;
                    this.low |= word.low;
                  }
                }, {
                  key: "shiftRight",
                  value: function shiftRight(places) {
                    if (places >= 32) {
                      this.low = this.high >>> places - 32 | 0;
                      this.high = 0;
                    } else {
                      this.low = this.low >>> places | this.high << 32 - places;
                      this.high = this.high >>> places | 0;
                    }
                  }
                }, {
                  key: "shiftLeft",
                  value: function shiftLeft(places) {
                    if (places >= 32) {
                      this.high = this.low << places - 32;
                      this.low = 0;
                    } else {
                      this.high = this.high << places | this.low >>> 32 - places;
                      this.low <<= places;
                    }
                  }
                }, {
                  key: "rotateRight",
                  value: function rotateRight(places) {
                    var low, high;
                    if (places & 32) {
                      high = this.low;
                      low = this.high;
                    } else {
                      low = this.low;
                      high = this.high;
                    }
                    places &= 31;
                    this.low = low >>> places | high << 32 - places;
                    this.high = high >>> places | low << 32 - places;
                  }
                }, {
                  key: "not",
                  value: function not() {
                    this.high = ~this.high;
                    this.low = ~this.low;
                  }
                }, {
                  key: "add",
                  value: function add(word) {
                    var lowAdd = (this.low >>> 0) + (word.low >>> 0);
                    var highAdd = (this.high >>> 0) + (word.high >>> 0);
                    if (lowAdd > 4294967295) {
                      highAdd += 1;
                    }
                    this.low = lowAdd | 0;
                    this.high = highAdd | 0;
                  }
                }, {
                  key: "copyTo",
                  value: function copyTo(bytes, offset) {
                    bytes[offset] = this.high >>> 24 & 255;
                    bytes[offset + 1] = this.high >> 16 & 255;
                    bytes[offset + 2] = this.high >> 8 & 255;
                    bytes[offset + 3] = this.high & 255;
                    bytes[offset + 4] = this.low >>> 24 & 255;
                    bytes[offset + 5] = this.low >> 16 & 255;
                    bytes[offset + 6] = this.low >> 8 & 255;
                    bytes[offset + 7] = this.low & 255;
                  }
                }, {
                  key: "assign",
                  value: function assign(word) {
                    this.high = word.high;
                    this.low = word.low;
                  }
                }]);
                return Word642;
              }();
              var calculateSHA256 = function calculateSHA256Closure() {
                function rotr(x, n) {
                  return x >>> n | x << 32 - n;
                }
                function ch(x, y, z) {
                  return x & y ^ ~x & z;
                }
                function maj(x, y, z) {
                  return x & y ^ x & z ^ y & z;
                }
                function sigma(x) {
                  return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);
                }
                function sigmaPrime(x) {
                  return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);
                }
                function littleSigma(x) {
                  return rotr(x, 7) ^ rotr(x, 18) ^ x >>> 3;
                }
                function littleSigmaPrime(x) {
                  return rotr(x, 17) ^ rotr(x, 19) ^ x >>> 10;
                }
                var k = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
                function hash(data, offset, length) {
                  var h0 = 1779033703, h1 = 3144134277, h2 = 1013904242, h3 = 2773480762, h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;
                  var paddedLength = Math.ceil((length + 9) / 64) * 64;
                  var padded = new Uint8Array(paddedLength);
                  var i, j;
                  for (i = 0; i < length; ++i) {
                    padded[i] = data[offset++];
                  }
                  padded[i++] = 128;
                  var n = paddedLength - 8;
                  while (i < n) {
                    padded[i++] = 0;
                  }
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = length >>> 29 & 255;
                  padded[i++] = length >> 21 & 255;
                  padded[i++] = length >> 13 & 255;
                  padded[i++] = length >> 5 & 255;
                  padded[i++] = length << 3 & 255;
                  var w = new Uint32Array(64);
                  for (i = 0; i < paddedLength; ) {
                    for (j = 0; j < 16; ++j) {
                      w[j] = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];
                      i += 4;
                    }
                    for (j = 16; j < 64; ++j) {
                      w[j] = littleSigmaPrime(w[j - 2]) + w[j - 7] + littleSigma(w[j - 15]) + w[j - 16] | 0;
                    }
                    var a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, t1 = void 0, t2 = void 0;
                    for (j = 0; j < 64; ++j) {
                      t1 = h + sigmaPrime(e) + ch(e, f, g) + k[j] + w[j];
                      t2 = sigma(a) + maj(a, b, c);
                      h = g;
                      g = f;
                      f = e;
                      e = d + t1 | 0;
                      d = c;
                      c = b;
                      b = a;
                      a = t1 + t2 | 0;
                    }
                    h0 = h0 + a | 0;
                    h1 = h1 + b | 0;
                    h2 = h2 + c | 0;
                    h3 = h3 + d | 0;
                    h4 = h4 + e | 0;
                    h5 = h5 + f | 0;
                    h6 = h6 + g | 0;
                    h7 = h7 + h | 0;
                  }
                  return new Uint8Array([h0 >> 24 & 255, h0 >> 16 & 255, h0 >> 8 & 255, h0 & 255, h1 >> 24 & 255, h1 >> 16 & 255, h1 >> 8 & 255, h1 & 255, h2 >> 24 & 255, h2 >> 16 & 255, h2 >> 8 & 255, h2 & 255, h3 >> 24 & 255, h3 >> 16 & 255, h3 >> 8 & 255, h3 & 255, h4 >> 24 & 255, h4 >> 16 & 255, h4 >> 8 & 255, h4 & 255, h5 >> 24 & 255, h5 >> 16 & 255, h5 >> 8 & 255, h5 & 255, h6 >> 24 & 255, h6 >> 16 & 255, h6 >> 8 & 255, h6 & 255, h7 >> 24 & 255, h7 >> 16 & 255, h7 >> 8 & 255, h7 & 255]);
                }
                return hash;
              }();
              exports2.calculateSHA256 = calculateSHA256;
              var calculateSHA512 = function calculateSHA512Closure() {
                function ch(result, x, y, z, tmp) {
                  result.assign(x);
                  result.and(y);
                  tmp.assign(x);
                  tmp.not();
                  tmp.and(z);
                  result.xor(tmp);
                }
                function maj(result, x, y, z, tmp) {
                  result.assign(x);
                  result.and(y);
                  tmp.assign(x);
                  tmp.and(z);
                  result.xor(tmp);
                  tmp.assign(y);
                  tmp.and(z);
                  result.xor(tmp);
                }
                function sigma(result, x, tmp) {
                  result.assign(x);
                  result.rotateRight(28);
                  tmp.assign(x);
                  tmp.rotateRight(34);
                  result.xor(tmp);
                  tmp.assign(x);
                  tmp.rotateRight(39);
                  result.xor(tmp);
                }
                function sigmaPrime(result, x, tmp) {
                  result.assign(x);
                  result.rotateRight(14);
                  tmp.assign(x);
                  tmp.rotateRight(18);
                  result.xor(tmp);
                  tmp.assign(x);
                  tmp.rotateRight(41);
                  result.xor(tmp);
                }
                function littleSigma(result, x, tmp) {
                  result.assign(x);
                  result.rotateRight(1);
                  tmp.assign(x);
                  tmp.rotateRight(8);
                  result.xor(tmp);
                  tmp.assign(x);
                  tmp.shiftRight(7);
                  result.xor(tmp);
                }
                function littleSigmaPrime(result, x, tmp) {
                  result.assign(x);
                  result.rotateRight(19);
                  tmp.assign(x);
                  tmp.rotateRight(61);
                  result.xor(tmp);
                  tmp.assign(x);
                  tmp.shiftRight(6);
                  result.xor(tmp);
                }
                var k = [new Word64(1116352408, 3609767458), new Word64(1899447441, 602891725), new Word64(3049323471, 3964484399), new Word64(3921009573, 2173295548), new Word64(961987163, 4081628472), new Word64(1508970993, 3053834265), new Word64(2453635748, 2937671579), new Word64(2870763221, 3664609560), new Word64(3624381080, 2734883394), new Word64(310598401, 1164996542), new Word64(607225278, 1323610764), new Word64(1426881987, 3590304994), new Word64(1925078388, 4068182383), new Word64(2162078206, 991336113), new Word64(2614888103, 633803317), new Word64(3248222580, 3479774868), new Word64(3835390401, 2666613458), new Word64(4022224774, 944711139), new Word64(264347078, 2341262773), new Word64(604807628, 2007800933), new Word64(770255983, 1495990901), new Word64(1249150122, 1856431235), new Word64(1555081692, 3175218132), new Word64(1996064986, 2198950837), new Word64(2554220882, 3999719339), new Word64(2821834349, 766784016), new Word64(2952996808, 2566594879), new Word64(3210313671, 3203337956), new Word64(3336571891, 1034457026), new Word64(3584528711, 2466948901), new Word64(113926993, 3758326383), new Word64(338241895, 168717936), new Word64(666307205, 1188179964), new Word64(773529912, 1546045734), new Word64(1294757372, 1522805485), new Word64(1396182291, 2643833823), new Word64(1695183700, 2343527390), new Word64(1986661051, 1014477480), new Word64(2177026350, 1206759142), new Word64(2456956037, 344077627), new Word64(2730485921, 1290863460), new Word64(2820302411, 3158454273), new Word64(3259730800, 3505952657), new Word64(3345764771, 106217008), new Word64(3516065817, 3606008344), new Word64(3600352804, 1432725776), new Word64(4094571909, 1467031594), new Word64(275423344, 851169720), new Word64(430227734, 3100823752), new Word64(506948616, 1363258195), new Word64(659060556, 3750685593), new Word64(883997877, 3785050280), new Word64(958139571, 3318307427), new Word64(1322822218, 3812723403), new Word64(1537002063, 2003034995), new Word64(1747873779, 3602036899), new Word64(1955562222, 1575990012), new Word64(2024104815, 1125592928), new Word64(2227730452, 2716904306), new Word64(2361852424, 442776044), new Word64(2428436474, 593698344), new Word64(2756734187, 3733110249), new Word64(3204031479, 2999351573), new Word64(3329325298, 3815920427), new Word64(3391569614, 3928383900), new Word64(3515267271, 566280711), new Word64(3940187606, 3454069534), new Word64(4118630271, 4000239992), new Word64(116418474, 1914138554), new Word64(174292421, 2731055270), new Word64(289380356, 3203993006), new Word64(460393269, 320620315), new Word64(685471733, 587496836), new Word64(852142971, 1086792851), new Word64(1017036298, 365543100), new Word64(1126000580, 2618297676), new Word64(1288033470, 3409855158), new Word64(1501505948, 4234509866), new Word64(1607167915, 987167468), new Word64(1816402316, 1246189591)];
                function hash(data, offset, length) {
                  var mode384 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
                  var h0, h1, h2, h3, h4, h5, h6, h7;
                  if (!mode384) {
                    h0 = new Word64(1779033703, 4089235720);
                    h1 = new Word64(3144134277, 2227873595);
                    h2 = new Word64(1013904242, 4271175723);
                    h3 = new Word64(2773480762, 1595750129);
                    h4 = new Word64(1359893119, 2917565137);
                    h5 = new Word64(2600822924, 725511199);
                    h6 = new Word64(528734635, 4215389547);
                    h7 = new Word64(1541459225, 327033209);
                  } else {
                    h0 = new Word64(3418070365, 3238371032);
                    h1 = new Word64(1654270250, 914150663);
                    h2 = new Word64(2438529370, 812702999);
                    h3 = new Word64(355462360, 4144912697);
                    h4 = new Word64(1731405415, 4290775857);
                    h5 = new Word64(2394180231, 1750603025);
                    h6 = new Word64(3675008525, 1694076839);
                    h7 = new Word64(1203062813, 3204075428);
                  }
                  var paddedLength = Math.ceil((length + 17) / 128) * 128;
                  var padded = new Uint8Array(paddedLength);
                  var i, j;
                  for (i = 0; i < length; ++i) {
                    padded[i] = data[offset++];
                  }
                  padded[i++] = 128;
                  var n = paddedLength - 16;
                  while (i < n) {
                    padded[i++] = 0;
                  }
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = 0;
                  padded[i++] = length >>> 29 & 255;
                  padded[i++] = length >> 21 & 255;
                  padded[i++] = length >> 13 & 255;
                  padded[i++] = length >> 5 & 255;
                  padded[i++] = length << 3 & 255;
                  var w = new Array(80);
                  for (i = 0; i < 80; i++) {
                    w[i] = new Word64(0, 0);
                  }
                  var a = new Word64(0, 0), b = new Word64(0, 0), c = new Word64(0, 0);
                  var d = new Word64(0, 0), e = new Word64(0, 0), f = new Word64(0, 0);
                  var g = new Word64(0, 0), h = new Word64(0, 0);
                  var t1 = new Word64(0, 0), t2 = new Word64(0, 0);
                  var tmp1 = new Word64(0, 0), tmp2 = new Word64(0, 0);
                  var tmp3;
                  for (i = 0; i < paddedLength; ) {
                    for (j = 0; j < 16; ++j) {
                      w[j].high = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];
                      w[j].low = padded[i + 4] << 24 | padded[i + 5] << 16 | padded[i + 6] << 8 | padded[i + 7];
                      i += 8;
                    }
                    for (j = 16; j < 80; ++j) {
                      tmp3 = w[j];
                      littleSigmaPrime(tmp3, w[j - 2], tmp2);
                      tmp3.add(w[j - 7]);
                      littleSigma(tmp1, w[j - 15], tmp2);
                      tmp3.add(tmp1);
                      tmp3.add(w[j - 16]);
                    }
                    a.assign(h0);
                    b.assign(h1);
                    c.assign(h2);
                    d.assign(h3);
                    e.assign(h4);
                    f.assign(h5);
                    g.assign(h6);
                    h.assign(h7);
                    for (j = 0; j < 80; ++j) {
                      t1.assign(h);
                      sigmaPrime(tmp1, e, tmp2);
                      t1.add(tmp1);
                      ch(tmp1, e, f, g, tmp2);
                      t1.add(tmp1);
                      t1.add(k[j]);
                      t1.add(w[j]);
                      sigma(t2, a, tmp2);
                      maj(tmp1, a, b, c, tmp2);
                      t2.add(tmp1);
                      tmp3 = h;
                      h = g;
                      g = f;
                      f = e;
                      d.add(t1);
                      e = d;
                      d = c;
                      c = b;
                      b = a;
                      tmp3.assign(t1);
                      tmp3.add(t2);
                      a = tmp3;
                    }
                    h0.add(a);
                    h1.add(b);
                    h2.add(c);
                    h3.add(d);
                    h4.add(e);
                    h5.add(f);
                    h6.add(g);
                    h7.add(h);
                  }
                  var result;
                  if (!mode384) {
                    result = new Uint8Array(64);
                    h0.copyTo(result, 0);
                    h1.copyTo(result, 8);
                    h2.copyTo(result, 16);
                    h3.copyTo(result, 24);
                    h4.copyTo(result, 32);
                    h5.copyTo(result, 40);
                    h6.copyTo(result, 48);
                    h7.copyTo(result, 56);
                  } else {
                    result = new Uint8Array(48);
                    h0.copyTo(result, 0);
                    h1.copyTo(result, 8);
                    h2.copyTo(result, 16);
                    h3.copyTo(result, 24);
                    h4.copyTo(result, 32);
                    h5.copyTo(result, 40);
                  }
                  return result;
                }
                return hash;
              }();
              exports2.calculateSHA512 = calculateSHA512;
              function calculateSHA384(data, offset, length) {
                return calculateSHA512(data, offset, length, true);
              }
              var NullCipher = /* @__PURE__ */ function() {
                function NullCipher2() {
                  _classCallCheck(this, NullCipher2);
                }
                _createClass(NullCipher2, [{
                  key: "decryptBlock",
                  value: function decryptBlock(data) {
                    return data;
                  }
                }, {
                  key: "encrypt",
                  value: function encrypt(data) {
                    return data;
                  }
                }]);
                return NullCipher2;
              }();
              var AESBaseCipher = /* @__PURE__ */ function() {
                function AESBaseCipher2() {
                  _classCallCheck(this, AESBaseCipher2);
                  if (this.constructor === AESBaseCipher2) {
                    (0, _util.unreachable)("Cannot initialize AESBaseCipher.");
                  }
                  this._s = new Uint8Array([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]);
                  this._inv_s = new Uint8Array([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]);
                  this._mix = new Uint32Array([0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795]);
                  this._mixCol = new Uint8Array(256);
                  for (var i = 0; i < 256; i++) {
                    if (i < 128) {
                      this._mixCol[i] = i << 1;
                    } else {
                      this._mixCol[i] = i << 1 ^ 27;
                    }
                  }
                  this.buffer = new Uint8Array(16);
                  this.bufferPosition = 0;
                }
                _createClass(AESBaseCipher2, [{
                  key: "_expandKey",
                  value: function _expandKey(cipherKey) {
                    (0, _util.unreachable)("Cannot call `_expandKey` on the base class");
                  }
                }, {
                  key: "_decrypt",
                  value: function _decrypt(input, key) {
                    var t, u, v;
                    var state = new Uint8Array(16);
                    state.set(input);
                    for (var j = 0, k = this._keySize; j < 16; ++j, ++k) {
                      state[j] ^= key[k];
                    }
                    for (var i = this._cyclesOfRepetition - 1; i >= 1; --i) {
                      t = state[13];
                      state[13] = state[9];
                      state[9] = state[5];
                      state[5] = state[1];
                      state[1] = t;
                      t = state[14];
                      u = state[10];
                      state[14] = state[6];
                      state[10] = state[2];
                      state[6] = t;
                      state[2] = u;
                      t = state[15];
                      u = state[11];
                      v = state[7];
                      state[15] = state[3];
                      state[11] = t;
                      state[7] = u;
                      state[3] = v;
                      for (var _j = 0; _j < 16; ++_j) {
                        state[_j] = this._inv_s[state[_j]];
                      }
                      for (var _j2 = 0, _k = i * 16; _j2 < 16; ++_j2, ++_k) {
                        state[_j2] ^= key[_k];
                      }
                      for (var _j3 = 0; _j3 < 16; _j3 += 4) {
                        var s0 = this._mix[state[_j3]];
                        var s1 = this._mix[state[_j3 + 1]];
                        var s2 = this._mix[state[_j3 + 2]];
                        var s3 = this._mix[state[_j3 + 3]];
                        t = s0 ^ s1 >>> 8 ^ s1 << 24 ^ s2 >>> 16 ^ s2 << 16 ^ s3 >>> 24 ^ s3 << 8;
                        state[_j3] = t >>> 24 & 255;
                        state[_j3 + 1] = t >> 16 & 255;
                        state[_j3 + 2] = t >> 8 & 255;
                        state[_j3 + 3] = t & 255;
                      }
                    }
                    t = state[13];
                    state[13] = state[9];
                    state[9] = state[5];
                    state[5] = state[1];
                    state[1] = t;
                    t = state[14];
                    u = state[10];
                    state[14] = state[6];
                    state[10] = state[2];
                    state[6] = t;
                    state[2] = u;
                    t = state[15];
                    u = state[11];
                    v = state[7];
                    state[15] = state[3];
                    state[11] = t;
                    state[7] = u;
                    state[3] = v;
                    for (var _j4 = 0; _j4 < 16; ++_j4) {
                      state[_j4] = this._inv_s[state[_j4]];
                      state[_j4] ^= key[_j4];
                    }
                    return state;
                  }
                }, {
                  key: "_encrypt",
                  value: function _encrypt(input, key) {
                    var s = this._s;
                    var t, u, v;
                    var state = new Uint8Array(16);
                    state.set(input);
                    for (var j = 0; j < 16; ++j) {
                      state[j] ^= key[j];
                    }
                    for (var i = 1; i < this._cyclesOfRepetition; i++) {
                      for (var _j5 = 0; _j5 < 16; ++_j5) {
                        state[_j5] = s[state[_j5]];
                      }
                      v = state[1];
                      state[1] = state[5];
                      state[5] = state[9];
                      state[9] = state[13];
                      state[13] = v;
                      v = state[2];
                      u = state[6];
                      state[2] = state[10];
                      state[6] = state[14];
                      state[10] = v;
                      state[14] = u;
                      v = state[3];
                      u = state[7];
                      t = state[11];
                      state[3] = state[15];
                      state[7] = v;
                      state[11] = u;
                      state[15] = t;
                      for (var _j6 = 0; _j6 < 16; _j6 += 4) {
                        var s0 = state[_j6 + 0];
                        var s1 = state[_j6 + 1];
                        var s2 = state[_j6 + 2];
                        var s3 = state[_j6 + 3];
                        t = s0 ^ s1 ^ s2 ^ s3;
                        state[_j6 + 0] ^= t ^ this._mixCol[s0 ^ s1];
                        state[_j6 + 1] ^= t ^ this._mixCol[s1 ^ s2];
                        state[_j6 + 2] ^= t ^ this._mixCol[s2 ^ s3];
                        state[_j6 + 3] ^= t ^ this._mixCol[s3 ^ s0];
                      }
                      for (var _j7 = 0, k = i * 16; _j7 < 16; ++_j7, ++k) {
                        state[_j7] ^= key[k];
                      }
                    }
                    for (var _j8 = 0; _j8 < 16; ++_j8) {
                      state[_j8] = s[state[_j8]];
                    }
                    v = state[1];
                    state[1] = state[5];
                    state[5] = state[9];
                    state[9] = state[13];
                    state[13] = v;
                    v = state[2];
                    u = state[6];
                    state[2] = state[10];
                    state[6] = state[14];
                    state[10] = v;
                    state[14] = u;
                    v = state[3];
                    u = state[7];
                    t = state[11];
                    state[3] = state[15];
                    state[7] = v;
                    state[11] = u;
                    state[15] = t;
                    for (var _j9 = 0, _k2 = this._keySize; _j9 < 16; ++_j9, ++_k2) {
                      state[_j9] ^= key[_k2];
                    }
                    return state;
                  }
                }, {
                  key: "_decryptBlock2",
                  value: function _decryptBlock2(data, finalize) {
                    var sourceLength = data.length;
                    var buffer = this.buffer, bufferLength = this.bufferPosition;
                    var result = [];
                    var iv = this.iv;
                    for (var i = 0; i < sourceLength; ++i) {
                      buffer[bufferLength] = data[i];
                      ++bufferLength;
                      if (bufferLength < 16) {
                        continue;
                      }
                      var plain = this._decrypt(buffer, this._key);
                      for (var j = 0; j < 16; ++j) {
                        plain[j] ^= iv[j];
                      }
                      iv = buffer;
                      result.push(plain);
                      buffer = new Uint8Array(16);
                      bufferLength = 0;
                    }
                    this.buffer = buffer;
                    this.bufferLength = bufferLength;
                    this.iv = iv;
                    if (result.length === 0) {
                      return new Uint8Array(0);
                    }
                    var outputLength = 16 * result.length;
                    if (finalize) {
                      var lastBlock = result[result.length - 1];
                      var psLen = lastBlock[15];
                      if (psLen <= 16) {
                        for (var _i2 = 15, ii = 16 - psLen; _i2 >= ii; --_i2) {
                          if (lastBlock[_i2] !== psLen) {
                            psLen = 0;
                            break;
                          }
                        }
                        outputLength -= psLen;
                        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);
                      }
                    }
                    var output = new Uint8Array(outputLength);
                    for (var _i3 = 0, _j10 = 0, _ii = result.length; _i3 < _ii; ++_i3, _j10 += 16) {
                      output.set(result[_i3], _j10);
                    }
                    return output;
                  }
                }, {
                  key: "decryptBlock",
                  value: function decryptBlock(data, finalize) {
                    var iv = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                    var sourceLength = data.length;
                    var buffer = this.buffer;
                    var bufferLength = this.bufferPosition;
                    if (iv) {
                      this.iv = iv;
                    } else {
                      for (var i = 0; bufferLength < 16 && i < sourceLength; ++i, ++bufferLength) {
                        buffer[bufferLength] = data[i];
                      }
                      if (bufferLength < 16) {
                        this.bufferLength = bufferLength;
                        return new Uint8Array(0);
                      }
                      this.iv = buffer;
                      data = data.subarray(16);
                    }
                    this.buffer = new Uint8Array(16);
                    this.bufferLength = 0;
                    this.decryptBlock = this._decryptBlock2;
                    return this.decryptBlock(data, finalize);
                  }
                }, {
                  key: "encrypt",
                  value: function encrypt(data, iv) {
                    var sourceLength = data.length;
                    var buffer = this.buffer, bufferLength = this.bufferPosition;
                    var result = [];
                    if (!iv) {
                      iv = new Uint8Array(16);
                    }
                    for (var i = 0; i < sourceLength; ++i) {
                      buffer[bufferLength] = data[i];
                      ++bufferLength;
                      if (bufferLength < 16) {
                        continue;
                      }
                      for (var j = 0; j < 16; ++j) {
                        buffer[j] ^= iv[j];
                      }
                      var cipher = this._encrypt(buffer, this._key);
                      iv = cipher;
                      result.push(cipher);
                      buffer = new Uint8Array(16);
                      bufferLength = 0;
                    }
                    this.buffer = buffer;
                    this.bufferLength = bufferLength;
                    this.iv = iv;
                    if (result.length === 0) {
                      return new Uint8Array(0);
                    }
                    var outputLength = 16 * result.length;
                    var output = new Uint8Array(outputLength);
                    for (var _i4 = 0, _j11 = 0, ii = result.length; _i4 < ii; ++_i4, _j11 += 16) {
                      output.set(result[_i4], _j11);
                    }
                    return output;
                  }
                }]);
                return AESBaseCipher2;
              }();
              var AES128Cipher = /* @__PURE__ */ function(_AESBaseCipher) {
                _inherits(AES128Cipher2, _AESBaseCipher);
                var _super = _createSuper(AES128Cipher2);
                function AES128Cipher2(key) {
                  var _this;
                  _classCallCheck(this, AES128Cipher2);
                  _this = _super.call(this);
                  _this._cyclesOfRepetition = 10;
                  _this._keySize = 160;
                  _this._rcon = new Uint8Array([141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141]);
                  _this._key = _this._expandKey(key);
                  return _this;
                }
                _createClass(AES128Cipher2, [{
                  key: "_expandKey",
                  value: function _expandKey(cipherKey) {
                    var b = 176;
                    var s = this._s;
                    var rcon = this._rcon;
                    var result = new Uint8Array(b);
                    result.set(cipherKey);
                    for (var j = 16, i = 1; j < b; ++i) {
                      var t1 = result[j - 3];
                      var t2 = result[j - 2];
                      var t3 = result[j - 1];
                      var t4 = result[j - 4];
                      t1 = s[t1];
                      t2 = s[t2];
                      t3 = s[t3];
                      t4 = s[t4];
                      t1 ^= rcon[i];
                      for (var n = 0; n < 4; ++n) {
                        result[j] = t1 ^= result[j - 16];
                        j++;
                        result[j] = t2 ^= result[j - 16];
                        j++;
                        result[j] = t3 ^= result[j - 16];
                        j++;
                        result[j] = t4 ^= result[j - 16];
                        j++;
                      }
                    }
                    return result;
                  }
                }]);
                return AES128Cipher2;
              }(AESBaseCipher);
              exports2.AES128Cipher = AES128Cipher;
              var AES256Cipher = /* @__PURE__ */ function(_AESBaseCipher2) {
                _inherits(AES256Cipher2, _AESBaseCipher2);
                var _super2 = _createSuper(AES256Cipher2);
                function AES256Cipher2(key) {
                  var _this2;
                  _classCallCheck(this, AES256Cipher2);
                  _this2 = _super2.call(this);
                  _this2._cyclesOfRepetition = 14;
                  _this2._keySize = 224;
                  _this2._key = _this2._expandKey(key);
                  return _this2;
                }
                _createClass(AES256Cipher2, [{
                  key: "_expandKey",
                  value: function _expandKey(cipherKey) {
                    var b = 240;
                    var s = this._s;
                    var result = new Uint8Array(b);
                    result.set(cipherKey);
                    var r = 1;
                    var t1, t2, t3, t4;
                    for (var j = 32, i = 1; j < b; ++i) {
                      if (j % 32 === 16) {
                        t1 = s[t1];
                        t2 = s[t2];
                        t3 = s[t3];
                        t4 = s[t4];
                      } else if (j % 32 === 0) {
                        t1 = result[j - 3];
                        t2 = result[j - 2];
                        t3 = result[j - 1];
                        t4 = result[j - 4];
                        t1 = s[t1];
                        t2 = s[t2];
                        t3 = s[t3];
                        t4 = s[t4];
                        t1 ^= r;
                        if ((r <<= 1) >= 256) {
                          r = (r ^ 27) & 255;
                        }
                      }
                      for (var n = 0; n < 4; ++n) {
                        result[j] = t1 ^= result[j - 32];
                        j++;
                        result[j] = t2 ^= result[j - 32];
                        j++;
                        result[j] = t3 ^= result[j - 32];
                        j++;
                        result[j] = t4 ^= result[j - 32];
                        j++;
                      }
                    }
                    return result;
                  }
                }]);
                return AES256Cipher2;
              }(AESBaseCipher);
              exports2.AES256Cipher = AES256Cipher;
              var PDF17 = /* @__PURE__ */ function() {
                function PDF172() {
                  _classCallCheck(this, PDF172);
                }
                _createClass(PDF172, [{
                  key: "checkOwnerPassword",
                  value: function checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {
                    var hashData = new Uint8Array(password.length + 56);
                    hashData.set(password, 0);
                    hashData.set(ownerValidationSalt, password.length);
                    hashData.set(userBytes, password.length + ownerValidationSalt.length);
                    var result = calculateSHA256(hashData, 0, hashData.length);
                    return (0, _util.isArrayEqual)(result, ownerPassword);
                  }
                }, {
                  key: "checkUserPassword",
                  value: function checkUserPassword(password, userValidationSalt, userPassword) {
                    var hashData = new Uint8Array(password.length + 8);
                    hashData.set(password, 0);
                    hashData.set(userValidationSalt, password.length);
                    var result = calculateSHA256(hashData, 0, hashData.length);
                    return (0, _util.isArrayEqual)(result, userPassword);
                  }
                }, {
                  key: "getOwnerKey",
                  value: function getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {
                    var hashData = new Uint8Array(password.length + 56);
                    hashData.set(password, 0);
                    hashData.set(ownerKeySalt, password.length);
                    hashData.set(userBytes, password.length + ownerKeySalt.length);
                    var key = calculateSHA256(hashData, 0, hashData.length);
                    var cipher = new AES256Cipher(key);
                    return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));
                  }
                }, {
                  key: "getUserKey",
                  value: function getUserKey(password, userKeySalt, userEncryption) {
                    var hashData = new Uint8Array(password.length + 8);
                    hashData.set(password, 0);
                    hashData.set(userKeySalt, password.length);
                    var key = calculateSHA256(hashData, 0, hashData.length);
                    var cipher = new AES256Cipher(key);
                    return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));
                  }
                }]);
                return PDF172;
              }();
              exports2.PDF17 = PDF17;
              var PDF20 = function PDF20Closure() {
                function calculatePDF20Hash(password, input, userBytes) {
                  var k = calculateSHA256(input, 0, input.length).subarray(0, 32);
                  var e = [0];
                  var i = 0;
                  while (i < 64 || e[e.length - 1] > i - 32) {
                    var combinedLength = password.length + k.length + userBytes.length, combinedArray = new Uint8Array(combinedLength);
                    var writeOffset = 0;
                    combinedArray.set(password, writeOffset);
                    writeOffset += password.length;
                    combinedArray.set(k, writeOffset);
                    writeOffset += k.length;
                    combinedArray.set(userBytes, writeOffset);
                    var k1 = new Uint8Array(combinedLength * 64);
                    for (var j = 0, pos = 0; j < 64; j++, pos += combinedLength) {
                      k1.set(combinedArray, pos);
                    }
                    var cipher = new AES128Cipher(k.subarray(0, 16));
                    e = cipher.encrypt(k1, k.subarray(16, 32));
                    var remainder = 0;
                    for (var z = 0; z < 16; z++) {
                      remainder *= 256 % 3;
                      remainder %= 3;
                      remainder += (e[z] >>> 0) % 3;
                      remainder %= 3;
                    }
                    if (remainder === 0) {
                      k = calculateSHA256(e, 0, e.length);
                    } else if (remainder === 1) {
                      k = calculateSHA384(e, 0, e.length);
                    } else if (remainder === 2) {
                      k = calculateSHA512(e, 0, e.length);
                    }
                    i++;
                  }
                  return k.subarray(0, 32);
                }
                var PDF202 = /* @__PURE__ */ function() {
                  function PDF203() {
                    _classCallCheck(this, PDF203);
                  }
                  _createClass(PDF203, [{
                    key: "hash",
                    value: function hash(password, concatBytes, userBytes) {
                      return calculatePDF20Hash(password, concatBytes, userBytes);
                    }
                  }, {
                    key: "checkOwnerPassword",
                    value: function checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {
                      var hashData = new Uint8Array(password.length + 56);
                      hashData.set(password, 0);
                      hashData.set(ownerValidationSalt, password.length);
                      hashData.set(userBytes, password.length + ownerValidationSalt.length);
                      var result = calculatePDF20Hash(password, hashData, userBytes);
                      return (0, _util.isArrayEqual)(result, ownerPassword);
                    }
                  }, {
                    key: "checkUserPassword",
                    value: function checkUserPassword(password, userValidationSalt, userPassword) {
                      var hashData = new Uint8Array(password.length + 8);
                      hashData.set(password, 0);
                      hashData.set(userValidationSalt, password.length);
                      var result = calculatePDF20Hash(password, hashData, []);
                      return (0, _util.isArrayEqual)(result, userPassword);
                    }
                  }, {
                    key: "getOwnerKey",
                    value: function getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {
                      var hashData = new Uint8Array(password.length + 56);
                      hashData.set(password, 0);
                      hashData.set(ownerKeySalt, password.length);
                      hashData.set(userBytes, password.length + ownerKeySalt.length);
                      var key = calculatePDF20Hash(password, hashData, userBytes);
                      var cipher = new AES256Cipher(key);
                      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));
                    }
                  }, {
                    key: "getUserKey",
                    value: function getUserKey(password, userKeySalt, userEncryption) {
                      var hashData = new Uint8Array(password.length + 8);
                      hashData.set(password, 0);
                      hashData.set(userKeySalt, password.length);
                      var key = calculatePDF20Hash(password, hashData, []);
                      var cipher = new AES256Cipher(key);
                      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));
                    }
                  }]);
                  return PDF203;
                }();
                return PDF202;
              }();
              exports2.PDF20 = PDF20;
              var CipherTransform = /* @__PURE__ */ function() {
                function CipherTransform2(stringCipherConstructor, streamCipherConstructor) {
                  _classCallCheck(this, CipherTransform2);
                  this.StringCipherConstructor = stringCipherConstructor;
                  this.StreamCipherConstructor = streamCipherConstructor;
                }
                _createClass(CipherTransform2, [{
                  key: "createStream",
                  value: function createStream(stream, length) {
                    var cipher = new this.StreamCipherConstructor();
                    return new _decrypt_stream.DecryptStream(stream, length, function cipherTransformDecryptStream(data, finalize) {
                      return cipher.decryptBlock(data, finalize);
                    });
                  }
                }, {
                  key: "decryptString",
                  value: function decryptString(s) {
                    var cipher = new this.StringCipherConstructor();
                    var data = (0, _util.stringToBytes)(s);
                    data = cipher.decryptBlock(data, true);
                    return (0, _util.bytesToString)(data);
                  }
                }, {
                  key: "encryptString",
                  value: function encryptString(s) {
                    var cipher = new this.StringCipherConstructor();
                    if (cipher instanceof AESBaseCipher) {
                      var strLen = s.length;
                      var pad = 16 - strLen % 16;
                      s += String.fromCharCode(pad).repeat(pad);
                      var iv = new Uint8Array(16);
                      if (typeof crypto !== "undefined") {
                        crypto.getRandomValues(iv);
                      } else {
                        for (var i = 0; i < 16; i++) {
                          iv[i] = Math.floor(256 * Math.random());
                        }
                      }
                      var _data = (0, _util.stringToBytes)(s);
                      _data = cipher.encrypt(_data, iv);
                      var buf = new Uint8Array(16 + _data.length);
                      buf.set(iv);
                      buf.set(_data, 16);
                      return (0, _util.bytesToString)(buf);
                    }
                    var data = (0, _util.stringToBytes)(s);
                    data = cipher.encrypt(data);
                    return (0, _util.bytesToString)(data);
                  }
                }]);
                return CipherTransform2;
              }();
              var CipherTransformFactory = function CipherTransformFactoryClosure() {
                var defaultPasswordBytes = new Uint8Array([40, 191, 78, 94, 78, 117, 138, 65, 100, 0, 78, 86, 255, 250, 1, 8, 46, 46, 0, 182, 208, 104, 62, 128, 47, 12, 169, 254, 100, 83, 105, 122]);
                function createEncryptionKey20(revision, password, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms) {
                  if (password) {
                    var passwordLength = Math.min(127, password.length);
                    password = password.subarray(0, passwordLength);
                  } else {
                    password = [];
                  }
                  var pdfAlgorithm;
                  if (revision === 6) {
                    pdfAlgorithm = new PDF20();
                  } else {
                    pdfAlgorithm = new PDF17();
                  }
                  if (pdfAlgorithm.checkUserPassword(password, userValidationSalt, userPassword)) {
                    return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);
                  } else if (password.length && pdfAlgorithm.checkOwnerPassword(password, ownerValidationSalt, uBytes, ownerPassword)) {
                    return pdfAlgorithm.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);
                  }
                  return null;
                }
                function prepareKeyData(fileId, password, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata) {
                  var hashDataSize = 40 + ownerPassword.length + fileId.length;
                  var hashData = new Uint8Array(hashDataSize);
                  var i = 0, j, n;
                  if (password) {
                    n = Math.min(32, password.length);
                    for (; i < n; ++i) {
                      hashData[i] = password[i];
                    }
                  }
                  j = 0;
                  while (i < 32) {
                    hashData[i++] = defaultPasswordBytes[j++];
                  }
                  for (j = 0, n = ownerPassword.length; j < n; ++j) {
                    hashData[i++] = ownerPassword[j];
                  }
                  hashData[i++] = flags & 255;
                  hashData[i++] = flags >> 8 & 255;
                  hashData[i++] = flags >> 16 & 255;
                  hashData[i++] = flags >>> 24 & 255;
                  for (j = 0, n = fileId.length; j < n; ++j) {
                    hashData[i++] = fileId[j];
                  }
                  if (revision >= 4 && !encryptMetadata) {
                    hashData[i++] = 255;
                    hashData[i++] = 255;
                    hashData[i++] = 255;
                    hashData[i++] = 255;
                  }
                  var hash = calculateMD5(hashData, 0, i);
                  var keyLengthInBytes = keyLength >> 3;
                  if (revision >= 3) {
                    for (j = 0; j < 50; ++j) {
                      hash = calculateMD5(hash, 0, keyLengthInBytes);
                    }
                  }
                  var encryptionKey = hash.subarray(0, keyLengthInBytes);
                  var cipher, checkData;
                  if (revision >= 3) {
                    for (i = 0; i < 32; ++i) {
                      hashData[i] = defaultPasswordBytes[i];
                    }
                    for (j = 0, n = fileId.length; j < n; ++j) {
                      hashData[i++] = fileId[j];
                    }
                    cipher = new ARCFourCipher(encryptionKey);
                    checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));
                    n = encryptionKey.length;
                    var derivedKey = new Uint8Array(n);
                    for (j = 1; j <= 19; ++j) {
                      for (var k = 0; k < n; ++k) {
                        derivedKey[k] = encryptionKey[k] ^ j;
                      }
                      cipher = new ARCFourCipher(derivedKey);
                      checkData = cipher.encryptBlock(checkData);
                    }
                    for (j = 0, n = checkData.length; j < n; ++j) {
                      if (userPassword[j] !== checkData[j]) {
                        return null;
                      }
                    }
                  } else {
                    cipher = new ARCFourCipher(encryptionKey);
                    checkData = cipher.encryptBlock(defaultPasswordBytes);
                    for (j = 0, n = checkData.length; j < n; ++j) {
                      if (userPassword[j] !== checkData[j]) {
                        return null;
                      }
                    }
                  }
                  return encryptionKey;
                }
                function decodeUserPassword(password, ownerPassword, revision, keyLength) {
                  var hashData = new Uint8Array(32);
                  var i = 0;
                  var n = Math.min(32, password.length);
                  for (; i < n; ++i) {
                    hashData[i] = password[i];
                  }
                  var j = 0;
                  while (i < 32) {
                    hashData[i++] = defaultPasswordBytes[j++];
                  }
                  var hash = calculateMD5(hashData, 0, i);
                  var keyLengthInBytes = keyLength >> 3;
                  if (revision >= 3) {
                    for (j = 0; j < 50; ++j) {
                      hash = calculateMD5(hash, 0, hash.length);
                    }
                  }
                  var cipher, userPassword;
                  if (revision >= 3) {
                    userPassword = ownerPassword;
                    var derivedKey = new Uint8Array(keyLengthInBytes);
                    for (j = 19; j >= 0; j--) {
                      for (var k = 0; k < keyLengthInBytes; ++k) {
                        derivedKey[k] = hash[k] ^ j;
                      }
                      cipher = new ARCFourCipher(derivedKey);
                      userPassword = cipher.encryptBlock(userPassword);
                    }
                  } else {
                    cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));
                    userPassword = cipher.encryptBlock(ownerPassword);
                  }
                  return userPassword;
                }
                var identityName = _primitives.Name.get("Identity");
                function buildObjectKey(num, gen, encryptionKey) {
                  var isAes = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
                  var key = new Uint8Array(encryptionKey.length + 9);
                  var n = encryptionKey.length;
                  var i;
                  for (i = 0; i < n; ++i) {
                    key[i] = encryptionKey[i];
                  }
                  key[i++] = num & 255;
                  key[i++] = num >> 8 & 255;
                  key[i++] = num >> 16 & 255;
                  key[i++] = gen & 255;
                  key[i++] = gen >> 8 & 255;
                  if (isAes) {
                    key[i++] = 115;
                    key[i++] = 65;
                    key[i++] = 108;
                    key[i++] = 84;
                  }
                  var hash = calculateMD5(key, 0, i);
                  return hash.subarray(0, Math.min(encryptionKey.length + 5, 16));
                }
                function buildCipherConstructor(cf, name, num, gen, key) {
                  if (!(0, _primitives.isName)(name)) {
                    throw new _util.FormatError("Invalid crypt filter name.");
                  }
                  var cryptFilter = cf.get(name.name);
                  var cfm;
                  if (cryptFilter !== null && cryptFilter !== void 0) {
                    cfm = cryptFilter.get("CFM");
                  }
                  if (!cfm || cfm.name === "None") {
                    return function cipherTransformFactoryBuildCipherConstructorNone() {
                      return new NullCipher();
                    };
                  }
                  if (cfm.name === "V2") {
                    return function cipherTransformFactoryBuildCipherConstructorV2() {
                      return new ARCFourCipher(buildObjectKey(num, gen, key, false));
                    };
                  }
                  if (cfm.name === "AESV2") {
                    return function cipherTransformFactoryBuildCipherConstructorAESV2() {
                      return new AES128Cipher(buildObjectKey(num, gen, key, true));
                    };
                  }
                  if (cfm.name === "AESV3") {
                    return function cipherTransformFactoryBuildCipherConstructorAESV3() {
                      return new AES256Cipher(key);
                    };
                  }
                  throw new _util.FormatError("Unknown crypto method");
                }
                var CipherTransformFactory2 = /* @__PURE__ */ function() {
                  function CipherTransformFactory3(dict, fileId, password) {
                    _classCallCheck(this, CipherTransformFactory3);
                    var filter = dict.get("Filter");
                    if (!(0, _primitives.isName)(filter, "Standard")) {
                      throw new _util.FormatError("unknown encryption method");
                    }
                    this.filterName = filter.name;
                    this.dict = dict;
                    var algorithm = dict.get("V");
                    if (!Number.isInteger(algorithm) || algorithm !== 1 && algorithm !== 2 && algorithm !== 4 && algorithm !== 5) {
                      throw new _util.FormatError("unsupported encryption algorithm");
                    }
                    this.algorithm = algorithm;
                    var keyLength = dict.get("Length");
                    if (!keyLength) {
                      if (algorithm <= 3) {
                        keyLength = 40;
                      } else {
                        var cfDict = dict.get("CF");
                        var streamCryptoName = dict.get("StmF");
                        if ((0, _primitives.isDict)(cfDict) && (0, _primitives.isName)(streamCryptoName)) {
                          cfDict.suppressEncryption = true;
                          var handlerDict = cfDict.get(streamCryptoName.name);
                          keyLength = handlerDict && handlerDict.get("Length") || 128;
                          if (keyLength < 40) {
                            keyLength <<= 3;
                          }
                        }
                      }
                    }
                    if (!Number.isInteger(keyLength) || keyLength < 40 || keyLength % 8 !== 0) {
                      throw new _util.FormatError("invalid key length");
                    }
                    var ownerPassword = (0, _util.stringToBytes)(dict.get("O")).subarray(0, 32);
                    var userPassword = (0, _util.stringToBytes)(dict.get("U")).subarray(0, 32);
                    var flags = dict.get("P");
                    var revision = dict.get("R");
                    var encryptMetadata = (algorithm === 4 || algorithm === 5) && dict.get("EncryptMetadata") !== false;
                    this.encryptMetadata = encryptMetadata;
                    var fileIdBytes = (0, _util.stringToBytes)(fileId);
                    var passwordBytes;
                    if (password) {
                      if (revision === 6) {
                        try {
                          password = (0, _util.utf8StringToString)(password);
                        } catch (ex) {
                          (0, _util.warn)("CipherTransformFactory: Unable to convert UTF8 encoded password.");
                        }
                      }
                      passwordBytes = (0, _util.stringToBytes)(password);
                    }
                    var encryptionKey;
                    if (algorithm !== 5) {
                      encryptionKey = prepareKeyData(fileIdBytes, passwordBytes, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);
                    } else {
                      var ownerValidationSalt = (0, _util.stringToBytes)(dict.get("O")).subarray(32, 40);
                      var ownerKeySalt = (0, _util.stringToBytes)(dict.get("O")).subarray(40, 48);
                      var uBytes = (0, _util.stringToBytes)(dict.get("U")).subarray(0, 48);
                      var userValidationSalt = (0, _util.stringToBytes)(dict.get("U")).subarray(32, 40);
                      var userKeySalt = (0, _util.stringToBytes)(dict.get("U")).subarray(40, 48);
                      var ownerEncryption = (0, _util.stringToBytes)(dict.get("OE"));
                      var userEncryption = (0, _util.stringToBytes)(dict.get("UE"));
                      var perms = (0, _util.stringToBytes)(dict.get("Perms"));
                      encryptionKey = createEncryptionKey20(revision, passwordBytes, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms);
                    }
                    if (!encryptionKey && !password) {
                      throw new _util.PasswordException("No password given", _util.PasswordResponses.NEED_PASSWORD);
                    } else if (!encryptionKey && password) {
                      var decodedPassword = decodeUserPassword(passwordBytes, ownerPassword, revision, keyLength);
                      encryptionKey = prepareKeyData(fileIdBytes, decodedPassword, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);
                    }
                    if (!encryptionKey) {
                      throw new _util.PasswordException("Incorrect Password", _util.PasswordResponses.INCORRECT_PASSWORD);
                    }
                    this.encryptionKey = encryptionKey;
                    if (algorithm >= 4) {
                      var cf = dict.get("CF");
                      if ((0, _primitives.isDict)(cf)) {
                        cf.suppressEncryption = true;
                      }
                      this.cf = cf;
                      this.stmf = dict.get("StmF") || identityName;
                      this.strf = dict.get("StrF") || identityName;
                      this.eff = dict.get("EFF") || this.stmf;
                    }
                  }
                  _createClass(CipherTransformFactory3, [{
                    key: "createCipherTransform",
                    value: function createCipherTransform(num, gen) {
                      if (this.algorithm === 4 || this.algorithm === 5) {
                        return new CipherTransform(buildCipherConstructor(this.cf, this.stmf, num, gen, this.encryptionKey), buildCipherConstructor(this.cf, this.strf, num, gen, this.encryptionKey));
                      }
                      var key = buildObjectKey(num, gen, this.encryptionKey, false);
                      var cipherConstructor = function buildCipherCipherConstructor() {
                        return new ARCFourCipher(key);
                      };
                      return new CipherTransform(cipherConstructor, cipherConstructor);
                    }
                  }]);
                  return CipherTransformFactory3;
                }();
                return CipherTransformFactory2;
              }();
              exports2.CipherTransformFactory = CipherTransformFactory;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.DecryptStream = void 0;
              var _decode_stream = __w_pdfjs_require__2(159);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var chunkSize = 512;
              var DecryptStream = /* @__PURE__ */ function(_DecodeStream) {
                _inherits(DecryptStream2, _DecodeStream);
                var _super = _createSuper(DecryptStream2);
                function DecryptStream2(str, maybeLength, decrypt) {
                  var _this;
                  _classCallCheck(this, DecryptStream2);
                  _this = _super.call(this, maybeLength);
                  _this.str = str;
                  _this.dict = str.dict;
                  _this.decrypt = decrypt;
                  _this.nextChunk = null;
                  _this.initialized = false;
                  return _this;
                }
                _createClass(DecryptStream2, [{
                  key: "readBlock",
                  value: function readBlock() {
                    var chunk;
                    if (this.initialized) {
                      chunk = this.nextChunk;
                    } else {
                      chunk = this.str.getBytes(chunkSize);
                      this.initialized = true;
                    }
                    if (!chunk || chunk.length === 0) {
                      this.eof = true;
                      return;
                    }
                    this.nextChunk = this.str.getBytes(chunkSize);
                    var hasMoreData = this.nextChunk && this.nextChunk.length > 0;
                    var decrypt = this.decrypt;
                    chunk = decrypt(chunk, !hasMoreData);
                    var bufferLength = this.bufferLength;
                    var n = chunk.length, buffer = this.ensureBuffer(bufferLength + n);
                    for (var i = 0; i < n; i++) {
                      buffer[bufferLength++] = chunk[i];
                    }
                    this.bufferLength = bufferLength;
                  }
                }]);
                return DecryptStream2;
              }(_decode_stream.DecodeStream);
              exports2.DecryptStream = DecryptStream;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.XFAFactory = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _xfa_object = __w_pdfjs_require__2(205);
              var _bind = __w_pdfjs_require__2(209);
              var _data = __w_pdfjs_require__2(215);
              var _fonts = __w_pdfjs_require__2(213);
              var _utils = __w_pdfjs_require__2(206);
              var _util = __w_pdfjs_require__2(4);
              var _parser = __w_pdfjs_require__2(216);
              var _xhtml = __w_pdfjs_require__2(226);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var XFAFactory = /* @__PURE__ */ function() {
                function XFAFactory2(data) {
                  _classCallCheck(this, XFAFactory2);
                  try {
                    this.root = new _parser.XFAParser().parse(XFAFactory2._createDocument(data));
                    var binder = new _bind.Binder(this.root);
                    this.form = binder.bind();
                    this.dataHandler = new _data.DataHandler(this.root, binder.getData());
                    this.form[_xfa_object.$globalData].template = this.form;
                  } catch (e) {
                    (0, _util.warn)("XFA - an error occurred during parsing and binding: ".concat(e));
                  }
                }
                _createClass(XFAFactory2, [{
                  key: "isValid",
                  value: function isValid() {
                    return this.root && this.form;
                  }
                }, {
                  key: "_createPagesHelper",
                  value: function _createPagesHelper() {
                    var iterator = this.form[_xfa_object.$toPages]();
                    return new Promise(function(resolve, reject) {
                      var nextIteration = function nextIteration2() {
                        try {
                          var value = iterator.next();
                          if (value.done) {
                            resolve(value.value);
                          } else {
                            setTimeout(nextIteration2, 0);
                          }
                        } catch (e) {
                          reject(e);
                        }
                      };
                      setTimeout(nextIteration, 0);
                    });
                  }
                }, {
                  key: "_createPages",
                  value: function() {
                    var _createPages2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee() {
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.prev = 0;
                              _context.next = 3;
                              return this._createPagesHelper();
                            case 3:
                              this.pages = _context.sent;
                              this.dims = this.pages.children.map(function(c) {
                                var _c$attributes$style = c.attributes.style, width = _c$attributes$style.width, height = _c$attributes$style.height;
                                return [0, 0, parseInt(width), parseInt(height)];
                              });
                              _context.next = 10;
                              break;
                            case 7:
                              _context.prev = 7;
                              _context.t0 = _context["catch"](0);
                              (0, _util.warn)("XFA - an error occurred during layout: ".concat(_context.t0));
                            case 10:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this, [[0, 7]]);
                    }));
                    function _createPages() {
                      return _createPages2.apply(this, arguments);
                    }
                    return _createPages;
                  }()
                }, {
                  key: "getBoundingBox",
                  value: function getBoundingBox(pageIndex) {
                    return this.dims[pageIndex];
                  }
                }, {
                  key: "getNumPages",
                  value: function() {
                    var _getNumPages = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee2() {
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              if (this.pages) {
                                _context2.next = 3;
                                break;
                              }
                              _context2.next = 3;
                              return this._createPages();
                            case 3:
                              return _context2.abrupt("return", this.dims.length);
                            case 4:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2, this);
                    }));
                    function getNumPages() {
                      return _getNumPages.apply(this, arguments);
                    }
                    return getNumPages;
                  }()
                }, {
                  key: "setImages",
                  value: function setImages(images) {
                    this.form[_xfa_object.$globalData].images = images;
                  }
                }, {
                  key: "setFonts",
                  value: function setFonts(fonts) {
                    this.form[_xfa_object.$globalData].fontFinder = new _fonts.FontFinder(fonts);
                    var missingFonts = [];
                    var _iterator = _createForOfIteratorHelper(this.form[_xfa_object.$globalData].usedTypefaces), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var typeface = _step.value;
                        typeface = (0, _utils.stripQuotes)(typeface);
                        var font = this.form[_xfa_object.$globalData].fontFinder.find(typeface);
                        if (!font) {
                          missingFonts.push(typeface);
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    if (missingFonts.length > 0) {
                      return missingFonts;
                    }
                    return null;
                  }
                }, {
                  key: "appendFonts",
                  value: function appendFonts(fonts, reallyMissingFonts) {
                    this.form[_xfa_object.$globalData].fontFinder.add(fonts, reallyMissingFonts);
                  }
                }, {
                  key: "getPages",
                  value: function() {
                    var _getPages = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee3() {
                      var pages;
                      return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              if (this.pages) {
                                _context3.next = 3;
                                break;
                              }
                              _context3.next = 3;
                              return this._createPages();
                            case 3:
                              pages = this.pages;
                              this.pages = null;
                              return _context3.abrupt("return", pages);
                            case 6:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3, this);
                    }));
                    function getPages() {
                      return _getPages.apply(this, arguments);
                    }
                    return getPages;
                  }()
                }, {
                  key: "serializeData",
                  value: function serializeData(storage) {
                    return this.dataHandler.serialize(storage);
                  }
                }], [{
                  key: "_createDocument",
                  value: function _createDocument(data) {
                    if (!data["/xdp:xdp"]) {
                      return data["xdp:xdp"];
                    }
                    return Object.values(data).join("");
                  }
                }, {
                  key: "getRichTextAsHtml",
                  value: function getRichTextAsHtml(rc) {
                    if (!rc || typeof rc !== "string") {
                      return null;
                    }
                    try {
                      var root = new _parser.XFAParser(_xhtml.XhtmlNamespace, true).parse(rc);
                      if (!["body", "xhtml"].includes(root[_xfa_object.$nodeName])) {
                        var newRoot = _xhtml.XhtmlNamespace.body({});
                        newRoot[_xfa_object.$appendChild](root);
                        root = newRoot;
                      }
                      var result = root[_xfa_object.$toHTML]();
                      if (!result.success) {
                        return null;
                      }
                      var html = result.html;
                      var attributes = html.attributes;
                      if (attributes) {
                        if (attributes["class"]) {
                          attributes["class"] = attributes["class"].filter(function(attr) {
                            return !attr.startsWith("xfa");
                          });
                        }
                        attributes.dir = "auto";
                      }
                      return {
                        html,
                        str: root[_xfa_object.$text]()
                      };
                    } catch (e) {
                      (0, _util.warn)("XFA - an error occurred during parsing of rich text: ".concat(e));
                    }
                    return null;
                  }
                }]);
                return XFAFactory2;
              }();
              exports2.XFAFactory = XFAFactory;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.XmlObject = exports2.XFAObjectArray = exports2.XFAObject = exports2.XFAAttribute = exports2.StringObject = exports2.OptionObject = exports2.Option10 = exports2.Option01 = exports2.IntegerObject = exports2.ContentObject = exports2.$uid = exports2.$toStyle = exports2.$toString = exports2.$toPages = exports2.$toHTML = exports2.$text = exports2.$tabIndex = exports2.$setValue = exports2.$setSetAttributes = exports2.$setId = exports2.$searchNode = exports2.$root = exports2.$resolvePrototypes = exports2.$removeChild = exports2.$pushPara = exports2.$pushGlyphs = exports2.$popPara = exports2.$onText = exports2.$onChildCheck = exports2.$onChild = exports2.$nsAttributes = exports2.$nodeName = exports2.$namespaceId = exports2.$isUsable = exports2.$isTransparent = exports2.$isThereMoreWidth = exports2.$isSplittable = exports2.$isNsAgnostic = exports2.$isDescendent = exports2.$isDataValue = exports2.$isCDATAXml = exports2.$isBindable = exports2.$insertAt = exports2.$indexOf = exports2.$ids = exports2.$hasSettableValue = exports2.$globalData = exports2.$getTemplateRoot = exports2.$getSubformParent = exports2.$getRealChildrenByNameIt = exports2.$getParent = exports2.$getNextPage = exports2.$getExtra = exports2.$getDataValue = exports2.$getContainedChildren = exports2.$getChildrenByNameIt = exports2.$getChildrenByName = exports2.$getChildrenByClass = exports2.$getChildren = exports2.$getAvailableSpace = exports2.$getAttributes = exports2.$getAttributeIt = exports2.$flushHTML = exports2.$finalize = exports2.$extra = exports2.$dump = exports2.$data = exports2.$content = exports2.$consumed = exports2.$clone = exports2.$cleanup = exports2.$cleanPage = exports2.$clean = exports2.$childrenToHTML = exports2.$appendChild = exports2.$addHTML = exports2.$acceptWhitespace = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _utils = __w_pdfjs_require__2(206);
              var _util = __w_pdfjs_require__2(4);
              var _core_utils = __w_pdfjs_require__2(139);
              var _namespaces = __w_pdfjs_require__2(207);
              var _som = __w_pdfjs_require__2(208);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function _get(target, property, receiver) {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  _get = Reflect.get;
                } else {
                  _get = function _get2(target2, property2, receiver2) {
                    var base = _superPropBase(target2, property2);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property2);
                    if (desc.get) {
                      return desc.get.call(receiver2);
                    }
                    return desc.value;
                  };
                }
                return _get(target, property, receiver || target);
              }
              function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = _getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
              }
              function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                  return Array.from(iter);
              }
              function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr))
                  return _arrayLikeToArray(arr);
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var $acceptWhitespace = Symbol();
              exports2.$acceptWhitespace = $acceptWhitespace;
              var $addHTML = Symbol();
              exports2.$addHTML = $addHTML;
              var $appendChild = Symbol();
              exports2.$appendChild = $appendChild;
              var $childrenToHTML = Symbol();
              exports2.$childrenToHTML = $childrenToHTML;
              var $clean = Symbol();
              exports2.$clean = $clean;
              var $cleanPage = Symbol();
              exports2.$cleanPage = $cleanPage;
              var $cleanup = Symbol();
              exports2.$cleanup = $cleanup;
              var $clone = Symbol();
              exports2.$clone = $clone;
              var $consumed = Symbol();
              exports2.$consumed = $consumed;
              var $content = Symbol("content");
              exports2.$content = $content;
              var $data = Symbol("data");
              exports2.$data = $data;
              var $dump = Symbol();
              exports2.$dump = $dump;
              var $extra = Symbol("extra");
              exports2.$extra = $extra;
              var $finalize = Symbol();
              exports2.$finalize = $finalize;
              var $flushHTML = Symbol();
              exports2.$flushHTML = $flushHTML;
              var $getAttributeIt = Symbol();
              exports2.$getAttributeIt = $getAttributeIt;
              var $getAttributes = Symbol();
              exports2.$getAttributes = $getAttributes;
              var $getAvailableSpace = Symbol();
              exports2.$getAvailableSpace = $getAvailableSpace;
              var $getChildrenByClass = Symbol();
              exports2.$getChildrenByClass = $getChildrenByClass;
              var $getChildrenByName = Symbol();
              exports2.$getChildrenByName = $getChildrenByName;
              var $getChildrenByNameIt = Symbol();
              exports2.$getChildrenByNameIt = $getChildrenByNameIt;
              var $getDataValue = Symbol();
              exports2.$getDataValue = $getDataValue;
              var $getExtra = Symbol();
              exports2.$getExtra = $getExtra;
              var $getRealChildrenByNameIt = Symbol();
              exports2.$getRealChildrenByNameIt = $getRealChildrenByNameIt;
              var $getChildren = Symbol();
              exports2.$getChildren = $getChildren;
              var $getContainedChildren = Symbol();
              exports2.$getContainedChildren = $getContainedChildren;
              var $getNextPage = Symbol();
              exports2.$getNextPage = $getNextPage;
              var $getSubformParent = Symbol();
              exports2.$getSubformParent = $getSubformParent;
              var $getParent = Symbol();
              exports2.$getParent = $getParent;
              var $getTemplateRoot = Symbol();
              exports2.$getTemplateRoot = $getTemplateRoot;
              var $globalData = Symbol();
              exports2.$globalData = $globalData;
              var $hasSettableValue = Symbol();
              exports2.$hasSettableValue = $hasSettableValue;
              var $ids = Symbol();
              exports2.$ids = $ids;
              var $indexOf = Symbol();
              exports2.$indexOf = $indexOf;
              var $insertAt = Symbol();
              exports2.$insertAt = $insertAt;
              var $isCDATAXml = Symbol();
              exports2.$isCDATAXml = $isCDATAXml;
              var $isBindable = Symbol();
              exports2.$isBindable = $isBindable;
              var $isDataValue = Symbol();
              exports2.$isDataValue = $isDataValue;
              var $isDescendent = Symbol();
              exports2.$isDescendent = $isDescendent;
              var $isNsAgnostic = Symbol();
              exports2.$isNsAgnostic = $isNsAgnostic;
              var $isSplittable = Symbol();
              exports2.$isSplittable = $isSplittable;
              var $isThereMoreWidth = Symbol();
              exports2.$isThereMoreWidth = $isThereMoreWidth;
              var $isTransparent = Symbol();
              exports2.$isTransparent = $isTransparent;
              var $isUsable = Symbol();
              exports2.$isUsable = $isUsable;
              var $lastAttribute = Symbol();
              var $namespaceId = Symbol("namespaceId");
              exports2.$namespaceId = $namespaceId;
              var $nodeName = Symbol("nodeName");
              exports2.$nodeName = $nodeName;
              var $nsAttributes = Symbol();
              exports2.$nsAttributes = $nsAttributes;
              var $onChild = Symbol();
              exports2.$onChild = $onChild;
              var $onChildCheck = Symbol();
              exports2.$onChildCheck = $onChildCheck;
              var $onText = Symbol();
              exports2.$onText = $onText;
              var $pushGlyphs = Symbol();
              exports2.$pushGlyphs = $pushGlyphs;
              var $popPara = Symbol();
              exports2.$popPara = $popPara;
              var $pushPara = Symbol();
              exports2.$pushPara = $pushPara;
              var $removeChild = Symbol();
              exports2.$removeChild = $removeChild;
              var $root = Symbol("root");
              exports2.$root = $root;
              var $resolvePrototypes = Symbol();
              exports2.$resolvePrototypes = $resolvePrototypes;
              var $searchNode = Symbol();
              exports2.$searchNode = $searchNode;
              var $setId = Symbol();
              exports2.$setId = $setId;
              var $setSetAttributes = Symbol();
              exports2.$setSetAttributes = $setSetAttributes;
              var $setValue = Symbol();
              exports2.$setValue = $setValue;
              var $tabIndex = Symbol();
              exports2.$tabIndex = $tabIndex;
              var $text = Symbol();
              exports2.$text = $text;
              var $toPages = Symbol();
              exports2.$toPages = $toPages;
              var $toHTML = Symbol();
              exports2.$toHTML = $toHTML;
              var $toString = Symbol();
              exports2.$toString = $toString;
              var $toStyle = Symbol();
              exports2.$toStyle = $toStyle;
              var $uid = Symbol("uid");
              exports2.$uid = $uid;
              var _applyPrototype = Symbol();
              var _attributes = Symbol();
              var _attributeNames = Symbol();
              var _children = Symbol("_children");
              var _cloneAttribute = Symbol();
              var _dataValue = Symbol();
              var _defaultValue = Symbol();
              var _filteredChildrenGenerator = Symbol();
              var _getPrototype = Symbol();
              var _getUnsetAttributes = Symbol();
              var _hasChildren = Symbol();
              var _max = Symbol();
              var _options = Symbol();
              var _parent = Symbol("parent");
              var _resolvePrototypesHelper = Symbol();
              var _setAttributes = Symbol();
              var _validator = Symbol();
              var uid = 0;
              var NS_DATASETS = _namespaces.NamespaceIds.datasets.id;
              var XFAObject = /* @__PURE__ */ function() {
                function XFAObject2(nsId, name) {
                  var hasChildren = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                  _classCallCheck(this, XFAObject2);
                  this[$namespaceId] = nsId;
                  this[$nodeName] = name;
                  this[_hasChildren] = hasChildren;
                  this[_parent] = null;
                  this[_children] = [];
                  this[$uid] = "".concat(name).concat(uid++);
                  this[$globalData] = null;
                }
                _createClass(XFAObject2, [{
                  key: $onChild,
                  value: function value(child) {
                    if (!this[_hasChildren] || !this[$onChildCheck](child)) {
                      return false;
                    }
                    var name = child[$nodeName];
                    var node = this[name];
                    if (node instanceof XFAObjectArray) {
                      if (node.push(child)) {
                        this[$appendChild](child);
                        return true;
                      }
                    } else {
                      if (node !== null) {
                        this[$removeChild](node);
                      }
                      this[name] = child;
                      this[$appendChild](child);
                      return true;
                    }
                    var id = "";
                    if (this.id) {
                      id = " (id: ".concat(this.id, ")");
                    } else if (this.name) {
                      id = " (name: ".concat(this.name, " ").concat(this.h.value, ")");
                    }
                    (0, _util.warn)('XFA - node "'.concat(this[$nodeName], '"').concat(id, ' has already enough "').concat(name, '"!'));
                    return false;
                  }
                }, {
                  key: $onChildCheck,
                  value: function value(child) {
                    return this.hasOwnProperty(child[$nodeName]) && child[$namespaceId] === this[$namespaceId];
                  }
                }, {
                  key: $isNsAgnostic,
                  value: function value() {
                    return false;
                  }
                }, {
                  key: $acceptWhitespace,
                  value: function value() {
                    return false;
                  }
                }, {
                  key: $isCDATAXml,
                  value: function value() {
                    return false;
                  }
                }, {
                  key: $isBindable,
                  value: function value() {
                    return false;
                  }
                }, {
                  key: $popPara,
                  value: function value() {
                    if (this.para) {
                      this[$getTemplateRoot]()[$extra].paraStack.pop();
                    }
                  }
                }, {
                  key: $pushPara,
                  value: function value() {
                    this[$getTemplateRoot]()[$extra].paraStack.push(this.para);
                  }
                }, {
                  key: $setId,
                  value: function value(ids) {
                    if (this.id && this[$namespaceId] === _namespaces.NamespaceIds.template.id) {
                      ids.set(this.id, this);
                    }
                  }
                }, {
                  key: $getTemplateRoot,
                  value: function value() {
                    return this[$globalData].template;
                  }
                }, {
                  key: $isSplittable,
                  value: function value() {
                    return false;
                  }
                }, {
                  key: $isThereMoreWidth,
                  value: function value() {
                    return false;
                  }
                }, {
                  key: $appendChild,
                  value: function value(child) {
                    child[_parent] = this;
                    this[_children].push(child);
                    if (!child[$globalData] && this[$globalData]) {
                      child[$globalData] = this[$globalData];
                    }
                  }
                }, {
                  key: $removeChild,
                  value: function value(child) {
                    var i = this[_children].indexOf(child);
                    this[_children].splice(i, 1);
                  }
                }, {
                  key: $hasSettableValue,
                  value: function value() {
                    return this.hasOwnProperty("value");
                  }
                }, {
                  key: $setValue,
                  value: function value(_) {
                  }
                }, {
                  key: $onText,
                  value: function value(_) {
                  }
                }, {
                  key: $finalize,
                  value: function value() {
                  }
                }, {
                  key: $clean,
                  value: function value(builder) {
                    delete this[_hasChildren];
                    if (this[$cleanup]) {
                      builder.clean(this[$cleanup]);
                      delete this[$cleanup];
                    }
                  }
                }, {
                  key: $indexOf,
                  value: function value(child) {
                    return this[_children].indexOf(child);
                  }
                }, {
                  key: $insertAt,
                  value: function value(i, child) {
                    child[_parent] = this;
                    this[_children].splice(i, 0, child);
                    if (!child[$globalData] && this[$globalData]) {
                      child[$globalData] = this[$globalData];
                    }
                  }
                }, {
                  key: $isTransparent,
                  value: function value() {
                    return !this.name;
                  }
                }, {
                  key: $lastAttribute,
                  value: function value() {
                    return "";
                  }
                }, {
                  key: $text,
                  value: function value() {
                    if (this[_children].length === 0) {
                      return this[$content];
                    }
                    return this[_children].map(function(c) {
                      return c[$text]();
                    }).join("");
                  }
                }, {
                  key: _attributeNames,
                  get: function get() {
                    var proto = Object.getPrototypeOf(this);
                    if (!proto._attributes) {
                      var attributes = proto._attributes = /* @__PURE__ */ new Set();
                      var _iterator = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)), _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                          var name = _step.value;
                          if (this[name] === null || this[name] instanceof XFAObject2 || this[name] instanceof XFAObjectArray) {
                            break;
                          }
                          attributes.add(name);
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                    }
                    return (0, _util.shadow)(this, _attributeNames, proto._attributes);
                  }
                }, {
                  key: $isDescendent,
                  value: function value(parent) {
                    var node = this;
                    while (node) {
                      if (node === parent) {
                        return true;
                      }
                      node = node[$getParent]();
                    }
                    return false;
                  }
                }, {
                  key: $getParent,
                  value: function value() {
                    return this[_parent];
                  }
                }, {
                  key: $getSubformParent,
                  value: function value() {
                    return this[$getParent]();
                  }
                }, {
                  key: $getChildren,
                  value: function value() {
                    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                    if (!name) {
                      return this[_children];
                    }
                    return this[name];
                  }
                }, {
                  key: $dump,
                  value: function value() {
                    var dumped = /* @__PURE__ */ Object.create(null);
                    if (this[$content]) {
                      dumped.$content = this[$content];
                    }
                    var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var name = _step2.value;
                        var value2 = this[name];
                        if (value2 === null) {
                          continue;
                        }
                        if (value2 instanceof XFAObject2) {
                          dumped[name] = value2[$dump]();
                        } else if (value2 instanceof XFAObjectArray) {
                          if (!value2.isEmpty()) {
                            dumped[name] = value2.dump();
                          }
                        } else {
                          dumped[name] = value2;
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    return dumped;
                  }
                }, {
                  key: $toStyle,
                  value: function value() {
                    return null;
                  }
                }, {
                  key: $toHTML,
                  value: function value() {
                    return _utils.HTMLResult.EMPTY;
                  }
                }, {
                  key: $getContainedChildren,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value() {
                    var _iterator3, _step3, node;
                    return _regenerator["default"].wrap(function value$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _iterator3 = _createForOfIteratorHelper(this[$getChildren]());
                            _context.prev = 1;
                            _iterator3.s();
                          case 3:
                            if ((_step3 = _iterator3.n()).done) {
                              _context.next = 9;
                              break;
                            }
                            node = _step3.value;
                            _context.next = 7;
                            return node;
                          case 7:
                            _context.next = 3;
                            break;
                          case 9:
                            _context.next = 14;
                            break;
                          case 11:
                            _context.prev = 11;
                            _context.t0 = _context["catch"](1);
                            _iterator3.e(_context.t0);
                          case 14:
                            _context.prev = 14;
                            _iterator3.f();
                            return _context.finish(14);
                          case 17:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, value, this, [[1, 11, 14, 17]]);
                  })
                }, {
                  key: _filteredChildrenGenerator,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value(filter, include) {
                    var _iterator4, _step4, node, availableSpace, res;
                    return _regenerator["default"].wrap(function value$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _iterator4 = _createForOfIteratorHelper(this[$getContainedChildren]());
                            _context2.prev = 1;
                            _iterator4.s();
                          case 3:
                            if ((_step4 = _iterator4.n()).done) {
                              _context2.next = 13;
                              break;
                            }
                            node = _step4.value;
                            if (!(!filter || include === filter.has(node[$nodeName]))) {
                              _context2.next = 11;
                              break;
                            }
                            availableSpace = this[$getAvailableSpace]();
                            res = node[$toHTML](availableSpace);
                            if (!res.success) {
                              this[$extra].failingNode = node;
                            }
                            _context2.next = 11;
                            return res;
                          case 11:
                            _context2.next = 3;
                            break;
                          case 13:
                            _context2.next = 18;
                            break;
                          case 15:
                            _context2.prev = 15;
                            _context2.t0 = _context2["catch"](1);
                            _iterator4.e(_context2.t0);
                          case 18:
                            _context2.prev = 18;
                            _iterator4.f();
                            return _context2.finish(18);
                          case 21:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, value, this, [[1, 15, 18, 21]]);
                  })
                }, {
                  key: $flushHTML,
                  value: function value() {
                    return null;
                  }
                }, {
                  key: $addHTML,
                  value: function value(html, bbox) {
                    this[$extra].children.push(html);
                  }
                }, {
                  key: $getAvailableSpace,
                  value: function value() {
                  }
                }, {
                  key: $childrenToHTML,
                  value: function value(_ref) {
                    var _ref$filter = _ref.filter, filter = _ref$filter === void 0 ? null : _ref$filter, _ref$include = _ref.include, include = _ref$include === void 0 ? true : _ref$include;
                    if (!this[$extra].generator) {
                      this[$extra].generator = this[_filteredChildrenGenerator](filter, include);
                    } else {
                      var availableSpace = this[$getAvailableSpace]();
                      var res = this[$extra].failingNode[$toHTML](availableSpace);
                      if (!res.success) {
                        return res;
                      }
                      if (res.html) {
                        this[$addHTML](res.html, res.bbox);
                      }
                      delete this[$extra].failingNode;
                    }
                    while (true) {
                      var gen = this[$extra].generator.next();
                      if (gen.done) {
                        break;
                      }
                      var _res = gen.value;
                      if (!_res.success) {
                        return _res;
                      }
                      if (_res.html) {
                        this[$addHTML](_res.html, _res.bbox);
                      }
                    }
                    this[$extra].generator = null;
                    return _utils.HTMLResult.EMPTY;
                  }
                }, {
                  key: $setSetAttributes,
                  value: function value(attributes) {
                    this[_setAttributes] = new Set(Object.keys(attributes));
                  }
                }, {
                  key: _getUnsetAttributes,
                  value: function value(protoAttributes) {
                    var allAttr = this[_attributeNames];
                    var setAttr = this[_setAttributes];
                    return _toConsumableArray(protoAttributes).filter(function(x) {
                      return allAttr.has(x) && !setAttr.has(x);
                    });
                  }
                }, {
                  key: $resolvePrototypes,
                  value: function value(ids) {
                    var ancestors = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : /* @__PURE__ */ new Set();
                    var _iterator5 = _createForOfIteratorHelper(this[_children]), _step5;
                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                        var child = _step5.value;
                        child[_resolvePrototypesHelper](ids, ancestors);
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                  }
                }, {
                  key: _resolvePrototypesHelper,
                  value: function value(ids, ancestors) {
                    var proto = this[_getPrototype](ids, ancestors);
                    if (proto) {
                      this[_applyPrototype](proto, ids, ancestors);
                    } else {
                      this[$resolvePrototypes](ids, ancestors);
                    }
                  }
                }, {
                  key: _getPrototype,
                  value: function value(ids, ancestors) {
                    var use = this.use, usehref = this.usehref;
                    if (!use && !usehref) {
                      return null;
                    }
                    var proto = null;
                    var somExpression = null;
                    var id = null;
                    var ref = use;
                    if (usehref) {
                      ref = usehref;
                      if (usehref.startsWith("#som(") && usehref.endsWith(")")) {
                        somExpression = usehref.slice("#som(".length, usehref.length - 1);
                      } else if (usehref.startsWith(".#som(") && usehref.endsWith(")")) {
                        somExpression = usehref.slice(".#som(".length, usehref.length - 1);
                      } else if (usehref.startsWith("#")) {
                        id = usehref.slice(1);
                      } else if (usehref.startsWith(".#")) {
                        id = usehref.slice(2);
                      }
                    } else if (use.startsWith("#")) {
                      id = use.slice(1);
                    } else {
                      somExpression = use;
                    }
                    this.use = this.usehref = "";
                    if (id) {
                      proto = ids.get(id);
                    } else {
                      proto = (0, _som.searchNode)(ids.get($root), this, somExpression, true, false);
                      if (proto) {
                        proto = proto[0];
                      }
                    }
                    if (!proto) {
                      (0, _util.warn)("XFA - Invalid prototype reference: ".concat(ref, "."));
                      return null;
                    }
                    if (proto[$nodeName] !== this[$nodeName]) {
                      (0, _util.warn)("XFA - Incompatible prototype: ".concat(proto[$nodeName], " !== ").concat(this[$nodeName], "."));
                      return null;
                    }
                    if (ancestors.has(proto)) {
                      (0, _util.warn)("XFA - Cycle detected in prototypes use.");
                      return null;
                    }
                    ancestors.add(proto);
                    var protoProto = proto[_getPrototype](ids, ancestors);
                    if (protoProto) {
                      proto[_applyPrototype](protoProto, ids, ancestors);
                    }
                    proto[$resolvePrototypes](ids, ancestors);
                    ancestors["delete"](proto);
                    return proto;
                  }
                }, {
                  key: _applyPrototype,
                  value: function value(proto, ids, ancestors) {
                    if (ancestors.has(proto)) {
                      (0, _util.warn)("XFA - Cycle detected in prototypes use.");
                      return;
                    }
                    if (!this[$content] && proto[$content]) {
                      this[$content] = proto[$content];
                    }
                    var newAncestors = new Set(ancestors);
                    newAncestors.add(proto);
                    var _iterator6 = _createForOfIteratorHelper(this[_getUnsetAttributes](proto[_setAttributes])), _step6;
                    try {
                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                        var unsetAttrName = _step6.value;
                        this[unsetAttrName] = proto[unsetAttrName];
                        if (this[_setAttributes]) {
                          this[_setAttributes].add(unsetAttrName);
                        }
                      }
                    } catch (err) {
                      _iterator6.e(err);
                    } finally {
                      _iterator6.f();
                    }
                    var _iterator7 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)), _step7;
                    try {
                      for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                        var name = _step7.value;
                        if (this[_attributeNames].has(name)) {
                          continue;
                        }
                        var _value = this[name];
                        var protoValue = proto[name];
                        if (_value instanceof XFAObjectArray) {
                          var _iterator8 = _createForOfIteratorHelper(_value[_children]), _step8;
                          try {
                            for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                              var _child = _step8.value;
                              _child[_resolvePrototypesHelper](ids, ancestors);
                            }
                          } catch (err) {
                            _iterator8.e(err);
                          } finally {
                            _iterator8.f();
                          }
                          for (var i = _value[_children].length, ii = protoValue[_children].length; i < ii; i++) {
                            var child = proto[_children][i][$clone]();
                            if (_value.push(child)) {
                              child[_parent] = this;
                              this[_children].push(child);
                              child[_resolvePrototypesHelper](ids, ancestors);
                            } else {
                              break;
                            }
                          }
                          continue;
                        }
                        if (_value !== null) {
                          _value[$resolvePrototypes](ids, ancestors);
                          if (protoValue) {
                            _value[_applyPrototype](protoValue, ids, ancestors);
                          }
                          continue;
                        }
                        if (protoValue !== null) {
                          var _child2 = protoValue[$clone]();
                          _child2[_parent] = this;
                          this[name] = _child2;
                          this[_children].push(_child2);
                          _child2[_resolvePrototypesHelper](ids, ancestors);
                        }
                      }
                    } catch (err) {
                      _iterator7.e(err);
                    } finally {
                      _iterator7.f();
                    }
                  }
                }, {
                  key: $clone,
                  value: function value() {
                    var clone = Object.create(Object.getPrototypeOf(this));
                    var _iterator9 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(this)), _step9;
                    try {
                      for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                        var $symbol = _step9.value;
                        try {
                          clone[$symbol] = this[$symbol];
                        } catch (_) {
                          (0, _util.shadow)(clone, $symbol, this[$symbol]);
                        }
                      }
                    } catch (err) {
                      _iterator9.e(err);
                    } finally {
                      _iterator9.f();
                    }
                    clone[$uid] = "".concat(clone[$nodeName]).concat(uid++);
                    clone[_children] = [];
                    var _iterator10 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)), _step10;
                    try {
                      for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                        var name = _step10.value;
                        if (this[_attributeNames].has(name)) {
                          clone[name] = XFAObject2[_cloneAttribute](this[name]);
                          continue;
                        }
                        var _value2 = this[name];
                        if (_value2 instanceof XFAObjectArray) {
                          clone[name] = new XFAObjectArray(_value2[_max]);
                        } else {
                          clone[name] = null;
                        }
                      }
                    } catch (err) {
                      _iterator10.e(err);
                    } finally {
                      _iterator10.f();
                    }
                    var _iterator11 = _createForOfIteratorHelper(this[_children]), _step11;
                    try {
                      for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                        var child = _step11.value;
                        var _name = child[$nodeName];
                        var clonedChild = child[$clone]();
                        clone[_children].push(clonedChild);
                        clonedChild[_parent] = clone;
                        if (clone[_name] === null) {
                          clone[_name] = clonedChild;
                        } else {
                          clone[_name][_children].push(clonedChild);
                        }
                      }
                    } catch (err) {
                      _iterator11.e(err);
                    } finally {
                      _iterator11.f();
                    }
                    return clone;
                  }
                }, {
                  key: $getChildren,
                  value: function value() {
                    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                    if (!name) {
                      return this[_children];
                    }
                    return this[_children].filter(function(c) {
                      return c[$nodeName] === name;
                    });
                  }
                }, {
                  key: $getChildrenByClass,
                  value: function value(name) {
                    return this[name];
                  }
                }, {
                  key: $getChildrenByName,
                  value: function value(name, allTransparent) {
                    var first = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
                    return Array.from(this[$getChildrenByNameIt](name, allTransparent, first));
                  }
                }, {
                  key: $getChildrenByNameIt,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value(name, allTransparent) {
                    var first, _iterator12, _step12, child, _args3 = arguments;
                    return _regenerator["default"].wrap(function value$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            first = _args3.length > 2 && _args3[2] !== void 0 ? _args3[2] : true;
                            if (!(name === "parent")) {
                              _context3.next = 5;
                              break;
                            }
                            _context3.next = 4;
                            return this[_parent];
                          case 4:
                            return _context3.abrupt("return");
                          case 5:
                            _iterator12 = _createForOfIteratorHelper(this[_children]);
                            _context3.prev = 6;
                            _iterator12.s();
                          case 8:
                            if ((_step12 = _iterator12.n()).done) {
                              _context3.next = 20;
                              break;
                            }
                            child = _step12.value;
                            if (!(child[$nodeName] === name)) {
                              _context3.next = 13;
                              break;
                            }
                            _context3.next = 13;
                            return child;
                          case 13:
                            if (!(child.name === name)) {
                              _context3.next = 16;
                              break;
                            }
                            _context3.next = 16;
                            return child;
                          case 16:
                            if (!(allTransparent || child[$isTransparent]())) {
                              _context3.next = 18;
                              break;
                            }
                            return _context3.delegateYield(child[$getChildrenByNameIt](name, allTransparent, false), "t0", 18);
                          case 18:
                            _context3.next = 8;
                            break;
                          case 20:
                            _context3.next = 25;
                            break;
                          case 22:
                            _context3.prev = 22;
                            _context3.t1 = _context3["catch"](6);
                            _iterator12.e(_context3.t1);
                          case 25:
                            _context3.prev = 25;
                            _iterator12.f();
                            return _context3.finish(25);
                          case 28:
                            if (!(first && this[_attributeNames].has(name))) {
                              _context3.next = 31;
                              break;
                            }
                            _context3.next = 31;
                            return new XFAAttribute(this, name, this[name]);
                          case 31:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, value, this, [[6, 22, 25, 28]]);
                  })
                }], [{
                  key: _cloneAttribute,
                  value: function value(obj) {
                    if (Array.isArray(obj)) {
                      return obj.map(function(x) {
                        return XFAObject2[_cloneAttribute](x);
                      });
                    }
                    if (_typeof(obj) === "object" && obj !== null) {
                      return Object.assign({}, obj);
                    }
                    return obj;
                  }
                }]);
                return XFAObject2;
              }();
              exports2.XFAObject = XFAObject;
              var XFAObjectArray = /* @__PURE__ */ function() {
                function XFAObjectArray2() {
                  var max = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Infinity;
                  _classCallCheck(this, XFAObjectArray2);
                  this[_max] = max;
                  this[_children] = [];
                }
                _createClass(XFAObjectArray2, [{
                  key: "push",
                  value: function push(child) {
                    var len = this[_children].length;
                    if (len <= this[_max]) {
                      this[_children].push(child);
                      return true;
                    }
                    (0, _util.warn)('XFA - node "'.concat(child[$nodeName], '" accepts no more than ').concat(this[_max], " children"));
                    return false;
                  }
                }, {
                  key: "isEmpty",
                  value: function isEmpty() {
                    return this[_children].length === 0;
                  }
                }, {
                  key: "dump",
                  value: function dump() {
                    return this[_children].length === 1 ? this[_children][0][$dump]() : this[_children].map(function(x) {
                      return x[$dump]();
                    });
                  }
                }, {
                  key: $clone,
                  value: function value() {
                    var clone = new XFAObjectArray2(this[_max]);
                    clone[_children] = this[_children].map(function(c) {
                      return c[$clone]();
                    });
                    return clone;
                  }
                }, {
                  key: "children",
                  get: function get() {
                    return this[_children];
                  }
                }, {
                  key: "clear",
                  value: function clear() {
                    this[_children].length = 0;
                  }
                }]);
                return XFAObjectArray2;
              }();
              exports2.XFAObjectArray = XFAObjectArray;
              var XFAAttribute = /* @__PURE__ */ function() {
                function XFAAttribute2(node, name, value) {
                  _classCallCheck(this, XFAAttribute2);
                  this[_parent] = node;
                  this[$nodeName] = name;
                  this[$content] = value;
                  this[$consumed] = false;
                  this[$uid] = "attribute".concat(uid++);
                }
                _createClass(XFAAttribute2, [{
                  key: $getParent,
                  value: function value() {
                    return this[_parent];
                  }
                }, {
                  key: $isDataValue,
                  value: function value() {
                    return true;
                  }
                }, {
                  key: $getDataValue,
                  value: function value() {
                    return this[$content].trim();
                  }
                }, {
                  key: $setValue,
                  value: function(_value3) {
                    function value(_x) {
                      return _value3.apply(this, arguments);
                    }
                    value.toString = function() {
                      return _value3.toString();
                    };
                    return value;
                  }(function(value) {
                    value = value.value || "";
                    this[$content] = value.toString();
                  })
                }, {
                  key: $text,
                  value: function value() {
                    return this[$content];
                  }
                }, {
                  key: $isDescendent,
                  value: function value(parent) {
                    return this[_parent] === parent || this[_parent][$isDescendent](parent);
                  }
                }]);
                return XFAAttribute2;
              }();
              exports2.XFAAttribute = XFAAttribute;
              var XmlObject = /* @__PURE__ */ function(_XFAObject) {
                _inherits(XmlObject2, _XFAObject);
                var _super = _createSuper(XmlObject2);
                function XmlObject2(nsId, name) {
                  var _this;
                  var attributes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                  _classCallCheck(this, XmlObject2);
                  _this = _super.call(this, nsId, name);
                  _this[$content] = "";
                  _this[_dataValue] = null;
                  if (name !== "#text") {
                    var map = /* @__PURE__ */ new Map();
                    _this[_attributes] = map;
                    for (var _i = 0, _Object$entries = Object.entries(attributes); _i < _Object$entries.length; _i++) {
                      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), attrName = _Object$entries$_i[0], _value4 = _Object$entries$_i[1];
                      map.set(attrName, new XFAAttribute(_assertThisInitialized(_this), attrName, _value4));
                    }
                    if (attributes.hasOwnProperty($nsAttributes)) {
                      var dataNode = attributes[$nsAttributes].xfa.dataNode;
                      if (dataNode !== void 0) {
                        if (dataNode === "dataGroup") {
                          _this[_dataValue] = false;
                        } else if (dataNode === "dataValue") {
                          _this[_dataValue] = true;
                        }
                      }
                    }
                  }
                  _this[$consumed] = false;
                  return _this;
                }
                _createClass(XmlObject2, [{
                  key: $toString,
                  value: function value(buf) {
                    var tagName = this[$nodeName];
                    if (tagName === "#text") {
                      buf.push((0, _core_utils.encodeToXmlString)(this[$content]));
                      return;
                    }
                    var utf8TagName = (0, _util.utf8StringToString)(tagName);
                    var prefix = this[$namespaceId] === NS_DATASETS ? "xfa:" : "";
                    buf.push("<".concat(prefix).concat(utf8TagName));
                    var _iterator13 = _createForOfIteratorHelper(this[_attributes].entries()), _step13;
                    try {
                      for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                        var _step13$value = _slicedToArray(_step13.value, 2), name = _step13$value[0], _value5 = _step13$value[1];
                        var utf8Name = (0, _util.utf8StringToString)(name);
                        buf.push(" ".concat(utf8Name, '="').concat((0, _core_utils.encodeToXmlString)(_value5[$content]), '"'));
                      }
                    } catch (err) {
                      _iterator13.e(err);
                    } finally {
                      _iterator13.f();
                    }
                    if (this[_dataValue] !== null) {
                      if (this[_dataValue]) {
                        buf.push(' xfa:dataNode="dataValue"');
                      } else {
                        buf.push(' xfa:dataNode="dataGroup"');
                      }
                    }
                    if (!this[$content] && this[_children].length === 0) {
                      buf.push("/>");
                      return;
                    }
                    buf.push(">");
                    if (this[$content]) {
                      if (typeof this[$content] === "string") {
                        buf.push((0, _core_utils.encodeToXmlString)(this[$content]));
                      } else {
                        this[$content][$toString](buf);
                      }
                    } else {
                      var _iterator14 = _createForOfIteratorHelper(this[_children]), _step14;
                      try {
                        for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
                          var child = _step14.value;
                          child[$toString](buf);
                        }
                      } catch (err) {
                        _iterator14.e(err);
                      } finally {
                        _iterator14.f();
                      }
                    }
                    buf.push("</".concat(prefix).concat(utf8TagName, ">"));
                  }
                }, {
                  key: $onChild,
                  value: function value(child) {
                    if (this[$content]) {
                      var node = new XmlObject2(this[$namespaceId], "#text");
                      this[$appendChild](node);
                      node[$content] = this[$content];
                      this[$content] = "";
                    }
                    this[$appendChild](child);
                    return true;
                  }
                }, {
                  key: $onText,
                  value: function value(str) {
                    this[$content] += str;
                  }
                }, {
                  key: $finalize,
                  value: function value() {
                    if (this[$content] && this[_children].length > 0) {
                      var node = new XmlObject2(this[$namespaceId], "#text");
                      this[$appendChild](node);
                      node[$content] = this[$content];
                      delete this[$content];
                    }
                  }
                }, {
                  key: $toHTML,
                  value: function value() {
                    if (this[$nodeName] === "#text") {
                      return _utils.HTMLResult.success({
                        name: "#text",
                        value: this[$content]
                      });
                    }
                    return _utils.HTMLResult.EMPTY;
                  }
                }, {
                  key: $getChildren,
                  value: function value() {
                    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                    if (!name) {
                      return this[_children];
                    }
                    return this[_children].filter(function(c) {
                      return c[$nodeName] === name;
                    });
                  }
                }, {
                  key: $getAttributes,
                  value: function value() {
                    return this[_attributes];
                  }
                }, {
                  key: $getChildrenByClass,
                  value: function value(name) {
                    var value2 = this[_attributes].get(name);
                    if (value2 !== void 0) {
                      return value2;
                    }
                    return this[$getChildren](name);
                  }
                }, {
                  key: $getChildrenByNameIt,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value(name, allTransparent) {
                    var value2, _iterator15, _step15, child;
                    return _regenerator["default"].wrap(function value$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            value2 = this[_attributes].get(name);
                            if (!value2) {
                              _context4.next = 4;
                              break;
                            }
                            _context4.next = 4;
                            return value2;
                          case 4:
                            _iterator15 = _createForOfIteratorHelper(this[_children]);
                            _context4.prev = 5;
                            _iterator15.s();
                          case 7:
                            if ((_step15 = _iterator15.n()).done) {
                              _context4.next = 16;
                              break;
                            }
                            child = _step15.value;
                            if (!(child[$nodeName] === name)) {
                              _context4.next = 12;
                              break;
                            }
                            _context4.next = 12;
                            return child;
                          case 12:
                            if (!allTransparent) {
                              _context4.next = 14;
                              break;
                            }
                            return _context4.delegateYield(child[$getChildrenByNameIt](name, allTransparent), "t0", 14);
                          case 14:
                            _context4.next = 7;
                            break;
                          case 16:
                            _context4.next = 21;
                            break;
                          case 18:
                            _context4.prev = 18;
                            _context4.t1 = _context4["catch"](5);
                            _iterator15.e(_context4.t1);
                          case 21:
                            _context4.prev = 21;
                            _iterator15.f();
                            return _context4.finish(21);
                          case 24:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, value2, this, [[5, 18, 21, 24]]);
                  })
                }, {
                  key: $getAttributeIt,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value(name, skipConsumed) {
                    var value2, _iterator16, _step16, child;
                    return _regenerator["default"].wrap(function value$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            value2 = this[_attributes].get(name);
                            if (!(value2 && (!skipConsumed || !value2[$consumed]))) {
                              _context5.next = 4;
                              break;
                            }
                            _context5.next = 4;
                            return value2;
                          case 4:
                            _iterator16 = _createForOfIteratorHelper(this[_children]);
                            _context5.prev = 5;
                            _iterator16.s();
                          case 7:
                            if ((_step16 = _iterator16.n()).done) {
                              _context5.next = 12;
                              break;
                            }
                            child = _step16.value;
                            return _context5.delegateYield(child[$getAttributeIt](name, skipConsumed), "t0", 10);
                          case 10:
                            _context5.next = 7;
                            break;
                          case 12:
                            _context5.next = 17;
                            break;
                          case 14:
                            _context5.prev = 14;
                            _context5.t1 = _context5["catch"](5);
                            _iterator16.e(_context5.t1);
                          case 17:
                            _context5.prev = 17;
                            _iterator16.f();
                            return _context5.finish(17);
                          case 20:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, value2, this, [[5, 14, 17, 20]]);
                  })
                }, {
                  key: $getRealChildrenByNameIt,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value(name, allTransparent, skipConsumed) {
                    var _iterator17, _step17, child;
                    return _regenerator["default"].wrap(function value$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            _iterator17 = _createForOfIteratorHelper(this[_children]);
                            _context6.prev = 1;
                            _iterator17.s();
                          case 3:
                            if ((_step17 = _iterator17.n()).done) {
                              _context6.next = 12;
                              break;
                            }
                            child = _step17.value;
                            if (!(child[$nodeName] === name && (!skipConsumed || !child[$consumed]))) {
                              _context6.next = 8;
                              break;
                            }
                            _context6.next = 8;
                            return child;
                          case 8:
                            if (!allTransparent) {
                              _context6.next = 10;
                              break;
                            }
                            return _context6.delegateYield(child[$getRealChildrenByNameIt](name, allTransparent, skipConsumed), "t0", 10);
                          case 10:
                            _context6.next = 3;
                            break;
                          case 12:
                            _context6.next = 17;
                            break;
                          case 14:
                            _context6.prev = 14;
                            _context6.t1 = _context6["catch"](1);
                            _iterator17.e(_context6.t1);
                          case 17:
                            _context6.prev = 17;
                            _iterator17.f();
                            return _context6.finish(17);
                          case 20:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, value, this, [[1, 14, 17, 20]]);
                  })
                }, {
                  key: $isDataValue,
                  value: function value() {
                    if (this[_dataValue] === null) {
                      return this[_children].length === 0 || this[_children][0][$namespaceId] === _namespaces.NamespaceIds.xhtml.id;
                    }
                    return this[_dataValue];
                  }
                }, {
                  key: $getDataValue,
                  value: function value() {
                    if (this[_dataValue] === null) {
                      if (this[_children].length === 0) {
                        return this[$content].trim();
                      }
                      if (this[_children][0][$namespaceId] === _namespaces.NamespaceIds.xhtml.id) {
                        return this[_children][0][$text]().trim();
                      }
                      return null;
                    }
                    return this[$content].trim();
                  }
                }, {
                  key: $setValue,
                  value: function(_value6) {
                    function value(_x2) {
                      return _value6.apply(this, arguments);
                    }
                    value.toString = function() {
                      return _value6.toString();
                    };
                    return value;
                  }(function(value) {
                    value = value.value || "";
                    this[$content] = value.toString();
                  })
                }, {
                  key: $dump,
                  value: function value() {
                    var hasNS = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    var dumped = /* @__PURE__ */ Object.create(null);
                    if (hasNS) {
                      dumped.$ns = this[$namespaceId];
                    }
                    if (this[$content]) {
                      dumped.$content = this[$content];
                    }
                    dumped.$name = this[$nodeName];
                    dumped.children = [];
                    var _iterator18 = _createForOfIteratorHelper(this[_children]), _step18;
                    try {
                      for (_iterator18.s(); !(_step18 = _iterator18.n()).done; ) {
                        var child = _step18.value;
                        dumped.children.push(child[$dump](hasNS));
                      }
                    } catch (err) {
                      _iterator18.e(err);
                    } finally {
                      _iterator18.f();
                    }
                    dumped.attributes = /* @__PURE__ */ Object.create(null);
                    var _iterator19 = _createForOfIteratorHelper(this[_attributes]), _step19;
                    try {
                      for (_iterator19.s(); !(_step19 = _iterator19.n()).done; ) {
                        var _step19$value = _slicedToArray(_step19.value, 2), name = _step19$value[0], _value7 = _step19$value[1];
                        dumped.attributes[name] = _value7[$content];
                      }
                    } catch (err) {
                      _iterator19.e(err);
                    } finally {
                      _iterator19.f();
                    }
                    return dumped;
                  }
                }]);
                return XmlObject2;
              }(XFAObject);
              exports2.XmlObject = XmlObject;
              var ContentObject = /* @__PURE__ */ function(_XFAObject2) {
                _inherits(ContentObject2, _XFAObject2);
                var _super2 = _createSuper(ContentObject2);
                function ContentObject2(nsId, name) {
                  var _this2;
                  _classCallCheck(this, ContentObject2);
                  _this2 = _super2.call(this, nsId, name);
                  _this2[$content] = "";
                  return _this2;
                }
                _createClass(ContentObject2, [{
                  key: $onText,
                  value: function value(text) {
                    this[$content] += text;
                  }
                }, {
                  key: $finalize,
                  value: function value() {
                  }
                }]);
                return ContentObject2;
              }(XFAObject);
              exports2.ContentObject = ContentObject;
              var OptionObject = /* @__PURE__ */ function(_ContentObject) {
                _inherits(OptionObject2, _ContentObject);
                var _super3 = _createSuper(OptionObject2);
                function OptionObject2(nsId, name, options) {
                  var _this3;
                  _classCallCheck(this, OptionObject2);
                  _this3 = _super3.call(this, nsId, name);
                  _this3[_options] = options;
                  return _this3;
                }
                _createClass(OptionObject2, [{
                  key: $finalize,
                  value: function value() {
                    var _this4 = this;
                    this[$content] = (0, _utils.getKeyword)({
                      data: this[$content],
                      defaultValue: this[_options][0],
                      validate: function validate(k) {
                        return _this4[_options].includes(k);
                      }
                    });
                  }
                }, {
                  key: $clean,
                  value: function value(builder) {
                    _get(_getPrototypeOf(OptionObject2.prototype), $clean, this).call(this, builder);
                    delete this[_options];
                  }
                }]);
                return OptionObject2;
              }(ContentObject);
              exports2.OptionObject = OptionObject;
              var StringObject = /* @__PURE__ */ function(_ContentObject2) {
                _inherits(StringObject2, _ContentObject2);
                var _super4 = _createSuper(StringObject2);
                function StringObject2() {
                  _classCallCheck(this, StringObject2);
                  return _super4.apply(this, arguments);
                }
                _createClass(StringObject2, [{
                  key: $finalize,
                  value: function value() {
                    this[$content] = this[$content].trim();
                  }
                }]);
                return StringObject2;
              }(ContentObject);
              exports2.StringObject = StringObject;
              var IntegerObject = /* @__PURE__ */ function(_ContentObject3) {
                _inherits(IntegerObject2, _ContentObject3);
                var _super5 = _createSuper(IntegerObject2);
                function IntegerObject2(nsId, name, defaultValue, validator) {
                  var _this5;
                  _classCallCheck(this, IntegerObject2);
                  _this5 = _super5.call(this, nsId, name);
                  _this5[_defaultValue] = defaultValue;
                  _this5[_validator] = validator;
                  return _this5;
                }
                _createClass(IntegerObject2, [{
                  key: $finalize,
                  value: function value() {
                    this[$content] = (0, _utils.getInteger)({
                      data: this[$content],
                      defaultValue: this[_defaultValue],
                      validate: this[_validator]
                    });
                  }
                }, {
                  key: $clean,
                  value: function value(builder) {
                    _get(_getPrototypeOf(IntegerObject2.prototype), $clean, this).call(this, builder);
                    delete this[_defaultValue];
                    delete this[_validator];
                  }
                }]);
                return IntegerObject2;
              }(ContentObject);
              exports2.IntegerObject = IntegerObject;
              var Option01 = /* @__PURE__ */ function(_IntegerObject) {
                _inherits(Option012, _IntegerObject);
                var _super6 = _createSuper(Option012);
                function Option012(nsId, name) {
                  _classCallCheck(this, Option012);
                  return _super6.call(this, nsId, name, 0, function(n) {
                    return n === 1;
                  });
                }
                return Option012;
              }(IntegerObject);
              exports2.Option01 = Option01;
              var Option10 = /* @__PURE__ */ function(_IntegerObject2) {
                _inherits(Option102, _IntegerObject2);
                var _super7 = _createSuper(Option102);
                function Option102(nsId, name) {
                  _classCallCheck(this, Option102);
                  return _super7.call(this, nsId, name, 1, function(n) {
                    return n === 0;
                  });
                }
                return Option102;
              }(IntegerObject);
              exports2.Option10 = Option10;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.HTMLResult = void 0;
              exports2.getBBox = getBBox;
              exports2.getColor = getColor;
              exports2.getFloat = getFloat;
              exports2.getInteger = getInteger;
              exports2.getKeyword = getKeyword;
              exports2.getMeasurement = getMeasurement;
              exports2.getRatio = getRatio;
              exports2.getRelevant = getRelevant;
              exports2.getStringOption = getStringOption;
              exports2.stripQuotes = stripQuotes;
              var _util = __w_pdfjs_require__2(4);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              var dimConverters = {
                pt: function pt(x) {
                  return x;
                },
                cm: function cm(x) {
                  return x / 2.54 * 72;
                },
                mm: function mm(x) {
                  return x / (10 * 2.54) * 72;
                },
                "in": function _in(x) {
                  return x * 72;
                },
                px: function px(x) {
                  return x;
                }
              };
              var measurementPattern = /([+-]?\d+\.?\d*)(.*)/;
              function stripQuotes(str) {
                if (str.startsWith("'") || str.startsWith('"')) {
                  return str.slice(1, str.length - 1);
                }
                return str;
              }
              function getInteger(_ref) {
                var data = _ref.data, defaultValue = _ref.defaultValue, validate = _ref.validate;
                if (!data) {
                  return defaultValue;
                }
                data = data.trim();
                var n = parseInt(data, 10);
                if (!isNaN(n) && validate(n)) {
                  return n;
                }
                return defaultValue;
              }
              function getFloat(_ref2) {
                var data = _ref2.data, defaultValue = _ref2.defaultValue, validate = _ref2.validate;
                if (!data) {
                  return defaultValue;
                }
                data = data.trim();
                var n = parseFloat(data);
                if (!isNaN(n) && validate(n)) {
                  return n;
                }
                return defaultValue;
              }
              function getKeyword(_ref3) {
                var data = _ref3.data, defaultValue = _ref3.defaultValue, validate = _ref3.validate;
                if (!data) {
                  return defaultValue;
                }
                data = data.trim();
                if (validate(data)) {
                  return data;
                }
                return defaultValue;
              }
              function getStringOption(data, options) {
                return getKeyword({
                  data,
                  defaultValue: options[0],
                  validate: function validate(k) {
                    return options.includes(k);
                  }
                });
              }
              function getMeasurement(str) {
                var def = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "0";
                def = def || "0";
                if (!str) {
                  return getMeasurement(def);
                }
                var match = str.trim().match(measurementPattern);
                if (!match) {
                  return getMeasurement(def);
                }
                var _match = _slicedToArray(match, 3), valueStr = _match[1], unit = _match[2];
                var value = parseFloat(valueStr);
                if (isNaN(value)) {
                  return getMeasurement(def);
                }
                if (value === 0) {
                  return 0;
                }
                var conv = dimConverters[unit];
                if (conv) {
                  return conv(value);
                }
                return value;
              }
              function getRatio(data) {
                if (!data) {
                  return {
                    num: 1,
                    den: 1
                  };
                }
                var ratio = data.trim().split(/\s*:\s*/).map(function(x) {
                  return parseFloat(x);
                }).filter(function(x) {
                  return !isNaN(x);
                });
                if (ratio.length === 1) {
                  ratio.push(1);
                }
                if (ratio.length === 0) {
                  return {
                    num: 1,
                    den: 1
                  };
                }
                var _ratio = _slicedToArray(ratio, 2), num = _ratio[0], den = _ratio[1];
                return {
                  num,
                  den
                };
              }
              function getRelevant(data) {
                if (!data) {
                  return [];
                }
                return data.trim().split(/\s+/).map(function(e) {
                  return {
                    excluded: e[0] === "-",
                    viewname: e.substring(1)
                  };
                });
              }
              function getColor(data) {
                var def = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [0, 0, 0];
                var _def = _slicedToArray(def, 3), r = _def[0], g = _def[1], b = _def[2];
                if (!data) {
                  return {
                    r,
                    g,
                    b
                  };
                }
                var color = data.trim().split(/\s*,\s*/).map(function(c) {
                  return Math.min(Math.max(0, parseInt(c.trim(), 10)), 255);
                }).map(function(c) {
                  return isNaN(c) ? 0 : c;
                });
                if (color.length < 3) {
                  return {
                    r,
                    g,
                    b
                  };
                }
                var _color = _slicedToArray(color, 3);
                r = _color[0];
                g = _color[1];
                b = _color[2];
                return {
                  r,
                  g,
                  b
                };
              }
              function getBBox(data) {
                var def = -1;
                if (!data) {
                  return {
                    x: def,
                    y: def,
                    width: def,
                    height: def
                  };
                }
                var bbox = data.trim().split(/\s*,\s*/).map(function(m) {
                  return getMeasurement(m, "-1");
                });
                if (bbox.length < 4 || bbox[2] < 0 || bbox[3] < 0) {
                  return {
                    x: def,
                    y: def,
                    width: def,
                    height: def
                  };
                }
                var _bbox = _slicedToArray(bbox, 4), x = _bbox[0], y = _bbox[1], width = _bbox[2], height = _bbox[3];
                return {
                  x,
                  y,
                  width,
                  height
                };
              }
              var HTMLResult = /* @__PURE__ */ function() {
                function HTMLResult2(success, html, bbox, breakNode) {
                  _classCallCheck(this, HTMLResult2);
                  this.success = success;
                  this.html = html;
                  this.bbox = bbox;
                  this.breakNode = breakNode;
                }
                _createClass(HTMLResult2, [{
                  key: "isBreak",
                  value: function isBreak() {
                    return !!this.breakNode;
                  }
                }], [{
                  key: "FAILURE",
                  get: function get() {
                    return (0, _util.shadow)(this, "FAILURE", new HTMLResult2(false, null, null, null));
                  }
                }, {
                  key: "EMPTY",
                  get: function get() {
                    return (0, _util.shadow)(this, "EMPTY", new HTMLResult2(true, null, null, null));
                  }
                }, {
                  key: "breakNode",
                  value: function breakNode(node) {
                    return new HTMLResult2(false, null, null, node);
                  }
                }, {
                  key: "success",
                  value: function success(html) {
                    var bbox = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                    return new HTMLResult2(true, html, bbox, null);
                  }
                }]);
                return HTMLResult2;
              }();
              exports2.HTMLResult = HTMLResult;
            },
            (__unused_webpack_module, exports2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.NamespaceIds = exports2.$buildXFAObject = void 0;
              var $buildXFAObject = Symbol();
              exports2.$buildXFAObject = $buildXFAObject;
              var NamespaceIds = {
                config: {
                  id: 0,
                  check: function check(ns) {
                    return ns.startsWith("http://www.xfa.org/schema/xci/");
                  }
                },
                connectionSet: {
                  id: 1,
                  check: function check(ns) {
                    return ns.startsWith("http://www.xfa.org/schema/xfa-connection-set/");
                  }
                },
                datasets: {
                  id: 2,
                  check: function check(ns) {
                    return ns.startsWith("http://www.xfa.org/schema/xfa-data/");
                  }
                },
                form: {
                  id: 3,
                  check: function check(ns) {
                    return ns.startsWith("http://www.xfa.org/schema/xfa-form/");
                  }
                },
                localeSet: {
                  id: 4,
                  check: function check(ns) {
                    return ns.startsWith("http://www.xfa.org/schema/xfa-locale-set/");
                  }
                },
                pdf: {
                  id: 5,
                  check: function check(ns) {
                    return ns === "http://ns.adobe.com/xdp/pdf/";
                  }
                },
                signature: {
                  id: 6,
                  check: function check(ns) {
                    return ns === "http://www.w3.org/2000/09/xmldsig#";
                  }
                },
                sourceSet: {
                  id: 7,
                  check: function check(ns) {
                    return ns.startsWith("http://www.xfa.org/schema/xfa-source-set/");
                  }
                },
                stylesheet: {
                  id: 8,
                  check: function check(ns) {
                    return ns === "http://www.w3.org/1999/XSL/Transform";
                  }
                },
                template: {
                  id: 9,
                  check: function check(ns) {
                    return ns.startsWith("http://www.xfa.org/schema/xfa-template/");
                  }
                },
                xdc: {
                  id: 10,
                  check: function check(ns) {
                    return ns.startsWith("http://www.xfa.org/schema/xdc/");
                  }
                },
                xdp: {
                  id: 11,
                  check: function check(ns) {
                    return ns === "http://ns.adobe.com/xdp/";
                  }
                },
                xfdf: {
                  id: 12,
                  check: function check(ns) {
                    return ns === "http://ns.adobe.com/xfdf/";
                  }
                },
                xhtml: {
                  id: 13,
                  check: function check(ns) {
                    return ns === "http://www.w3.org/1999/xhtml";
                  }
                },
                xmpmeta: {
                  id: 14,
                  check: function check(ns) {
                    return ns === "http://ns.adobe.com/xmpmeta/";
                  }
                }
              };
              exports2.NamespaceIds = NamespaceIds;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.createDataNode = createDataNode;
              exports2.searchNode = searchNode;
              var _xfa_object = __w_pdfjs_require__2(205);
              var _namespaces = __w_pdfjs_require__2(207);
              var _util = __w_pdfjs_require__2(4);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              var namePattern = /^[^.[]+/;
              var indexPattern = /^[^\]]+/;
              var operators = {
                dot: 0,
                dotDot: 1,
                dotHash: 2,
                dotBracket: 3,
                dotParen: 4
              };
              var shortcuts = /* @__PURE__ */ new Map([["$data", function(root, current) {
                return root.datasets ? root.datasets.data : root;
              }], ["$record", function(root, current) {
                return (root.datasets ? root.datasets.data : root)[_xfa_object.$getChildren]()[0];
              }], ["$template", function(root, current) {
                return root.template;
              }], ["$connectionSet", function(root, current) {
                return root.connectionSet;
              }], ["$form", function(root, current) {
                return root.form;
              }], ["$layout", function(root, current) {
                return root.layout;
              }], ["$host", function(root, current) {
                return root.host;
              }], ["$dataWindow", function(root, current) {
                return root.dataWindow;
              }], ["$event", function(root, current) {
                return root.event;
              }], ["!", function(root, current) {
                return root.datasets;
              }], ["$xfa", function(root, current) {
                return root;
              }], ["xfa", function(root, current) {
                return root;
              }], ["$", function(root, current) {
                return current;
              }]]);
              var somCache = /* @__PURE__ */ new WeakMap();
              var NS_DATASETS = _namespaces.NamespaceIds.datasets.id;
              function parseIndex(index) {
                index = index.trim();
                if (index === "*") {
                  return Infinity;
                }
                return parseInt(index, 10) || 0;
              }
              function parseExpression(expr, dotDotAllowed) {
                var noExpr = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
                var match = expr.match(namePattern);
                if (!match) {
                  return null;
                }
                var _match = match, _match2 = _slicedToArray(_match, 1), name = _match2[0];
                var parsed = [{
                  name,
                  cacheName: "." + name,
                  index: 0,
                  js: null,
                  formCalc: null,
                  operator: operators.dot
                }];
                var pos = name.length;
                while (pos < expr.length) {
                  var spos = pos;
                  var _char = expr.charAt(pos++);
                  if (_char === "[") {
                    match = expr.slice(pos).match(indexPattern);
                    if (!match) {
                      (0, _util.warn)("XFA - Invalid index in SOM expression");
                      return null;
                    }
                    parsed[parsed.length - 1].index = parseIndex(match[0]);
                    pos += match[0].length + 1;
                    continue;
                  }
                  var operator = void 0;
                  switch (expr.charAt(pos)) {
                    case ".":
                      if (!dotDotAllowed) {
                        return null;
                      }
                      pos++;
                      operator = operators.dotDot;
                      break;
                    case "#":
                      pos++;
                      operator = operators.dotHash;
                      break;
                    case "[":
                      if (noExpr) {
                        (0, _util.warn)("XFA - SOM expression contains a FormCalc subexpression which is not supported for now.");
                        return null;
                      }
                      operator = operators.dotBracket;
                      break;
                    case "(":
                      if (noExpr) {
                        (0, _util.warn)("XFA - SOM expression contains a JavaScript subexpression which is not supported for now.");
                        return null;
                      }
                      operator = operators.dotParen;
                      break;
                    default:
                      operator = operators.dot;
                      break;
                  }
                  match = expr.slice(pos).match(namePattern);
                  if (!match) {
                    break;
                  }
                  var _match3 = match;
                  var _match4 = _slicedToArray(_match3, 1);
                  name = _match4[0];
                  pos += name.length;
                  parsed.push({
                    name,
                    cacheName: expr.slice(spos, pos),
                    operator,
                    index: 0,
                    js: null,
                    formCalc: null
                  });
                }
                return parsed;
              }
              function searchNode(root, container, expr) {
                var dotDotAllowed = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
                var useCache = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
                var parsed = parseExpression(expr, dotDotAllowed);
                if (!parsed) {
                  return null;
                }
                var fn = shortcuts.get(parsed[0].name);
                var i = 0;
                var isQualified;
                if (fn) {
                  isQualified = true;
                  root = [fn(root, container)];
                  i = 1;
                } else {
                  isQualified = container === null;
                  root = [container || root];
                }
                var _loop = function _loop2(ii2) {
                  var _parsed$i = parsed[i], name = _parsed$i.name, cacheName = _parsed$i.cacheName, operator = _parsed$i.operator, index = _parsed$i.index;
                  var nodes = [];
                  var _iterator = _createForOfIteratorHelper(root), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var node = _step.value;
                      if (!(node instanceof _xfa_object.XFAObject)) {
                        continue;
                      }
                      var children = void 0, cached = void 0;
                      if (useCache) {
                        cached = somCache.get(node);
                        if (!cached) {
                          cached = /* @__PURE__ */ new Map();
                          somCache.set(node, cached);
                        }
                        children = cached.get(cacheName);
                      }
                      if (!children) {
                        switch (operator) {
                          case operators.dot:
                            children = node[_xfa_object.$getChildrenByName](name, false);
                            break;
                          case operators.dotDot:
                            children = node[_xfa_object.$getChildrenByName](name, true);
                            break;
                          case operators.dotHash:
                            children = node[_xfa_object.$getChildrenByClass](name);
                            if (children instanceof _xfa_object.XFAObjectArray) {
                              children = children.children;
                            } else {
                              children = [children];
                            }
                            break;
                          default:
                            break;
                        }
                        if (useCache) {
                          cached.set(cacheName, children);
                        }
                      }
                      if (children.length > 0) {
                        nodes.push(children);
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  if (nodes.length === 0 && !isQualified && i === 0) {
                    var parent = container[_xfa_object.$getParent]();
                    container = parent;
                    if (!container) {
                      return {
                        v: null
                      };
                    }
                    i = -1;
                    root = [container];
                    return "continue";
                  }
                  if (isFinite(index)) {
                    root = nodes.filter(function(node2) {
                      return index < node2.length;
                    }).map(function(node2) {
                      return node2[index];
                    });
                  } else {
                    root = nodes.reduce(function(acc, node2) {
                      return acc.concat(node2);
                    }, []);
                  }
                };
                for (var ii = parsed.length; i < ii; i++) {
                  var _ret = _loop(ii);
                  if (_ret === "continue")
                    continue;
                  if (_typeof(_ret) === "object")
                    return _ret.v;
                }
                if (root.length === 0) {
                  return null;
                }
                return root;
              }
              function createNodes(root, path) {
                var node = null;
                var _iterator2 = _createForOfIteratorHelper(path), _step2;
                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                    var _step2$value = _step2.value, name = _step2$value.name, index = _step2$value.index;
                    for (var i = 0, ii = !isFinite(index) ? 0 : index; i <= ii; i++) {
                      var nsId = root[_xfa_object.$namespaceId] === NS_DATASETS ? -1 : root[_xfa_object.$namespaceId];
                      node = new _xfa_object.XmlObject(nsId, name);
                      root[_xfa_object.$appendChild](node);
                    }
                    root = node;
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }
                return node;
              }
              function createDataNode(root, container, expr) {
                var parsed = parseExpression(expr);
                if (!parsed) {
                  return null;
                }
                if (parsed.some(function(x) {
                  return x.operator === operators.dotDot;
                })) {
                  return null;
                }
                var fn = shortcuts.get(parsed[0].name);
                var i = 0;
                if (fn) {
                  root = fn(root, container);
                  i = 1;
                } else {
                  root = container || root;
                }
                for (var ii = parsed.length; i < ii; i++) {
                  var _parsed$i2 = parsed[i], name = _parsed$i2.name, operator = _parsed$i2.operator, index = _parsed$i2.index;
                  if (!isFinite(index)) {
                    parsed[i].index = 0;
                    return createNodes(root, parsed.slice(i));
                  }
                  var children = void 0;
                  switch (operator) {
                    case operators.dot:
                      children = root[_xfa_object.$getChildrenByName](name, false);
                      break;
                    case operators.dotDot:
                      children = root[_xfa_object.$getChildrenByName](name, true);
                      break;
                    case operators.dotHash:
                      children = root[_xfa_object.$getChildrenByClass](name);
                      if (children instanceof _xfa_object.XFAObjectArray) {
                        children = children.children;
                      } else {
                        children = [children];
                      }
                      break;
                    default:
                      break;
                  }
                  if (children.length === 0) {
                    return createNodes(root, parsed.slice(i));
                  }
                  if (index < children.length) {
                    var child = children[index];
                    if (!(child instanceof _xfa_object.XFAObject)) {
                      (0, _util.warn)("XFA - Cannot create a node.");
                      return null;
                    }
                    root = child;
                  } else {
                    parsed[i].index = index - children.length;
                    return createNodes(root, parsed.slice(i));
                  }
                }
                return null;
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Binder = void 0;
              var _xfa_object = __w_pdfjs_require__2(205);
              var _template = __w_pdfjs_require__2(210);
              var _som = __w_pdfjs_require__2(208);
              var _namespaces = __w_pdfjs_require__2(207);
              var _util = __w_pdfjs_require__2(4);
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var NS_DATASETS = _namespaces.NamespaceIds.datasets.id;
              function createText(content) {
                var node = new _template.Text({});
                node[_xfa_object.$content] = content;
                return node;
              }
              var Binder = /* @__PURE__ */ function() {
                function Binder2(root) {
                  _classCallCheck(this, Binder2);
                  this.root = root;
                  this.datasets = root.datasets;
                  if (root.datasets && root.datasets.data) {
                    this.data = root.datasets.data;
                  } else {
                    this.data = new _xfa_object.XmlObject(_namespaces.NamespaceIds.datasets.id, "data");
                  }
                  this.emptyMerge = this.data[_xfa_object.$getChildren]().length === 0;
                  this.root.form = this.form = root.template[_xfa_object.$clone]();
                }
                _createClass(Binder2, [{
                  key: "_isConsumeData",
                  value: function _isConsumeData() {
                    return !this.emptyMerge && this._mergeMode;
                  }
                }, {
                  key: "_isMatchTemplate",
                  value: function _isMatchTemplate() {
                    return !this._isConsumeData();
                  }
                }, {
                  key: "bind",
                  value: function bind() {
                    this._bindElement(this.form, this.data);
                    return this.form;
                  }
                }, {
                  key: "getData",
                  value: function getData() {
                    return this.data;
                  }
                }, {
                  key: "_bindValue",
                  value: function _bindValue(formNode, data, picture) {
                    formNode[_xfa_object.$data] = data;
                    if (formNode[_xfa_object.$hasSettableValue]()) {
                      if (data[_xfa_object.$isDataValue]()) {
                        var value = data[_xfa_object.$getDataValue]();
                        formNode[_xfa_object.$setValue](createText(value));
                      } else if (formNode instanceof _template.Field && formNode.ui && formNode.ui.choiceList && formNode.ui.choiceList.open === "multiSelect") {
                        var _value = data[_xfa_object.$getChildren]().map(function(child) {
                          return child[_xfa_object.$content].trim();
                        }).join("\n");
                        formNode[_xfa_object.$setValue](createText(_value));
                      } else if (this._isConsumeData()) {
                        (0, _util.warn)("XFA - Nodes haven't the same type.");
                      }
                    } else if (!data[_xfa_object.$isDataValue]() || this._isMatchTemplate()) {
                      this._bindElement(formNode, data);
                    } else {
                      (0, _util.warn)("XFA - Nodes haven't the same type.");
                    }
                  }
                }, {
                  key: "_findDataByNameToConsume",
                  value: function _findDataByNameToConsume(name, isValue, dataNode, global2) {
                    if (!name) {
                      return null;
                    }
                    var generator, match;
                    for (var i = 0; i < 3; i++) {
                      generator = dataNode[_xfa_object.$getRealChildrenByNameIt](name, false, true);
                      while (true) {
                        match = generator.next().value;
                        if (!match) {
                          break;
                        }
                        if (isValue === match[_xfa_object.$isDataValue]()) {
                          return match;
                        }
                      }
                      if (dataNode[_xfa_object.$namespaceId] === _namespaces.NamespaceIds.datasets.id && dataNode[_xfa_object.$nodeName] === "data") {
                        break;
                      }
                      dataNode = dataNode[_xfa_object.$getParent]();
                    }
                    if (!global2) {
                      return null;
                    }
                    generator = this.data[_xfa_object.$getRealChildrenByNameIt](name, true, false);
                    match = generator.next().value;
                    if (match) {
                      return match;
                    }
                    generator = this.data[_xfa_object.$getAttributeIt](name, true);
                    match = generator.next().value;
                    if (match && match[_xfa_object.$isDataValue]()) {
                      return match;
                    }
                    return null;
                  }
                }, {
                  key: "_setProperties",
                  value: function _setProperties(formNode, dataNode) {
                    if (!formNode.hasOwnProperty("setProperty")) {
                      return;
                    }
                    var _iterator = _createForOfIteratorHelper(formNode.setProperty.children), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var _step$value = _step.value, ref = _step$value.ref, target = _step$value.target, connection = _step$value.connection;
                        if (connection) {
                          continue;
                        }
                        if (!ref) {
                          continue;
                        }
                        var nodes = (0, _som.searchNode)(this.root, dataNode, ref, false, false);
                        if (!nodes) {
                          (0, _util.warn)("XFA - Invalid reference: ".concat(ref, "."));
                          continue;
                        }
                        var _nodes = _slicedToArray(nodes, 1), node = _nodes[0];
                        if (!node[_xfa_object.$isDescendent](this.data)) {
                          (0, _util.warn)("XFA - Invalid node: must be a data node.");
                          continue;
                        }
                        var targetNodes = (0, _som.searchNode)(this.root, formNode, target, false, false);
                        if (!targetNodes) {
                          (0, _util.warn)("XFA - Invalid target: ".concat(target, "."));
                          continue;
                        }
                        var _targetNodes = _slicedToArray(targetNodes, 1), targetNode = _targetNodes[0];
                        if (!targetNode[_xfa_object.$isDescendent](formNode)) {
                          (0, _util.warn)("XFA - Invalid target: must be a property or subproperty.");
                          continue;
                        }
                        var targetParent = targetNode[_xfa_object.$getParent]();
                        if (targetNode instanceof _template.SetProperty || targetParent instanceof _template.SetProperty) {
                          (0, _util.warn)("XFA - Invalid target: cannot be a setProperty or one of its properties.");
                          continue;
                        }
                        if (targetNode instanceof _template.BindItems || targetParent instanceof _template.BindItems) {
                          (0, _util.warn)("XFA - Invalid target: cannot be a bindItems or one of its properties.");
                          continue;
                        }
                        var content = node[_xfa_object.$text]();
                        var name = targetNode[_xfa_object.$nodeName];
                        if (targetNode instanceof _xfa_object.XFAAttribute) {
                          var attrs = /* @__PURE__ */ Object.create(null);
                          attrs[name] = content;
                          var obj = Reflect.construct(Object.getPrototypeOf(targetParent).constructor, [attrs]);
                          targetParent[name] = obj[name];
                          continue;
                        }
                        if (!targetNode.hasOwnProperty(_xfa_object.$content)) {
                          (0, _util.warn)("XFA - Invalid node to use in setProperty");
                          continue;
                        }
                        targetNode[_xfa_object.$data] = node;
                        targetNode[_xfa_object.$content] = content;
                        targetNode[_xfa_object.$finalize]();
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                  }
                }, {
                  key: "_bindItems",
                  value: function _bindItems(formNode, dataNode) {
                    if (!formNode.hasOwnProperty("items") || !formNode.hasOwnProperty("bindItems") || formNode.bindItems.isEmpty()) {
                      return;
                    }
                    var _iterator2 = _createForOfIteratorHelper(formNode.items.children), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var item = _step2.value;
                        formNode[_xfa_object.$removeChild](item);
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    formNode.items.clear();
                    var labels = new _template.Items({});
                    var values = new _template.Items({});
                    formNode[_xfa_object.$appendChild](labels);
                    formNode.items.push(labels);
                    formNode[_xfa_object.$appendChild](values);
                    formNode.items.push(values);
                    var _iterator3 = _createForOfIteratorHelper(formNode.bindItems.children), _step3;
                    try {
                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                        var _step3$value = _step3.value, ref = _step3$value.ref, labelRef = _step3$value.labelRef, valueRef = _step3$value.valueRef, connection = _step3$value.connection;
                        if (connection) {
                          continue;
                        }
                        if (!ref) {
                          continue;
                        }
                        var nodes = (0, _som.searchNode)(this.root, dataNode, ref, false, false);
                        if (!nodes) {
                          (0, _util.warn)("XFA - Invalid reference: ".concat(ref, "."));
                          continue;
                        }
                        var _iterator4 = _createForOfIteratorHelper(nodes), _step4;
                        try {
                          for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                            var node = _step4.value;
                            if (!node[_xfa_object.$isDescendent](this.datasets)) {
                              (0, _util.warn)("XFA - Invalid ref (".concat(ref, "): must be a datasets child."));
                              continue;
                            }
                            var labelNodes = (0, _som.searchNode)(this.root, node, labelRef, true, false);
                            if (!labelNodes) {
                              (0, _util.warn)("XFA - Invalid label: ".concat(labelRef, "."));
                              continue;
                            }
                            var _labelNodes = _slicedToArray(labelNodes, 1), labelNode = _labelNodes[0];
                            if (!labelNode[_xfa_object.$isDescendent](this.datasets)) {
                              (0, _util.warn)("XFA - Invalid label: must be a datasets child.");
                              continue;
                            }
                            var valueNodes = (0, _som.searchNode)(this.root, node, valueRef, true, false);
                            if (!valueNodes) {
                              (0, _util.warn)("XFA - Invalid value: ".concat(valueRef, "."));
                              continue;
                            }
                            var _valueNodes = _slicedToArray(valueNodes, 1), valueNode = _valueNodes[0];
                            if (!valueNode[_xfa_object.$isDescendent](this.datasets)) {
                              (0, _util.warn)("XFA - Invalid value: must be a datasets child.");
                              continue;
                            }
                            var label = createText(labelNode[_xfa_object.$text]());
                            var value = createText(valueNode[_xfa_object.$text]());
                            labels[_xfa_object.$appendChild](label);
                            labels.text.push(label);
                            values[_xfa_object.$appendChild](value);
                            values.text.push(value);
                          }
                        } catch (err) {
                          _iterator4.e(err);
                        } finally {
                          _iterator4.f();
                        }
                      }
                    } catch (err) {
                      _iterator3.e(err);
                    } finally {
                      _iterator3.f();
                    }
                  }
                }, {
                  key: "_bindOccurrences",
                  value: function _bindOccurrences(formNode, matches, picture) {
                    var baseClone;
                    if (matches.length > 1) {
                      baseClone = formNode[_xfa_object.$clone]();
                      baseClone[_xfa_object.$removeChild](baseClone.occur);
                      baseClone.occur = null;
                    }
                    this._bindValue(formNode, matches[0], picture);
                    this._setProperties(formNode, matches[0]);
                    this._bindItems(formNode, matches[0]);
                    if (matches.length === 1) {
                      return;
                    }
                    var parent = formNode[_xfa_object.$getParent]();
                    var name = formNode[_xfa_object.$nodeName];
                    var pos = parent[_xfa_object.$indexOf](formNode);
                    for (var i = 1, ii = matches.length; i < ii; i++) {
                      var match = matches[i];
                      var clone = baseClone[_xfa_object.$clone]();
                      parent[name].push(clone);
                      parent[_xfa_object.$insertAt](pos + i, clone);
                      this._bindValue(clone, match, picture);
                      this._setProperties(clone, match);
                      this._bindItems(clone, match);
                    }
                  }
                }, {
                  key: "_createOccurrences",
                  value: function _createOccurrences(formNode) {
                    if (!this.emptyMerge) {
                      return;
                    }
                    var occur = formNode.occur;
                    if (!occur || occur.initial <= 1) {
                      return;
                    }
                    var parent = formNode[_xfa_object.$getParent]();
                    var name = formNode[_xfa_object.$nodeName];
                    if (!(parent[name] instanceof _xfa_object.XFAObjectArray)) {
                      return;
                    }
                    var currentNumber;
                    if (formNode.name) {
                      currentNumber = parent[name].children.filter(function(e) {
                        return e.name === formNode.name;
                      }).length;
                    } else {
                      currentNumber = parent[name].children.length;
                    }
                    var pos = parent[_xfa_object.$indexOf](formNode) + 1;
                    var ii = occur.initial - currentNumber;
                    if (ii) {
                      var nodeClone = formNode[_xfa_object.$clone]();
                      nodeClone[_xfa_object.$removeChild](nodeClone.occur);
                      nodeClone.occur = null;
                      parent[name].push(nodeClone);
                      parent[_xfa_object.$insertAt](pos, nodeClone);
                      for (var i = 1; i < ii; i++) {
                        var clone = nodeClone[_xfa_object.$clone]();
                        parent[name].push(clone);
                        parent[_xfa_object.$insertAt](pos + i, clone);
                      }
                    }
                  }
                }, {
                  key: "_getOccurInfo",
                  value: function _getOccurInfo(formNode) {
                    var name = formNode.name, occur = formNode.occur;
                    if (!occur || !name) {
                      return [1, 1];
                    }
                    var max = occur.max === -1 ? Infinity : occur.max;
                    return [occur.min, max];
                  }
                }, {
                  key: "_setAndBind",
                  value: function _setAndBind(formNode, dataNode) {
                    this._setProperties(formNode, dataNode);
                    this._bindItems(formNode, dataNode);
                    this._bindElement(formNode, dataNode);
                  }
                }, {
                  key: "_bindElement",
                  value: function _bindElement(formNode, dataNode) {
                    var uselessNodes = [];
                    this._createOccurrences(formNode);
                    var _iterator5 = _createForOfIteratorHelper(formNode[_xfa_object.$getChildren]()), _step5;
                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                        var child = _step5.value;
                        if (child[_xfa_object.$data]) {
                          continue;
                        }
                        if (this._mergeMode === void 0 && child[_xfa_object.$nodeName] === "subform") {
                          this._mergeMode = child.mergeMode === "consumeData";
                          var dataChildren = dataNode[_xfa_object.$getChildren]();
                          if (dataChildren.length > 0) {
                            this._bindOccurrences(child, [dataChildren[0]], null);
                          } else if (this.emptyMerge) {
                            var nsId = dataNode[_xfa_object.$namespaceId] === NS_DATASETS ? -1 : dataNode[_xfa_object.$namespaceId];
                            var dataChild = child[_xfa_object.$data] = new _xfa_object.XmlObject(nsId, child.name || "root");
                            dataNode[_xfa_object.$appendChild](dataChild);
                            this._bindElement(child, dataChild);
                          }
                          continue;
                        }
                        if (!child[_xfa_object.$isBindable]()) {
                          continue;
                        }
                        var global2 = false;
                        var picture = null;
                        var ref = null;
                        var match = null;
                        if (child.bind) {
                          switch (child.bind.match) {
                            case "none":
                              this._setAndBind(child, dataNode);
                              continue;
                            case "global":
                              global2 = true;
                              break;
                            case "dataRef":
                              if (!child.bind.ref) {
                                (0, _util.warn)("XFA - ref is empty in node ".concat(child[_xfa_object.$nodeName], "."));
                                this._setAndBind(child, dataNode);
                                continue;
                              }
                              ref = child.bind.ref;
                              break;
                            default:
                              break;
                          }
                          if (child.bind.picture) {
                            picture = child.bind.picture[_xfa_object.$content];
                          }
                        }
                        var _this$_getOccurInfo = this._getOccurInfo(child), _this$_getOccurInfo2 = _slicedToArray(_this$_getOccurInfo, 2), min = _this$_getOccurInfo2[0], max = _this$_getOccurInfo2[1];
                        if (ref) {
                          match = (0, _som.searchNode)(this.root, dataNode, ref, true, false);
                          if (match === null) {
                            match = (0, _som.createDataNode)(this.data, dataNode, ref);
                            if (!match) {
                              continue;
                            }
                            if (this._isConsumeData()) {
                              match[_xfa_object.$consumed] = true;
                            }
                            this._setAndBind(child, match);
                            continue;
                          } else {
                            if (this._isConsumeData()) {
                              match = match.filter(function(node) {
                                return !node[_xfa_object.$consumed];
                              });
                            }
                            if (match.length > max) {
                              match = match.slice(0, max);
                            } else if (match.length === 0) {
                              match = null;
                            }
                            if (match && this._isConsumeData()) {
                              match.forEach(function(node) {
                                node[_xfa_object.$consumed] = true;
                              });
                            }
                          }
                        } else {
                          if (!child.name) {
                            this._setAndBind(child, dataNode);
                            continue;
                          }
                          if (this._isConsumeData()) {
                            var matches = [];
                            while (matches.length < max) {
                              var found = this._findDataByNameToConsume(child.name, child[_xfa_object.$hasSettableValue](), dataNode, global2);
                              if (!found) {
                                break;
                              }
                              found[_xfa_object.$consumed] = true;
                              matches.push(found);
                            }
                            match = matches.length > 0 ? matches : null;
                          } else {
                            match = dataNode[_xfa_object.$getRealChildrenByNameIt](child.name, false, this.emptyMerge).next().value;
                            if (!match) {
                              if (min === 0) {
                                uselessNodes.push(child);
                                continue;
                              }
                              var _nsId = dataNode[_xfa_object.$namespaceId] === NS_DATASETS ? -1 : dataNode[_xfa_object.$namespaceId];
                              match = child[_xfa_object.$data] = new _xfa_object.XmlObject(_nsId, child.name);
                              if (this.emptyMerge) {
                                match[_xfa_object.$consumed] = true;
                              }
                              dataNode[_xfa_object.$appendChild](match);
                              this._setAndBind(child, match);
                              continue;
                            }
                            if (this.emptyMerge) {
                              match[_xfa_object.$consumed] = true;
                            }
                            match = [match];
                          }
                        }
                        if (match) {
                          this._bindOccurrences(child, match, picture);
                        } else if (min > 0) {
                          this._setAndBind(child, dataNode);
                        } else {
                          uselessNodes.push(child);
                        }
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                    uselessNodes.forEach(function(node) {
                      return node[_xfa_object.$getParent]()[_xfa_object.$removeChild](node);
                    });
                  }
                }]);
                return Binder2;
              }();
              exports2.Binder = Binder;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              var _regeneratorRuntime2 = __w_pdfjs_require__2(2);
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Value = exports2.Text = exports2.TemplateNamespace = exports2.Template = exports2.SetProperty = exports2.Items = exports2.Field = exports2.BindItems = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _xfa_object = __w_pdfjs_require__2(205);
              var _namespaces = __w_pdfjs_require__2(207);
              var _layout = __w_pdfjs_require__2(211);
              var _html_utils = __w_pdfjs_require__2(212);
              var _utils = __w_pdfjs_require__2(206);
              var _util = __w_pdfjs_require__2(4);
              var _fonts = __w_pdfjs_require__2(213);
              var _core_utils = __w_pdfjs_require__2(139);
              var _som = __w_pdfjs_require__2(208);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              function _get(target, property, receiver) {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  _get = Reflect.get;
                } else {
                  _get = function _get2(target2, property2, receiver2) {
                    var base = _superPropBase(target2, property2);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property2);
                    if (desc.get) {
                      return desc.get.call(receiver2);
                    }
                    return desc.value;
                  };
                }
                return _get(target, property, receiver || target);
              }
              function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = _getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var _marked = /* @__PURE__ */ _regeneratorRuntime2.mark(getContainedChildren);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              var TEMPLATE_NS_ID = _namespaces.NamespaceIds.template.id;
              var SVG_NS = "http://www.w3.org/2000/svg";
              var MAX_ATTEMPTS_FOR_LRTB_LAYOUT = 2;
              var MAX_EMPTY_PAGES = 3;
              var DEFAULT_TAB_INDEX = 5e3;
              var HEADING_PATTERN = /^H(\d+)$/;
              var MIMES = /* @__PURE__ */ new Set(["image/gif", "image/jpeg", "image/jpg", "image/pjpeg", "image/png", "image/apng", "image/x-png", "image/bmp", "image/x-ms-bmp", "image/tiff", "image/tif", "application/octet-stream"]);
              var IMAGES_HEADERS = [[[66, 77], "image/bmp"], [[255, 216, 255], "image/jpeg"], [[73, 73, 42, 0], "image/tiff"], [[77, 77, 0, 42], "image/tiff"], [[71, 73, 70, 56, 57, 97], "image/gif"], [[137, 80, 78, 71, 13, 10, 26, 10], "image/png"]];
              function getBorderDims(node) {
                if (!node || !node.border) {
                  return {
                    w: 0,
                    h: 0
                  };
                }
                var borderExtra = node.border[_xfa_object.$getExtra]();
                if (!borderExtra) {
                  return {
                    w: 0,
                    h: 0
                  };
                }
                return {
                  w: borderExtra.widths[0] + borderExtra.widths[2] + borderExtra.insets[0] + borderExtra.insets[2],
                  h: borderExtra.widths[1] + borderExtra.widths[3] + borderExtra.insets[1] + borderExtra.insets[3]
                };
              }
              function hasMargin(node) {
                return node.margin && (node.margin.topInset || node.margin.rightInset || node.margin.bottomInset || node.margin.leftInset);
              }
              function _setValue(templateNode, value) {
                if (!templateNode.value) {
                  var nodeValue = new Value({});
                  templateNode[_xfa_object.$appendChild](nodeValue);
                  templateNode.value = nodeValue;
                }
                templateNode.value[_xfa_object.$setValue](value);
              }
              function getContainedChildren(node) {
                var _iterator, _step, child;
                return _regenerator["default"].wrap(function getContainedChildren$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _iterator = _createForOfIteratorHelper(node[_xfa_object.$getChildren]());
                        _context.prev = 1;
                        _iterator.s();
                      case 3:
                        if ((_step = _iterator.n()).done) {
                          _context.next = 12;
                          break;
                        }
                        child = _step.value;
                        if (!(child instanceof SubformSet)) {
                          _context.next = 8;
                          break;
                        }
                        return _context.delegateYield(child[_xfa_object.$getContainedChildren](), "t0", 7);
                      case 7:
                        return _context.abrupt("continue", 10);
                      case 8:
                        _context.next = 10;
                        return child;
                      case 10:
                        _context.next = 3;
                        break;
                      case 12:
                        _context.next = 17;
                        break;
                      case 14:
                        _context.prev = 14;
                        _context.t1 = _context["catch"](1);
                        _iterator.e(_context.t1);
                      case 17:
                        _context.prev = 17;
                        _iterator.f();
                        return _context.finish(17);
                      case 20:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _marked, null, [[1, 14, 17, 20]]);
              }
              function setTabIndex(node) {
                while (node) {
                  if (!node.traversal) {
                    node[_xfa_object.$tabIndex] = node[_xfa_object.$getParent]()[_xfa_object.$tabIndex];
                    return;
                  }
                  if (node[_xfa_object.$tabIndex]) {
                    return;
                  }
                  var next = null;
                  var _iterator2 = _createForOfIteratorHelper(node.traversal[_xfa_object.$getChildren]()), _step2;
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      var child = _step2.value;
                      if (child.operation === "next") {
                        next = child;
                        break;
                      }
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  if (!next || !next.ref) {
                    node[_xfa_object.$tabIndex] = node[_xfa_object.$getParent]()[_xfa_object.$tabIndex];
                    return;
                  }
                  var root = node[_xfa_object.$getTemplateRoot]();
                  node[_xfa_object.$tabIndex] = ++root[_xfa_object.$tabIndex];
                  var ref = root[_xfa_object.$searchNode](next.ref, node);
                  if (!ref) {
                    return;
                  }
                  node = ref[0];
                }
              }
              function applyAssist(obj, attributes) {
                var assist = obj.assist;
                if (assist) {
                  var assistTitle = assist[_xfa_object.$toHTML]();
                  if (assistTitle) {
                    attributes.title = assistTitle;
                  }
                  var role = assist.role;
                  var match = role.match(HEADING_PATTERN);
                  if (match) {
                    var ariaRole = "heading";
                    var ariaLevel = match[1];
                    attributes.role = ariaRole;
                    attributes["aria-level"] = ariaLevel;
                  }
                }
                if (obj.layout === "table") {
                  attributes.role = "table";
                } else if (obj.layout === "row") {
                  attributes.role = "row";
                } else {
                  var parent = obj[_xfa_object.$getParent]();
                  if (parent.layout === "row") {
                    if (parent.assist && parent.assist.role === "TH") {
                      attributes.role = "columnheader";
                    } else {
                      attributes.role = "cell";
                    }
                  }
                }
              }
              function ariaLabel(obj) {
                if (!obj.assist) {
                  return null;
                }
                var assist = obj.assist;
                if (assist.speak && assist.speak[_xfa_object.$content] !== "") {
                  return assist.speak[_xfa_object.$content];
                }
                if (assist.toolTip) {
                  return assist.toolTip[_xfa_object.$content];
                }
                return null;
              }
              function valueToHtml(value) {
                return _utils.HTMLResult.success({
                  name: "div",
                  attributes: {
                    "class": ["xfaRich"],
                    style: /* @__PURE__ */ Object.create(null)
                  },
                  children: [{
                    name: "span",
                    attributes: {
                      style: /* @__PURE__ */ Object.create(null)
                    },
                    value
                  }]
                });
              }
              function setFirstUnsplittable(node) {
                var root = node[_xfa_object.$getTemplateRoot]();
                if (root[_xfa_object.$extra].firstUnsplittable === null) {
                  root[_xfa_object.$extra].firstUnsplittable = node;
                  root[_xfa_object.$extra].noLayoutFailure = true;
                }
              }
              function unsetFirstUnsplittable(node) {
                var root = node[_xfa_object.$getTemplateRoot]();
                if (root[_xfa_object.$extra].firstUnsplittable === node) {
                  root[_xfa_object.$extra].noLayoutFailure = false;
                }
              }
              function handleBreak(node) {
                if (node[_xfa_object.$extra]) {
                  return false;
                }
                node[_xfa_object.$extra] = /* @__PURE__ */ Object.create(null);
                if (node.targetType === "auto") {
                  return false;
                }
                var root = node[_xfa_object.$getTemplateRoot]();
                var target = null;
                if (node.target) {
                  target = root[_xfa_object.$searchNode](node.target, node[_xfa_object.$getParent]());
                  if (!target) {
                    return false;
                  }
                  target = target[0];
                }
                var _root$$extra = root[_xfa_object.$extra], currentPageArea = _root$$extra.currentPageArea, currentContentArea = _root$$extra.currentContentArea;
                if (node.targetType === "pageArea") {
                  if (!(target instanceof PageArea)) {
                    target = null;
                  }
                  if (node.startNew) {
                    node[_xfa_object.$extra].target = target || currentPageArea;
                    return true;
                  } else if (target && target !== currentPageArea) {
                    node[_xfa_object.$extra].target = target;
                    return true;
                  }
                  return false;
                }
                if (!(target instanceof ContentArea)) {
                  target = null;
                }
                var pageArea = target && target[_xfa_object.$getParent]();
                var index;
                var nextPageArea = pageArea;
                if (node.startNew) {
                  if (target) {
                    var contentAreas = pageArea.contentArea.children;
                    var indexForCurrent = contentAreas.indexOf(currentContentArea);
                    var indexForTarget = contentAreas.indexOf(target);
                    if (indexForCurrent !== -1 && indexForCurrent < indexForTarget) {
                      nextPageArea = null;
                    }
                    index = indexForTarget - 1;
                  } else {
                    index = currentPageArea.contentArea.children.indexOf(currentContentArea);
                  }
                } else if (target && target !== currentContentArea) {
                  var _contentAreas = pageArea.contentArea.children;
                  index = _contentAreas.indexOf(target) - 1;
                  nextPageArea = pageArea === currentPageArea ? null : pageArea;
                } else {
                  return false;
                }
                node[_xfa_object.$extra].target = nextPageArea;
                node[_xfa_object.$extra].index = index;
                return true;
              }
              function handleOverflow(node, extraNode, space) {
                var root = node[_xfa_object.$getTemplateRoot]();
                var saved = root[_xfa_object.$extra].noLayoutFailure;
                var savedMethod = extraNode[_xfa_object.$getSubformParent];
                extraNode[_xfa_object.$getSubformParent] = function() {
                  return node;
                };
                root[_xfa_object.$extra].noLayoutFailure = true;
                var res = extraNode[_xfa_object.$toHTML](space);
                node[_xfa_object.$addHTML](res.html, res.bbox);
                root[_xfa_object.$extra].noLayoutFailure = saved;
                extraNode[_xfa_object.$getSubformParent] = savedMethod;
              }
              var AppearanceFilter = /* @__PURE__ */ function(_StringObject) {
                _inherits(AppearanceFilter2, _StringObject);
                var _super = _createSuper(AppearanceFilter2);
                function AppearanceFilter2(attributes) {
                  var _this;
                  _classCallCheck(this, AppearanceFilter2);
                  _this = _super.call(this, TEMPLATE_NS_ID, "appearanceFilter");
                  _this.id = attributes.id || "";
                  _this.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this.use = attributes.use || "";
                  _this.usehref = attributes.usehref || "";
                  return _this;
                }
                return AppearanceFilter2;
              }(_xfa_object.StringObject);
              var Arc = /* @__PURE__ */ function(_XFAObject) {
                _inherits(Arc2, _XFAObject);
                var _super2 = _createSuper(Arc2);
                function Arc2(attributes) {
                  var _this2;
                  _classCallCheck(this, Arc2);
                  _this2 = _super2.call(this, TEMPLATE_NS_ID, "arc", true);
                  _this2.circular = (0, _utils.getInteger)({
                    data: attributes.circular,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this2.hand = (0, _utils.getStringOption)(attributes.hand, ["even", "left", "right"]);
                  _this2.id = attributes.id || "";
                  _this2.startAngle = (0, _utils.getFloat)({
                    data: attributes.startAngle,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return true;
                    }
                  });
                  _this2.sweepAngle = (0, _utils.getFloat)({
                    data: attributes.sweepAngle,
                    defaultValue: 360,
                    validate: function validate(x) {
                      return true;
                    }
                  });
                  _this2.use = attributes.use || "";
                  _this2.usehref = attributes.usehref || "";
                  _this2.edge = null;
                  _this2.fill = null;
                  return _this2;
                }
                _createClass(Arc2, [{
                  key: _xfa_object.$toHTML,
                  value: function value() {
                    var edge = this.edge ? this.edge : new Edge({});
                    var edgeStyle = edge[_xfa_object.$toStyle]();
                    var style = /* @__PURE__ */ Object.create(null);
                    if (this.fill && this.fill.presence === "visible") {
                      Object.assign(style, this.fill[_xfa_object.$toStyle]());
                    } else {
                      style.fill = "transparent";
                    }
                    style.strokeWidth = (0, _html_utils.measureToString)(edge.presence === "visible" ? edge.thickness : 0);
                    style.stroke = edgeStyle.color;
                    var arc;
                    var attributes = {
                      xmlns: SVG_NS,
                      style: {
                        width: "100%",
                        height: "100%",
                        overflow: "visible"
                      }
                    };
                    if (this.sweepAngle === 360) {
                      arc = {
                        name: "ellipse",
                        attributes: {
                          xmlns: SVG_NS,
                          cx: "50%",
                          cy: "50%",
                          rx: "50%",
                          ry: "50%",
                          style
                        }
                      };
                    } else {
                      var startAngle = this.startAngle * Math.PI / 180;
                      var sweepAngle = this.sweepAngle * Math.PI / 180;
                      var largeArc = this.sweepAngle > 180 ? 1 : 0;
                      var x1 = 50 * (1 + Math.cos(startAngle)), y1 = 50 * (1 - Math.sin(startAngle)), x2 = 50 * (1 + Math.cos(startAngle + sweepAngle)), y2 = 50 * (1 - Math.sin(startAngle + sweepAngle));
                      arc = {
                        name: "path",
                        attributes: {
                          xmlns: SVG_NS,
                          d: "M ".concat(x1, " ").concat(y1, " A 50 50 0 ").concat(largeArc, " 0 ").concat(x2, " ").concat(y2),
                          vectorEffect: "non-scaling-stroke",
                          style
                        }
                      };
                      Object.assign(attributes, {
                        viewBox: "0 0 100 100",
                        preserveAspectRatio: "none"
                      });
                    }
                    var svg = {
                      name: "svg",
                      children: [arc],
                      attributes
                    };
                    var parent = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();
                    if (hasMargin(parent)) {
                      return _utils.HTMLResult.success({
                        name: "div",
                        attributes: {
                          style: {
                            display: "inline",
                            width: "100%",
                            height: "100%"
                          }
                        },
                        children: [svg]
                      });
                    }
                    svg.attributes.style.position = "absolute";
                    return _utils.HTMLResult.success(svg);
                  }
                }]);
                return Arc2;
              }(_xfa_object.XFAObject);
              var Area = /* @__PURE__ */ function(_XFAObject2) {
                _inherits(Area2, _XFAObject2);
                var _super3 = _createSuper(Area2);
                function Area2(attributes) {
                  var _this3;
                  _classCallCheck(this, Area2);
                  _this3 = _super3.call(this, TEMPLATE_NS_ID, "area", true);
                  _this3.colSpan = (0, _utils.getInteger)({
                    data: attributes.colSpan,
                    defaultValue: 1,
                    validate: function validate(n) {
                      return n >= 1 || n === -1;
                    }
                  });
                  _this3.id = attributes.id || "";
                  _this3.name = attributes.name || "";
                  _this3.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this3.use = attributes.use || "";
                  _this3.usehref = attributes.usehref || "";
                  _this3.x = (0, _utils.getMeasurement)(attributes.x, "0pt");
                  _this3.y = (0, _utils.getMeasurement)(attributes.y, "0pt");
                  _this3.desc = null;
                  _this3.extras = null;
                  _this3.area = new _xfa_object.XFAObjectArray();
                  _this3.draw = new _xfa_object.XFAObjectArray();
                  _this3.exObject = new _xfa_object.XFAObjectArray();
                  _this3.exclGroup = new _xfa_object.XFAObjectArray();
                  _this3.field = new _xfa_object.XFAObjectArray();
                  _this3.subform = new _xfa_object.XFAObjectArray();
                  _this3.subformSet = new _xfa_object.XFAObjectArray();
                  return _this3;
                }
                _createClass(Area2, [{
                  key: _xfa_object.$getContainedChildren,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value() {
                    return _regenerator["default"].wrap(function value$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            return _context2.delegateYield(getContainedChildren(this), "t0", 1);
                          case 1:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, value, this);
                  })
                }, {
                  key: _xfa_object.$isTransparent,
                  value: function value() {
                    return true;
                  }
                }, {
                  key: _xfa_object.$isBindable,
                  value: function value() {
                    return true;
                  }
                }, {
                  key: _xfa_object.$addHTML,
                  value: function value(html, bbox) {
                    var _bbox = _slicedToArray(bbox, 4), x = _bbox[0], y = _bbox[1], w = _bbox[2], h = _bbox[3];
                    this[_xfa_object.$extra].width = Math.max(this[_xfa_object.$extra].width, x + w);
                    this[_xfa_object.$extra].height = Math.max(this[_xfa_object.$extra].height, y + h);
                    this[_xfa_object.$extra].children.push(html);
                  }
                }, {
                  key: _xfa_object.$getAvailableSpace,
                  value: function value() {
                    return this[_xfa_object.$extra].availableSpace;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var style = (0, _html_utils.toStyle)(this, "position");
                    var attributes = {
                      style,
                      id: this[_xfa_object.$uid],
                      "class": ["xfaArea"]
                    };
                    if ((0, _html_utils.isPrintOnly)(this)) {
                      attributes["class"].push("xfaPrintOnly");
                    }
                    if (this.name) {
                      attributes.xfaName = this.name;
                    }
                    var children = [];
                    this[_xfa_object.$extra] = {
                      children,
                      width: 0,
                      height: 0,
                      availableSpace
                    };
                    var result = this[_xfa_object.$childrenToHTML]({
                      filter: /* @__PURE__ */ new Set(["area", "draw", "field", "exclGroup", "subform", "subformSet"]),
                      include: true
                    });
                    if (!result.success) {
                      if (result.isBreak()) {
                        return result;
                      }
                      delete this[_xfa_object.$extra];
                      return _utils.HTMLResult.FAILURE;
                    }
                    style.width = (0, _html_utils.measureToString)(this[_xfa_object.$extra].width);
                    style.height = (0, _html_utils.measureToString)(this[_xfa_object.$extra].height);
                    var html = {
                      name: "div",
                      attributes,
                      children
                    };
                    var bbox = [this.x, this.y, this[_xfa_object.$extra].width, this[_xfa_object.$extra].height];
                    delete this[_xfa_object.$extra];
                    return _utils.HTMLResult.success(html, bbox);
                  }
                }]);
                return Area2;
              }(_xfa_object.XFAObject);
              var Assist = /* @__PURE__ */ function(_XFAObject3) {
                _inherits(Assist2, _XFAObject3);
                var _super4 = _createSuper(Assist2);
                function Assist2(attributes) {
                  var _this4;
                  _classCallCheck(this, Assist2);
                  _this4 = _super4.call(this, TEMPLATE_NS_ID, "assist", true);
                  _this4.id = attributes.id || "";
                  _this4.role = attributes.role || "";
                  _this4.use = attributes.use || "";
                  _this4.usehref = attributes.usehref || "";
                  _this4.speak = null;
                  _this4.toolTip = null;
                  return _this4;
                }
                _createClass(Assist2, [{
                  key: _xfa_object.$toHTML,
                  value: function value() {
                    return this.toolTip && this.toolTip[_xfa_object.$content] ? this.toolTip[_xfa_object.$content] : null;
                  }
                }]);
                return Assist2;
              }(_xfa_object.XFAObject);
              var Barcode = /* @__PURE__ */ function(_XFAObject4) {
                _inherits(Barcode2, _XFAObject4);
                var _super5 = _createSuper(Barcode2);
                function Barcode2(attributes) {
                  var _this5;
                  _classCallCheck(this, Barcode2);
                  _this5 = _super5.call(this, TEMPLATE_NS_ID, "barcode", true);
                  _this5.charEncoding = (0, _utils.getKeyword)({
                    data: attributes.charEncoding ? attributes.charEncoding.toLowerCase() : "",
                    defaultValue: "",
                    validate: function validate(k) {
                      return ["utf-8", "big-five", "fontspecific", "gbk", "gb-18030", "gb-2312", "ksc-5601", "none", "shift-jis", "ucs-2", "utf-16"].includes(k) || k.match(/iso-8859-\d{2}/);
                    }
                  });
                  _this5.checksum = (0, _utils.getStringOption)(attributes.checksum, ["none", "1mod10", "1mod10_1mod11", "2mod10", "auto"]);
                  _this5.dataColumnCount = (0, _utils.getInteger)({
                    data: attributes.dataColumnCount,
                    defaultValue: -1,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this5.dataLength = (0, _utils.getInteger)({
                    data: attributes.dataLength,
                    defaultValue: -1,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this5.dataPrep = (0, _utils.getStringOption)(attributes.dataPrep, ["none", "flateCompress"]);
                  _this5.dataRowCount = (0, _utils.getInteger)({
                    data: attributes.dataRowCount,
                    defaultValue: -1,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this5.endChar = attributes.endChar || "";
                  _this5.errorCorrectionLevel = (0, _utils.getInteger)({
                    data: attributes.errorCorrectionLevel,
                    defaultValue: -1,
                    validate: function validate(x) {
                      return x >= 0 && x <= 8;
                    }
                  });
                  _this5.id = attributes.id || "";
                  _this5.moduleHeight = (0, _utils.getMeasurement)(attributes.moduleHeight, "5mm");
                  _this5.moduleWidth = (0, _utils.getMeasurement)(attributes.moduleWidth, "0.25mm");
                  _this5.printCheckDigit = (0, _utils.getInteger)({
                    data: attributes.printCheckDigit,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this5.rowColumnRatio = (0, _utils.getRatio)(attributes.rowColumnRatio);
                  _this5.startChar = attributes.startChar || "";
                  _this5.textLocation = (0, _utils.getStringOption)(attributes.textLocation, ["below", "above", "aboveEmbedded", "belowEmbedded", "none"]);
                  _this5.truncate = (0, _utils.getInteger)({
                    data: attributes.truncate,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this5.type = (0, _utils.getStringOption)(attributes.type ? attributes.type.toLowerCase() : "", ["aztec", "codabar", "code2of5industrial", "code2of5interleaved", "code2of5matrix", "code2of5standard", "code3of9", "code3of9extended", "code11", "code49", "code93", "code128", "code128a", "code128b", "code128c", "code128sscc", "datamatrix", "ean8", "ean8add2", "ean8add5", "ean13", "ean13add2", "ean13add5", "ean13pwcd", "fim", "logmars", "maxicode", "msi", "pdf417", "pdf417macro", "plessey", "postauscust2", "postauscust3", "postausreplypaid", "postausstandard", "postukrm4scc", "postusdpbc", "postusimb", "postusstandard", "postus5zip", "qrcode", "rfid", "rss14", "rss14expanded", "rss14limited", "rss14stacked", "rss14stackedomni", "rss14truncated", "telepen", "ucc128", "ucc128random", "ucc128sscc", "upca", "upcaadd2", "upcaadd5", "upcapwcd", "upce", "upceadd2", "upceadd5", "upcean2", "upcean5", "upsmaxicode"]);
                  _this5.upsMode = (0, _utils.getStringOption)(attributes.upsMode, ["usCarrier", "internationalCarrier", "secureSymbol", "standardSymbol"]);
                  _this5.use = attributes.use || "";
                  _this5.usehref = attributes.usehref || "";
                  _this5.wideNarrowRatio = (0, _utils.getRatio)(attributes.wideNarrowRatio);
                  _this5.encrypt = null;
                  _this5.extras = null;
                  return _this5;
                }
                return Barcode2;
              }(_xfa_object.XFAObject);
              var Bind = /* @__PURE__ */ function(_XFAObject5) {
                _inherits(Bind2, _XFAObject5);
                var _super6 = _createSuper(Bind2);
                function Bind2(attributes) {
                  var _this6;
                  _classCallCheck(this, Bind2);
                  _this6 = _super6.call(this, TEMPLATE_NS_ID, "bind", true);
                  _this6.match = (0, _utils.getStringOption)(attributes.match, ["once", "dataRef", "global", "none"]);
                  _this6.ref = attributes.ref || "";
                  _this6.picture = null;
                  return _this6;
                }
                return Bind2;
              }(_xfa_object.XFAObject);
              var BindItems = /* @__PURE__ */ function(_XFAObject6) {
                _inherits(BindItems2, _XFAObject6);
                var _super7 = _createSuper(BindItems2);
                function BindItems2(attributes) {
                  var _this7;
                  _classCallCheck(this, BindItems2);
                  _this7 = _super7.call(this, TEMPLATE_NS_ID, "bindItems");
                  _this7.connection = attributes.connection || "";
                  _this7.labelRef = attributes.labelRef || "";
                  _this7.ref = attributes.ref || "";
                  _this7.valueRef = attributes.valueRef || "";
                  return _this7;
                }
                return BindItems2;
              }(_xfa_object.XFAObject);
              exports2.BindItems = BindItems;
              var Bookend = /* @__PURE__ */ function(_XFAObject7) {
                _inherits(Bookend2, _XFAObject7);
                var _super8 = _createSuper(Bookend2);
                function Bookend2(attributes) {
                  var _this8;
                  _classCallCheck(this, Bookend2);
                  _this8 = _super8.call(this, TEMPLATE_NS_ID, "bookend");
                  _this8.id = attributes.id || "";
                  _this8.leader = attributes.leader || "";
                  _this8.trailer = attributes.trailer || "";
                  _this8.use = attributes.use || "";
                  _this8.usehref = attributes.usehref || "";
                  return _this8;
                }
                return Bookend2;
              }(_xfa_object.XFAObject);
              var BooleanElement = /* @__PURE__ */ function(_Option) {
                _inherits(BooleanElement2, _Option);
                var _super9 = _createSuper(BooleanElement2);
                function BooleanElement2(attributes) {
                  var _this9;
                  _classCallCheck(this, BooleanElement2);
                  _this9 = _super9.call(this, TEMPLATE_NS_ID, "boolean");
                  _this9.id = attributes.id || "";
                  _this9.name = attributes.name || "";
                  _this9.use = attributes.use || "";
                  _this9.usehref = attributes.usehref || "";
                  return _this9;
                }
                _createClass(BooleanElement2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    return valueToHtml(this[_xfa_object.$content] === 1 ? "1" : "0");
                  }
                }]);
                return BooleanElement2;
              }(_xfa_object.Option01);
              var Border = /* @__PURE__ */ function(_XFAObject8) {
                _inherits(Border2, _XFAObject8);
                var _super10 = _createSuper(Border2);
                function Border2(attributes) {
                  var _this10;
                  _classCallCheck(this, Border2);
                  _this10 = _super10.call(this, TEMPLATE_NS_ID, "border", true);
                  _this10["break"] = (0, _utils.getStringOption)(attributes["break"], ["close", "open"]);
                  _this10.hand = (0, _utils.getStringOption)(attributes.hand, ["even", "left", "right"]);
                  _this10.id = attributes.id || "";
                  _this10.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this10.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this10.use = attributes.use || "";
                  _this10.usehref = attributes.usehref || "";
                  _this10.corner = new _xfa_object.XFAObjectArray(4);
                  _this10.edge = new _xfa_object.XFAObjectArray(4);
                  _this10.extras = null;
                  _this10.fill = null;
                  _this10.margin = null;
                  return _this10;
                }
                _createClass(Border2, [{
                  key: _xfa_object.$getExtra,
                  value: function value() {
                    if (!this[_xfa_object.$extra]) {
                      var edges = this.edge.children.slice();
                      if (edges.length < 4) {
                        var defaultEdge = edges[edges.length - 1] || new Edge({});
                        for (var i = edges.length; i < 4; i++) {
                          edges.push(defaultEdge);
                        }
                      }
                      var widths = edges.map(function(edge) {
                        return edge.thickness;
                      });
                      var insets = [0, 0, 0, 0];
                      if (this.margin) {
                        insets[0] = this.margin.topInset;
                        insets[1] = this.margin.rightInset;
                        insets[2] = this.margin.bottomInset;
                        insets[3] = this.margin.leftInset;
                      }
                      this[_xfa_object.$extra] = {
                        widths,
                        insets,
                        edges
                      };
                    }
                    return this[_xfa_object.$extra];
                  }
                }, {
                  key: _xfa_object.$toStyle,
                  value: function value() {
                    var _this$$getExtra = this[_xfa_object.$getExtra](), edges = _this$$getExtra.edges;
                    var edgeStyles = edges.map(function(node) {
                      var style2 = node[_xfa_object.$toStyle]();
                      style2.color = style2.color || "#000000";
                      return style2;
                    });
                    var style = /* @__PURE__ */ Object.create(null);
                    if (this.margin) {
                      Object.assign(style, this.margin[_xfa_object.$toStyle]());
                    }
                    if (this.fill && this.fill.presence === "visible") {
                      Object.assign(style, this.fill[_xfa_object.$toStyle]());
                    }
                    if (this.corner.children.some(function(node) {
                      return node.radius !== 0;
                    })) {
                      var cornerStyles = this.corner.children.map(function(node) {
                        return node[_xfa_object.$toStyle]();
                      });
                      if (cornerStyles.length === 2 || cornerStyles.length === 3) {
                        var last = cornerStyles[cornerStyles.length - 1];
                        for (var i = cornerStyles.length; i < 4; i++) {
                          cornerStyles.push(last);
                        }
                      }
                      style.borderRadius = cornerStyles.map(function(s) {
                        return s.radius;
                      }).join(" ");
                    }
                    switch (this.presence) {
                      case "invisible":
                      case "hidden":
                        style.borderStyle = "";
                        break;
                      case "inactive":
                        style.borderStyle = "none";
                        break;
                      default:
                        style.borderStyle = edgeStyles.map(function(s) {
                          return s.style;
                        }).join(" ");
                        break;
                    }
                    style.borderWidth = edgeStyles.map(function(s) {
                      return s.width;
                    }).join(" ");
                    style.borderColor = edgeStyles.map(function(s) {
                      return s.color;
                    }).join(" ");
                    return style;
                  }
                }]);
                return Border2;
              }(_xfa_object.XFAObject);
              var Break = /* @__PURE__ */ function(_XFAObject9) {
                _inherits(Break2, _XFAObject9);
                var _super11 = _createSuper(Break2);
                function Break2(attributes) {
                  var _this11;
                  _classCallCheck(this, Break2);
                  _this11 = _super11.call(this, TEMPLATE_NS_ID, "break", true);
                  _this11.after = (0, _utils.getStringOption)(attributes.after, ["auto", "contentArea", "pageArea", "pageEven", "pageOdd"]);
                  _this11.afterTarget = attributes.afterTarget || "";
                  _this11.before = (0, _utils.getStringOption)(attributes.before, ["auto", "contentArea", "pageArea", "pageEven", "pageOdd"]);
                  _this11.beforeTarget = attributes.beforeTarget || "";
                  _this11.bookendLeader = attributes.bookendLeader || "";
                  _this11.bookendTrailer = attributes.bookendTrailer || "";
                  _this11.id = attributes.id || "";
                  _this11.overflowLeader = attributes.overflowLeader || "";
                  _this11.overflowTarget = attributes.overflowTarget || "";
                  _this11.overflowTrailer = attributes.overflowTrailer || "";
                  _this11.startNew = (0, _utils.getInteger)({
                    data: attributes.startNew,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this11.use = attributes.use || "";
                  _this11.usehref = attributes.usehref || "";
                  _this11.extras = null;
                  return _this11;
                }
                return Break2;
              }(_xfa_object.XFAObject);
              var BreakAfter = /* @__PURE__ */ function(_XFAObject10) {
                _inherits(BreakAfter2, _XFAObject10);
                var _super12 = _createSuper(BreakAfter2);
                function BreakAfter2(attributes) {
                  var _this12;
                  _classCallCheck(this, BreakAfter2);
                  _this12 = _super12.call(this, TEMPLATE_NS_ID, "breakAfter", true);
                  _this12.id = attributes.id || "";
                  _this12.leader = attributes.leader || "";
                  _this12.startNew = (0, _utils.getInteger)({
                    data: attributes.startNew,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this12.target = attributes.target || "";
                  _this12.targetType = (0, _utils.getStringOption)(attributes.targetType, ["auto", "contentArea", "pageArea"]);
                  _this12.trailer = attributes.trailer || "";
                  _this12.use = attributes.use || "";
                  _this12.usehref = attributes.usehref || "";
                  _this12.script = null;
                  return _this12;
                }
                return BreakAfter2;
              }(_xfa_object.XFAObject);
              var BreakBefore = /* @__PURE__ */ function(_XFAObject11) {
                _inherits(BreakBefore2, _XFAObject11);
                var _super13 = _createSuper(BreakBefore2);
                function BreakBefore2(attributes) {
                  var _this13;
                  _classCallCheck(this, BreakBefore2);
                  _this13 = _super13.call(this, TEMPLATE_NS_ID, "breakBefore", true);
                  _this13.id = attributes.id || "";
                  _this13.leader = attributes.leader || "";
                  _this13.startNew = (0, _utils.getInteger)({
                    data: attributes.startNew,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this13.target = attributes.target || "";
                  _this13.targetType = (0, _utils.getStringOption)(attributes.targetType, ["auto", "contentArea", "pageArea"]);
                  _this13.trailer = attributes.trailer || "";
                  _this13.use = attributes.use || "";
                  _this13.usehref = attributes.usehref || "";
                  _this13.script = null;
                  return _this13;
                }
                _createClass(BreakBefore2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    this[_xfa_object.$extra] = {};
                    return _utils.HTMLResult.FAILURE;
                  }
                }]);
                return BreakBefore2;
              }(_xfa_object.XFAObject);
              var Button = /* @__PURE__ */ function(_XFAObject12) {
                _inherits(Button2, _XFAObject12);
                var _super14 = _createSuper(Button2);
                function Button2(attributes) {
                  var _this14;
                  _classCallCheck(this, Button2);
                  _this14 = _super14.call(this, TEMPLATE_NS_ID, "button", true);
                  _this14.highlight = (0, _utils.getStringOption)(attributes.highlight, ["inverted", "none", "outline", "push"]);
                  _this14.id = attributes.id || "";
                  _this14.use = attributes.use || "";
                  _this14.usehref = attributes.usehref || "";
                  _this14.extras = null;
                  return _this14;
                }
                _createClass(Button2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var parent = this[_xfa_object.$getParent]();
                    var grandpa = parent[_xfa_object.$getParent]();
                    var htmlButton = {
                      name: "button",
                      attributes: {
                        id: this[_xfa_object.$uid],
                        "class": ["xfaButton"],
                        style: {}
                      },
                      children: []
                    };
                    var _iterator3 = _createForOfIteratorHelper(grandpa.event.children), _step3;
                    try {
                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                        var event = _step3.value;
                        if (event.activity !== "click" || !event.script) {
                          continue;
                        }
                        var jsURL = (0, _core_utils.recoverJsURL)(event.script[_xfa_object.$content]);
                        if (!jsURL) {
                          continue;
                        }
                        var href = (0, _html_utils.fixURL)(jsURL.url);
                        if (!href) {
                          continue;
                        }
                        htmlButton.children.push({
                          name: "a",
                          attributes: {
                            id: "link" + this[_xfa_object.$uid],
                            href,
                            newWindow: jsURL.newWindow,
                            "class": ["xfaLink"],
                            style: {}
                          },
                          children: []
                        });
                      }
                    } catch (err) {
                      _iterator3.e(err);
                    } finally {
                      _iterator3.f();
                    }
                    return _utils.HTMLResult.success(htmlButton);
                  }
                }]);
                return Button2;
              }(_xfa_object.XFAObject);
              var Calculate = /* @__PURE__ */ function(_XFAObject13) {
                _inherits(Calculate2, _XFAObject13);
                var _super15 = _createSuper(Calculate2);
                function Calculate2(attributes) {
                  var _this15;
                  _classCallCheck(this, Calculate2);
                  _this15 = _super15.call(this, TEMPLATE_NS_ID, "calculate", true);
                  _this15.id = attributes.id || "";
                  _this15.override = (0, _utils.getStringOption)(attributes.override, ["disabled", "error", "ignore", "warning"]);
                  _this15.use = attributes.use || "";
                  _this15.usehref = attributes.usehref || "";
                  _this15.extras = null;
                  _this15.message = null;
                  _this15.script = null;
                  return _this15;
                }
                return Calculate2;
              }(_xfa_object.XFAObject);
              var Caption = /* @__PURE__ */ function(_XFAObject14) {
                _inherits(Caption2, _XFAObject14);
                var _super16 = _createSuper(Caption2);
                function Caption2(attributes) {
                  var _this16;
                  _classCallCheck(this, Caption2);
                  _this16 = _super16.call(this, TEMPLATE_NS_ID, "caption", true);
                  _this16.id = attributes.id || "";
                  _this16.placement = (0, _utils.getStringOption)(attributes.placement, ["left", "bottom", "inline", "right", "top"]);
                  _this16.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this16.reserve = Math.ceil((0, _utils.getMeasurement)(attributes.reserve));
                  _this16.use = attributes.use || "";
                  _this16.usehref = attributes.usehref || "";
                  _this16.extras = null;
                  _this16.font = null;
                  _this16.margin = null;
                  _this16.para = null;
                  _this16.value = null;
                  return _this16;
                }
                _createClass(Caption2, [{
                  key: _xfa_object.$setValue,
                  value: function(_value) {
                    function value(_x) {
                      return _value.apply(this, arguments);
                    }
                    value.toString = function() {
                      return _value.toString();
                    };
                    return value;
                  }(function(value) {
                    _setValue(this, value);
                  })
                }, {
                  key: _xfa_object.$getExtra,
                  value: function value(availableSpace) {
                    if (!this[_xfa_object.$extra]) {
                      var width = availableSpace.width, height = availableSpace.height;
                      switch (this.placement) {
                        case "left":
                        case "right":
                        case "inline":
                          width = this.reserve <= 0 ? width : this.reserve;
                          break;
                        case "top":
                        case "bottom":
                          height = this.reserve <= 0 ? height : this.reserve;
                          break;
                      }
                      this[_xfa_object.$extra] = (0, _html_utils.layoutNode)(this, {
                        width,
                        height
                      });
                    }
                    return this[_xfa_object.$extra];
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    if (!this.value) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    this[_xfa_object.$pushPara]();
                    var value2 = this.value[_xfa_object.$toHTML](availableSpace).html;
                    if (!value2) {
                      this[_xfa_object.$popPara]();
                      return _utils.HTMLResult.EMPTY;
                    }
                    var savedReserve = this.reserve;
                    if (this.reserve <= 0) {
                      var _this$$getExtra2 = this[_xfa_object.$getExtra](availableSpace), w = _this$$getExtra2.w, h = _this$$getExtra2.h;
                      switch (this.placement) {
                        case "left":
                        case "right":
                        case "inline":
                          this.reserve = w;
                          break;
                        case "top":
                        case "bottom":
                          this.reserve = h;
                          break;
                      }
                    }
                    var children = [];
                    if (typeof value2 === "string") {
                      children.push({
                        name: "#text",
                        value: value2
                      });
                    } else {
                      children.push(value2);
                    }
                    var style = (0, _html_utils.toStyle)(this, "font", "margin", "visibility");
                    switch (this.placement) {
                      case "left":
                      case "right":
                        if (this.reserve > 0) {
                          style.width = (0, _html_utils.measureToString)(this.reserve);
                        }
                        break;
                      case "top":
                      case "bottom":
                        if (this.reserve > 0) {
                          style.height = (0, _html_utils.measureToString)(this.reserve);
                        }
                        break;
                    }
                    (0, _html_utils.setPara)(this, null, value2);
                    this[_xfa_object.$popPara]();
                    this.reserve = savedReserve;
                    return _utils.HTMLResult.success({
                      name: "div",
                      attributes: {
                        style,
                        "class": ["xfaCaption"]
                      },
                      children
                    });
                  }
                }]);
                return Caption2;
              }(_xfa_object.XFAObject);
              var Certificate = /* @__PURE__ */ function(_StringObject2) {
                _inherits(Certificate2, _StringObject2);
                var _super17 = _createSuper(Certificate2);
                function Certificate2(attributes) {
                  var _this17;
                  _classCallCheck(this, Certificate2);
                  _this17 = _super17.call(this, TEMPLATE_NS_ID, "certificate");
                  _this17.id = attributes.id || "";
                  _this17.name = attributes.name || "";
                  _this17.use = attributes.use || "";
                  _this17.usehref = attributes.usehref || "";
                  return _this17;
                }
                return Certificate2;
              }(_xfa_object.StringObject);
              var Certificates = /* @__PURE__ */ function(_XFAObject15) {
                _inherits(Certificates2, _XFAObject15);
                var _super18 = _createSuper(Certificates2);
                function Certificates2(attributes) {
                  var _this18;
                  _classCallCheck(this, Certificates2);
                  _this18 = _super18.call(this, TEMPLATE_NS_ID, "certificates", true);
                  _this18.credentialServerPolicy = (0, _utils.getStringOption)(attributes.credentialServerPolicy, ["optional", "required"]);
                  _this18.id = attributes.id || "";
                  _this18.url = attributes.url || "";
                  _this18.urlPolicy = attributes.urlPolicy || "";
                  _this18.use = attributes.use || "";
                  _this18.usehref = attributes.usehref || "";
                  _this18.encryption = null;
                  _this18.issuers = null;
                  _this18.keyUsage = null;
                  _this18.oids = null;
                  _this18.signing = null;
                  _this18.subjectDNs = null;
                  return _this18;
                }
                return Certificates2;
              }(_xfa_object.XFAObject);
              var CheckButton = /* @__PURE__ */ function(_XFAObject16) {
                _inherits(CheckButton2, _XFAObject16);
                var _super19 = _createSuper(CheckButton2);
                function CheckButton2(attributes) {
                  var _this19;
                  _classCallCheck(this, CheckButton2);
                  _this19 = _super19.call(this, TEMPLATE_NS_ID, "checkButton", true);
                  _this19.id = attributes.id || "";
                  _this19.mark = (0, _utils.getStringOption)(attributes.mark, ["default", "check", "circle", "cross", "diamond", "square", "star"]);
                  _this19.shape = (0, _utils.getStringOption)(attributes.shape, ["square", "round"]);
                  _this19.size = (0, _utils.getMeasurement)(attributes.size, "10pt");
                  _this19.use = attributes.use || "";
                  _this19.usehref = attributes.usehref || "";
                  _this19.border = null;
                  _this19.extras = null;
                  _this19.margin = null;
                  return _this19;
                }
                _createClass(CheckButton2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var style = (0, _html_utils.toStyle)("margin");
                    var size = (0, _html_utils.measureToString)(this.size);
                    style.width = style.height = size;
                    var type;
                    var className;
                    var groupId;
                    var field = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();
                    var items = field.items.children.length && field.items.children[0][_xfa_object.$toHTML]().html || [];
                    var exportedValue = {
                      on: (items[0] !== void 0 ? items[0] : "on").toString(),
                      off: (items[1] !== void 0 ? items[1] : "off").toString()
                    };
                    var value2 = field.value && field.value[_xfa_object.$text]() || "off";
                    var checked = value2 === exportedValue.on || void 0;
                    var container = field[_xfa_object.$getSubformParent]();
                    var fieldId = field[_xfa_object.$uid];
                    var dataId;
                    if (container instanceof ExclGroup) {
                      groupId = container[_xfa_object.$uid];
                      type = "radio";
                      className = "xfaRadio";
                      dataId = container[_xfa_object.$data] && container[_xfa_object.$data][_xfa_object.$uid] || container[_xfa_object.$uid];
                    } else {
                      type = "checkbox";
                      className = "xfaCheckbox";
                      dataId = field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid];
                    }
                    var input = {
                      name: "input",
                      attributes: {
                        "class": [className],
                        style,
                        fieldId,
                        dataId,
                        type,
                        checked,
                        xfaOn: exportedValue.on,
                        xfaOff: exportedValue.off,
                        "aria-label": ariaLabel(field)
                      }
                    };
                    if (groupId) {
                      input.attributes.name = groupId;
                    }
                    return _utils.HTMLResult.success({
                      name: "label",
                      attributes: {
                        "class": ["xfaLabel"]
                      },
                      children: [input]
                    });
                  }
                }]);
                return CheckButton2;
              }(_xfa_object.XFAObject);
              var ChoiceList = /* @__PURE__ */ function(_XFAObject17) {
                _inherits(ChoiceList2, _XFAObject17);
                var _super20 = _createSuper(ChoiceList2);
                function ChoiceList2(attributes) {
                  var _this20;
                  _classCallCheck(this, ChoiceList2);
                  _this20 = _super20.call(this, TEMPLATE_NS_ID, "choiceList", true);
                  _this20.commitOn = (0, _utils.getStringOption)(attributes.commitOn, ["select", "exit"]);
                  _this20.id = attributes.id || "";
                  _this20.open = (0, _utils.getStringOption)(attributes.open, ["userControl", "always", "multiSelect", "onEntry"]);
                  _this20.textEntry = (0, _utils.getInteger)({
                    data: attributes.textEntry,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this20.use = attributes.use || "";
                  _this20.usehref = attributes.usehref || "";
                  _this20.border = null;
                  _this20.extras = null;
                  _this20.margin = null;
                  return _this20;
                }
                _createClass(ChoiceList2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var style = (0, _html_utils.toStyle)(this, "border", "margin");
                    var ui = this[_xfa_object.$getParent]();
                    var field = ui[_xfa_object.$getParent]();
                    var fontSize = field.font && field.font.size || 10;
                    var optionStyle = {
                      fontSize: "calc(".concat(fontSize, "px * var(--zoom-factor))")
                    };
                    var children = [];
                    if (field.items.children.length > 0) {
                      var items = field.items;
                      var displayedIndex = 0;
                      var saveIndex = 0;
                      if (items.children.length === 2) {
                        displayedIndex = items.children[0].save;
                        saveIndex = 1 - displayedIndex;
                      }
                      var displayed = items.children[displayedIndex][_xfa_object.$toHTML]().html;
                      var values = items.children[saveIndex][_xfa_object.$toHTML]().html;
                      var selected = false;
                      var _value2 = field.value && field.value[_xfa_object.$text]() || "";
                      for (var i = 0, ii = displayed.length; i < ii; i++) {
                        var option = {
                          name: "option",
                          attributes: {
                            value: values[i] || displayed[i],
                            style: optionStyle
                          },
                          value: displayed[i]
                        };
                        if (values[i] === _value2) {
                          option.attributes.selected = selected = true;
                        }
                        children.push(option);
                      }
                      if (!selected) {
                        children.splice(0, 0, {
                          name: "option",
                          attributes: {
                            hidden: true,
                            selected: true
                          },
                          value: " "
                        });
                      }
                    }
                    var selectAttributes = {
                      "class": ["xfaSelect"],
                      fieldId: field[_xfa_object.$uid],
                      dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],
                      style,
                      "aria-label": ariaLabel(field)
                    };
                    if (this.open === "multiSelect") {
                      selectAttributes.multiple = true;
                    }
                    return _utils.HTMLResult.success({
                      name: "label",
                      attributes: {
                        "class": ["xfaLabel"]
                      },
                      children: [{
                        name: "select",
                        children,
                        attributes: selectAttributes
                      }]
                    });
                  }
                }]);
                return ChoiceList2;
              }(_xfa_object.XFAObject);
              var Color = /* @__PURE__ */ function(_XFAObject18) {
                _inherits(Color2, _XFAObject18);
                var _super21 = _createSuper(Color2);
                function Color2(attributes) {
                  var _this21;
                  _classCallCheck(this, Color2);
                  _this21 = _super21.call(this, TEMPLATE_NS_ID, "color", true);
                  _this21.cSpace = (0, _utils.getStringOption)(attributes.cSpace, ["SRGB"]);
                  _this21.id = attributes.id || "";
                  _this21.use = attributes.use || "";
                  _this21.usehref = attributes.usehref || "";
                  _this21.value = attributes.value ? (0, _utils.getColor)(attributes.value) : "";
                  _this21.extras = null;
                  return _this21;
                }
                _createClass(Color2, [{
                  key: _xfa_object.$hasSettableValue,
                  value: function value() {
                    return false;
                  }
                }, {
                  key: _xfa_object.$toStyle,
                  value: function value() {
                    return this.value ? _util.Util.makeHexColor(this.value.r, this.value.g, this.value.b) : null;
                  }
                }]);
                return Color2;
              }(_xfa_object.XFAObject);
              var Comb = /* @__PURE__ */ function(_XFAObject19) {
                _inherits(Comb2, _XFAObject19);
                var _super22 = _createSuper(Comb2);
                function Comb2(attributes) {
                  var _this22;
                  _classCallCheck(this, Comb2);
                  _this22 = _super22.call(this, TEMPLATE_NS_ID, "comb");
                  _this22.id = attributes.id || "";
                  _this22.numberOfCells = (0, _utils.getInteger)({
                    data: attributes.numberOfCells,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this22.use = attributes.use || "";
                  _this22.usehref = attributes.usehref || "";
                  return _this22;
                }
                return Comb2;
              }(_xfa_object.XFAObject);
              var Connect = /* @__PURE__ */ function(_XFAObject20) {
                _inherits(Connect2, _XFAObject20);
                var _super23 = _createSuper(Connect2);
                function Connect2(attributes) {
                  var _this23;
                  _classCallCheck(this, Connect2);
                  _this23 = _super23.call(this, TEMPLATE_NS_ID, "connect", true);
                  _this23.connection = attributes.connection || "";
                  _this23.id = attributes.id || "";
                  _this23.ref = attributes.ref || "";
                  _this23.usage = (0, _utils.getStringOption)(attributes.usage, ["exportAndImport", "exportOnly", "importOnly"]);
                  _this23.use = attributes.use || "";
                  _this23.usehref = attributes.usehref || "";
                  _this23.picture = null;
                  return _this23;
                }
                return Connect2;
              }(_xfa_object.XFAObject);
              var ContentArea = /* @__PURE__ */ function(_XFAObject21) {
                _inherits(ContentArea2, _XFAObject21);
                var _super24 = _createSuper(ContentArea2);
                function ContentArea2(attributes) {
                  var _this24;
                  _classCallCheck(this, ContentArea2);
                  _this24 = _super24.call(this, TEMPLATE_NS_ID, "contentArea", true);
                  _this24.h = (0, _utils.getMeasurement)(attributes.h);
                  _this24.id = attributes.id || "";
                  _this24.name = attributes.name || "";
                  _this24.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this24.use = attributes.use || "";
                  _this24.usehref = attributes.usehref || "";
                  _this24.w = (0, _utils.getMeasurement)(attributes.w);
                  _this24.x = (0, _utils.getMeasurement)(attributes.x, "0pt");
                  _this24.y = (0, _utils.getMeasurement)(attributes.y, "0pt");
                  _this24.desc = null;
                  _this24.extras = null;
                  return _this24;
                }
                _createClass(ContentArea2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var left = (0, _html_utils.measureToString)(this.x);
                    var top = (0, _html_utils.measureToString)(this.y);
                    var style = {
                      left,
                      top,
                      width: (0, _html_utils.measureToString)(this.w),
                      height: (0, _html_utils.measureToString)(this.h)
                    };
                    var classNames = ["xfaContentarea"];
                    if ((0, _html_utils.isPrintOnly)(this)) {
                      classNames.push("xfaPrintOnly");
                    }
                    return _utils.HTMLResult.success({
                      name: "div",
                      children: [],
                      attributes: {
                        style,
                        "class": classNames,
                        id: this[_xfa_object.$uid]
                      }
                    });
                  }
                }]);
                return ContentArea2;
              }(_xfa_object.XFAObject);
              var Corner = /* @__PURE__ */ function(_XFAObject22) {
                _inherits(Corner2, _XFAObject22);
                var _super25 = _createSuper(Corner2);
                function Corner2(attributes) {
                  var _this25;
                  _classCallCheck(this, Corner2);
                  _this25 = _super25.call(this, TEMPLATE_NS_ID, "corner", true);
                  _this25.id = attributes.id || "";
                  _this25.inverted = (0, _utils.getInteger)({
                    data: attributes.inverted,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this25.join = (0, _utils.getStringOption)(attributes.join, ["square", "round"]);
                  _this25.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this25.radius = (0, _utils.getMeasurement)(attributes.radius);
                  _this25.stroke = (0, _utils.getStringOption)(attributes.stroke, ["solid", "dashDot", "dashDotDot", "dashed", "dotted", "embossed", "etched", "lowered", "raised"]);
                  _this25.thickness = (0, _utils.getMeasurement)(attributes.thickness, "0.5pt");
                  _this25.use = attributes.use || "";
                  _this25.usehref = attributes.usehref || "";
                  _this25.color = null;
                  _this25.extras = null;
                  return _this25;
                }
                _createClass(Corner2, [{
                  key: _xfa_object.$toStyle,
                  value: function value() {
                    var style = (0, _html_utils.toStyle)(this, "visibility");
                    style.radius = (0, _html_utils.measureToString)(this.join === "square" ? 0 : this.radius);
                    return style;
                  }
                }]);
                return Corner2;
              }(_xfa_object.XFAObject);
              var DateElement = /* @__PURE__ */ function(_ContentObject) {
                _inherits(DateElement2, _ContentObject);
                var _super26 = _createSuper(DateElement2);
                function DateElement2(attributes) {
                  var _this26;
                  _classCallCheck(this, DateElement2);
                  _this26 = _super26.call(this, TEMPLATE_NS_ID, "date");
                  _this26.id = attributes.id || "";
                  _this26.name = attributes.name || "";
                  _this26.use = attributes.use || "";
                  _this26.usehref = attributes.usehref || "";
                  return _this26;
                }
                _createClass(DateElement2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    var date = this[_xfa_object.$content].trim();
                    this[_xfa_object.$content] = date ? new Date(date) : null;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    return valueToHtml(this[_xfa_object.$content] ? this[_xfa_object.$content].toString() : "");
                  }
                }]);
                return DateElement2;
              }(_xfa_object.ContentObject);
              var DateTime = /* @__PURE__ */ function(_ContentObject2) {
                _inherits(DateTime2, _ContentObject2);
                var _super27 = _createSuper(DateTime2);
                function DateTime2(attributes) {
                  var _this27;
                  _classCallCheck(this, DateTime2);
                  _this27 = _super27.call(this, TEMPLATE_NS_ID, "dateTime");
                  _this27.id = attributes.id || "";
                  _this27.name = attributes.name || "";
                  _this27.use = attributes.use || "";
                  _this27.usehref = attributes.usehref || "";
                  return _this27;
                }
                _createClass(DateTime2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    var date = this[_xfa_object.$content].trim();
                    this[_xfa_object.$content] = date ? new Date(date) : null;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    return valueToHtml(this[_xfa_object.$content] ? this[_xfa_object.$content].toString() : "");
                  }
                }]);
                return DateTime2;
              }(_xfa_object.ContentObject);
              var DateTimeEdit = /* @__PURE__ */ function(_XFAObject23) {
                _inherits(DateTimeEdit2, _XFAObject23);
                var _super28 = _createSuper(DateTimeEdit2);
                function DateTimeEdit2(attributes) {
                  var _this28;
                  _classCallCheck(this, DateTimeEdit2);
                  _this28 = _super28.call(this, TEMPLATE_NS_ID, "dateTimeEdit", true);
                  _this28.hScrollPolicy = (0, _utils.getStringOption)(attributes.hScrollPolicy, ["auto", "off", "on"]);
                  _this28.id = attributes.id || "";
                  _this28.picker = (0, _utils.getStringOption)(attributes.picker, ["host", "none"]);
                  _this28.use = attributes.use || "";
                  _this28.usehref = attributes.usehref || "";
                  _this28.border = null;
                  _this28.comb = null;
                  _this28.extras = null;
                  _this28.margin = null;
                  return _this28;
                }
                _createClass(DateTimeEdit2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var style = (0, _html_utils.toStyle)(this, "border", "font", "margin");
                    var field = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();
                    var html = {
                      name: "input",
                      attributes: {
                        type: "text",
                        fieldId: field[_xfa_object.$uid],
                        dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],
                        "class": ["xfaTextfield"],
                        style,
                        "aria-label": ariaLabel(field)
                      }
                    };
                    return _utils.HTMLResult.success({
                      name: "label",
                      attributes: {
                        "class": ["xfaLabel"]
                      },
                      children: [html]
                    });
                  }
                }]);
                return DateTimeEdit2;
              }(_xfa_object.XFAObject);
              var Decimal = /* @__PURE__ */ function(_ContentObject3) {
                _inherits(Decimal2, _ContentObject3);
                var _super29 = _createSuper(Decimal2);
                function Decimal2(attributes) {
                  var _this29;
                  _classCallCheck(this, Decimal2);
                  _this29 = _super29.call(this, TEMPLATE_NS_ID, "decimal");
                  _this29.fracDigits = (0, _utils.getInteger)({
                    data: attributes.fracDigits,
                    defaultValue: 2,
                    validate: function validate(x) {
                      return true;
                    }
                  });
                  _this29.id = attributes.id || "";
                  _this29.leadDigits = (0, _utils.getInteger)({
                    data: attributes.leadDigits,
                    defaultValue: -1,
                    validate: function validate(x) {
                      return true;
                    }
                  });
                  _this29.name = attributes.name || "";
                  _this29.use = attributes.use || "";
                  _this29.usehref = attributes.usehref || "";
                  return _this29;
                }
                _createClass(Decimal2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    var number = parseFloat(this[_xfa_object.$content].trim());
                    this[_xfa_object.$content] = isNaN(number) ? null : number;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    return valueToHtml(this[_xfa_object.$content] !== null ? this[_xfa_object.$content].toString() : "");
                  }
                }]);
                return Decimal2;
              }(_xfa_object.ContentObject);
              var DefaultUi = /* @__PURE__ */ function(_XFAObject24) {
                _inherits(DefaultUi2, _XFAObject24);
                var _super30 = _createSuper(DefaultUi2);
                function DefaultUi2(attributes) {
                  var _this30;
                  _classCallCheck(this, DefaultUi2);
                  _this30 = _super30.call(this, TEMPLATE_NS_ID, "defaultUi", true);
                  _this30.id = attributes.id || "";
                  _this30.use = attributes.use || "";
                  _this30.usehref = attributes.usehref || "";
                  _this30.extras = null;
                  return _this30;
                }
                return DefaultUi2;
              }(_xfa_object.XFAObject);
              var Desc = /* @__PURE__ */ function(_XFAObject25) {
                _inherits(Desc2, _XFAObject25);
                var _super31 = _createSuper(Desc2);
                function Desc2(attributes) {
                  var _this31;
                  _classCallCheck(this, Desc2);
                  _this31 = _super31.call(this, TEMPLATE_NS_ID, "desc", true);
                  _this31.id = attributes.id || "";
                  _this31.use = attributes.use || "";
                  _this31.usehref = attributes.usehref || "";
                  _this31["boolean"] = new _xfa_object.XFAObjectArray();
                  _this31.date = new _xfa_object.XFAObjectArray();
                  _this31.dateTime = new _xfa_object.XFAObjectArray();
                  _this31.decimal = new _xfa_object.XFAObjectArray();
                  _this31.exData = new _xfa_object.XFAObjectArray();
                  _this31["float"] = new _xfa_object.XFAObjectArray();
                  _this31.image = new _xfa_object.XFAObjectArray();
                  _this31.integer = new _xfa_object.XFAObjectArray();
                  _this31.text = new _xfa_object.XFAObjectArray();
                  _this31.time = new _xfa_object.XFAObjectArray();
                  return _this31;
                }
                return Desc2;
              }(_xfa_object.XFAObject);
              var DigestMethod = /* @__PURE__ */ function(_OptionObject) {
                _inherits(DigestMethod2, _OptionObject);
                var _super32 = _createSuper(DigestMethod2);
                function DigestMethod2(attributes) {
                  var _this32;
                  _classCallCheck(this, DigestMethod2);
                  _this32 = _super32.call(this, TEMPLATE_NS_ID, "digestMethod", ["", "SHA1", "SHA256", "SHA512", "RIPEMD160"]);
                  _this32.id = attributes.id || "";
                  _this32.use = attributes.use || "";
                  _this32.usehref = attributes.usehref || "";
                  return _this32;
                }
                return DigestMethod2;
              }(_xfa_object.OptionObject);
              var DigestMethods = /* @__PURE__ */ function(_XFAObject26) {
                _inherits(DigestMethods2, _XFAObject26);
                var _super33 = _createSuper(DigestMethods2);
                function DigestMethods2(attributes) {
                  var _this33;
                  _classCallCheck(this, DigestMethods2);
                  _this33 = _super33.call(this, TEMPLATE_NS_ID, "digestMethods", true);
                  _this33.id = attributes.id || "";
                  _this33.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this33.use = attributes.use || "";
                  _this33.usehref = attributes.usehref || "";
                  _this33.digestMethod = new _xfa_object.XFAObjectArray();
                  return _this33;
                }
                return DigestMethods2;
              }(_xfa_object.XFAObject);
              var Draw = /* @__PURE__ */ function(_XFAObject27) {
                _inherits(Draw2, _XFAObject27);
                var _super34 = _createSuper(Draw2);
                function Draw2(attributes) {
                  var _this34;
                  _classCallCheck(this, Draw2);
                  _this34 = _super34.call(this, TEMPLATE_NS_ID, "draw", true);
                  _this34.anchorType = (0, _utils.getStringOption)(attributes.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]);
                  _this34.colSpan = (0, _utils.getInteger)({
                    data: attributes.colSpan,
                    defaultValue: 1,
                    validate: function validate(n) {
                      return n >= 1 || n === -1;
                    }
                  });
                  _this34.h = attributes.h ? (0, _utils.getMeasurement)(attributes.h) : "";
                  _this34.hAlign = (0, _utils.getStringOption)(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
                  _this34.id = attributes.id || "";
                  _this34.locale = attributes.locale || "";
                  _this34.maxH = (0, _utils.getMeasurement)(attributes.maxH, "0pt");
                  _this34.maxW = (0, _utils.getMeasurement)(attributes.maxW, "0pt");
                  _this34.minH = (0, _utils.getMeasurement)(attributes.minH, "0pt");
                  _this34.minW = (0, _utils.getMeasurement)(attributes.minW, "0pt");
                  _this34.name = attributes.name || "";
                  _this34.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this34.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this34.rotate = (0, _utils.getInteger)({
                    data: attributes.rotate,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x % 90 === 0;
                    }
                  });
                  _this34.use = attributes.use || "";
                  _this34.usehref = attributes.usehref || "";
                  _this34.w = attributes.w ? (0, _utils.getMeasurement)(attributes.w) : "";
                  _this34.x = (0, _utils.getMeasurement)(attributes.x, "0pt");
                  _this34.y = (0, _utils.getMeasurement)(attributes.y, "0pt");
                  _this34.assist = null;
                  _this34.border = null;
                  _this34.caption = null;
                  _this34.desc = null;
                  _this34.extras = null;
                  _this34.font = null;
                  _this34.keep = null;
                  _this34.margin = null;
                  _this34.para = null;
                  _this34.traversal = null;
                  _this34.ui = null;
                  _this34.value = null;
                  _this34.setProperty = new _xfa_object.XFAObjectArray();
                  return _this34;
                }
                _createClass(Draw2, [{
                  key: _xfa_object.$setValue,
                  value: function(_value3) {
                    function value(_x2) {
                      return _value3.apply(this, arguments);
                    }
                    value.toString = function() {
                      return _value3.toString();
                    };
                    return value;
                  }(function(value) {
                    _setValue(this, value);
                  })
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    setTabIndex(this);
                    if (this.presence === "hidden" || this.presence === "inactive") {
                      return _utils.HTMLResult.EMPTY;
                    }
                    (0, _html_utils.fixDimensions)(this);
                    this[_xfa_object.$pushPara]();
                    var savedW = this.w;
                    var savedH = this.h;
                    var _layoutNode = (0, _html_utils.layoutNode)(this, availableSpace), w = _layoutNode.w, h = _layoutNode.h, isBroken = _layoutNode.isBroken;
                    if (w && this.w === "") {
                      if (isBroken && this[_xfa_object.$getSubformParent]()[_xfa_object.$isThereMoreWidth]()) {
                        this[_xfa_object.$popPara]();
                        return _utils.HTMLResult.FAILURE;
                      }
                      this.w = w;
                    }
                    if (h && this.h === "") {
                      this.h = h;
                    }
                    setFirstUnsplittable(this);
                    if (!(0, _layout.checkDimensions)(this, availableSpace)) {
                      this.w = savedW;
                      this.h = savedH;
                      this[_xfa_object.$popPara]();
                      return _utils.HTMLResult.FAILURE;
                    }
                    unsetFirstUnsplittable(this);
                    var style = (0, _html_utils.toStyle)(this, "font", "hAlign", "dimensions", "position", "presence", "rotate", "anchorType", "border", "margin");
                    (0, _html_utils.setMinMaxDimensions)(this, style);
                    if (style.margin) {
                      style.padding = style.margin;
                      delete style.margin;
                    }
                    var classNames = ["xfaDraw"];
                    if (this.font) {
                      classNames.push("xfaFont");
                    }
                    if ((0, _html_utils.isPrintOnly)(this)) {
                      classNames.push("xfaPrintOnly");
                    }
                    var attributes = {
                      style,
                      id: this[_xfa_object.$uid],
                      "class": classNames
                    };
                    if (this.name) {
                      attributes.xfaName = this.name;
                    }
                    var html = {
                      name: "div",
                      attributes,
                      children: []
                    };
                    applyAssist(this, attributes);
                    var bbox = (0, _html_utils.computeBbox)(this, html, availableSpace);
                    var value2 = this.value ? this.value[_xfa_object.$toHTML](availableSpace).html : null;
                    if (value2 === null) {
                      this.w = savedW;
                      this.h = savedH;
                      this[_xfa_object.$popPara]();
                      return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);
                    }
                    html.children.push(value2);
                    (0, _html_utils.setPara)(this, style, value2);
                    this.w = savedW;
                    this.h = savedH;
                    this[_xfa_object.$popPara]();
                    return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);
                  }
                }]);
                return Draw2;
              }(_xfa_object.XFAObject);
              var Edge = /* @__PURE__ */ function(_XFAObject28) {
                _inherits(Edge2, _XFAObject28);
                var _super35 = _createSuper(Edge2);
                function Edge2(attributes) {
                  var _this35;
                  _classCallCheck(this, Edge2);
                  _this35 = _super35.call(this, TEMPLATE_NS_ID, "edge", true);
                  _this35.cap = (0, _utils.getStringOption)(attributes.cap, ["square", "butt", "round"]);
                  _this35.id = attributes.id || "";
                  _this35.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this35.stroke = (0, _utils.getStringOption)(attributes.stroke, ["solid", "dashDot", "dashDotDot", "dashed", "dotted", "embossed", "etched", "lowered", "raised"]);
                  _this35.thickness = (0, _utils.getMeasurement)(attributes.thickness, "0.5pt");
                  _this35.use = attributes.use || "";
                  _this35.usehref = attributes.usehref || "";
                  _this35.color = null;
                  _this35.extras = null;
                  return _this35;
                }
                _createClass(Edge2, [{
                  key: _xfa_object.$toStyle,
                  value: function value() {
                    var style = (0, _html_utils.toStyle)(this, "visibility");
                    Object.assign(style, {
                      linecap: this.cap,
                      width: (0, _html_utils.measureToString)(this.thickness),
                      color: this.color ? this.color[_xfa_object.$toStyle]() : "#000000",
                      style: ""
                    });
                    if (this.presence !== "visible") {
                      style.style = "none";
                    } else {
                      switch (this.stroke) {
                        case "solid":
                          style.style = "solid";
                          break;
                        case "dashDot":
                          style.style = "dashed";
                          break;
                        case "dashDotDot":
                          style.style = "dashed";
                          break;
                        case "dashed":
                          style.style = "dashed";
                          break;
                        case "dotted":
                          style.style = "dotted";
                          break;
                        case "embossed":
                          style.style = "ridge";
                          break;
                        case "etched":
                          style.style = "groove";
                          break;
                        case "lowered":
                          style.style = "inset";
                          break;
                        case "raised":
                          style.style = "outset";
                          break;
                      }
                    }
                    return style;
                  }
                }]);
                return Edge2;
              }(_xfa_object.XFAObject);
              var Encoding = /* @__PURE__ */ function(_OptionObject2) {
                _inherits(Encoding2, _OptionObject2);
                var _super36 = _createSuper(Encoding2);
                function Encoding2(attributes) {
                  var _this36;
                  _classCallCheck(this, Encoding2);
                  _this36 = _super36.call(this, TEMPLATE_NS_ID, "encoding", ["adbe.x509.rsa_sha1", "adbe.pkcs7.detached", "adbe.pkcs7.sha1"]);
                  _this36.id = attributes.id || "";
                  _this36.use = attributes.use || "";
                  _this36.usehref = attributes.usehref || "";
                  return _this36;
                }
                return Encoding2;
              }(_xfa_object.OptionObject);
              var Encodings = /* @__PURE__ */ function(_XFAObject29) {
                _inherits(Encodings2, _XFAObject29);
                var _super37 = _createSuper(Encodings2);
                function Encodings2(attributes) {
                  var _this37;
                  _classCallCheck(this, Encodings2);
                  _this37 = _super37.call(this, TEMPLATE_NS_ID, "encodings", true);
                  _this37.id = attributes.id || "";
                  _this37.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this37.use = attributes.use || "";
                  _this37.usehref = attributes.usehref || "";
                  _this37.encoding = new _xfa_object.XFAObjectArray();
                  return _this37;
                }
                return Encodings2;
              }(_xfa_object.XFAObject);
              var Encrypt = /* @__PURE__ */ function(_XFAObject30) {
                _inherits(Encrypt2, _XFAObject30);
                var _super38 = _createSuper(Encrypt2);
                function Encrypt2(attributes) {
                  var _this38;
                  _classCallCheck(this, Encrypt2);
                  _this38 = _super38.call(this, TEMPLATE_NS_ID, "encrypt", true);
                  _this38.id = attributes.id || "";
                  _this38.use = attributes.use || "";
                  _this38.usehref = attributes.usehref || "";
                  _this38.certificate = null;
                  return _this38;
                }
                return Encrypt2;
              }(_xfa_object.XFAObject);
              var EncryptData = /* @__PURE__ */ function(_XFAObject31) {
                _inherits(EncryptData2, _XFAObject31);
                var _super39 = _createSuper(EncryptData2);
                function EncryptData2(attributes) {
                  var _this39;
                  _classCallCheck(this, EncryptData2);
                  _this39 = _super39.call(this, TEMPLATE_NS_ID, "encryptData", true);
                  _this39.id = attributes.id || "";
                  _this39.operation = (0, _utils.getStringOption)(attributes.operation, ["encrypt", "decrypt"]);
                  _this39.target = attributes.target || "";
                  _this39.use = attributes.use || "";
                  _this39.usehref = attributes.usehref || "";
                  _this39.filter = null;
                  _this39.manifest = null;
                  return _this39;
                }
                return EncryptData2;
              }(_xfa_object.XFAObject);
              var Encryption = /* @__PURE__ */ function(_XFAObject32) {
                _inherits(Encryption2, _XFAObject32);
                var _super40 = _createSuper(Encryption2);
                function Encryption2(attributes) {
                  var _this40;
                  _classCallCheck(this, Encryption2);
                  _this40 = _super40.call(this, TEMPLATE_NS_ID, "encryption", true);
                  _this40.id = attributes.id || "";
                  _this40.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this40.use = attributes.use || "";
                  _this40.usehref = attributes.usehref || "";
                  _this40.certificate = new _xfa_object.XFAObjectArray();
                  return _this40;
                }
                return Encryption2;
              }(_xfa_object.XFAObject);
              var EncryptionMethod = /* @__PURE__ */ function(_OptionObject3) {
                _inherits(EncryptionMethod2, _OptionObject3);
                var _super41 = _createSuper(EncryptionMethod2);
                function EncryptionMethod2(attributes) {
                  var _this41;
                  _classCallCheck(this, EncryptionMethod2);
                  _this41 = _super41.call(this, TEMPLATE_NS_ID, "encryptionMethod", ["", "AES256-CBC", "TRIPLEDES-CBC", "AES128-CBC", "AES192-CBC"]);
                  _this41.id = attributes.id || "";
                  _this41.use = attributes.use || "";
                  _this41.usehref = attributes.usehref || "";
                  return _this41;
                }
                return EncryptionMethod2;
              }(_xfa_object.OptionObject);
              var EncryptionMethods = /* @__PURE__ */ function(_XFAObject33) {
                _inherits(EncryptionMethods2, _XFAObject33);
                var _super42 = _createSuper(EncryptionMethods2);
                function EncryptionMethods2(attributes) {
                  var _this42;
                  _classCallCheck(this, EncryptionMethods2);
                  _this42 = _super42.call(this, TEMPLATE_NS_ID, "encryptionMethods", true);
                  _this42.id = attributes.id || "";
                  _this42.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this42.use = attributes.use || "";
                  _this42.usehref = attributes.usehref || "";
                  _this42.encryptionMethod = new _xfa_object.XFAObjectArray();
                  return _this42;
                }
                return EncryptionMethods2;
              }(_xfa_object.XFAObject);
              var Event = /* @__PURE__ */ function(_XFAObject34) {
                _inherits(Event2, _XFAObject34);
                var _super43 = _createSuper(Event2);
                function Event2(attributes) {
                  var _this43;
                  _classCallCheck(this, Event2);
                  _this43 = _super43.call(this, TEMPLATE_NS_ID, "event", true);
                  _this43.activity = (0, _utils.getStringOption)(attributes.activity, ["click", "change", "docClose", "docReady", "enter", "exit", "full", "indexChange", "initialize", "mouseDown", "mouseEnter", "mouseExit", "mouseUp", "postExecute", "postOpen", "postPrint", "postSave", "postSign", "postSubmit", "preExecute", "preOpen", "prePrint", "preSave", "preSign", "preSubmit", "ready", "validationState"]);
                  _this43.id = attributes.id || "";
                  _this43.listen = (0, _utils.getStringOption)(attributes.listen, ["refOnly", "refAndDescendents"]);
                  _this43.name = attributes.name || "";
                  _this43.ref = attributes.ref || "";
                  _this43.use = attributes.use || "";
                  _this43.usehref = attributes.usehref || "";
                  _this43.extras = null;
                  _this43.encryptData = null;
                  _this43.execute = null;
                  _this43.script = null;
                  _this43.signData = null;
                  _this43.submit = null;
                  return _this43;
                }
                return Event2;
              }(_xfa_object.XFAObject);
              var ExData = /* @__PURE__ */ function(_ContentObject4) {
                _inherits(ExData2, _ContentObject4);
                var _super44 = _createSuper(ExData2);
                function ExData2(attributes) {
                  var _this44;
                  _classCallCheck(this, ExData2);
                  _this44 = _super44.call(this, TEMPLATE_NS_ID, "exData");
                  _this44.contentType = attributes.contentType || "";
                  _this44.href = attributes.href || "";
                  _this44.id = attributes.id || "";
                  _this44.maxLength = (0, _utils.getInteger)({
                    data: attributes.maxLength,
                    defaultValue: -1,
                    validate: function validate(x) {
                      return x >= -1;
                    }
                  });
                  _this44.name = attributes.name || "";
                  _this44.rid = attributes.rid || "";
                  _this44.transferEncoding = (0, _utils.getStringOption)(attributes.transferEncoding, ["none", "base64", "package"]);
                  _this44.use = attributes.use || "";
                  _this44.usehref = attributes.usehref || "";
                  return _this44;
                }
                _createClass(ExData2, [{
                  key: _xfa_object.$isCDATAXml,
                  value: function value() {
                    return this.contentType === "text/html";
                  }
                }, {
                  key: _xfa_object.$onChild,
                  value: function value(child) {
                    if (this.contentType === "text/html" && child[_xfa_object.$namespaceId] === _namespaces.NamespaceIds.xhtml.id) {
                      this[_xfa_object.$content] = child;
                      return true;
                    }
                    if (this.contentType === "text/xml") {
                      this[_xfa_object.$content] = child;
                      return true;
                    }
                    return false;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    if (this.contentType !== "text/html" || !this[_xfa_object.$content]) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    return this[_xfa_object.$content][_xfa_object.$toHTML](availableSpace);
                  }
                }]);
                return ExData2;
              }(_xfa_object.ContentObject);
              var ExObject = /* @__PURE__ */ function(_XFAObject35) {
                _inherits(ExObject2, _XFAObject35);
                var _super45 = _createSuper(ExObject2);
                function ExObject2(attributes) {
                  var _this45;
                  _classCallCheck(this, ExObject2);
                  _this45 = _super45.call(this, TEMPLATE_NS_ID, "exObject", true);
                  _this45.archive = attributes.archive || "";
                  _this45.classId = attributes.classId || "";
                  _this45.codeBase = attributes.codeBase || "";
                  _this45.codeType = attributes.codeType || "";
                  _this45.id = attributes.id || "";
                  _this45.name = attributes.name || "";
                  _this45.use = attributes.use || "";
                  _this45.usehref = attributes.usehref || "";
                  _this45.extras = null;
                  _this45["boolean"] = new _xfa_object.XFAObjectArray();
                  _this45.date = new _xfa_object.XFAObjectArray();
                  _this45.dateTime = new _xfa_object.XFAObjectArray();
                  _this45.decimal = new _xfa_object.XFAObjectArray();
                  _this45.exData = new _xfa_object.XFAObjectArray();
                  _this45.exObject = new _xfa_object.XFAObjectArray();
                  _this45["float"] = new _xfa_object.XFAObjectArray();
                  _this45.image = new _xfa_object.XFAObjectArray();
                  _this45.integer = new _xfa_object.XFAObjectArray();
                  _this45.text = new _xfa_object.XFAObjectArray();
                  _this45.time = new _xfa_object.XFAObjectArray();
                  return _this45;
                }
                return ExObject2;
              }(_xfa_object.XFAObject);
              var ExclGroup = /* @__PURE__ */ function(_XFAObject36) {
                _inherits(ExclGroup2, _XFAObject36);
                var _super46 = _createSuper(ExclGroup2);
                function ExclGroup2(attributes) {
                  var _this46;
                  _classCallCheck(this, ExclGroup2);
                  _this46 = _super46.call(this, TEMPLATE_NS_ID, "exclGroup", true);
                  _this46.access = (0, _utils.getStringOption)(attributes.access, ["open", "nonInteractive", "protected", "readOnly"]);
                  _this46.accessKey = attributes.accessKey || "";
                  _this46.anchorType = (0, _utils.getStringOption)(attributes.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]);
                  _this46.colSpan = (0, _utils.getInteger)({
                    data: attributes.colSpan,
                    defaultValue: 1,
                    validate: function validate(n) {
                      return n >= 1 || n === -1;
                    }
                  });
                  _this46.h = attributes.h ? (0, _utils.getMeasurement)(attributes.h) : "";
                  _this46.hAlign = (0, _utils.getStringOption)(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
                  _this46.id = attributes.id || "";
                  _this46.layout = (0, _utils.getStringOption)(attributes.layout, ["position", "lr-tb", "rl-row", "rl-tb", "row", "table", "tb"]);
                  _this46.maxH = (0, _utils.getMeasurement)(attributes.maxH, "0pt");
                  _this46.maxW = (0, _utils.getMeasurement)(attributes.maxW, "0pt");
                  _this46.minH = (0, _utils.getMeasurement)(attributes.minH, "0pt");
                  _this46.minW = (0, _utils.getMeasurement)(attributes.minW, "0pt");
                  _this46.name = attributes.name || "";
                  _this46.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this46.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this46.use = attributes.use || "";
                  _this46.usehref = attributes.usehref || "";
                  _this46.w = attributes.w ? (0, _utils.getMeasurement)(attributes.w) : "";
                  _this46.x = (0, _utils.getMeasurement)(attributes.x, "0pt");
                  _this46.y = (0, _utils.getMeasurement)(attributes.y, "0pt");
                  _this46.assist = null;
                  _this46.bind = null;
                  _this46.border = null;
                  _this46.calculate = null;
                  _this46.caption = null;
                  _this46.desc = null;
                  _this46.extras = null;
                  _this46.margin = null;
                  _this46.para = null;
                  _this46.traversal = null;
                  _this46.validate = null;
                  _this46.connect = new _xfa_object.XFAObjectArray();
                  _this46.event = new _xfa_object.XFAObjectArray();
                  _this46.field = new _xfa_object.XFAObjectArray();
                  _this46.setProperty = new _xfa_object.XFAObjectArray();
                  return _this46;
                }
                _createClass(ExclGroup2, [{
                  key: _xfa_object.$isBindable,
                  value: function value() {
                    return true;
                  }
                }, {
                  key: _xfa_object.$hasSettableValue,
                  value: function value() {
                    return true;
                  }
                }, {
                  key: _xfa_object.$setValue,
                  value: function(_value4) {
                    function value(_x3) {
                      return _value4.apply(this, arguments);
                    }
                    value.toString = function() {
                      return _value4.toString();
                    };
                    return value;
                  }(function(value) {
                    var _iterator4 = _createForOfIteratorHelper(this.field.children), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var field = _step4.value;
                        if (!field.value) {
                          var nodeValue = new Value({});
                          field[_xfa_object.$appendChild](nodeValue);
                          field.value = nodeValue;
                        }
                        field.value[_xfa_object.$setValue](value);
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                  })
                }, {
                  key: _xfa_object.$isThereMoreWidth,
                  value: function value() {
                    return this.layout.endsWith("-tb") && this[_xfa_object.$extra].attempt === 0 && this[_xfa_object.$extra].numberInLine > 0 || this[_xfa_object.$getParent]()[_xfa_object.$isThereMoreWidth]();
                  }
                }, {
                  key: _xfa_object.$isSplittable,
                  value: function value() {
                    var parent = this[_xfa_object.$getSubformParent]();
                    if (!parent[_xfa_object.$isSplittable]()) {
                      return false;
                    }
                    if (this[_xfa_object.$extra]._isSplittable !== void 0) {
                      return this[_xfa_object.$extra]._isSplittable;
                    }
                    if (this.layout === "position" || this.layout.includes("row")) {
                      this[_xfa_object.$extra]._isSplittable = false;
                      return false;
                    }
                    if (parent.layout && parent.layout.endsWith("-tb") && parent[_xfa_object.$extra].numberInLine !== 0) {
                      return false;
                    }
                    this[_xfa_object.$extra]._isSplittable = true;
                    return true;
                  }
                }, {
                  key: _xfa_object.$flushHTML,
                  value: function value() {
                    return (0, _layout.flushHTML)(this);
                  }
                }, {
                  key: _xfa_object.$addHTML,
                  value: function value(html, bbox) {
                    (0, _layout.addHTML)(this, html, bbox);
                  }
                }, {
                  key: _xfa_object.$getAvailableSpace,
                  value: function value() {
                    return (0, _layout.getAvailableSpace)(this);
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    setTabIndex(this);
                    if (this.presence === "hidden" || this.presence === "inactive" || this.h === 0 || this.w === 0) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    (0, _html_utils.fixDimensions)(this);
                    var children = [];
                    var attributes = {
                      id: this[_xfa_object.$uid],
                      "class": []
                    };
                    (0, _html_utils.setAccess)(this, attributes["class"]);
                    if (!this[_xfa_object.$extra]) {
                      this[_xfa_object.$extra] = /* @__PURE__ */ Object.create(null);
                    }
                    Object.assign(this[_xfa_object.$extra], {
                      children,
                      attributes,
                      attempt: 0,
                      line: null,
                      numberInLine: 0,
                      availableSpace: {
                        width: Math.min(this.w || Infinity, availableSpace.width),
                        height: Math.min(this.h || Infinity, availableSpace.height)
                      },
                      width: 0,
                      height: 0,
                      prevHeight: 0,
                      currentWidth: 0
                    });
                    var isSplittable = this[_xfa_object.$isSplittable]();
                    if (!isSplittable) {
                      setFirstUnsplittable(this);
                    }
                    if (!(0, _layout.checkDimensions)(this, availableSpace)) {
                      return _utils.HTMLResult.FAILURE;
                    }
                    var filter = /* @__PURE__ */ new Set(["field"]);
                    if (this.layout.includes("row")) {
                      var columnWidths = this[_xfa_object.$getSubformParent]().columnWidths;
                      if (Array.isArray(columnWidths) && columnWidths.length > 0) {
                        this[_xfa_object.$extra].columnWidths = columnWidths;
                        this[_xfa_object.$extra].currentColumn = 0;
                      }
                    }
                    var style = (0, _html_utils.toStyle)(this, "anchorType", "dimensions", "position", "presence", "border", "margin", "hAlign");
                    var classNames = ["xfaExclgroup"];
                    var cl = (0, _html_utils.layoutClass)(this);
                    if (cl) {
                      classNames.push(cl);
                    }
                    if ((0, _html_utils.isPrintOnly)(this)) {
                      classNames.push("xfaPrintOnly");
                    }
                    attributes.style = style;
                    attributes["class"] = classNames;
                    if (this.name) {
                      attributes.xfaName = this.name;
                    }
                    this[_xfa_object.$pushPara]();
                    var isLrTb = this.layout === "lr-tb" || this.layout === "rl-tb";
                    var maxRun = isLrTb ? MAX_ATTEMPTS_FOR_LRTB_LAYOUT : 1;
                    for (; this[_xfa_object.$extra].attempt < maxRun; this[_xfa_object.$extra].attempt++) {
                      if (isLrTb && this[_xfa_object.$extra].attempt === MAX_ATTEMPTS_FOR_LRTB_LAYOUT - 1) {
                        this[_xfa_object.$extra].numberInLine = 0;
                      }
                      var result = this[_xfa_object.$childrenToHTML]({
                        filter,
                        include: true
                      });
                      if (result.success) {
                        break;
                      }
                      if (result.isBreak()) {
                        this[_xfa_object.$popPara]();
                        return result;
                      }
                      if (isLrTb && this[_xfa_object.$extra].attempt === 0 && this[_xfa_object.$extra].numberInLine === 0 && !this[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {
                        this[_xfa_object.$extra].attempt = maxRun;
                        break;
                      }
                    }
                    this[_xfa_object.$popPara]();
                    if (!isSplittable) {
                      unsetFirstUnsplittable(this);
                    }
                    if (this[_xfa_object.$extra].attempt === maxRun) {
                      if (!isSplittable) {
                        delete this[_xfa_object.$extra];
                      }
                      return _utils.HTMLResult.FAILURE;
                    }
                    var marginH = 0;
                    var marginV = 0;
                    if (this.margin) {
                      marginH = this.margin.leftInset + this.margin.rightInset;
                      marginV = this.margin.topInset + this.margin.bottomInset;
                    }
                    var width = Math.max(this[_xfa_object.$extra].width + marginH, this.w || 0);
                    var height = Math.max(this[_xfa_object.$extra].height + marginV, this.h || 0);
                    var bbox = [this.x, this.y, width, height];
                    if (this.w === "") {
                      style.width = (0, _html_utils.measureToString)(width);
                    }
                    if (this.h === "") {
                      style.height = (0, _html_utils.measureToString)(height);
                    }
                    var html = {
                      name: "div",
                      attributes,
                      children
                    };
                    applyAssist(this, attributes);
                    delete this[_xfa_object.$extra];
                    return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);
                  }
                }]);
                return ExclGroup2;
              }(_xfa_object.XFAObject);
              var Execute = /* @__PURE__ */ function(_XFAObject37) {
                _inherits(Execute2, _XFAObject37);
                var _super47 = _createSuper(Execute2);
                function Execute2(attributes) {
                  var _this47;
                  _classCallCheck(this, Execute2);
                  _this47 = _super47.call(this, TEMPLATE_NS_ID, "execute");
                  _this47.connection = attributes.connection || "";
                  _this47.executeType = (0, _utils.getStringOption)(attributes.executeType, ["import", "remerge"]);
                  _this47.id = attributes.id || "";
                  _this47.runAt = (0, _utils.getStringOption)(attributes.runAt, ["client", "both", "server"]);
                  _this47.use = attributes.use || "";
                  _this47.usehref = attributes.usehref || "";
                  return _this47;
                }
                return Execute2;
              }(_xfa_object.XFAObject);
              var Extras = /* @__PURE__ */ function(_XFAObject38) {
                _inherits(Extras2, _XFAObject38);
                var _super48 = _createSuper(Extras2);
                function Extras2(attributes) {
                  var _this48;
                  _classCallCheck(this, Extras2);
                  _this48 = _super48.call(this, TEMPLATE_NS_ID, "extras", true);
                  _this48.id = attributes.id || "";
                  _this48.name = attributes.name || "";
                  _this48.use = attributes.use || "";
                  _this48.usehref = attributes.usehref || "";
                  _this48["boolean"] = new _xfa_object.XFAObjectArray();
                  _this48.date = new _xfa_object.XFAObjectArray();
                  _this48.dateTime = new _xfa_object.XFAObjectArray();
                  _this48.decimal = new _xfa_object.XFAObjectArray();
                  _this48.exData = new _xfa_object.XFAObjectArray();
                  _this48.extras = new _xfa_object.XFAObjectArray();
                  _this48["float"] = new _xfa_object.XFAObjectArray();
                  _this48.image = new _xfa_object.XFAObjectArray();
                  _this48.integer = new _xfa_object.XFAObjectArray();
                  _this48.text = new _xfa_object.XFAObjectArray();
                  _this48.time = new _xfa_object.XFAObjectArray();
                  return _this48;
                }
                return Extras2;
              }(_xfa_object.XFAObject);
              var Field = /* @__PURE__ */ function(_XFAObject39) {
                _inherits(Field2, _XFAObject39);
                var _super49 = _createSuper(Field2);
                function Field2(attributes) {
                  var _this49;
                  _classCallCheck(this, Field2);
                  _this49 = _super49.call(this, TEMPLATE_NS_ID, "field", true);
                  _this49.access = (0, _utils.getStringOption)(attributes.access, ["open", "nonInteractive", "protected", "readOnly"]);
                  _this49.accessKey = attributes.accessKey || "";
                  _this49.anchorType = (0, _utils.getStringOption)(attributes.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]);
                  _this49.colSpan = (0, _utils.getInteger)({
                    data: attributes.colSpan,
                    defaultValue: 1,
                    validate: function validate(n) {
                      return n >= 1 || n === -1;
                    }
                  });
                  _this49.h = attributes.h ? (0, _utils.getMeasurement)(attributes.h) : "";
                  _this49.hAlign = (0, _utils.getStringOption)(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
                  _this49.id = attributes.id || "";
                  _this49.locale = attributes.locale || "";
                  _this49.maxH = (0, _utils.getMeasurement)(attributes.maxH, "0pt");
                  _this49.maxW = (0, _utils.getMeasurement)(attributes.maxW, "0pt");
                  _this49.minH = (0, _utils.getMeasurement)(attributes.minH, "0pt");
                  _this49.minW = (0, _utils.getMeasurement)(attributes.minW, "0pt");
                  _this49.name = attributes.name || "";
                  _this49.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this49.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this49.rotate = (0, _utils.getInteger)({
                    data: attributes.rotate,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x % 90 === 0;
                    }
                  });
                  _this49.use = attributes.use || "";
                  _this49.usehref = attributes.usehref || "";
                  _this49.w = attributes.w ? (0, _utils.getMeasurement)(attributes.w) : "";
                  _this49.x = (0, _utils.getMeasurement)(attributes.x, "0pt");
                  _this49.y = (0, _utils.getMeasurement)(attributes.y, "0pt");
                  _this49.assist = null;
                  _this49.bind = null;
                  _this49.border = null;
                  _this49.calculate = null;
                  _this49.caption = null;
                  _this49.desc = null;
                  _this49.extras = null;
                  _this49.font = null;
                  _this49.format = null;
                  _this49.items = new _xfa_object.XFAObjectArray(2);
                  _this49.keep = null;
                  _this49.margin = null;
                  _this49.para = null;
                  _this49.traversal = null;
                  _this49.ui = null;
                  _this49.validate = null;
                  _this49.value = null;
                  _this49.bindItems = new _xfa_object.XFAObjectArray();
                  _this49.connect = new _xfa_object.XFAObjectArray();
                  _this49.event = new _xfa_object.XFAObjectArray();
                  _this49.setProperty = new _xfa_object.XFAObjectArray();
                  return _this49;
                }
                _createClass(Field2, [{
                  key: _xfa_object.$isBindable,
                  value: function value() {
                    return true;
                  }
                }, {
                  key: _xfa_object.$setValue,
                  value: function(_value5) {
                    function value(_x4) {
                      return _value5.apply(this, arguments);
                    }
                    value.toString = function() {
                      return _value5.toString();
                    };
                    return value;
                  }(function(value) {
                    _setValue(this, value);
                  })
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    setTabIndex(this);
                    if (!this.ui) {
                      this.ui = new Ui({});
                      this.ui[_xfa_object.$globalData] = this[_xfa_object.$globalData];
                      this[_xfa_object.$appendChild](this.ui);
                      var node;
                      switch (this.items.children.length) {
                        case 0:
                          node = new TextEdit({});
                          this.ui.textEdit = node;
                          break;
                        case 1:
                          node = new CheckButton({});
                          this.ui.checkButton = node;
                          break;
                        case 2:
                          node = new ChoiceList({});
                          this.ui.choiceList = node;
                          break;
                      }
                      this.ui[_xfa_object.$appendChild](node);
                    }
                    if (!this.ui || this.presence === "hidden" || this.presence === "inactive" || this.h === 0 || this.w === 0) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    if (this.caption) {
                      delete this.caption[_xfa_object.$extra];
                    }
                    this[_xfa_object.$pushPara]();
                    var caption = this.caption ? this.caption[_xfa_object.$toHTML](availableSpace).html : null;
                    var savedW = this.w;
                    var savedH = this.h;
                    var marginH = 0;
                    var marginV = 0;
                    if (this.margin) {
                      marginH = this.margin.leftInset + this.margin.rightInset;
                      marginV = this.margin.topInset + this.margin.bottomInset;
                    }
                    var borderDims = null;
                    if (this.w === "" || this.h === "") {
                      var width = null;
                      var height = null;
                      var uiW = 0;
                      var uiH = 0;
                      if (this.ui.checkButton) {
                        uiW = uiH = this.ui.checkButton.size;
                      } else {
                        var _layoutNode2 = (0, _html_utils.layoutNode)(this, availableSpace), w = _layoutNode2.w, h = _layoutNode2.h;
                        if (w !== null) {
                          uiW = w;
                          uiH = h;
                        } else {
                          uiH = (0, _fonts.getMetrics)(this.font, true).lineNoGap;
                        }
                      }
                      borderDims = getBorderDims(this.ui[_xfa_object.$getExtra]());
                      uiW += borderDims.w;
                      uiH += borderDims.h;
                      if (this.caption) {
                        var _this$caption$$getExt = this.caption[_xfa_object.$getExtra](availableSpace), _w = _this$caption$$getExt.w, _h = _this$caption$$getExt.h, isBroken = _this$caption$$getExt.isBroken;
                        if (isBroken && this[_xfa_object.$getSubformParent]()[_xfa_object.$isThereMoreWidth]()) {
                          this[_xfa_object.$popPara]();
                          return _utils.HTMLResult.FAILURE;
                        }
                        width = _w;
                        height = _h;
                        switch (this.caption.placement) {
                          case "left":
                          case "right":
                          case "inline":
                            width += uiW;
                            break;
                          case "top":
                          case "bottom":
                            height += uiH;
                            break;
                        }
                      } else {
                        width = uiW;
                        height = uiH;
                      }
                      if (width && this.w === "") {
                        width += marginH;
                        this.w = Math.min(this.maxW <= 0 ? Infinity : this.maxW, this.minW + 1 < width ? width : this.minW);
                      }
                      if (height && this.h === "") {
                        height += marginV;
                        this.h = Math.min(this.maxH <= 0 ? Infinity : this.maxH, this.minH + 1 < height ? height : this.minH);
                      }
                    }
                    this[_xfa_object.$popPara]();
                    (0, _html_utils.fixDimensions)(this);
                    setFirstUnsplittable(this);
                    if (!(0, _layout.checkDimensions)(this, availableSpace)) {
                      this.w = savedW;
                      this.h = savedH;
                      this[_xfa_object.$popPara]();
                      return _utils.HTMLResult.FAILURE;
                    }
                    unsetFirstUnsplittable(this);
                    var style = (0, _html_utils.toStyle)(this, "font", "dimensions", "position", "rotate", "anchorType", "presence", "margin", "hAlign");
                    (0, _html_utils.setMinMaxDimensions)(this, style);
                    var classNames = ["xfaField"];
                    if (this.font) {
                      classNames.push("xfaFont");
                    }
                    if ((0, _html_utils.isPrintOnly)(this)) {
                      classNames.push("xfaPrintOnly");
                    }
                    var attributes = {
                      style,
                      id: this[_xfa_object.$uid],
                      "class": classNames
                    };
                    if (style.margin) {
                      style.padding = style.margin;
                      delete style.margin;
                    }
                    (0, _html_utils.setAccess)(this, classNames);
                    if (this.name) {
                      attributes.xfaName = this.name;
                    }
                    var children = [];
                    var html = {
                      name: "div",
                      attributes,
                      children
                    };
                    applyAssist(this, attributes);
                    var borderStyle = this.border ? this.border[_xfa_object.$toStyle]() : null;
                    var bbox = (0, _html_utils.computeBbox)(this, html, availableSpace);
                    var ui = this.ui[_xfa_object.$toHTML]().html;
                    if (!ui) {
                      Object.assign(style, borderStyle);
                      return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);
                    }
                    if (this[_xfa_object.$tabIndex]) {
                      if (ui.children && ui.children[0]) {
                        ui.children[0].attributes.tabindex = this[_xfa_object.$tabIndex];
                      } else {
                        ui.attributes.tabindex = this[_xfa_object.$tabIndex];
                      }
                    }
                    if (!ui.attributes.style) {
                      ui.attributes.style = /* @__PURE__ */ Object.create(null);
                    }
                    var aElement = null;
                    if (this.ui.button) {
                      if (ui.children.length === 1) {
                        var _ui$children$splice = ui.children.splice(0, 1);
                        var _ui$children$splice2 = _slicedToArray(_ui$children$splice, 1);
                        aElement = _ui$children$splice2[0];
                      }
                      Object.assign(ui.attributes.style, borderStyle);
                    } else {
                      Object.assign(style, borderStyle);
                    }
                    children.push(ui);
                    if (this.value) {
                      if (this.ui.imageEdit) {
                        ui.children.push(this.value[_xfa_object.$toHTML]().html);
                      } else if (!this.ui.button) {
                        var _value6 = "";
                        if (this.value.exData) {
                          _value6 = this.value.exData[_xfa_object.$text]();
                        } else if (this.value.text) {
                          _value6 = this.value.text[_xfa_object.$getExtra]();
                        } else {
                          var htmlValue = this.value[_xfa_object.$toHTML]().html;
                          if (htmlValue !== null) {
                            _value6 = htmlValue.children[0].value;
                          }
                        }
                        if (this.ui.textEdit && this.value.text && this.value.text.maxChars) {
                          ui.children[0].attributes.maxLength = this.value.text.maxChars;
                        }
                        if (_value6) {
                          if (this.ui.numericEdit) {
                            _value6 = parseFloat(_value6);
                            _value6 = isNaN(_value6) ? "" : _value6.toString();
                          }
                          if (ui.children[0].name === "textarea") {
                            ui.children[0].attributes.textContent = _value6;
                          } else {
                            ui.children[0].attributes.value = _value6;
                          }
                        }
                      }
                    }
                    if (!this.ui.imageEdit && ui.children && ui.children[0] && this.h) {
                      borderDims = borderDims || getBorderDims(this.ui[_xfa_object.$getExtra]());
                      var captionHeight = 0;
                      if (this.caption && ["top", "bottom"].includes(this.caption.placement)) {
                        captionHeight = this.caption.reserve;
                        if (captionHeight <= 0) {
                          captionHeight = this.caption[_xfa_object.$getExtra](availableSpace).h;
                        }
                        var inputHeight = this.h - captionHeight - marginV - borderDims.h;
                        ui.children[0].attributes.style.height = (0, _html_utils.measureToString)(inputHeight);
                      } else {
                        ui.children[0].attributes.style.height = "100%";
                      }
                    }
                    if (aElement) {
                      ui.children.push(aElement);
                    }
                    if (!caption) {
                      if (ui.attributes["class"]) {
                        ui.attributes["class"].push("xfaLeft");
                      }
                      this.w = savedW;
                      this.h = savedH;
                      return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);
                    }
                    if (this.ui.button) {
                      if (style.padding) {
                        delete style.padding;
                      }
                      if (caption.name === "div") {
                        caption.name = "span";
                      }
                      ui.children.push(caption);
                      return _utils.HTMLResult.success(html, bbox);
                    } else if (this.ui.checkButton) {
                      caption.attributes["class"][0] = "xfaCaptionForCheckButton";
                    }
                    if (!ui.attributes["class"]) {
                      ui.attributes["class"] = [];
                    }
                    ui.children.splice(0, 0, caption);
                    switch (this.caption.placement) {
                      case "left":
                        ui.attributes["class"].push("xfaLeft");
                        break;
                      case "right":
                        ui.attributes["class"].push("xfaRight");
                        break;
                      case "top":
                        ui.attributes["class"].push("xfaTop");
                        break;
                      case "bottom":
                        ui.attributes["class"].push("xfaBottom");
                        break;
                      case "inline":
                        ui.attributes["class"].push("xfaLeft");
                        break;
                    }
                    this.w = savedW;
                    this.h = savedH;
                    return _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);
                  }
                }]);
                return Field2;
              }(_xfa_object.XFAObject);
              exports2.Field = Field;
              var Fill = /* @__PURE__ */ function(_XFAObject40) {
                _inherits(Fill2, _XFAObject40);
                var _super50 = _createSuper(Fill2);
                function Fill2(attributes) {
                  var _this50;
                  _classCallCheck(this, Fill2);
                  _this50 = _super50.call(this, TEMPLATE_NS_ID, "fill", true);
                  _this50.id = attributes.id || "";
                  _this50.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this50.use = attributes.use || "";
                  _this50.usehref = attributes.usehref || "";
                  _this50.color = null;
                  _this50.extras = null;
                  _this50.linear = null;
                  _this50.pattern = null;
                  _this50.radial = null;
                  _this50.solid = null;
                  _this50.stipple = null;
                  return _this50;
                }
                _createClass(Fill2, [{
                  key: _xfa_object.$toStyle,
                  value: function value() {
                    var parent = this[_xfa_object.$getParent]();
                    var grandpa = parent[_xfa_object.$getParent]();
                    var ggrandpa = grandpa[_xfa_object.$getParent]();
                    var style = /* @__PURE__ */ Object.create(null);
                    var propName = "color";
                    var altPropName = propName;
                    if (parent instanceof Border) {
                      propName = "background-color";
                      altPropName = "background";
                      if (ggrandpa instanceof Ui) {
                        style.backgroundColor = "white";
                      }
                    }
                    if (parent instanceof Rectangle || parent instanceof Arc) {
                      propName = altPropName = "fill";
                      style.fill = "white";
                    }
                    var _iterator5 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)), _step5;
                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                        var name = _step5.value;
                        if (name === "extras" || name === "color") {
                          continue;
                        }
                        var obj = this[name];
                        if (!(obj instanceof _xfa_object.XFAObject)) {
                          continue;
                        }
                        var _color = obj[_xfa_object.$toStyle](this.color);
                        if (_color) {
                          style[_color.startsWith("#") ? propName : altPropName] = _color;
                        }
                        return style;
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                    if (this.color && this.color.value) {
                      var color = this.color[_xfa_object.$toStyle]();
                      style[color.startsWith("#") ? propName : altPropName] = color;
                    }
                    return style;
                  }
                }]);
                return Fill2;
              }(_xfa_object.XFAObject);
              var Filter = /* @__PURE__ */ function(_XFAObject41) {
                _inherits(Filter2, _XFAObject41);
                var _super51 = _createSuper(Filter2);
                function Filter2(attributes) {
                  var _this51;
                  _classCallCheck(this, Filter2);
                  _this51 = _super51.call(this, TEMPLATE_NS_ID, "filter", true);
                  _this51.addRevocationInfo = (0, _utils.getStringOption)(attributes.addRevocationInfo, ["", "required", "optional", "none"]);
                  _this51.id = attributes.id || "";
                  _this51.name = attributes.name || "";
                  _this51.use = attributes.use || "";
                  _this51.usehref = attributes.usehref || "";
                  _this51.version = (0, _utils.getInteger)({
                    data: _this51.version,
                    defaultValue: 5,
                    validate: function validate(x) {
                      return x >= 1 && x <= 5;
                    }
                  });
                  _this51.appearanceFilter = null;
                  _this51.certificates = null;
                  _this51.digestMethods = null;
                  _this51.encodings = null;
                  _this51.encryptionMethods = null;
                  _this51.handler = null;
                  _this51.lockDocument = null;
                  _this51.mdp = null;
                  _this51.reasons = null;
                  _this51.timeStamp = null;
                  return _this51;
                }
                return Filter2;
              }(_xfa_object.XFAObject);
              var Float = /* @__PURE__ */ function(_ContentObject5) {
                _inherits(Float2, _ContentObject5);
                var _super52 = _createSuper(Float2);
                function Float2(attributes) {
                  var _this52;
                  _classCallCheck(this, Float2);
                  _this52 = _super52.call(this, TEMPLATE_NS_ID, "float");
                  _this52.id = attributes.id || "";
                  _this52.name = attributes.name || "";
                  _this52.use = attributes.use || "";
                  _this52.usehref = attributes.usehref || "";
                  return _this52;
                }
                _createClass(Float2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    var number = parseFloat(this[_xfa_object.$content].trim());
                    this[_xfa_object.$content] = isNaN(number) ? null : number;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    return valueToHtml(this[_xfa_object.$content] !== null ? this[_xfa_object.$content].toString() : "");
                  }
                }]);
                return Float2;
              }(_xfa_object.ContentObject);
              var Font = /* @__PURE__ */ function(_XFAObject42) {
                _inherits(Font2, _XFAObject42);
                var _super53 = _createSuper(Font2);
                function Font2(attributes) {
                  var _this53;
                  _classCallCheck(this, Font2);
                  _this53 = _super53.call(this, TEMPLATE_NS_ID, "font", true);
                  _this53.baselineShift = (0, _utils.getMeasurement)(attributes.baselineShift);
                  _this53.fontHorizontalScale = (0, _utils.getFloat)({
                    data: attributes.fontHorizontalScale,
                    defaultValue: 100,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this53.fontVerticalScale = (0, _utils.getFloat)({
                    data: attributes.fontVerticalScale,
                    defaultValue: 100,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this53.id = attributes.id || "";
                  _this53.kerningMode = (0, _utils.getStringOption)(attributes.kerningMode, ["none", "pair"]);
                  _this53.letterSpacing = (0, _utils.getMeasurement)(attributes.letterSpacing, "0");
                  _this53.lineThrough = (0, _utils.getInteger)({
                    data: attributes.lineThrough,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1 || x === 2;
                    }
                  });
                  _this53.lineThroughPeriod = (0, _utils.getStringOption)(attributes.lineThroughPeriod, ["all", "word"]);
                  _this53.overline = (0, _utils.getInteger)({
                    data: attributes.overline,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1 || x === 2;
                    }
                  });
                  _this53.overlinePeriod = (0, _utils.getStringOption)(attributes.overlinePeriod, ["all", "word"]);
                  _this53.posture = (0, _utils.getStringOption)(attributes.posture, ["normal", "italic"]);
                  _this53.size = (0, _utils.getMeasurement)(attributes.size, "10pt");
                  _this53.typeface = attributes.typeface || "Courier";
                  _this53.underline = (0, _utils.getInteger)({
                    data: attributes.underline,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1 || x === 2;
                    }
                  });
                  _this53.underlinePeriod = (0, _utils.getStringOption)(attributes.underlinePeriod, ["all", "word"]);
                  _this53.use = attributes.use || "";
                  _this53.usehref = attributes.usehref || "";
                  _this53.weight = (0, _utils.getStringOption)(attributes.weight, ["normal", "bold"]);
                  _this53.extras = null;
                  _this53.fill = null;
                  return _this53;
                }
                _createClass(Font2, [{
                  key: _xfa_object.$clean,
                  value: function value(builder) {
                    _get(_getPrototypeOf(Font2.prototype), _xfa_object.$clean, this).call(this, builder);
                    this[_xfa_object.$globalData].usedTypefaces.add(this.typeface);
                  }
                }, {
                  key: _xfa_object.$toStyle,
                  value: function value() {
                    var style = (0, _html_utils.toStyle)(this, "fill");
                    var color = style.color;
                    if (color) {
                      if (color === "#000000") {
                        delete style.color;
                      } else if (!color.startsWith("#")) {
                        style.background = color;
                        style.backgroundClip = "text";
                        style.color = "transparent";
                      }
                    }
                    if (this.baselineShift) {
                      style.verticalAlign = (0, _html_utils.measureToString)(this.baselineShift);
                    }
                    style.fontKerning = this.kerningMode === "none" ? "none" : "normal";
                    style.letterSpacing = (0, _html_utils.measureToString)(this.letterSpacing);
                    if (this.lineThrough !== 0) {
                      style.textDecoration = "line-through";
                      if (this.lineThrough === 2) {
                        style.textDecorationStyle = "double";
                      }
                    }
                    if (this.overline !== 0) {
                      style.textDecoration = "overline";
                      if (this.overline === 2) {
                        style.textDecorationStyle = "double";
                      }
                    }
                    style.fontStyle = this.posture;
                    style.fontSize = (0, _html_utils.measureToString)(0.99 * this.size);
                    (0, _html_utils.setFontFamily)(this, this, this[_xfa_object.$globalData].fontFinder, style);
                    if (this.underline !== 0) {
                      style.textDecoration = "underline";
                      if (this.underline === 2) {
                        style.textDecorationStyle = "double";
                      }
                    }
                    style.fontWeight = this.weight;
                    return style;
                  }
                }]);
                return Font2;
              }(_xfa_object.XFAObject);
              var Format = /* @__PURE__ */ function(_XFAObject43) {
                _inherits(Format2, _XFAObject43);
                var _super54 = _createSuper(Format2);
                function Format2(attributes) {
                  var _this54;
                  _classCallCheck(this, Format2);
                  _this54 = _super54.call(this, TEMPLATE_NS_ID, "format", true);
                  _this54.id = attributes.id || "";
                  _this54.use = attributes.use || "";
                  _this54.usehref = attributes.usehref || "";
                  _this54.extras = null;
                  _this54.picture = null;
                  return _this54;
                }
                return Format2;
              }(_xfa_object.XFAObject);
              var Handler = /* @__PURE__ */ function(_StringObject3) {
                _inherits(Handler2, _StringObject3);
                var _super55 = _createSuper(Handler2);
                function Handler2(attributes) {
                  var _this55;
                  _classCallCheck(this, Handler2);
                  _this55 = _super55.call(this, TEMPLATE_NS_ID, "handler");
                  _this55.id = attributes.id || "";
                  _this55.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this55.use = attributes.use || "";
                  _this55.usehref = attributes.usehref || "";
                  return _this55;
                }
                return Handler2;
              }(_xfa_object.StringObject);
              var Hyphenation = /* @__PURE__ */ function(_XFAObject44) {
                _inherits(Hyphenation2, _XFAObject44);
                var _super56 = _createSuper(Hyphenation2);
                function Hyphenation2(attributes) {
                  var _this56;
                  _classCallCheck(this, Hyphenation2);
                  _this56 = _super56.call(this, TEMPLATE_NS_ID, "hyphenation");
                  _this56.excludeAllCaps = (0, _utils.getInteger)({
                    data: attributes.excludeAllCaps,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this56.excludeInitialCap = (0, _utils.getInteger)({
                    data: attributes.excludeInitialCap,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this56.hyphenate = (0, _utils.getInteger)({
                    data: attributes.hyphenate,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this56.id = attributes.id || "";
                  _this56.pushCharacterCount = (0, _utils.getInteger)({
                    data: attributes.pushCharacterCount,
                    defaultValue: 3,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this56.remainCharacterCount = (0, _utils.getInteger)({
                    data: attributes.remainCharacterCount,
                    defaultValue: 3,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this56.use = attributes.use || "";
                  _this56.usehref = attributes.usehref || "";
                  _this56.wordCharacterCount = (0, _utils.getInteger)({
                    data: attributes.wordCharacterCount,
                    defaultValue: 7,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  return _this56;
                }
                return Hyphenation2;
              }(_xfa_object.XFAObject);
              var Image = /* @__PURE__ */ function(_StringObject4) {
                _inherits(Image2, _StringObject4);
                var _super57 = _createSuper(Image2);
                function Image2(attributes) {
                  var _this57;
                  _classCallCheck(this, Image2);
                  _this57 = _super57.call(this, TEMPLATE_NS_ID, "image");
                  _this57.aspect = (0, _utils.getStringOption)(attributes.aspect, ["fit", "actual", "height", "none", "width"]);
                  _this57.contentType = attributes.contentType || "";
                  _this57.href = attributes.href || "";
                  _this57.id = attributes.id || "";
                  _this57.name = attributes.name || "";
                  _this57.transferEncoding = (0, _utils.getStringOption)(attributes.transferEncoding, ["base64", "none", "package"]);
                  _this57.use = attributes.use || "";
                  _this57.usehref = attributes.usehref || "";
                  return _this57;
                }
                _createClass(Image2, [{
                  key: _xfa_object.$toHTML,
                  value: function value() {
                    if (this.contentType && !MIMES.has(this.contentType.toLowerCase())) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    var buffer = this[_xfa_object.$globalData].images && this[_xfa_object.$globalData].images.get(this.href);
                    if (!buffer && (this.href || !this[_xfa_object.$content])) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    if (!buffer && this.transferEncoding === "base64") {
                      buffer = (0, _util.stringToBytes)(atob(this[_xfa_object.$content]));
                    }
                    if (!buffer) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    if (!this.contentType) {
                      var _iterator6 = _createForOfIteratorHelper(IMAGES_HEADERS), _step6;
                      try {
                        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                          var _step6$value = _slicedToArray(_step6.value, 2), header = _step6$value[0], type = _step6$value[1];
                          if (buffer.length > header.length && header.every(function(x, i) {
                            return x === buffer[i];
                          })) {
                            this.contentType = type;
                            break;
                          }
                        }
                      } catch (err) {
                        _iterator6.e(err);
                      } finally {
                        _iterator6.f();
                      }
                      if (!this.contentType) {
                        return _utils.HTMLResult.EMPTY;
                      }
                    }
                    var blob = new Blob([buffer], {
                      type: this.contentType
                    });
                    var style;
                    switch (this.aspect) {
                      case "fit":
                      case "actual":
                        break;
                      case "height":
                        style = {
                          height: "100%",
                          objectFit: "fill"
                        };
                        break;
                      case "none":
                        style = {
                          width: "100%",
                          height: "100%",
                          objectFit: "fill"
                        };
                        break;
                      case "width":
                        style = {
                          width: "100%",
                          objectFit: "fill"
                        };
                        break;
                    }
                    var parent = this[_xfa_object.$getParent]();
                    return _utils.HTMLResult.success({
                      name: "img",
                      attributes: {
                        "class": ["xfaImage"],
                        style,
                        src: URL.createObjectURL(blob),
                        alt: parent ? ariaLabel(parent[_xfa_object.$getParent]()) : null
                      }
                    });
                  }
                }]);
                return Image2;
              }(_xfa_object.StringObject);
              var ImageEdit = /* @__PURE__ */ function(_XFAObject45) {
                _inherits(ImageEdit2, _XFAObject45);
                var _super58 = _createSuper(ImageEdit2);
                function ImageEdit2(attributes) {
                  var _this58;
                  _classCallCheck(this, ImageEdit2);
                  _this58 = _super58.call(this, TEMPLATE_NS_ID, "imageEdit", true);
                  _this58.data = (0, _utils.getStringOption)(attributes.data, ["link", "embed"]);
                  _this58.id = attributes.id || "";
                  _this58.use = attributes.use || "";
                  _this58.usehref = attributes.usehref || "";
                  _this58.border = null;
                  _this58.extras = null;
                  _this58.margin = null;
                  return _this58;
                }
                _createClass(ImageEdit2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    if (this.data === "embed") {
                      return _utils.HTMLResult.success({
                        name: "div",
                        children: [],
                        attributes: {}
                      });
                    }
                    return _utils.HTMLResult.EMPTY;
                  }
                }]);
                return ImageEdit2;
              }(_xfa_object.XFAObject);
              var Integer = /* @__PURE__ */ function(_ContentObject6) {
                _inherits(Integer2, _ContentObject6);
                var _super59 = _createSuper(Integer2);
                function Integer2(attributes) {
                  var _this59;
                  _classCallCheck(this, Integer2);
                  _this59 = _super59.call(this, TEMPLATE_NS_ID, "integer");
                  _this59.id = attributes.id || "";
                  _this59.name = attributes.name || "";
                  _this59.use = attributes.use || "";
                  _this59.usehref = attributes.usehref || "";
                  return _this59;
                }
                _createClass(Integer2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    var number = parseInt(this[_xfa_object.$content].trim(), 10);
                    this[_xfa_object.$content] = isNaN(number) ? null : number;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    return valueToHtml(this[_xfa_object.$content] !== null ? this[_xfa_object.$content].toString() : "");
                  }
                }]);
                return Integer2;
              }(_xfa_object.ContentObject);
              var Issuers = /* @__PURE__ */ function(_XFAObject46) {
                _inherits(Issuers2, _XFAObject46);
                var _super60 = _createSuper(Issuers2);
                function Issuers2(attributes) {
                  var _this60;
                  _classCallCheck(this, Issuers2);
                  _this60 = _super60.call(this, TEMPLATE_NS_ID, "issuers", true);
                  _this60.id = attributes.id || "";
                  _this60.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this60.use = attributes.use || "";
                  _this60.usehref = attributes.usehref || "";
                  _this60.certificate = new _xfa_object.XFAObjectArray();
                  return _this60;
                }
                return Issuers2;
              }(_xfa_object.XFAObject);
              var Items = /* @__PURE__ */ function(_XFAObject47) {
                _inherits(Items2, _XFAObject47);
                var _super61 = _createSuper(Items2);
                function Items2(attributes) {
                  var _this61;
                  _classCallCheck(this, Items2);
                  _this61 = _super61.call(this, TEMPLATE_NS_ID, "items", true);
                  _this61.id = attributes.id || "";
                  _this61.name = attributes.name || "";
                  _this61.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this61.ref = attributes.ref || "";
                  _this61.save = (0, _utils.getInteger)({
                    data: attributes.save,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this61.use = attributes.use || "";
                  _this61.usehref = attributes.usehref || "";
                  _this61["boolean"] = new _xfa_object.XFAObjectArray();
                  _this61.date = new _xfa_object.XFAObjectArray();
                  _this61.dateTime = new _xfa_object.XFAObjectArray();
                  _this61.decimal = new _xfa_object.XFAObjectArray();
                  _this61.exData = new _xfa_object.XFAObjectArray();
                  _this61["float"] = new _xfa_object.XFAObjectArray();
                  _this61.image = new _xfa_object.XFAObjectArray();
                  _this61.integer = new _xfa_object.XFAObjectArray();
                  _this61.text = new _xfa_object.XFAObjectArray();
                  _this61.time = new _xfa_object.XFAObjectArray();
                  return _this61;
                }
                _createClass(Items2, [{
                  key: _xfa_object.$toHTML,
                  value: function value() {
                    var output = [];
                    var _iterator7 = _createForOfIteratorHelper(this[_xfa_object.$getChildren]()), _step7;
                    try {
                      for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                        var child = _step7.value;
                        output.push(child[_xfa_object.$text]());
                      }
                    } catch (err) {
                      _iterator7.e(err);
                    } finally {
                      _iterator7.f();
                    }
                    return _utils.HTMLResult.success(output);
                  }
                }]);
                return Items2;
              }(_xfa_object.XFAObject);
              exports2.Items = Items;
              var Keep = /* @__PURE__ */ function(_XFAObject48) {
                _inherits(Keep2, _XFAObject48);
                var _super62 = _createSuper(Keep2);
                function Keep2(attributes) {
                  var _this62;
                  _classCallCheck(this, Keep2);
                  _this62 = _super62.call(this, TEMPLATE_NS_ID, "keep", true);
                  _this62.id = attributes.id || "";
                  var options = ["none", "contentArea", "pageArea"];
                  _this62.intact = (0, _utils.getStringOption)(attributes.intact, options);
                  _this62.next = (0, _utils.getStringOption)(attributes.next, options);
                  _this62.previous = (0, _utils.getStringOption)(attributes.previous, options);
                  _this62.use = attributes.use || "";
                  _this62.usehref = attributes.usehref || "";
                  _this62.extras = null;
                  return _this62;
                }
                return Keep2;
              }(_xfa_object.XFAObject);
              var KeyUsage = /* @__PURE__ */ function(_XFAObject49) {
                _inherits(KeyUsage2, _XFAObject49);
                var _super63 = _createSuper(KeyUsage2);
                function KeyUsage2(attributes) {
                  var _this63;
                  _classCallCheck(this, KeyUsage2);
                  _this63 = _super63.call(this, TEMPLATE_NS_ID, "keyUsage");
                  var options = ["", "yes", "no"];
                  _this63.crlSign = (0, _utils.getStringOption)(attributes.crlSign, options);
                  _this63.dataEncipherment = (0, _utils.getStringOption)(attributes.dataEncipherment, options);
                  _this63.decipherOnly = (0, _utils.getStringOption)(attributes.decipherOnly, options);
                  _this63.digitalSignature = (0, _utils.getStringOption)(attributes.digitalSignature, options);
                  _this63.encipherOnly = (0, _utils.getStringOption)(attributes.encipherOnly, options);
                  _this63.id = attributes.id || "";
                  _this63.keyAgreement = (0, _utils.getStringOption)(attributes.keyAgreement, options);
                  _this63.keyCertSign = (0, _utils.getStringOption)(attributes.keyCertSign, options);
                  _this63.keyEncipherment = (0, _utils.getStringOption)(attributes.keyEncipherment, options);
                  _this63.nonRepudiation = (0, _utils.getStringOption)(attributes.nonRepudiation, options);
                  _this63.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this63.use = attributes.use || "";
                  _this63.usehref = attributes.usehref || "";
                  return _this63;
                }
                return KeyUsage2;
              }(_xfa_object.XFAObject);
              var Line = /* @__PURE__ */ function(_XFAObject50) {
                _inherits(Line2, _XFAObject50);
                var _super64 = _createSuper(Line2);
                function Line2(attributes) {
                  var _this64;
                  _classCallCheck(this, Line2);
                  _this64 = _super64.call(this, TEMPLATE_NS_ID, "line", true);
                  _this64.hand = (0, _utils.getStringOption)(attributes.hand, ["even", "left", "right"]);
                  _this64.id = attributes.id || "";
                  _this64.slope = (0, _utils.getStringOption)(attributes.slope, ["\\", "/"]);
                  _this64.use = attributes.use || "";
                  _this64.usehref = attributes.usehref || "";
                  _this64.edge = null;
                  return _this64;
                }
                _createClass(Line2, [{
                  key: _xfa_object.$toHTML,
                  value: function value() {
                    var parent = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();
                    var edge = this.edge ? this.edge : new Edge({});
                    var edgeStyle = edge[_xfa_object.$toStyle]();
                    var style = /* @__PURE__ */ Object.create(null);
                    var thickness = edge.presence === "visible" ? edge.thickness : 0;
                    style.strokeWidth = (0, _html_utils.measureToString)(thickness);
                    style.stroke = edgeStyle.color;
                    var x1, y1, x2, y2;
                    var width = "100%";
                    var height = "100%";
                    if (parent.w <= thickness) {
                      x1 = "50%";
                      y1 = 0;
                      x2 = "50%";
                      y2 = "100%";
                      width = style.strokeWidth;
                    } else if (parent.h <= thickness) {
                      x1 = 0;
                      y1 = "50%";
                      x2 = "100%";
                      y2 = "50%";
                      height = style.strokeWidth;
                    } else {
                      if (this.slope === "\\") {
                        x1 = 0;
                        y1 = 0;
                        x2 = "100%";
                        y2 = "100%";
                      } else {
                        x1 = 0;
                        y1 = "100%";
                        x2 = "100%";
                        y2 = 0;
                      }
                    }
                    var line = {
                      name: "line",
                      attributes: {
                        xmlns: SVG_NS,
                        x1,
                        y1,
                        x2,
                        y2,
                        style
                      }
                    };
                    var svg = {
                      name: "svg",
                      children: [line],
                      attributes: {
                        xmlns: SVG_NS,
                        width,
                        height,
                        style: {
                          overflow: "visible"
                        }
                      }
                    };
                    if (hasMargin(parent)) {
                      return _utils.HTMLResult.success({
                        name: "div",
                        attributes: {
                          style: {
                            display: "inline",
                            width: "100%",
                            height: "100%"
                          }
                        },
                        children: [svg]
                      });
                    }
                    svg.attributes.style.position = "absolute";
                    return _utils.HTMLResult.success(svg);
                  }
                }]);
                return Line2;
              }(_xfa_object.XFAObject);
              var Linear = /* @__PURE__ */ function(_XFAObject51) {
                _inherits(Linear2, _XFAObject51);
                var _super65 = _createSuper(Linear2);
                function Linear2(attributes) {
                  var _this65;
                  _classCallCheck(this, Linear2);
                  _this65 = _super65.call(this, TEMPLATE_NS_ID, "linear", true);
                  _this65.id = attributes.id || "";
                  _this65.type = (0, _utils.getStringOption)(attributes.type, ["toRight", "toBottom", "toLeft", "toTop"]);
                  _this65.use = attributes.use || "";
                  _this65.usehref = attributes.usehref || "";
                  _this65.color = null;
                  _this65.extras = null;
                  return _this65;
                }
                _createClass(Linear2, [{
                  key: _xfa_object.$toStyle,
                  value: function value(startColor) {
                    startColor = startColor ? startColor[_xfa_object.$toStyle]() : "#FFFFFF";
                    var transf = this.type.replace(/([RBLT])/, " $1").toLowerCase();
                    var endColor = this.color ? this.color[_xfa_object.$toStyle]() : "#000000";
                    return "linear-gradient(".concat(transf, ", ").concat(startColor, ", ").concat(endColor, ")");
                  }
                }]);
                return Linear2;
              }(_xfa_object.XFAObject);
              var LockDocument = /* @__PURE__ */ function(_ContentObject7) {
                _inherits(LockDocument2, _ContentObject7);
                var _super66 = _createSuper(LockDocument2);
                function LockDocument2(attributes) {
                  var _this66;
                  _classCallCheck(this, LockDocument2);
                  _this66 = _super66.call(this, TEMPLATE_NS_ID, "lockDocument");
                  _this66.id = attributes.id || "";
                  _this66.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this66.use = attributes.use || "";
                  _this66.usehref = attributes.usehref || "";
                  return _this66;
                }
                _createClass(LockDocument2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    this[_xfa_object.$content] = (0, _utils.getStringOption)(this[_xfa_object.$content], ["auto", "0", "1"]);
                  }
                }]);
                return LockDocument2;
              }(_xfa_object.ContentObject);
              var Manifest = /* @__PURE__ */ function(_XFAObject52) {
                _inherits(Manifest2, _XFAObject52);
                var _super67 = _createSuper(Manifest2);
                function Manifest2(attributes) {
                  var _this67;
                  _classCallCheck(this, Manifest2);
                  _this67 = _super67.call(this, TEMPLATE_NS_ID, "manifest", true);
                  _this67.action = (0, _utils.getStringOption)(attributes.action, ["include", "all", "exclude"]);
                  _this67.id = attributes.id || "";
                  _this67.name = attributes.name || "";
                  _this67.use = attributes.use || "";
                  _this67.usehref = attributes.usehref || "";
                  _this67.extras = null;
                  _this67.ref = new _xfa_object.XFAObjectArray();
                  return _this67;
                }
                return Manifest2;
              }(_xfa_object.XFAObject);
              var Margin = /* @__PURE__ */ function(_XFAObject53) {
                _inherits(Margin2, _XFAObject53);
                var _super68 = _createSuper(Margin2);
                function Margin2(attributes) {
                  var _this68;
                  _classCallCheck(this, Margin2);
                  _this68 = _super68.call(this, TEMPLATE_NS_ID, "margin", true);
                  _this68.bottomInset = (0, _utils.getMeasurement)(attributes.bottomInset, "0");
                  _this68.id = attributes.id || "";
                  _this68.leftInset = (0, _utils.getMeasurement)(attributes.leftInset, "0");
                  _this68.rightInset = (0, _utils.getMeasurement)(attributes.rightInset, "0");
                  _this68.topInset = (0, _utils.getMeasurement)(attributes.topInset, "0");
                  _this68.use = attributes.use || "";
                  _this68.usehref = attributes.usehref || "";
                  _this68.extras = null;
                  return _this68;
                }
                _createClass(Margin2, [{
                  key: _xfa_object.$toStyle,
                  value: function value() {
                    return {
                      margin: (0, _html_utils.measureToString)(this.topInset) + " " + (0, _html_utils.measureToString)(this.rightInset) + " " + (0, _html_utils.measureToString)(this.bottomInset) + " " + (0, _html_utils.measureToString)(this.leftInset)
                    };
                  }
                }]);
                return Margin2;
              }(_xfa_object.XFAObject);
              var Mdp = /* @__PURE__ */ function(_XFAObject54) {
                _inherits(Mdp2, _XFAObject54);
                var _super69 = _createSuper(Mdp2);
                function Mdp2(attributes) {
                  var _this69;
                  _classCallCheck(this, Mdp2);
                  _this69 = _super69.call(this, TEMPLATE_NS_ID, "mdp");
                  _this69.id = attributes.id || "";
                  _this69.permissions = (0, _utils.getInteger)({
                    data: attributes.permissions,
                    defaultValue: 2,
                    validate: function validate(x) {
                      return x === 1 || x === 3;
                    }
                  });
                  _this69.signatureType = (0, _utils.getStringOption)(attributes.signatureType, ["filler", "author"]);
                  _this69.use = attributes.use || "";
                  _this69.usehref = attributes.usehref || "";
                  return _this69;
                }
                return Mdp2;
              }(_xfa_object.XFAObject);
              var Medium = /* @__PURE__ */ function(_XFAObject55) {
                _inherits(Medium2, _XFAObject55);
                var _super70 = _createSuper(Medium2);
                function Medium2(attributes) {
                  var _this70;
                  _classCallCheck(this, Medium2);
                  _this70 = _super70.call(this, TEMPLATE_NS_ID, "medium");
                  _this70.id = attributes.id || "";
                  _this70.imagingBBox = (0, _utils.getBBox)(attributes.imagingBBox);
                  _this70["long"] = (0, _utils.getMeasurement)(attributes["long"]);
                  _this70.orientation = (0, _utils.getStringOption)(attributes.orientation, ["portrait", "landscape"]);
                  _this70["short"] = (0, _utils.getMeasurement)(attributes["short"]);
                  _this70.stock = attributes.stock || "";
                  _this70.trayIn = (0, _utils.getStringOption)(attributes.trayIn, ["auto", "delegate", "pageFront"]);
                  _this70.trayOut = (0, _utils.getStringOption)(attributes.trayOut, ["auto", "delegate"]);
                  _this70.use = attributes.use || "";
                  _this70.usehref = attributes.usehref || "";
                  return _this70;
                }
                return Medium2;
              }(_xfa_object.XFAObject);
              var Message = /* @__PURE__ */ function(_XFAObject56) {
                _inherits(Message2, _XFAObject56);
                var _super71 = _createSuper(Message2);
                function Message2(attributes) {
                  var _this71;
                  _classCallCheck(this, Message2);
                  _this71 = _super71.call(this, TEMPLATE_NS_ID, "message", true);
                  _this71.id = attributes.id || "";
                  _this71.use = attributes.use || "";
                  _this71.usehref = attributes.usehref || "";
                  _this71.text = new _xfa_object.XFAObjectArray();
                  return _this71;
                }
                return Message2;
              }(_xfa_object.XFAObject);
              var NumericEdit = /* @__PURE__ */ function(_XFAObject57) {
                _inherits(NumericEdit2, _XFAObject57);
                var _super72 = _createSuper(NumericEdit2);
                function NumericEdit2(attributes) {
                  var _this72;
                  _classCallCheck(this, NumericEdit2);
                  _this72 = _super72.call(this, TEMPLATE_NS_ID, "numericEdit", true);
                  _this72.hScrollPolicy = (0, _utils.getStringOption)(attributes.hScrollPolicy, ["auto", "off", "on"]);
                  _this72.id = attributes.id || "";
                  _this72.use = attributes.use || "";
                  _this72.usehref = attributes.usehref || "";
                  _this72.border = null;
                  _this72.comb = null;
                  _this72.extras = null;
                  _this72.margin = null;
                  return _this72;
                }
                _createClass(NumericEdit2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var style = (0, _html_utils.toStyle)(this, "border", "font", "margin");
                    var field = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();
                    var html = {
                      name: "input",
                      attributes: {
                        type: "text",
                        fieldId: field[_xfa_object.$uid],
                        dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],
                        "class": ["xfaTextfield"],
                        style,
                        "aria-label": ariaLabel(field)
                      }
                    };
                    return _utils.HTMLResult.success({
                      name: "label",
                      attributes: {
                        "class": ["xfaLabel"]
                      },
                      children: [html]
                    });
                  }
                }]);
                return NumericEdit2;
              }(_xfa_object.XFAObject);
              var Occur = /* @__PURE__ */ function(_XFAObject58) {
                _inherits(Occur2, _XFAObject58);
                var _super73 = _createSuper(Occur2);
                function Occur2(attributes) {
                  var _this73;
                  _classCallCheck(this, Occur2);
                  _this73 = _super73.call(this, TEMPLATE_NS_ID, "occur", true);
                  _this73.id = attributes.id || "";
                  _this73.initial = attributes.initial !== "" ? (0, _utils.getInteger)({
                    data: attributes.initial,
                    defaultValue: "",
                    validate: function validate(x) {
                      return true;
                    }
                  }) : "";
                  _this73.max = attributes.max !== "" ? (0, _utils.getInteger)({
                    data: attributes.max,
                    defaultValue: 1,
                    validate: function validate(x) {
                      return true;
                    }
                  }) : "";
                  _this73.min = attributes.min !== "" ? (0, _utils.getInteger)({
                    data: attributes.min,
                    defaultValue: 1,
                    validate: function validate(x) {
                      return true;
                    }
                  }) : "";
                  _this73.use = attributes.use || "";
                  _this73.usehref = attributes.usehref || "";
                  _this73.extras = null;
                  return _this73;
                }
                _createClass(Occur2, [{
                  key: _xfa_object.$clean,
                  value: function value() {
                    var parent = this[_xfa_object.$getParent]();
                    var originalMin = this.min;
                    if (this.min === "") {
                      this.min = parent instanceof PageArea || parent instanceof PageSet ? 0 : 1;
                    }
                    if (this.max === "") {
                      if (originalMin === "") {
                        this.max = parent instanceof PageArea || parent instanceof PageSet ? -1 : 1;
                      } else {
                        this.max = this.min;
                      }
                    }
                    if (this.max !== -1 && this.max < this.min) {
                      this.max = this.min;
                    }
                    if (this.initial === "") {
                      this.initial = parent instanceof Template ? 1 : this.min;
                    }
                  }
                }]);
                return Occur2;
              }(_xfa_object.XFAObject);
              var Oid = /* @__PURE__ */ function(_StringObject5) {
                _inherits(Oid2, _StringObject5);
                var _super74 = _createSuper(Oid2);
                function Oid2(attributes) {
                  var _this74;
                  _classCallCheck(this, Oid2);
                  _this74 = _super74.call(this, TEMPLATE_NS_ID, "oid");
                  _this74.id = attributes.id || "";
                  _this74.name = attributes.name || "";
                  _this74.use = attributes.use || "";
                  _this74.usehref = attributes.usehref || "";
                  return _this74;
                }
                return Oid2;
              }(_xfa_object.StringObject);
              var Oids = /* @__PURE__ */ function(_XFAObject59) {
                _inherits(Oids2, _XFAObject59);
                var _super75 = _createSuper(Oids2);
                function Oids2(attributes) {
                  var _this75;
                  _classCallCheck(this, Oids2);
                  _this75 = _super75.call(this, TEMPLATE_NS_ID, "oids", true);
                  _this75.id = attributes.id || "";
                  _this75.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this75.use = attributes.use || "";
                  _this75.usehref = attributes.usehref || "";
                  _this75.oid = new _xfa_object.XFAObjectArray();
                  return _this75;
                }
                return Oids2;
              }(_xfa_object.XFAObject);
              var Overflow = /* @__PURE__ */ function(_XFAObject60) {
                _inherits(Overflow2, _XFAObject60);
                var _super76 = _createSuper(Overflow2);
                function Overflow2(attributes) {
                  var _this76;
                  _classCallCheck(this, Overflow2);
                  _this76 = _super76.call(this, TEMPLATE_NS_ID, "overflow");
                  _this76.id = attributes.id || "";
                  _this76.leader = attributes.leader || "";
                  _this76.target = attributes.target || "";
                  _this76.trailer = attributes.trailer || "";
                  _this76.use = attributes.use || "";
                  _this76.usehref = attributes.usehref || "";
                  return _this76;
                }
                _createClass(Overflow2, [{
                  key: _xfa_object.$getExtra,
                  value: function value() {
                    if (!this[_xfa_object.$extra]) {
                      var parent = this[_xfa_object.$getParent]();
                      var root = this[_xfa_object.$getTemplateRoot]();
                      var target = root[_xfa_object.$searchNode](this.target, parent);
                      var leader = root[_xfa_object.$searchNode](this.leader, parent);
                      var trailer = root[_xfa_object.$searchNode](this.trailer, parent);
                      this[_xfa_object.$extra] = {
                        target: target && target[0] || null,
                        leader: leader && leader[0] || null,
                        trailer: trailer && trailer[0] || null,
                        addLeader: false,
                        addTrailer: false
                      };
                    }
                    return this[_xfa_object.$extra];
                  }
                }]);
                return Overflow2;
              }(_xfa_object.XFAObject);
              var PageArea = /* @__PURE__ */ function(_XFAObject61) {
                _inherits(PageArea2, _XFAObject61);
                var _super77 = _createSuper(PageArea2);
                function PageArea2(attributes) {
                  var _this77;
                  _classCallCheck(this, PageArea2);
                  _this77 = _super77.call(this, TEMPLATE_NS_ID, "pageArea", true);
                  _this77.blankOrNotBlank = (0, _utils.getStringOption)(attributes.blankOrNotBlank, ["any", "blank", "notBlank"]);
                  _this77.id = attributes.id || "";
                  _this77.initialNumber = (0, _utils.getInteger)({
                    data: attributes.initialNumber,
                    defaultValue: 1,
                    validate: function validate(x) {
                      return true;
                    }
                  });
                  _this77.name = attributes.name || "";
                  _this77.numbered = (0, _utils.getInteger)({
                    data: attributes.numbered,
                    defaultValue: 1,
                    validate: function validate(x) {
                      return true;
                    }
                  });
                  _this77.oddOrEven = (0, _utils.getStringOption)(attributes.oddOrEven, ["any", "even", "odd"]);
                  _this77.pagePosition = (0, _utils.getStringOption)(attributes.pagePosition, ["any", "first", "last", "only", "rest"]);
                  _this77.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this77.use = attributes.use || "";
                  _this77.usehref = attributes.usehref || "";
                  _this77.desc = null;
                  _this77.extras = null;
                  _this77.medium = null;
                  _this77.occur = null;
                  _this77.area = new _xfa_object.XFAObjectArray();
                  _this77.contentArea = new _xfa_object.XFAObjectArray();
                  _this77.draw = new _xfa_object.XFAObjectArray();
                  _this77.exclGroup = new _xfa_object.XFAObjectArray();
                  _this77.field = new _xfa_object.XFAObjectArray();
                  _this77.subform = new _xfa_object.XFAObjectArray();
                  return _this77;
                }
                _createClass(PageArea2, [{
                  key: _xfa_object.$isUsable,
                  value: function value() {
                    if (!this[_xfa_object.$extra]) {
                      this[_xfa_object.$extra] = {
                        numberOfUse: 0
                      };
                      return true;
                    }
                    return !this.occur || this.occur.max === -1 || this[_xfa_object.$extra].numberOfUse < this.occur.max;
                  }
                }, {
                  key: _xfa_object.$cleanPage,
                  value: function value() {
                    delete this[_xfa_object.$extra];
                  }
                }, {
                  key: _xfa_object.$getNextPage,
                  value: function value() {
                    if (!this[_xfa_object.$extra]) {
                      this[_xfa_object.$extra] = {
                        numberOfUse: 0
                      };
                    }
                    var parent = this[_xfa_object.$getParent]();
                    if (parent.relation === "orderedOccurrence") {
                      if (this[_xfa_object.$isUsable]()) {
                        this[_xfa_object.$extra].numberOfUse += 1;
                        return this;
                      }
                    }
                    return parent[_xfa_object.$getNextPage]();
                  }
                }, {
                  key: _xfa_object.$getAvailableSpace,
                  value: function value() {
                    return this[_xfa_object.$extra].space || {
                      width: 0,
                      height: 0
                    };
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value() {
                    if (!this[_xfa_object.$extra]) {
                      this[_xfa_object.$extra] = {
                        numberOfUse: 1
                      };
                    }
                    var children = [];
                    this[_xfa_object.$extra].children = children;
                    var style = /* @__PURE__ */ Object.create(null);
                    if (this.medium && this.medium["short"] && this.medium["long"]) {
                      style.width = (0, _html_utils.measureToString)(this.medium["short"]);
                      style.height = (0, _html_utils.measureToString)(this.medium["long"]);
                      this[_xfa_object.$extra].space = {
                        width: this.medium["short"],
                        height: this.medium["long"]
                      };
                      if (this.medium.orientation === "landscape") {
                        var x = style.width;
                        style.width = style.height;
                        style.height = x;
                        this[_xfa_object.$extra].space = {
                          width: this.medium["long"],
                          height: this.medium["short"]
                        };
                      }
                    } else {
                      (0, _util.warn)("XFA - No medium specified in pageArea: please file a bug.");
                    }
                    this[_xfa_object.$childrenToHTML]({
                      filter: /* @__PURE__ */ new Set(["area", "draw", "field", "subform"]),
                      include: true
                    });
                    this[_xfa_object.$childrenToHTML]({
                      filter: /* @__PURE__ */ new Set(["contentArea"]),
                      include: true
                    });
                    return _utils.HTMLResult.success({
                      name: "div",
                      children,
                      attributes: {
                        "class": ["xfaPage"],
                        id: this[_xfa_object.$uid],
                        style,
                        xfaName: this.name
                      }
                    });
                  }
                }]);
                return PageArea2;
              }(_xfa_object.XFAObject);
              var PageSet = /* @__PURE__ */ function(_XFAObject62) {
                _inherits(PageSet2, _XFAObject62);
                var _super78 = _createSuper(PageSet2);
                function PageSet2(attributes) {
                  var _this78;
                  _classCallCheck(this, PageSet2);
                  _this78 = _super78.call(this, TEMPLATE_NS_ID, "pageSet", true);
                  _this78.duplexImposition = (0, _utils.getStringOption)(attributes.duplexImposition, ["longEdge", "shortEdge"]);
                  _this78.id = attributes.id || "";
                  _this78.name = attributes.name || "";
                  _this78.relation = (0, _utils.getStringOption)(attributes.relation, ["orderedOccurrence", "duplexPaginated", "simplexPaginated"]);
                  _this78.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this78.use = attributes.use || "";
                  _this78.usehref = attributes.usehref || "";
                  _this78.extras = null;
                  _this78.occur = null;
                  _this78.pageArea = new _xfa_object.XFAObjectArray();
                  _this78.pageSet = new _xfa_object.XFAObjectArray();
                  return _this78;
                }
                _createClass(PageSet2, [{
                  key: _xfa_object.$cleanPage,
                  value: function value() {
                    var _iterator8 = _createForOfIteratorHelper(this.pageArea.children), _step8;
                    try {
                      for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                        var page = _step8.value;
                        page[_xfa_object.$cleanPage]();
                      }
                    } catch (err) {
                      _iterator8.e(err);
                    } finally {
                      _iterator8.f();
                    }
                    var _iterator9 = _createForOfIteratorHelper(this.pageSet.children), _step9;
                    try {
                      for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                        var _page = _step9.value;
                        _page[_xfa_object.$cleanPage]();
                      }
                    } catch (err) {
                      _iterator9.e(err);
                    } finally {
                      _iterator9.f();
                    }
                  }
                }, {
                  key: _xfa_object.$isUsable,
                  value: function value() {
                    return !this.occur || this.occur.max === -1 || this[_xfa_object.$extra].numberOfUse < this.occur.max;
                  }
                }, {
                  key: _xfa_object.$getNextPage,
                  value: function value() {
                    if (!this[_xfa_object.$extra]) {
                      this[_xfa_object.$extra] = {
                        numberOfUse: 1,
                        pageIndex: -1,
                        pageSetIndex: -1
                      };
                    }
                    if (this.relation === "orderedOccurrence") {
                      if (this[_xfa_object.$extra].pageIndex + 1 < this.pageArea.children.length) {
                        this[_xfa_object.$extra].pageIndex += 1;
                        var pageArea = this.pageArea.children[this[_xfa_object.$extra].pageIndex];
                        return pageArea[_xfa_object.$getNextPage]();
                      }
                      if (this[_xfa_object.$extra].pageSetIndex + 1 < this.pageSet.children.length) {
                        this[_xfa_object.$extra].pageSetIndex += 1;
                        return this.pageSet.children[this[_xfa_object.$extra].pageSetIndex][_xfa_object.$getNextPage]();
                      }
                      if (this[_xfa_object.$isUsable]()) {
                        this[_xfa_object.$extra].numberOfUse += 1;
                        this[_xfa_object.$extra].pageIndex = -1;
                        this[_xfa_object.$extra].pageSetIndex = -1;
                        return this[_xfa_object.$getNextPage]();
                      }
                      var parent = this[_xfa_object.$getParent]();
                      if (parent instanceof PageSet2) {
                        return parent[_xfa_object.$getNextPage]();
                      }
                      this[_xfa_object.$cleanPage]();
                      return this[_xfa_object.$getNextPage]();
                    }
                    var pageNumber = this[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].pageNumber;
                    var parity = pageNumber % 2 === 0 ? "even" : "odd";
                    var position = pageNumber === 0 ? "first" : "rest";
                    var page = this.pageArea.children.find(function(p) {
                      return p.oddOrEven === parity && p.pagePosition === position;
                    });
                    if (page) {
                      return page;
                    }
                    page = this.pageArea.children.find(function(p) {
                      return p.oddOrEven === "any" && p.pagePosition === position;
                    });
                    if (page) {
                      return page;
                    }
                    page = this.pageArea.children.find(function(p) {
                      return p.oddOrEven === "any" && p.pagePosition === "any";
                    });
                    if (page) {
                      return page;
                    }
                    return this.pageArea.children[0];
                  }
                }]);
                return PageSet2;
              }(_xfa_object.XFAObject);
              var Para = /* @__PURE__ */ function(_XFAObject63) {
                _inherits(Para2, _XFAObject63);
                var _super79 = _createSuper(Para2);
                function Para2(attributes) {
                  var _this79;
                  _classCallCheck(this, Para2);
                  _this79 = _super79.call(this, TEMPLATE_NS_ID, "para", true);
                  _this79.hAlign = (0, _utils.getStringOption)(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
                  _this79.id = attributes.id || "";
                  _this79.lineHeight = attributes.lineHeight ? (0, _utils.getMeasurement)(attributes.lineHeight, "0pt") : "";
                  _this79.marginLeft = attributes.marginLeft ? (0, _utils.getMeasurement)(attributes.marginLeft, "0pt") : "";
                  _this79.marginRight = attributes.marginRight ? (0, _utils.getMeasurement)(attributes.marginRight, "0pt") : "";
                  _this79.orphans = (0, _utils.getInteger)({
                    data: attributes.orphans,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this79.preserve = attributes.preserve || "";
                  _this79.radixOffset = attributes.radixOffset ? (0, _utils.getMeasurement)(attributes.radixOffset, "0pt") : "";
                  _this79.spaceAbove = attributes.spaceAbove ? (0, _utils.getMeasurement)(attributes.spaceAbove, "0pt") : "";
                  _this79.spaceBelow = attributes.spaceBelow ? (0, _utils.getMeasurement)(attributes.spaceBelow, "0pt") : "";
                  _this79.tabDefault = attributes.tabDefault ? (0, _utils.getMeasurement)(_this79.tabDefault) : "";
                  _this79.tabStops = (attributes.tabStops || "").trim().split(/\s+/).map(function(x, i) {
                    return i % 2 === 1 ? (0, _utils.getMeasurement)(x) : x;
                  });
                  _this79.textIndent = attributes.textIndent ? (0, _utils.getMeasurement)(attributes.textIndent, "0pt") : "";
                  _this79.use = attributes.use || "";
                  _this79.usehref = attributes.usehref || "";
                  _this79.vAlign = (0, _utils.getStringOption)(attributes.vAlign, ["top", "bottom", "middle"]);
                  _this79.widows = (0, _utils.getInteger)({
                    data: attributes.widows,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this79.hyphenation = null;
                  return _this79;
                }
                _createClass(Para2, [{
                  key: _xfa_object.$toStyle,
                  value: function value() {
                    var style = (0, _html_utils.toStyle)(this, "hAlign");
                    if (this.marginLeft !== "") {
                      style.paddingLeft = (0, _html_utils.measureToString)(this.marginLeft);
                    }
                    if (this.marginRight !== "") {
                      style.paddingight = (0, _html_utils.measureToString)(this.marginRight);
                    }
                    if (this.spaceAbove !== "") {
                      style.paddingTop = (0, _html_utils.measureToString)(this.spaceAbove);
                    }
                    if (this.spaceBelow !== "") {
                      style.paddingBottom = (0, _html_utils.measureToString)(this.spaceBelow);
                    }
                    if (this.textIndent !== "") {
                      style.textIndent = (0, _html_utils.measureToString)(this.textIndent);
                      (0, _html_utils.fixTextIndent)(style);
                    }
                    if (this.lineHeight > 0) {
                      style.lineHeight = (0, _html_utils.measureToString)(this.lineHeight);
                    }
                    if (this.tabDefault !== "") {
                      style.tabSize = (0, _html_utils.measureToString)(this.tabDefault);
                    }
                    if (this.tabStops.length > 0) {
                    }
                    if (this.hyphenatation) {
                      Object.assign(style, this.hyphenatation[_xfa_object.$toStyle]());
                    }
                    return style;
                  }
                }]);
                return Para2;
              }(_xfa_object.XFAObject);
              var PasswordEdit = /* @__PURE__ */ function(_XFAObject64) {
                _inherits(PasswordEdit2, _XFAObject64);
                var _super80 = _createSuper(PasswordEdit2);
                function PasswordEdit2(attributes) {
                  var _this80;
                  _classCallCheck(this, PasswordEdit2);
                  _this80 = _super80.call(this, TEMPLATE_NS_ID, "passwordEdit", true);
                  _this80.hScrollPolicy = (0, _utils.getStringOption)(attributes.hScrollPolicy, ["auto", "off", "on"]);
                  _this80.id = attributes.id || "";
                  _this80.passwordChar = attributes.passwordChar || "*";
                  _this80.use = attributes.use || "";
                  _this80.usehref = attributes.usehref || "";
                  _this80.border = null;
                  _this80.extras = null;
                  _this80.margin = null;
                  return _this80;
                }
                return PasswordEdit2;
              }(_xfa_object.XFAObject);
              var Pattern = /* @__PURE__ */ function(_XFAObject65) {
                _inherits(Pattern2, _XFAObject65);
                var _super81 = _createSuper(Pattern2);
                function Pattern2(attributes) {
                  var _this81;
                  _classCallCheck(this, Pattern2);
                  _this81 = _super81.call(this, TEMPLATE_NS_ID, "pattern", true);
                  _this81.id = attributes.id || "";
                  _this81.type = (0, _utils.getStringOption)(attributes.type, ["crossHatch", "crossDiagonal", "diagonalLeft", "diagonalRight", "horizontal", "vertical"]);
                  _this81.use = attributes.use || "";
                  _this81.usehref = attributes.usehref || "";
                  _this81.color = null;
                  _this81.extras = null;
                  return _this81;
                }
                _createClass(Pattern2, [{
                  key: _xfa_object.$toStyle,
                  value: function value(startColor) {
                    startColor = startColor ? startColor[_xfa_object.$toStyle]() : "#FFFFFF";
                    var endColor = this.color ? this.color[_xfa_object.$toStyle]() : "#000000";
                    var width = 5;
                    var cmd = "repeating-linear-gradient";
                    var colors = "".concat(startColor, ",").concat(startColor, " ").concat(width, "px,").concat(endColor, " ").concat(width, "px,").concat(endColor, " ").concat(2 * width, "px");
                    switch (this.type) {
                      case "crossHatch":
                        return "".concat(cmd, "(to top,").concat(colors, ") ").concat(cmd, "(to right,").concat(colors, ")");
                      case "crossDiagonal":
                        return "".concat(cmd, "(45deg,").concat(colors, ") ").concat(cmd, "(-45deg,").concat(colors, ")");
                      case "diagonalLeft":
                        return "".concat(cmd, "(45deg,").concat(colors, ")");
                      case "diagonalRight":
                        return "".concat(cmd, "(-45deg,").concat(colors, ")");
                      case "horizontal":
                        return "".concat(cmd, "(to top,").concat(colors, ")");
                      case "vertical":
                        return "".concat(cmd, "(to right,").concat(colors, ")");
                    }
                    return "";
                  }
                }]);
                return Pattern2;
              }(_xfa_object.XFAObject);
              var Picture = /* @__PURE__ */ function(_StringObject6) {
                _inherits(Picture2, _StringObject6);
                var _super82 = _createSuper(Picture2);
                function Picture2(attributes) {
                  var _this82;
                  _classCallCheck(this, Picture2);
                  _this82 = _super82.call(this, TEMPLATE_NS_ID, "picture");
                  _this82.id = attributes.id || "";
                  _this82.use = attributes.use || "";
                  _this82.usehref = attributes.usehref || "";
                  return _this82;
                }
                return Picture2;
              }(_xfa_object.StringObject);
              var Proto = /* @__PURE__ */ function(_XFAObject66) {
                _inherits(Proto2, _XFAObject66);
                var _super83 = _createSuper(Proto2);
                function Proto2(attributes) {
                  var _this83;
                  _classCallCheck(this, Proto2);
                  _this83 = _super83.call(this, TEMPLATE_NS_ID, "proto", true);
                  _this83.appearanceFilter = new _xfa_object.XFAObjectArray();
                  _this83.arc = new _xfa_object.XFAObjectArray();
                  _this83.area = new _xfa_object.XFAObjectArray();
                  _this83.assist = new _xfa_object.XFAObjectArray();
                  _this83.barcode = new _xfa_object.XFAObjectArray();
                  _this83.bindItems = new _xfa_object.XFAObjectArray();
                  _this83.bookend = new _xfa_object.XFAObjectArray();
                  _this83["boolean"] = new _xfa_object.XFAObjectArray();
                  _this83.border = new _xfa_object.XFAObjectArray();
                  _this83["break"] = new _xfa_object.XFAObjectArray();
                  _this83.breakAfter = new _xfa_object.XFAObjectArray();
                  _this83.breakBefore = new _xfa_object.XFAObjectArray();
                  _this83.button = new _xfa_object.XFAObjectArray();
                  _this83.calculate = new _xfa_object.XFAObjectArray();
                  _this83.caption = new _xfa_object.XFAObjectArray();
                  _this83.certificate = new _xfa_object.XFAObjectArray();
                  _this83.certificates = new _xfa_object.XFAObjectArray();
                  _this83.checkButton = new _xfa_object.XFAObjectArray();
                  _this83.choiceList = new _xfa_object.XFAObjectArray();
                  _this83.color = new _xfa_object.XFAObjectArray();
                  _this83.comb = new _xfa_object.XFAObjectArray();
                  _this83.connect = new _xfa_object.XFAObjectArray();
                  _this83.contentArea = new _xfa_object.XFAObjectArray();
                  _this83.corner = new _xfa_object.XFAObjectArray();
                  _this83.date = new _xfa_object.XFAObjectArray();
                  _this83.dateTime = new _xfa_object.XFAObjectArray();
                  _this83.dateTimeEdit = new _xfa_object.XFAObjectArray();
                  _this83.decimal = new _xfa_object.XFAObjectArray();
                  _this83.defaultUi = new _xfa_object.XFAObjectArray();
                  _this83.desc = new _xfa_object.XFAObjectArray();
                  _this83.digestMethod = new _xfa_object.XFAObjectArray();
                  _this83.digestMethods = new _xfa_object.XFAObjectArray();
                  _this83.draw = new _xfa_object.XFAObjectArray();
                  _this83.edge = new _xfa_object.XFAObjectArray();
                  _this83.encoding = new _xfa_object.XFAObjectArray();
                  _this83.encodings = new _xfa_object.XFAObjectArray();
                  _this83.encrypt = new _xfa_object.XFAObjectArray();
                  _this83.encryptData = new _xfa_object.XFAObjectArray();
                  _this83.encryption = new _xfa_object.XFAObjectArray();
                  _this83.encryptionMethod = new _xfa_object.XFAObjectArray();
                  _this83.encryptionMethods = new _xfa_object.XFAObjectArray();
                  _this83.event = new _xfa_object.XFAObjectArray();
                  _this83.exData = new _xfa_object.XFAObjectArray();
                  _this83.exObject = new _xfa_object.XFAObjectArray();
                  _this83.exclGroup = new _xfa_object.XFAObjectArray();
                  _this83.execute = new _xfa_object.XFAObjectArray();
                  _this83.extras = new _xfa_object.XFAObjectArray();
                  _this83.field = new _xfa_object.XFAObjectArray();
                  _this83.fill = new _xfa_object.XFAObjectArray();
                  _this83.filter = new _xfa_object.XFAObjectArray();
                  _this83["float"] = new _xfa_object.XFAObjectArray();
                  _this83.font = new _xfa_object.XFAObjectArray();
                  _this83.format = new _xfa_object.XFAObjectArray();
                  _this83.handler = new _xfa_object.XFAObjectArray();
                  _this83.hyphenation = new _xfa_object.XFAObjectArray();
                  _this83.image = new _xfa_object.XFAObjectArray();
                  _this83.imageEdit = new _xfa_object.XFAObjectArray();
                  _this83.integer = new _xfa_object.XFAObjectArray();
                  _this83.issuers = new _xfa_object.XFAObjectArray();
                  _this83.items = new _xfa_object.XFAObjectArray();
                  _this83.keep = new _xfa_object.XFAObjectArray();
                  _this83.keyUsage = new _xfa_object.XFAObjectArray();
                  _this83.line = new _xfa_object.XFAObjectArray();
                  _this83.linear = new _xfa_object.XFAObjectArray();
                  _this83.lockDocument = new _xfa_object.XFAObjectArray();
                  _this83.manifest = new _xfa_object.XFAObjectArray();
                  _this83.margin = new _xfa_object.XFAObjectArray();
                  _this83.mdp = new _xfa_object.XFAObjectArray();
                  _this83.medium = new _xfa_object.XFAObjectArray();
                  _this83.message = new _xfa_object.XFAObjectArray();
                  _this83.numericEdit = new _xfa_object.XFAObjectArray();
                  _this83.occur = new _xfa_object.XFAObjectArray();
                  _this83.oid = new _xfa_object.XFAObjectArray();
                  _this83.oids = new _xfa_object.XFAObjectArray();
                  _this83.overflow = new _xfa_object.XFAObjectArray();
                  _this83.pageArea = new _xfa_object.XFAObjectArray();
                  _this83.pageSet = new _xfa_object.XFAObjectArray();
                  _this83.para = new _xfa_object.XFAObjectArray();
                  _this83.passwordEdit = new _xfa_object.XFAObjectArray();
                  _this83.pattern = new _xfa_object.XFAObjectArray();
                  _this83.picture = new _xfa_object.XFAObjectArray();
                  _this83.radial = new _xfa_object.XFAObjectArray();
                  _this83.reason = new _xfa_object.XFAObjectArray();
                  _this83.reasons = new _xfa_object.XFAObjectArray();
                  _this83.rectangle = new _xfa_object.XFAObjectArray();
                  _this83.ref = new _xfa_object.XFAObjectArray();
                  _this83.script = new _xfa_object.XFAObjectArray();
                  _this83.setProperty = new _xfa_object.XFAObjectArray();
                  _this83.signData = new _xfa_object.XFAObjectArray();
                  _this83.signature = new _xfa_object.XFAObjectArray();
                  _this83.signing = new _xfa_object.XFAObjectArray();
                  _this83.solid = new _xfa_object.XFAObjectArray();
                  _this83.speak = new _xfa_object.XFAObjectArray();
                  _this83.stipple = new _xfa_object.XFAObjectArray();
                  _this83.subform = new _xfa_object.XFAObjectArray();
                  _this83.subformSet = new _xfa_object.XFAObjectArray();
                  _this83.subjectDN = new _xfa_object.XFAObjectArray();
                  _this83.subjectDNs = new _xfa_object.XFAObjectArray();
                  _this83.submit = new _xfa_object.XFAObjectArray();
                  _this83.text = new _xfa_object.XFAObjectArray();
                  _this83.textEdit = new _xfa_object.XFAObjectArray();
                  _this83.time = new _xfa_object.XFAObjectArray();
                  _this83.timeStamp = new _xfa_object.XFAObjectArray();
                  _this83.toolTip = new _xfa_object.XFAObjectArray();
                  _this83.traversal = new _xfa_object.XFAObjectArray();
                  _this83.traverse = new _xfa_object.XFAObjectArray();
                  _this83.ui = new _xfa_object.XFAObjectArray();
                  _this83.validate = new _xfa_object.XFAObjectArray();
                  _this83.value = new _xfa_object.XFAObjectArray();
                  _this83.variables = new _xfa_object.XFAObjectArray();
                  return _this83;
                }
                return Proto2;
              }(_xfa_object.XFAObject);
              var Radial = /* @__PURE__ */ function(_XFAObject67) {
                _inherits(Radial2, _XFAObject67);
                var _super84 = _createSuper(Radial2);
                function Radial2(attributes) {
                  var _this84;
                  _classCallCheck(this, Radial2);
                  _this84 = _super84.call(this, TEMPLATE_NS_ID, "radial", true);
                  _this84.id = attributes.id || "";
                  _this84.type = (0, _utils.getStringOption)(attributes.type, ["toEdge", "toCenter"]);
                  _this84.use = attributes.use || "";
                  _this84.usehref = attributes.usehref || "";
                  _this84.color = null;
                  _this84.extras = null;
                  return _this84;
                }
                _createClass(Radial2, [{
                  key: _xfa_object.$toStyle,
                  value: function value(startColor) {
                    startColor = startColor ? startColor[_xfa_object.$toStyle]() : "#FFFFFF";
                    var endColor = this.color ? this.color[_xfa_object.$toStyle]() : "#000000";
                    var colors = this.type === "toEdge" ? "".concat(startColor, ",").concat(endColor) : "".concat(endColor, ",").concat(startColor);
                    return "radial-gradient(circle at center, ".concat(colors, ")");
                  }
                }]);
                return Radial2;
              }(_xfa_object.XFAObject);
              var Reason = /* @__PURE__ */ function(_StringObject7) {
                _inherits(Reason2, _StringObject7);
                var _super85 = _createSuper(Reason2);
                function Reason2(attributes) {
                  var _this85;
                  _classCallCheck(this, Reason2);
                  _this85 = _super85.call(this, TEMPLATE_NS_ID, "reason");
                  _this85.id = attributes.id || "";
                  _this85.name = attributes.name || "";
                  _this85.use = attributes.use || "";
                  _this85.usehref = attributes.usehref || "";
                  return _this85;
                }
                return Reason2;
              }(_xfa_object.StringObject);
              var Reasons = /* @__PURE__ */ function(_XFAObject68) {
                _inherits(Reasons2, _XFAObject68);
                var _super86 = _createSuper(Reasons2);
                function Reasons2(attributes) {
                  var _this86;
                  _classCallCheck(this, Reasons2);
                  _this86 = _super86.call(this, TEMPLATE_NS_ID, "reasons", true);
                  _this86.id = attributes.id || "";
                  _this86.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this86.use = attributes.use || "";
                  _this86.usehref = attributes.usehref || "";
                  _this86.reason = new _xfa_object.XFAObjectArray();
                  return _this86;
                }
                return Reasons2;
              }(_xfa_object.XFAObject);
              var Rectangle = /* @__PURE__ */ function(_XFAObject69) {
                _inherits(Rectangle2, _XFAObject69);
                var _super87 = _createSuper(Rectangle2);
                function Rectangle2(attributes) {
                  var _this87;
                  _classCallCheck(this, Rectangle2);
                  _this87 = _super87.call(this, TEMPLATE_NS_ID, "rectangle", true);
                  _this87.hand = (0, _utils.getStringOption)(attributes.hand, ["even", "left", "right"]);
                  _this87.id = attributes.id || "";
                  _this87.use = attributes.use || "";
                  _this87.usehref = attributes.usehref || "";
                  _this87.corner = new _xfa_object.XFAObjectArray(4);
                  _this87.edge = new _xfa_object.XFAObjectArray(4);
                  _this87.fill = null;
                  return _this87;
                }
                _createClass(Rectangle2, [{
                  key: _xfa_object.$toHTML,
                  value: function value() {
                    var edge = this.edge.children.length ? this.edge.children[0] : new Edge({});
                    var edgeStyle = edge[_xfa_object.$toStyle]();
                    var style = /* @__PURE__ */ Object.create(null);
                    if (this.fill && this.fill.presence === "visible") {
                      Object.assign(style, this.fill[_xfa_object.$toStyle]());
                    } else {
                      style.fill = "transparent";
                    }
                    style.strokeWidth = (0, _html_utils.measureToString)(edge.presence === "visible" ? edge.thickness : 0);
                    style.stroke = edgeStyle.color;
                    var corner = this.corner.children.length ? this.corner.children[0] : new Corner({});
                    var cornerStyle = corner[_xfa_object.$toStyle]();
                    var rect = {
                      name: "rect",
                      attributes: {
                        xmlns: SVG_NS,
                        width: "100%",
                        height: "100%",
                        x: 0,
                        y: 0,
                        rx: cornerStyle.radius,
                        ry: cornerStyle.radius,
                        style
                      }
                    };
                    var svg = {
                      name: "svg",
                      children: [rect],
                      attributes: {
                        xmlns: SVG_NS,
                        style: {
                          overflow: "visible"
                        },
                        width: "100%",
                        height: "100%"
                      }
                    };
                    var parent = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();
                    if (hasMargin(parent)) {
                      return _utils.HTMLResult.success({
                        name: "div",
                        attributes: {
                          style: {
                            display: "inline",
                            width: "100%",
                            height: "100%"
                          }
                        },
                        children: [svg]
                      });
                    }
                    svg.attributes.style.position = "absolute";
                    return _utils.HTMLResult.success(svg);
                  }
                }]);
                return Rectangle2;
              }(_xfa_object.XFAObject);
              var RefElement = /* @__PURE__ */ function(_StringObject8) {
                _inherits(RefElement2, _StringObject8);
                var _super88 = _createSuper(RefElement2);
                function RefElement2(attributes) {
                  var _this88;
                  _classCallCheck(this, RefElement2);
                  _this88 = _super88.call(this, TEMPLATE_NS_ID, "ref");
                  _this88.id = attributes.id || "";
                  _this88.use = attributes.use || "";
                  _this88.usehref = attributes.usehref || "";
                  return _this88;
                }
                return RefElement2;
              }(_xfa_object.StringObject);
              var Script = /* @__PURE__ */ function(_StringObject9) {
                _inherits(Script2, _StringObject9);
                var _super89 = _createSuper(Script2);
                function Script2(attributes) {
                  var _this89;
                  _classCallCheck(this, Script2);
                  _this89 = _super89.call(this, TEMPLATE_NS_ID, "script");
                  _this89.binding = attributes.binding || "";
                  _this89.contentType = attributes.contentType || "";
                  _this89.id = attributes.id || "";
                  _this89.name = attributes.name || "";
                  _this89.runAt = (0, _utils.getStringOption)(attributes.runAt, ["client", "both", "server"]);
                  _this89.use = attributes.use || "";
                  _this89.usehref = attributes.usehref || "";
                  return _this89;
                }
                return Script2;
              }(_xfa_object.StringObject);
              var SetProperty = /* @__PURE__ */ function(_XFAObject70) {
                _inherits(SetProperty2, _XFAObject70);
                var _super90 = _createSuper(SetProperty2);
                function SetProperty2(attributes) {
                  var _this90;
                  _classCallCheck(this, SetProperty2);
                  _this90 = _super90.call(this, TEMPLATE_NS_ID, "setProperty");
                  _this90.connection = attributes.connection || "";
                  _this90.ref = attributes.ref || "";
                  _this90.target = attributes.target || "";
                  return _this90;
                }
                return SetProperty2;
              }(_xfa_object.XFAObject);
              exports2.SetProperty = SetProperty;
              var SignData = /* @__PURE__ */ function(_XFAObject71) {
                _inherits(SignData2, _XFAObject71);
                var _super91 = _createSuper(SignData2);
                function SignData2(attributes) {
                  var _this91;
                  _classCallCheck(this, SignData2);
                  _this91 = _super91.call(this, TEMPLATE_NS_ID, "signData", true);
                  _this91.id = attributes.id || "";
                  _this91.operation = (0, _utils.getStringOption)(attributes.operation, ["sign", "clear", "verify"]);
                  _this91.ref = attributes.ref || "";
                  _this91.target = attributes.target || "";
                  _this91.use = attributes.use || "";
                  _this91.usehref = attributes.usehref || "";
                  _this91.filter = null;
                  _this91.manifest = null;
                  return _this91;
                }
                return SignData2;
              }(_xfa_object.XFAObject);
              var Signature = /* @__PURE__ */ function(_XFAObject72) {
                _inherits(Signature2, _XFAObject72);
                var _super92 = _createSuper(Signature2);
                function Signature2(attributes) {
                  var _this92;
                  _classCallCheck(this, Signature2);
                  _this92 = _super92.call(this, TEMPLATE_NS_ID, "signature", true);
                  _this92.id = attributes.id || "";
                  _this92.type = (0, _utils.getStringOption)(attributes.type, ["PDF1.3", "PDF1.6"]);
                  _this92.use = attributes.use || "";
                  _this92.usehref = attributes.usehref || "";
                  _this92.border = null;
                  _this92.extras = null;
                  _this92.filter = null;
                  _this92.manifest = null;
                  _this92.margin = null;
                  return _this92;
                }
                return Signature2;
              }(_xfa_object.XFAObject);
              var Signing = /* @__PURE__ */ function(_XFAObject73) {
                _inherits(Signing2, _XFAObject73);
                var _super93 = _createSuper(Signing2);
                function Signing2(attributes) {
                  var _this93;
                  _classCallCheck(this, Signing2);
                  _this93 = _super93.call(this, TEMPLATE_NS_ID, "signing", true);
                  _this93.id = attributes.id || "";
                  _this93.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this93.use = attributes.use || "";
                  _this93.usehref = attributes.usehref || "";
                  _this93.certificate = new _xfa_object.XFAObjectArray();
                  return _this93;
                }
                return Signing2;
              }(_xfa_object.XFAObject);
              var Solid = /* @__PURE__ */ function(_XFAObject74) {
                _inherits(Solid2, _XFAObject74);
                var _super94 = _createSuper(Solid2);
                function Solid2(attributes) {
                  var _this94;
                  _classCallCheck(this, Solid2);
                  _this94 = _super94.call(this, TEMPLATE_NS_ID, "solid", true);
                  _this94.id = attributes.id || "";
                  _this94.use = attributes.use || "";
                  _this94.usehref = attributes.usehref || "";
                  _this94.extras = null;
                  return _this94;
                }
                _createClass(Solid2, [{
                  key: _xfa_object.$toStyle,
                  value: function value(startColor) {
                    return startColor ? startColor[_xfa_object.$toStyle]() : "#FFFFFF";
                  }
                }]);
                return Solid2;
              }(_xfa_object.XFAObject);
              var Speak = /* @__PURE__ */ function(_StringObject10) {
                _inherits(Speak2, _StringObject10);
                var _super95 = _createSuper(Speak2);
                function Speak2(attributes) {
                  var _this95;
                  _classCallCheck(this, Speak2);
                  _this95 = _super95.call(this, TEMPLATE_NS_ID, "speak");
                  _this95.disable = (0, _utils.getInteger)({
                    data: attributes.disable,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this95.id = attributes.id || "";
                  _this95.priority = (0, _utils.getStringOption)(attributes.priority, ["custom", "caption", "name", "toolTip"]);
                  _this95.rid = attributes.rid || "";
                  _this95.use = attributes.use || "";
                  _this95.usehref = attributes.usehref || "";
                  return _this95;
                }
                return Speak2;
              }(_xfa_object.StringObject);
              var Stipple = /* @__PURE__ */ function(_XFAObject75) {
                _inherits(Stipple2, _XFAObject75);
                var _super96 = _createSuper(Stipple2);
                function Stipple2(attributes) {
                  var _this96;
                  _classCallCheck(this, Stipple2);
                  _this96 = _super96.call(this, TEMPLATE_NS_ID, "stipple", true);
                  _this96.id = attributes.id || "";
                  _this96.rate = (0, _utils.getInteger)({
                    data: attributes.rate,
                    defaultValue: 50,
                    validate: function validate(x) {
                      return x >= 0 && x <= 100;
                    }
                  });
                  _this96.use = attributes.use || "";
                  _this96.usehref = attributes.usehref || "";
                  _this96.color = null;
                  _this96.extras = null;
                  return _this96;
                }
                _createClass(Stipple2, [{
                  key: _xfa_object.$toStyle,
                  value: function value(bgColor) {
                    var alpha = this.rate / 100;
                    return _util.Util.makeHexColor(Math.round(bgColor.value.r * (1 - alpha) + this.value.r * alpha), Math.round(bgColor.value.g * (1 - alpha) + this.value.g * alpha), Math.round(bgColor.value.b * (1 - alpha) + this.value.b * alpha));
                  }
                }]);
                return Stipple2;
              }(_xfa_object.XFAObject);
              var Subform = /* @__PURE__ */ function(_XFAObject76) {
                _inherits(Subform2, _XFAObject76);
                var _super97 = _createSuper(Subform2);
                function Subform2(attributes) {
                  var _this97;
                  _classCallCheck(this, Subform2);
                  _this97 = _super97.call(this, TEMPLATE_NS_ID, "subform", true);
                  _this97.access = (0, _utils.getStringOption)(attributes.access, ["open", "nonInteractive", "protected", "readOnly"]);
                  _this97.allowMacro = (0, _utils.getInteger)({
                    data: attributes.allowMacro,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this97.anchorType = (0, _utils.getStringOption)(attributes.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]);
                  _this97.colSpan = (0, _utils.getInteger)({
                    data: attributes.colSpan,
                    defaultValue: 1,
                    validate: function validate(n) {
                      return n >= 1 || n === -1;
                    }
                  });
                  _this97.columnWidths = (attributes.columnWidths || "").trim().split(/\s+/).map(function(x) {
                    return x === "-1" ? -1 : (0, _utils.getMeasurement)(x);
                  });
                  _this97.h = attributes.h ? (0, _utils.getMeasurement)(attributes.h) : "";
                  _this97.hAlign = (0, _utils.getStringOption)(attributes.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]);
                  _this97.id = attributes.id || "";
                  _this97.layout = (0, _utils.getStringOption)(attributes.layout, ["position", "lr-tb", "rl-row", "rl-tb", "row", "table", "tb"]);
                  _this97.locale = attributes.locale || "";
                  _this97.maxH = (0, _utils.getMeasurement)(attributes.maxH, "0pt");
                  _this97.maxW = (0, _utils.getMeasurement)(attributes.maxW, "0pt");
                  _this97.mergeMode = (0, _utils.getStringOption)(attributes.mergeMode, ["consumeData", "matchTemplate"]);
                  _this97.minH = (0, _utils.getMeasurement)(attributes.minH, "0pt");
                  _this97.minW = (0, _utils.getMeasurement)(attributes.minW, "0pt");
                  _this97.name = attributes.name || "";
                  _this97.presence = (0, _utils.getStringOption)(attributes.presence, ["visible", "hidden", "inactive", "invisible"]);
                  _this97.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this97.restoreState = (0, _utils.getStringOption)(attributes.restoreState, ["manual", "auto"]);
                  _this97.scope = (0, _utils.getStringOption)(attributes.scope, ["name", "none"]);
                  _this97.use = attributes.use || "";
                  _this97.usehref = attributes.usehref || "";
                  _this97.w = attributes.w ? (0, _utils.getMeasurement)(attributes.w) : "";
                  _this97.x = (0, _utils.getMeasurement)(attributes.x, "0pt");
                  _this97.y = (0, _utils.getMeasurement)(attributes.y, "0pt");
                  _this97.assist = null;
                  _this97.bind = null;
                  _this97.bookend = null;
                  _this97.border = null;
                  _this97["break"] = null;
                  _this97.calculate = null;
                  _this97.desc = null;
                  _this97.extras = null;
                  _this97.keep = null;
                  _this97.margin = null;
                  _this97.occur = null;
                  _this97.overflow = null;
                  _this97.pageSet = null;
                  _this97.para = null;
                  _this97.traversal = null;
                  _this97.validate = null;
                  _this97.variables = null;
                  _this97.area = new _xfa_object.XFAObjectArray();
                  _this97.breakAfter = new _xfa_object.XFAObjectArray();
                  _this97.breakBefore = new _xfa_object.XFAObjectArray();
                  _this97.connect = new _xfa_object.XFAObjectArray();
                  _this97.draw = new _xfa_object.XFAObjectArray();
                  _this97.event = new _xfa_object.XFAObjectArray();
                  _this97.exObject = new _xfa_object.XFAObjectArray();
                  _this97.exclGroup = new _xfa_object.XFAObjectArray();
                  _this97.field = new _xfa_object.XFAObjectArray();
                  _this97.proto = new _xfa_object.XFAObjectArray();
                  _this97.setProperty = new _xfa_object.XFAObjectArray();
                  _this97.subform = new _xfa_object.XFAObjectArray();
                  _this97.subformSet = new _xfa_object.XFAObjectArray();
                  return _this97;
                }
                _createClass(Subform2, [{
                  key: _xfa_object.$getSubformParent,
                  value: function value() {
                    var parent = this[_xfa_object.$getParent]();
                    if (parent instanceof SubformSet) {
                      return parent[_xfa_object.$getSubformParent]();
                    }
                    return parent;
                  }
                }, {
                  key: _xfa_object.$isBindable,
                  value: function value() {
                    return true;
                  }
                }, {
                  key: _xfa_object.$isThereMoreWidth,
                  value: function value() {
                    return this.layout.endsWith("-tb") && this[_xfa_object.$extra].attempt === 0 && this[_xfa_object.$extra].numberInLine > 0 || this[_xfa_object.$getParent]()[_xfa_object.$isThereMoreWidth]();
                  }
                }, {
                  key: _xfa_object.$getContainedChildren,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value() {
                    return _regenerator["default"].wrap(function value$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            return _context3.delegateYield(getContainedChildren(this), "t0", 1);
                          case 1:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, value, this);
                  })
                }, {
                  key: _xfa_object.$flushHTML,
                  value: function value() {
                    return (0, _layout.flushHTML)(this);
                  }
                }, {
                  key: _xfa_object.$addHTML,
                  value: function value(html, bbox) {
                    (0, _layout.addHTML)(this, html, bbox);
                  }
                }, {
                  key: _xfa_object.$getAvailableSpace,
                  value: function value() {
                    return (0, _layout.getAvailableSpace)(this);
                  }
                }, {
                  key: _xfa_object.$isSplittable,
                  value: function value() {
                    var parent = this[_xfa_object.$getSubformParent]();
                    if (!parent[_xfa_object.$isSplittable]()) {
                      return false;
                    }
                    if (this[_xfa_object.$extra]._isSplittable !== void 0) {
                      return this[_xfa_object.$extra]._isSplittable;
                    }
                    if (this.layout === "position" || this.layout.includes("row")) {
                      this[_xfa_object.$extra]._isSplittable = false;
                      return false;
                    }
                    if (this.keep && this.keep.intact !== "none") {
                      this[_xfa_object.$extra]._isSplittable = false;
                      return false;
                    }
                    if (parent.layout && parent.layout.endsWith("-tb") && parent[_xfa_object.$extra].numberInLine !== 0) {
                      return false;
                    }
                    this[_xfa_object.$extra]._isSplittable = true;
                    return true;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    setTabIndex(this);
                    if (this["break"]) {
                      if (this["break"].after !== "auto" || this["break"].afterTarget !== "") {
                        var node = new BreakAfter({
                          targetType: this["break"].after,
                          target: this["break"].afterTarget,
                          startNew: this["break"].startNew.toString()
                        });
                        node[_xfa_object.$globalData] = this[_xfa_object.$globalData];
                        this[_xfa_object.$appendChild](node);
                        this.breakAfter.push(node);
                      }
                      if (this["break"].before !== "auto" || this["break"].beforeTarget !== "") {
                        var _node = new BreakBefore({
                          targetType: this["break"].before,
                          target: this["break"].beforeTarget,
                          startNew: this["break"].startNew.toString()
                        });
                        _node[_xfa_object.$globalData] = this[_xfa_object.$globalData];
                        this[_xfa_object.$appendChild](_node);
                        this.breakBefore.push(_node);
                      }
                      if (this["break"].overflowTarget !== "") {
                        var _node2 = new Overflow({
                          target: this["break"].overflowTarget,
                          leader: this["break"].overflowLeader,
                          trailer: this["break"].overflowTrailer
                        });
                        _node2[_xfa_object.$globalData] = this[_xfa_object.$globalData];
                        this[_xfa_object.$appendChild](_node2);
                        this.overflow.push(_node2);
                      }
                      this[_xfa_object.$removeChild](this["break"]);
                      this["break"] = null;
                    }
                    if (this.presence === "hidden" || this.presence === "inactive") {
                      return _utils.HTMLResult.EMPTY;
                    }
                    if (this.breakBefore.children.length > 1 || this.breakAfter.children.length > 1) {
                      (0, _util.warn)("XFA - Several breakBefore or breakAfter in subforms: please file a bug.");
                    }
                    if (this.breakBefore.children.length >= 1) {
                      var breakBefore = this.breakBefore.children[0];
                      if (handleBreak(breakBefore)) {
                        return _utils.HTMLResult.breakNode(breakBefore);
                      }
                    }
                    if (this[_xfa_object.$extra] && this[_xfa_object.$extra].afterBreakAfter) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    (0, _html_utils.fixDimensions)(this);
                    var children = [];
                    var attributes = {
                      id: this[_xfa_object.$uid],
                      "class": []
                    };
                    (0, _html_utils.setAccess)(this, attributes["class"]);
                    if (!this[_xfa_object.$extra]) {
                      this[_xfa_object.$extra] = /* @__PURE__ */ Object.create(null);
                    }
                    Object.assign(this[_xfa_object.$extra], {
                      children,
                      line: null,
                      attributes,
                      attempt: 0,
                      numberInLine: 0,
                      availableSpace: {
                        width: Math.min(this.w || Infinity, availableSpace.width),
                        height: Math.min(this.h || Infinity, availableSpace.height)
                      },
                      width: 0,
                      height: 0,
                      prevHeight: 0,
                      currentWidth: 0
                    });
                    var root = this[_xfa_object.$getTemplateRoot]();
                    var savedNoLayoutFailure = root[_xfa_object.$extra].noLayoutFailure;
                    var isSplittable = this[_xfa_object.$isSplittable]();
                    if (!isSplittable) {
                      setFirstUnsplittable(this);
                    }
                    if (!(0, _layout.checkDimensions)(this, availableSpace)) {
                      return _utils.HTMLResult.FAILURE;
                    }
                    var filter = /* @__PURE__ */ new Set(["area", "draw", "exclGroup", "field", "subform", "subformSet"]);
                    if (this.layout.includes("row")) {
                      var columnWidths = this[_xfa_object.$getSubformParent]().columnWidths;
                      if (Array.isArray(columnWidths) && columnWidths.length > 0) {
                        this[_xfa_object.$extra].columnWidths = columnWidths;
                        this[_xfa_object.$extra].currentColumn = 0;
                      }
                    }
                    var style = (0, _html_utils.toStyle)(this, "anchorType", "dimensions", "position", "presence", "border", "margin", "hAlign");
                    var classNames = ["xfaSubform"];
                    var cl = (0, _html_utils.layoutClass)(this);
                    if (cl) {
                      classNames.push(cl);
                    }
                    attributes.style = style;
                    attributes["class"] = classNames;
                    if (this.name) {
                      attributes.xfaName = this.name;
                    }
                    if (this.overflow) {
                      var overflowExtra = this.overflow[_xfa_object.$getExtra]();
                      if (overflowExtra.addLeader) {
                        overflowExtra.addLeader = false;
                        handleOverflow(this, overflowExtra.leader, availableSpace);
                      }
                    }
                    this[_xfa_object.$pushPara]();
                    var isLrTb = this.layout === "lr-tb" || this.layout === "rl-tb";
                    var maxRun = isLrTb ? MAX_ATTEMPTS_FOR_LRTB_LAYOUT : 1;
                    for (; this[_xfa_object.$extra].attempt < maxRun; this[_xfa_object.$extra].attempt++) {
                      if (isLrTb && this[_xfa_object.$extra].attempt === MAX_ATTEMPTS_FOR_LRTB_LAYOUT - 1) {
                        this[_xfa_object.$extra].numberInLine = 0;
                      }
                      var _result = this[_xfa_object.$childrenToHTML]({
                        filter,
                        include: true
                      });
                      if (_result.success) {
                        break;
                      }
                      if (_result.isBreak()) {
                        this[_xfa_object.$popPara]();
                        return _result;
                      }
                      if (isLrTb && this[_xfa_object.$extra].attempt === 0 && this[_xfa_object.$extra].numberInLine === 0 && !root[_xfa_object.$extra].noLayoutFailure) {
                        this[_xfa_object.$extra].attempt = maxRun;
                        break;
                      }
                    }
                    this[_xfa_object.$popPara]();
                    if (!isSplittable) {
                      unsetFirstUnsplittable(this);
                    }
                    root[_xfa_object.$extra].noLayoutFailure = savedNoLayoutFailure;
                    if (this[_xfa_object.$extra].attempt === maxRun) {
                      if (this.overflow) {
                        this[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].overflowNode = this.overflow;
                      }
                      if (!isSplittable) {
                        delete this[_xfa_object.$extra];
                      }
                      return _utils.HTMLResult.FAILURE;
                    }
                    if (this.overflow) {
                      var _overflowExtra = this.overflow[_xfa_object.$getExtra]();
                      if (_overflowExtra.addTrailer) {
                        _overflowExtra.addTrailer = false;
                        handleOverflow(this, _overflowExtra.trailer, availableSpace);
                      }
                    }
                    var marginH = 0;
                    var marginV = 0;
                    if (this.margin) {
                      marginH = this.margin.leftInset + this.margin.rightInset;
                      marginV = this.margin.topInset + this.margin.bottomInset;
                    }
                    var width = Math.max(this[_xfa_object.$extra].width + marginH, this.w || 0);
                    var height = Math.max(this[_xfa_object.$extra].height + marginV, this.h || 0);
                    var bbox = [this.x, this.y, width, height];
                    if (this.w === "") {
                      style.width = (0, _html_utils.measureToString)(width);
                    }
                    if (this.h === "") {
                      style.height = (0, _html_utils.measureToString)(height);
                    }
                    if ((style.width === "0px" || style.height === "0px") && children.length === 0) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    var html = {
                      name: "div",
                      attributes,
                      children
                    };
                    applyAssist(this, attributes);
                    var result = _utils.HTMLResult.success((0, _html_utils.createWrapper)(this, html), bbox);
                    if (this.breakAfter.children.length >= 1) {
                      var breakAfter = this.breakAfter.children[0];
                      if (handleBreak(breakAfter)) {
                        this[_xfa_object.$extra].afterBreakAfter = result;
                        return _utils.HTMLResult.breakNode(breakAfter);
                      }
                    }
                    delete this[_xfa_object.$extra];
                    return result;
                  }
                }]);
                return Subform2;
              }(_xfa_object.XFAObject);
              var SubformSet = /* @__PURE__ */ function(_XFAObject77) {
                _inherits(SubformSet2, _XFAObject77);
                var _super98 = _createSuper(SubformSet2);
                function SubformSet2(attributes) {
                  var _this98;
                  _classCallCheck(this, SubformSet2);
                  _this98 = _super98.call(this, TEMPLATE_NS_ID, "subformSet", true);
                  _this98.id = attributes.id || "";
                  _this98.name = attributes.name || "";
                  _this98.relation = (0, _utils.getStringOption)(attributes.relation, ["ordered", "choice", "unordered"]);
                  _this98.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this98.use = attributes.use || "";
                  _this98.usehref = attributes.usehref || "";
                  _this98.bookend = null;
                  _this98["break"] = null;
                  _this98.desc = null;
                  _this98.extras = null;
                  _this98.occur = null;
                  _this98.overflow = null;
                  _this98.breakAfter = new _xfa_object.XFAObjectArray();
                  _this98.breakBefore = new _xfa_object.XFAObjectArray();
                  _this98.subform = new _xfa_object.XFAObjectArray();
                  _this98.subformSet = new _xfa_object.XFAObjectArray();
                  return _this98;
                }
                _createClass(SubformSet2, [{
                  key: _xfa_object.$getContainedChildren,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value() {
                    return _regenerator["default"].wrap(function value$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            return _context4.delegateYield(getContainedChildren(this), "t0", 1);
                          case 1:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, value, this);
                  })
                }, {
                  key: _xfa_object.$getSubformParent,
                  value: function value() {
                    var parent = this[_xfa_object.$getParent]();
                    while (!(parent instanceof Subform)) {
                      parent = parent[_xfa_object.$getParent]();
                    }
                    return parent;
                  }
                }, {
                  key: _xfa_object.$isBindable,
                  value: function value() {
                    return true;
                  }
                }]);
                return SubformSet2;
              }(_xfa_object.XFAObject);
              var SubjectDN = /* @__PURE__ */ function(_ContentObject8) {
                _inherits(SubjectDN2, _ContentObject8);
                var _super99 = _createSuper(SubjectDN2);
                function SubjectDN2(attributes) {
                  var _this99;
                  _classCallCheck(this, SubjectDN2);
                  _this99 = _super99.call(this, TEMPLATE_NS_ID, "subjectDN");
                  _this99.delimiter = attributes.delimiter || ",";
                  _this99.id = attributes.id || "";
                  _this99.name = attributes.name || "";
                  _this99.use = attributes.use || "";
                  _this99.usehref = attributes.usehref || "";
                  return _this99;
                }
                _createClass(SubjectDN2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    this[_xfa_object.$content] = new Map(this[_xfa_object.$content].split(this.delimiter).map(function(kv) {
                      kv = kv.split("=", 2);
                      kv[0] = kv[0].trim();
                      return kv;
                    }));
                  }
                }]);
                return SubjectDN2;
              }(_xfa_object.ContentObject);
              var SubjectDNs = /* @__PURE__ */ function(_XFAObject78) {
                _inherits(SubjectDNs2, _XFAObject78);
                var _super100 = _createSuper(SubjectDNs2);
                function SubjectDNs2(attributes) {
                  var _this100;
                  _classCallCheck(this, SubjectDNs2);
                  _this100 = _super100.call(this, TEMPLATE_NS_ID, "subjectDNs", true);
                  _this100.id = attributes.id || "";
                  _this100.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this100.use = attributes.use || "";
                  _this100.usehref = attributes.usehref || "";
                  _this100.subjectDN = new _xfa_object.XFAObjectArray();
                  return _this100;
                }
                return SubjectDNs2;
              }(_xfa_object.XFAObject);
              var Submit = /* @__PURE__ */ function(_XFAObject79) {
                _inherits(Submit2, _XFAObject79);
                var _super101 = _createSuper(Submit2);
                function Submit2(attributes) {
                  var _this101;
                  _classCallCheck(this, Submit2);
                  _this101 = _super101.call(this, TEMPLATE_NS_ID, "submit", true);
                  _this101.embedPDF = (0, _utils.getInteger)({
                    data: attributes.embedPDF,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this101.format = (0, _utils.getStringOption)(attributes.format, ["xdp", "formdata", "pdf", "urlencoded", "xfd", "xml"]);
                  _this101.id = attributes.id || "";
                  _this101.target = attributes.target || "";
                  _this101.textEncoding = (0, _utils.getKeyword)({
                    data: attributes.textEncoding ? attributes.textEncoding.toLowerCase() : "",
                    defaultValue: "",
                    validate: function validate(k) {
                      return ["utf-8", "big-five", "fontspecific", "gbk", "gb-18030", "gb-2312", "ksc-5601", "none", "shift-jis", "ucs-2", "utf-16"].includes(k) || k.match(/iso-8859-\d{2}/);
                    }
                  });
                  _this101.use = attributes.use || "";
                  _this101.usehref = attributes.usehref || "";
                  _this101.xdpContent = attributes.xdpContent || "";
                  _this101.encrypt = null;
                  _this101.encryptData = new _xfa_object.XFAObjectArray();
                  _this101.signData = new _xfa_object.XFAObjectArray();
                  return _this101;
                }
                return Submit2;
              }(_xfa_object.XFAObject);
              var Template = /* @__PURE__ */ function(_XFAObject80) {
                _inherits(Template2, _XFAObject80);
                var _super102 = _createSuper(Template2);
                function Template2(attributes) {
                  var _this102;
                  _classCallCheck(this, Template2);
                  _this102 = _super102.call(this, TEMPLATE_NS_ID, "template", true);
                  _this102.baseProfile = (0, _utils.getStringOption)(attributes.baseProfile, ["full", "interactiveForms"]);
                  _this102.extras = null;
                  _this102.subform = new _xfa_object.XFAObjectArray();
                  return _this102;
                }
                _createClass(Template2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    if (this.subform.children.length === 0) {
                      (0, _util.warn)("XFA - No subforms in template node.");
                    }
                    if (this.subform.children.length >= 2) {
                      (0, _util.warn)("XFA - Several subforms in template node: please file a bug.");
                    }
                    this[_xfa_object.$tabIndex] = DEFAULT_TAB_INDEX;
                  }
                }, {
                  key: _xfa_object.$isSplittable,
                  value: function value() {
                    return true;
                  }
                }, {
                  key: _xfa_object.$searchNode,
                  value: function value(expr, container) {
                    if (expr.startsWith("#")) {
                      return [this[_xfa_object.$ids].get(expr.slice(1))];
                    }
                    return (0, _som.searchNode)(this, container, expr, true, true);
                  }
                }, {
                  key: _xfa_object.$toPages,
                  value: /* @__PURE__ */ _regenerator["default"].mark(function value() {
                    var _this103 = this;
                    var root, pageAreas, mainHtml, pageArea, breakBefore, breakBeforeTarget, target, pageAreaParent, targetPageArea, leader, trailer, hasSomething, hasSomethingCounter, startIndex, _loop, _ret;
                    return _regenerator["default"].wrap(function value$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            if (this.subform.children.length) {
                              _context6.next = 2;
                              break;
                            }
                            return _context6.abrupt("return", _utils.HTMLResult.success({
                              name: "div",
                              children: []
                            }));
                          case 2:
                            this[_xfa_object.$extra] = {
                              overflowNode: null,
                              firstUnsplittable: null,
                              currentContentArea: null,
                              currentPageArea: null,
                              noLayoutFailure: false,
                              pageNumber: 1,
                              pagePosition: "first",
                              oddOrEven: "odd",
                              blankOrNotBlank: "nonBlank",
                              paraStack: []
                            };
                            root = this.subform.children[0];
                            root.pageSet[_xfa_object.$cleanPage]();
                            pageAreas = root.pageSet.pageArea.children;
                            mainHtml = {
                              name: "div",
                              children: []
                            };
                            pageArea = null;
                            breakBefore = null;
                            breakBeforeTarget = null;
                            if (root.breakBefore.children.length >= 1) {
                              breakBefore = root.breakBefore.children[0];
                              breakBeforeTarget = breakBefore.target;
                            } else if (root.subform.children.length >= 1 && root.subform.children[0].breakBefore.children.length >= 1) {
                              breakBefore = root.subform.children[0].breakBefore.children[0];
                              breakBeforeTarget = breakBefore.target;
                            } else if (root["break"] && root["break"].beforeTarget) {
                              breakBefore = root["break"];
                              breakBeforeTarget = breakBefore.beforeTarget;
                            } else if (root.subform.children.length >= 1 && root.subform.children[0]["break"] && root.subform.children[0]["break"].beforeTarget) {
                              breakBefore = root.subform.children[0]["break"];
                              breakBeforeTarget = breakBefore.beforeTarget;
                            }
                            if (breakBefore) {
                              target = this[_xfa_object.$searchNode](breakBeforeTarget, breakBefore[_xfa_object.$getParent]());
                              if (target instanceof PageArea) {
                                pageArea = target;
                                breakBefore[_xfa_object.$extra] = {};
                              }
                            }
                            if (!pageArea) {
                              pageArea = pageAreas[0];
                            }
                            pageArea[_xfa_object.$extra] = {
                              numberOfUse: 1
                            };
                            pageAreaParent = pageArea[_xfa_object.$getParent]();
                            pageAreaParent[_xfa_object.$extra] = {
                              numberOfUse: 1,
                              pageIndex: pageAreaParent.pageArea.children.indexOf(pageArea),
                              pageSetIndex: 0
                            };
                            leader = null;
                            trailer = null;
                            hasSomething = true;
                            hasSomethingCounter = 0;
                            startIndex = 0;
                            _loop = /* @__PURE__ */ _regenerator["default"].mark(function _loop2() {
                              var page, contentAreas, htmlContentAreas, flush, i, ii, contentArea, space, html, node, _ret2;
                              return _regenerator["default"].wrap(function _loop$(_context5) {
                                while (1) {
                                  switch (_context5.prev = _context5.next) {
                                    case 0:
                                      if (hasSomething) {
                                        _context5.next = 7;
                                        break;
                                      }
                                      mainHtml.children.pop();
                                      if (!(++hasSomethingCounter === MAX_EMPTY_PAGES)) {
                                        _context5.next = 5;
                                        break;
                                      }
                                      (0, _util.warn)("XFA - Something goes wrong: please file a bug.");
                                      return _context5.abrupt("return", {
                                        v: mainHtml
                                      });
                                    case 5:
                                      _context5.next = 8;
                                      break;
                                    case 7:
                                      hasSomethingCounter = 0;
                                    case 8:
                                      targetPageArea = null;
                                      _this103[_xfa_object.$extra].currentPageArea = pageArea;
                                      page = pageArea[_xfa_object.$toHTML]().html;
                                      mainHtml.children.push(page);
                                      if (leader) {
                                        _this103[_xfa_object.$extra].noLayoutFailure = true;
                                        page.children.push(leader[_xfa_object.$toHTML](pageArea[_xfa_object.$extra].space).html);
                                        leader = null;
                                      }
                                      if (trailer) {
                                        _this103[_xfa_object.$extra].noLayoutFailure = true;
                                        page.children.push(trailer[_xfa_object.$toHTML](pageArea[_xfa_object.$extra].space).html);
                                        trailer = null;
                                      }
                                      contentAreas = pageArea.contentArea.children;
                                      htmlContentAreas = page.children.filter(function(node2) {
                                        return node2.attributes["class"].includes("xfaContentarea");
                                      });
                                      hasSomething = false;
                                      _this103[_xfa_object.$extra].firstUnsplittable = null;
                                      _this103[_xfa_object.$extra].noLayoutFailure = false;
                                      flush = function flush2(index) {
                                        var html2 = root[_xfa_object.$flushHTML]();
                                        if (html2) {
                                          hasSomething = hasSomething || html2.children && html2.children.length !== 0;
                                          htmlContentAreas[index].children.push(html2);
                                        }
                                      };
                                      i = startIndex, ii = contentAreas.length;
                                    case 21:
                                      if (!(i < ii)) {
                                        _context5.next = 48;
                                        break;
                                      }
                                      contentArea = _this103[_xfa_object.$extra].currentContentArea = contentAreas[i];
                                      space = {
                                        width: contentArea.w,
                                        height: contentArea.h
                                      };
                                      startIndex = 0;
                                      if (leader) {
                                        htmlContentAreas[i].children.push(leader[_xfa_object.$toHTML](space).html);
                                        leader = null;
                                      }
                                      if (trailer) {
                                        htmlContentAreas[i].children.push(trailer[_xfa_object.$toHTML](space).html);
                                        trailer = null;
                                      }
                                      html = root[_xfa_object.$toHTML](space);
                                      if (!html.success) {
                                        _context5.next = 31;
                                        break;
                                      }
                                      if (html.html) {
                                        hasSomething = hasSomething || html.html.children && html.html.children.length !== 0;
                                        htmlContentAreas[i].children.push(html.html);
                                      } else if (!hasSomething && mainHtml.children.length > 1) {
                                        mainHtml.children.pop();
                                      }
                                      return _context5.abrupt("return", {
                                        v: mainHtml
                                      });
                                    case 31:
                                      if (!html.isBreak()) {
                                        _context5.next = 40;
                                        break;
                                      }
                                      node = html.breakNode;
                                      flush(i);
                                      if (!(node.targetType === "auto")) {
                                        _context5.next = 36;
                                        break;
                                      }
                                      return _context5.abrupt("continue", 45);
                                    case 36:
                                      if (node.leader) {
                                        leader = _this103[_xfa_object.$searchNode](node.leader, node[_xfa_object.$getParent]());
                                        leader = leader ? leader[0] : null;
                                      }
                                      if (node.trailer) {
                                        trailer = _this103[_xfa_object.$searchNode](node.trailer, node[_xfa_object.$getParent]());
                                        trailer = trailer ? trailer[0] : null;
                                      }
                                      if (node.targetType === "pageArea") {
                                        targetPageArea = node[_xfa_object.$extra].target;
                                        i = Infinity;
                                      } else if (!node[_xfa_object.$extra].target) {
                                        i = node[_xfa_object.$extra].index;
                                      } else {
                                        targetPageArea = node[_xfa_object.$extra].target;
                                        startIndex = node[_xfa_object.$extra].index + 1;
                                        i = Infinity;
                                      }
                                      return _context5.abrupt("continue", 45);
                                    case 40:
                                      if (!_this103[_xfa_object.$extra].overflowNode) {
                                        _context5.next = 44;
                                        break;
                                      }
                                      _ret2 = function() {
                                        var node2 = _this103[_xfa_object.$extra].overflowNode;
                                        _this103[_xfa_object.$extra].overflowNode = null;
                                        var overflowExtra = node2[_xfa_object.$getExtra]();
                                        var target2 = overflowExtra.target;
                                        overflowExtra.addLeader = overflowExtra.leader !== null;
                                        overflowExtra.addTrailer = overflowExtra.trailer !== null;
                                        flush(i);
                                        var currentIndex = i;
                                        i = Infinity;
                                        if (target2 instanceof PageArea) {
                                          targetPageArea = target2;
                                        } else if (target2 instanceof ContentArea) {
                                          var index = contentAreas.findIndex(function(e) {
                                            return e === target2;
                                          });
                                          if (index !== -1) {
                                            if (index > currentIndex) {
                                              i = index - 1;
                                            } else {
                                              startIndex = index;
                                            }
                                          } else {
                                            targetPageArea = target2[_xfa_object.$getParent]();
                                            startIndex = targetPageArea.contentArea.children.findIndex(function(e) {
                                              return e === target2;
                                            });
                                          }
                                        }
                                        return "continue";
                                      }();
                                      if (!(_ret2 === "continue")) {
                                        _context5.next = 44;
                                        break;
                                      }
                                      return _context5.abrupt("continue", 45);
                                    case 44:
                                      flush(i);
                                    case 45:
                                      i++;
                                      _context5.next = 21;
                                      break;
                                    case 48:
                                      _this103[_xfa_object.$extra].pageNumber += 1;
                                      if (targetPageArea) {
                                        if (targetPageArea[_xfa_object.$isUsable]()) {
                                          targetPageArea[_xfa_object.$extra].numberOfUse += 1;
                                        } else {
                                          targetPageArea = null;
                                        }
                                      }
                                      pageArea = targetPageArea || pageArea[_xfa_object.$getNextPage]();
                                      _context5.next = 53;
                                      return null;
                                    case 53:
                                    case "end":
                                      return _context5.stop();
                                  }
                                }
                              }, _loop2);
                            });
                          case 22:
                            if (false) {
                            }
                            return _context6.delegateYield(_loop(), "t0", 24);
                          case 24:
                            _ret = _context6.t0;
                            if (!(_typeof(_ret) === "object")) {
                              _context6.next = 27;
                              break;
                            }
                            return _context6.abrupt("return", _ret.v);
                          case 27:
                            _context6.next = 22;
                            break;
                          case 29:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, value, this);
                  })
                }]);
                return Template2;
              }(_xfa_object.XFAObject);
              exports2.Template = Template;
              var Text = /* @__PURE__ */ function(_ContentObject9) {
                _inherits(Text2, _ContentObject9);
                var _super103 = _createSuper(Text2);
                function Text2(attributes) {
                  var _this104;
                  _classCallCheck(this, Text2);
                  _this104 = _super103.call(this, TEMPLATE_NS_ID, "text");
                  _this104.id = attributes.id || "";
                  _this104.maxChars = (0, _utils.getInteger)({
                    data: attributes.maxChars,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x >= 0;
                    }
                  });
                  _this104.name = attributes.name || "";
                  _this104.rid = attributes.rid || "";
                  _this104.use = attributes.use || "";
                  _this104.usehref = attributes.usehref || "";
                  return _this104;
                }
                _createClass(Text2, [{
                  key: _xfa_object.$acceptWhitespace,
                  value: function value() {
                    return true;
                  }
                }, {
                  key: _xfa_object.$onChild,
                  value: function value(child) {
                    if (child[_xfa_object.$namespaceId] === _namespaces.NamespaceIds.xhtml.id) {
                      this[_xfa_object.$content] = child;
                      return true;
                    }
                    (0, _util.warn)("XFA - Invalid content in Text: ".concat(child[_xfa_object.$nodeName], "."));
                    return false;
                  }
                }, {
                  key: _xfa_object.$onText,
                  value: function value(str) {
                    if (this[_xfa_object.$content] instanceof _xfa_object.XFAObject) {
                      return;
                    }
                    _get(_getPrototypeOf(Text2.prototype), _xfa_object.$onText, this).call(this, str);
                  }
                }, {
                  key: _xfa_object.$finalize,
                  value: function value() {
                    if (typeof this[_xfa_object.$content] === "string") {
                      this[_xfa_object.$content] = this[_xfa_object.$content].replace(/\r\n/g, "\n");
                    }
                  }
                }, {
                  key: _xfa_object.$getExtra,
                  value: function value() {
                    if (typeof this[_xfa_object.$content] === "string") {
                      return this[_xfa_object.$content].split(/[\u2029\u2028\n]/).reduce(function(acc, line) {
                        if (line) {
                          acc.push(line);
                        }
                        return acc;
                      }, []).join("\n");
                    }
                    return this[_xfa_object.$content][_xfa_object.$text]();
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    if (typeof this[_xfa_object.$content] === "string") {
                      var html = valueToHtml(this[_xfa_object.$content]).html;
                      if (this[_xfa_object.$content].includes("\u2029")) {
                        html.name = "div";
                        html.children = [];
                        this[_xfa_object.$content].split("\u2029").map(function(para) {
                          return para.split(/[\u2028\n]/).reduce(function(acc, line) {
                            acc.push({
                              name: "span",
                              value: line
                            }, {
                              name: "br"
                            });
                            return acc;
                          }, []);
                        }).forEach(function(lines) {
                          html.children.push({
                            name: "p",
                            children: lines
                          });
                        });
                      } else if (/[\u2028\n]/.test(this[_xfa_object.$content])) {
                        html.name = "div";
                        html.children = [];
                        this[_xfa_object.$content].split(/[\u2028\n]/).forEach(function(line) {
                          html.children.push({
                            name: "span",
                            value: line
                          }, {
                            name: "br"
                          });
                        });
                      }
                      return _utils.HTMLResult.success(html);
                    }
                    return this[_xfa_object.$content][_xfa_object.$toHTML](availableSpace);
                  }
                }]);
                return Text2;
              }(_xfa_object.ContentObject);
              exports2.Text = Text;
              var TextEdit = /* @__PURE__ */ function(_XFAObject81) {
                _inherits(TextEdit2, _XFAObject81);
                var _super104 = _createSuper(TextEdit2);
                function TextEdit2(attributes) {
                  var _this105;
                  _classCallCheck(this, TextEdit2);
                  _this105 = _super104.call(this, TEMPLATE_NS_ID, "textEdit", true);
                  _this105.allowRichText = (0, _utils.getInteger)({
                    data: attributes.allowRichText,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this105.hScrollPolicy = (0, _utils.getStringOption)(attributes.hScrollPolicy, ["auto", "off", "on"]);
                  _this105.id = attributes.id || "";
                  _this105.multiLine = (0, _utils.getInteger)({
                    data: attributes.multiLine,
                    defaultValue: "",
                    validate: function validate(x) {
                      return x === 0 || x === 1;
                    }
                  });
                  _this105.use = attributes.use || "";
                  _this105.usehref = attributes.usehref || "";
                  _this105.vScrollPolicy = (0, _utils.getStringOption)(attributes.vScrollPolicy, ["auto", "off", "on"]);
                  _this105.border = null;
                  _this105.comb = null;
                  _this105.extras = null;
                  _this105.margin = null;
                  return _this105;
                }
                _createClass(TextEdit2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var style = (0, _html_utils.toStyle)(this, "border", "font", "margin");
                    var html;
                    var field = this[_xfa_object.$getParent]()[_xfa_object.$getParent]();
                    if (this.multiLine === "") {
                      this.multiLine = field instanceof Draw ? 1 : 0;
                    }
                    if (this.multiLine === 1) {
                      html = {
                        name: "textarea",
                        attributes: {
                          dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],
                          fieldId: field[_xfa_object.$uid],
                          "class": ["xfaTextfield"],
                          style,
                          "aria-label": ariaLabel(field)
                        }
                      };
                    } else {
                      html = {
                        name: "input",
                        attributes: {
                          type: "text",
                          dataId: field[_xfa_object.$data] && field[_xfa_object.$data][_xfa_object.$uid] || field[_xfa_object.$uid],
                          fieldId: field[_xfa_object.$uid],
                          "class": ["xfaTextfield"],
                          style,
                          "aria-label": ariaLabel(field)
                        }
                      };
                    }
                    return _utils.HTMLResult.success({
                      name: "label",
                      attributes: {
                        "class": ["xfaLabel"]
                      },
                      children: [html]
                    });
                  }
                }]);
                return TextEdit2;
              }(_xfa_object.XFAObject);
              var Time = /* @__PURE__ */ function(_StringObject11) {
                _inherits(Time2, _StringObject11);
                var _super105 = _createSuper(Time2);
                function Time2(attributes) {
                  var _this106;
                  _classCallCheck(this, Time2);
                  _this106 = _super105.call(this, TEMPLATE_NS_ID, "time");
                  _this106.id = attributes.id || "";
                  _this106.name = attributes.name || "";
                  _this106.use = attributes.use || "";
                  _this106.usehref = attributes.usehref || "";
                  return _this106;
                }
                _createClass(Time2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    var date = this[_xfa_object.$content].trim();
                    this[_xfa_object.$content] = date ? new Date(date) : null;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    return valueToHtml(this[_xfa_object.$content] ? this[_xfa_object.$content].toString() : "");
                  }
                }]);
                return Time2;
              }(_xfa_object.StringObject);
              var TimeStamp = /* @__PURE__ */ function(_XFAObject82) {
                _inherits(TimeStamp2, _XFAObject82);
                var _super106 = _createSuper(TimeStamp2);
                function TimeStamp2(attributes) {
                  var _this107;
                  _classCallCheck(this, TimeStamp2);
                  _this107 = _super106.call(this, TEMPLATE_NS_ID, "timeStamp");
                  _this107.id = attributes.id || "";
                  _this107.server = attributes.server || "";
                  _this107.type = (0, _utils.getStringOption)(attributes.type, ["optional", "required"]);
                  _this107.use = attributes.use || "";
                  _this107.usehref = attributes.usehref || "";
                  return _this107;
                }
                return TimeStamp2;
              }(_xfa_object.XFAObject);
              var ToolTip = /* @__PURE__ */ function(_StringObject12) {
                _inherits(ToolTip2, _StringObject12);
                var _super107 = _createSuper(ToolTip2);
                function ToolTip2(attributes) {
                  var _this108;
                  _classCallCheck(this, ToolTip2);
                  _this108 = _super107.call(this, TEMPLATE_NS_ID, "toolTip");
                  _this108.id = attributes.id || "";
                  _this108.rid = attributes.rid || "";
                  _this108.use = attributes.use || "";
                  _this108.usehref = attributes.usehref || "";
                  return _this108;
                }
                return ToolTip2;
              }(_xfa_object.StringObject);
              var Traversal = /* @__PURE__ */ function(_XFAObject83) {
                _inherits(Traversal2, _XFAObject83);
                var _super108 = _createSuper(Traversal2);
                function Traversal2(attributes) {
                  var _this109;
                  _classCallCheck(this, Traversal2);
                  _this109 = _super108.call(this, TEMPLATE_NS_ID, "traversal", true);
                  _this109.id = attributes.id || "";
                  _this109.use = attributes.use || "";
                  _this109.usehref = attributes.usehref || "";
                  _this109.extras = null;
                  _this109.traverse = new _xfa_object.XFAObjectArray();
                  return _this109;
                }
                return Traversal2;
              }(_xfa_object.XFAObject);
              var Traverse = /* @__PURE__ */ function(_XFAObject84) {
                _inherits(Traverse2, _XFAObject84);
                var _super109 = _createSuper(Traverse2);
                function Traverse2(attributes) {
                  var _this110;
                  _classCallCheck(this, Traverse2);
                  _this110 = _super109.call(this, TEMPLATE_NS_ID, "traverse", true);
                  _this110.id = attributes.id || "";
                  _this110.operation = (0, _utils.getStringOption)(attributes.operation, ["next", "back", "down", "first", "left", "right", "up"]);
                  _this110.ref = attributes.ref || "";
                  _this110.use = attributes.use || "";
                  _this110.usehref = attributes.usehref || "";
                  _this110.extras = null;
                  _this110.script = null;
                  return _this110;
                }
                _createClass(Traverse2, [{
                  key: "name",
                  get: function get() {
                    return this.operation;
                  }
                }, {
                  key: _xfa_object.$isTransparent,
                  value: function value() {
                    return false;
                  }
                }]);
                return Traverse2;
              }(_xfa_object.XFAObject);
              var Ui = /* @__PURE__ */ function(_XFAObject85) {
                _inherits(Ui2, _XFAObject85);
                var _super110 = _createSuper(Ui2);
                function Ui2(attributes) {
                  var _this111;
                  _classCallCheck(this, Ui2);
                  _this111 = _super110.call(this, TEMPLATE_NS_ID, "ui", true);
                  _this111.id = attributes.id || "";
                  _this111.use = attributes.use || "";
                  _this111.usehref = attributes.usehref || "";
                  _this111.extras = null;
                  _this111.picture = null;
                  _this111.barcode = null;
                  _this111.button = null;
                  _this111.checkButton = null;
                  _this111.choiceList = null;
                  _this111.dateTimeEdit = null;
                  _this111.defaultUi = null;
                  _this111.imageEdit = null;
                  _this111.numericEdit = null;
                  _this111.passwordEdit = null;
                  _this111.signature = null;
                  _this111.textEdit = null;
                  return _this111;
                }
                _createClass(Ui2, [{
                  key: _xfa_object.$getExtra,
                  value: function value() {
                    if (this[_xfa_object.$extra] === void 0) {
                      var _iterator10 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)), _step10;
                      try {
                        for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                          var name = _step10.value;
                          if (name === "extras" || name === "picture") {
                            continue;
                          }
                          var obj = this[name];
                          if (!(obj instanceof _xfa_object.XFAObject)) {
                            continue;
                          }
                          this[_xfa_object.$extra] = obj;
                          return obj;
                        }
                      } catch (err) {
                        _iterator10.e(err);
                      } finally {
                        _iterator10.f();
                      }
                      this[_xfa_object.$extra] = null;
                    }
                    return this[_xfa_object.$extra];
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var obj = this[_xfa_object.$getExtra]();
                    if (obj) {
                      return obj[_xfa_object.$toHTML](availableSpace);
                    }
                    return _utils.HTMLResult.EMPTY;
                  }
                }]);
                return Ui2;
              }(_xfa_object.XFAObject);
              var Validate = /* @__PURE__ */ function(_XFAObject86) {
                _inherits(Validate2, _XFAObject86);
                var _super111 = _createSuper(Validate2);
                function Validate2(attributes) {
                  var _this112;
                  _classCallCheck(this, Validate2);
                  _this112 = _super111.call(this, TEMPLATE_NS_ID, "validate", true);
                  _this112.formatTest = (0, _utils.getStringOption)(attributes.formatTest, ["warning", "disabled", "error"]);
                  _this112.id = attributes.id || "";
                  _this112.nullTest = (0, _utils.getStringOption)(attributes.nullTest, ["disabled", "error", "warning"]);
                  _this112.scriptTest = (0, _utils.getStringOption)(attributes.scriptTest, ["error", "disabled", "warning"]);
                  _this112.use = attributes.use || "";
                  _this112.usehref = attributes.usehref || "";
                  _this112.extras = null;
                  _this112.message = null;
                  _this112.picture = null;
                  _this112.script = null;
                  return _this112;
                }
                return Validate2;
              }(_xfa_object.XFAObject);
              var Value = /* @__PURE__ */ function(_XFAObject87) {
                _inherits(Value2, _XFAObject87);
                var _super112 = _createSuper(Value2);
                function Value2(attributes) {
                  var _this113;
                  _classCallCheck(this, Value2);
                  _this113 = _super112.call(this, TEMPLATE_NS_ID, "value", true);
                  _this113.id = attributes.id || "";
                  _this113.override = (0, _utils.getInteger)({
                    data: attributes.override,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this113.relevant = (0, _utils.getRelevant)(attributes.relevant);
                  _this113.use = attributes.use || "";
                  _this113.usehref = attributes.usehref || "";
                  _this113.arc = null;
                  _this113["boolean"] = null;
                  _this113.date = null;
                  _this113.dateTime = null;
                  _this113.decimal = null;
                  _this113.exData = null;
                  _this113["float"] = null;
                  _this113.image = null;
                  _this113.integer = null;
                  _this113.line = null;
                  _this113.rectangle = null;
                  _this113.text = null;
                  _this113.time = null;
                  return _this113;
                }
                _createClass(Value2, [{
                  key: _xfa_object.$setValue,
                  value: function(_value7) {
                    function value(_x5) {
                      return _value7.apply(this, arguments);
                    }
                    value.toString = function() {
                      return _value7.toString();
                    };
                    return value;
                  }(function(value) {
                    var parent = this[_xfa_object.$getParent]();
                    if (parent instanceof Field) {
                      if (parent.ui && parent.ui.imageEdit) {
                        if (!this.image) {
                          this.image = new Image({});
                          this[_xfa_object.$appendChild](this.image);
                        }
                        this.image[_xfa_object.$content] = value[_xfa_object.$content];
                        return;
                      }
                    }
                    var valueName = value[_xfa_object.$nodeName];
                    if (this[valueName] !== null) {
                      this[valueName][_xfa_object.$content] = value[_xfa_object.$content];
                      return;
                    }
                    var _iterator11 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)), _step11;
                    try {
                      for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                        var name = _step11.value;
                        var obj = this[name];
                        if (obj instanceof _xfa_object.XFAObject) {
                          this[name] = null;
                          this[_xfa_object.$removeChild](obj);
                        }
                      }
                    } catch (err) {
                      _iterator11.e(err);
                    } finally {
                      _iterator11.f();
                    }
                    this[value[_xfa_object.$nodeName]] = value;
                    this[_xfa_object.$appendChild](value);
                  })
                }, {
                  key: _xfa_object.$text,
                  value: function value() {
                    if (this.exData) {
                      if (typeof this.exData[_xfa_object.$content] === "string") {
                        return this.exData[_xfa_object.$content].trim();
                      }
                      return this.exData[_xfa_object.$content][_xfa_object.$text]().trim();
                    }
                    var _iterator12 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)), _step12;
                    try {
                      for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                        var name = _step12.value;
                        if (name === "image") {
                          continue;
                        }
                        var obj = this[name];
                        if (obj instanceof _xfa_object.XFAObject) {
                          return (obj[_xfa_object.$content] || "").toString().trim();
                        }
                      }
                    } catch (err) {
                      _iterator12.e(err);
                    } finally {
                      _iterator12.f();
                    }
                    return null;
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var _iterator13 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)), _step13;
                    try {
                      for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                        var name = _step13.value;
                        var obj = this[name];
                        if (!(obj instanceof _xfa_object.XFAObject)) {
                          continue;
                        }
                        return obj[_xfa_object.$toHTML](availableSpace);
                      }
                    } catch (err) {
                      _iterator13.e(err);
                    } finally {
                      _iterator13.f();
                    }
                    return _utils.HTMLResult.EMPTY;
                  }
                }]);
                return Value2;
              }(_xfa_object.XFAObject);
              exports2.Value = Value;
              var Variables = /* @__PURE__ */ function(_XFAObject88) {
                _inherits(Variables2, _XFAObject88);
                var _super113 = _createSuper(Variables2);
                function Variables2(attributes) {
                  var _this114;
                  _classCallCheck(this, Variables2);
                  _this114 = _super113.call(this, TEMPLATE_NS_ID, "variables", true);
                  _this114.id = attributes.id || "";
                  _this114.use = attributes.use || "";
                  _this114.usehref = attributes.usehref || "";
                  _this114["boolean"] = new _xfa_object.XFAObjectArray();
                  _this114.date = new _xfa_object.XFAObjectArray();
                  _this114.dateTime = new _xfa_object.XFAObjectArray();
                  _this114.decimal = new _xfa_object.XFAObjectArray();
                  _this114.exData = new _xfa_object.XFAObjectArray();
                  _this114["float"] = new _xfa_object.XFAObjectArray();
                  _this114.image = new _xfa_object.XFAObjectArray();
                  _this114.integer = new _xfa_object.XFAObjectArray();
                  _this114.manifest = new _xfa_object.XFAObjectArray();
                  _this114.script = new _xfa_object.XFAObjectArray();
                  _this114.text = new _xfa_object.XFAObjectArray();
                  _this114.time = new _xfa_object.XFAObjectArray();
                  return _this114;
                }
                _createClass(Variables2, [{
                  key: _xfa_object.$isTransparent,
                  value: function value() {
                    return true;
                  }
                }]);
                return Variables2;
              }(_xfa_object.XFAObject);
              var TemplateNamespace = /* @__PURE__ */ function() {
                function TemplateNamespace2() {
                  _classCallCheck(this, TemplateNamespace2);
                }
                _createClass(TemplateNamespace2, null, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    if (TemplateNamespace2.hasOwnProperty(name)) {
                      var node = TemplateNamespace2[name](attributes);
                      node[_xfa_object.$setSetAttributes](attributes);
                      return node;
                    }
                    return void 0;
                  }
                }, {
                  key: "appearanceFilter",
                  value: function appearanceFilter(attrs) {
                    return new AppearanceFilter(attrs);
                  }
                }, {
                  key: "arc",
                  value: function arc(attrs) {
                    return new Arc(attrs);
                  }
                }, {
                  key: "area",
                  value: function area(attrs) {
                    return new Area(attrs);
                  }
                }, {
                  key: "assist",
                  value: function assist(attrs) {
                    return new Assist(attrs);
                  }
                }, {
                  key: "barcode",
                  value: function barcode(attrs) {
                    return new Barcode(attrs);
                  }
                }, {
                  key: "bind",
                  value: function bind(attrs) {
                    return new Bind(attrs);
                  }
                }, {
                  key: "bindItems",
                  value: function bindItems(attrs) {
                    return new BindItems(attrs);
                  }
                }, {
                  key: "bookend",
                  value: function bookend(attrs) {
                    return new Bookend(attrs);
                  }
                }, {
                  key: "boolean",
                  value: function boolean(attrs) {
                    return new BooleanElement(attrs);
                  }
                }, {
                  key: "border",
                  value: function border(attrs) {
                    return new Border(attrs);
                  }
                }, {
                  key: "break",
                  value: function _break(attrs) {
                    return new Break(attrs);
                  }
                }, {
                  key: "breakAfter",
                  value: function breakAfter(attrs) {
                    return new BreakAfter(attrs);
                  }
                }, {
                  key: "breakBefore",
                  value: function breakBefore(attrs) {
                    return new BreakBefore(attrs);
                  }
                }, {
                  key: "button",
                  value: function button(attrs) {
                    return new Button(attrs);
                  }
                }, {
                  key: "calculate",
                  value: function calculate(attrs) {
                    return new Calculate(attrs);
                  }
                }, {
                  key: "caption",
                  value: function caption(attrs) {
                    return new Caption(attrs);
                  }
                }, {
                  key: "certificate",
                  value: function certificate(attrs) {
                    return new Certificate(attrs);
                  }
                }, {
                  key: "certificates",
                  value: function certificates(attrs) {
                    return new Certificates(attrs);
                  }
                }, {
                  key: "checkButton",
                  value: function checkButton(attrs) {
                    return new CheckButton(attrs);
                  }
                }, {
                  key: "choiceList",
                  value: function choiceList(attrs) {
                    return new ChoiceList(attrs);
                  }
                }, {
                  key: "color",
                  value: function color(attrs) {
                    return new Color(attrs);
                  }
                }, {
                  key: "comb",
                  value: function comb(attrs) {
                    return new Comb(attrs);
                  }
                }, {
                  key: "connect",
                  value: function connect(attrs) {
                    return new Connect(attrs);
                  }
                }, {
                  key: "contentArea",
                  value: function contentArea(attrs) {
                    return new ContentArea(attrs);
                  }
                }, {
                  key: "corner",
                  value: function corner(attrs) {
                    return new Corner(attrs);
                  }
                }, {
                  key: "date",
                  value: function date(attrs) {
                    return new DateElement(attrs);
                  }
                }, {
                  key: "dateTime",
                  value: function dateTime(attrs) {
                    return new DateTime(attrs);
                  }
                }, {
                  key: "dateTimeEdit",
                  value: function dateTimeEdit(attrs) {
                    return new DateTimeEdit(attrs);
                  }
                }, {
                  key: "decimal",
                  value: function decimal(attrs) {
                    return new Decimal(attrs);
                  }
                }, {
                  key: "defaultUi",
                  value: function defaultUi(attrs) {
                    return new DefaultUi(attrs);
                  }
                }, {
                  key: "desc",
                  value: function desc(attrs) {
                    return new Desc(attrs);
                  }
                }, {
                  key: "digestMethod",
                  value: function digestMethod(attrs) {
                    return new DigestMethod(attrs);
                  }
                }, {
                  key: "digestMethods",
                  value: function digestMethods(attrs) {
                    return new DigestMethods(attrs);
                  }
                }, {
                  key: "draw",
                  value: function draw(attrs) {
                    return new Draw(attrs);
                  }
                }, {
                  key: "edge",
                  value: function edge(attrs) {
                    return new Edge(attrs);
                  }
                }, {
                  key: "encoding",
                  value: function encoding(attrs) {
                    return new Encoding(attrs);
                  }
                }, {
                  key: "encodings",
                  value: function encodings(attrs) {
                    return new Encodings(attrs);
                  }
                }, {
                  key: "encrypt",
                  value: function encrypt(attrs) {
                    return new Encrypt(attrs);
                  }
                }, {
                  key: "encryptData",
                  value: function encryptData(attrs) {
                    return new EncryptData(attrs);
                  }
                }, {
                  key: "encryption",
                  value: function encryption(attrs) {
                    return new Encryption(attrs);
                  }
                }, {
                  key: "encryptionMethod",
                  value: function encryptionMethod(attrs) {
                    return new EncryptionMethod(attrs);
                  }
                }, {
                  key: "encryptionMethods",
                  value: function encryptionMethods(attrs) {
                    return new EncryptionMethods(attrs);
                  }
                }, {
                  key: "event",
                  value: function event(attrs) {
                    return new Event(attrs);
                  }
                }, {
                  key: "exData",
                  value: function exData(attrs) {
                    return new ExData(attrs);
                  }
                }, {
                  key: "exObject",
                  value: function exObject(attrs) {
                    return new ExObject(attrs);
                  }
                }, {
                  key: "exclGroup",
                  value: function exclGroup(attrs) {
                    return new ExclGroup(attrs);
                  }
                }, {
                  key: "execute",
                  value: function execute(attrs) {
                    return new Execute(attrs);
                  }
                }, {
                  key: "extras",
                  value: function extras(attrs) {
                    return new Extras(attrs);
                  }
                }, {
                  key: "field",
                  value: function field(attrs) {
                    return new Field(attrs);
                  }
                }, {
                  key: "fill",
                  value: function fill(attrs) {
                    return new Fill(attrs);
                  }
                }, {
                  key: "filter",
                  value: function filter(attrs) {
                    return new Filter(attrs);
                  }
                }, {
                  key: "float",
                  value: function float(attrs) {
                    return new Float(attrs);
                  }
                }, {
                  key: "font",
                  value: function font(attrs) {
                    return new Font(attrs);
                  }
                }, {
                  key: "format",
                  value: function format(attrs) {
                    return new Format(attrs);
                  }
                }, {
                  key: "handler",
                  value: function handler(attrs) {
                    return new Handler(attrs);
                  }
                }, {
                  key: "hyphenation",
                  value: function hyphenation(attrs) {
                    return new Hyphenation(attrs);
                  }
                }, {
                  key: "image",
                  value: function image(attrs) {
                    return new Image(attrs);
                  }
                }, {
                  key: "imageEdit",
                  value: function imageEdit(attrs) {
                    return new ImageEdit(attrs);
                  }
                }, {
                  key: "integer",
                  value: function integer(attrs) {
                    return new Integer(attrs);
                  }
                }, {
                  key: "issuers",
                  value: function issuers(attrs) {
                    return new Issuers(attrs);
                  }
                }, {
                  key: "items",
                  value: function items(attrs) {
                    return new Items(attrs);
                  }
                }, {
                  key: "keep",
                  value: function keep(attrs) {
                    return new Keep(attrs);
                  }
                }, {
                  key: "keyUsage",
                  value: function keyUsage(attrs) {
                    return new KeyUsage(attrs);
                  }
                }, {
                  key: "line",
                  value: function line(attrs) {
                    return new Line(attrs);
                  }
                }, {
                  key: "linear",
                  value: function linear(attrs) {
                    return new Linear(attrs);
                  }
                }, {
                  key: "lockDocument",
                  value: function lockDocument(attrs) {
                    return new LockDocument(attrs);
                  }
                }, {
                  key: "manifest",
                  value: function manifest(attrs) {
                    return new Manifest(attrs);
                  }
                }, {
                  key: "margin",
                  value: function margin(attrs) {
                    return new Margin(attrs);
                  }
                }, {
                  key: "mdp",
                  value: function mdp(attrs) {
                    return new Mdp(attrs);
                  }
                }, {
                  key: "medium",
                  value: function medium(attrs) {
                    return new Medium(attrs);
                  }
                }, {
                  key: "message",
                  value: function message(attrs) {
                    return new Message(attrs);
                  }
                }, {
                  key: "numericEdit",
                  value: function numericEdit(attrs) {
                    return new NumericEdit(attrs);
                  }
                }, {
                  key: "occur",
                  value: function occur(attrs) {
                    return new Occur(attrs);
                  }
                }, {
                  key: "oid",
                  value: function oid(attrs) {
                    return new Oid(attrs);
                  }
                }, {
                  key: "oids",
                  value: function oids(attrs) {
                    return new Oids(attrs);
                  }
                }, {
                  key: "overflow",
                  value: function overflow(attrs) {
                    return new Overflow(attrs);
                  }
                }, {
                  key: "pageArea",
                  value: function pageArea(attrs) {
                    return new PageArea(attrs);
                  }
                }, {
                  key: "pageSet",
                  value: function pageSet(attrs) {
                    return new PageSet(attrs);
                  }
                }, {
                  key: "para",
                  value: function para(attrs) {
                    return new Para(attrs);
                  }
                }, {
                  key: "passwordEdit",
                  value: function passwordEdit(attrs) {
                    return new PasswordEdit(attrs);
                  }
                }, {
                  key: "pattern",
                  value: function pattern(attrs) {
                    return new Pattern(attrs);
                  }
                }, {
                  key: "picture",
                  value: function picture(attrs) {
                    return new Picture(attrs);
                  }
                }, {
                  key: "proto",
                  value: function proto(attrs) {
                    return new Proto(attrs);
                  }
                }, {
                  key: "radial",
                  value: function radial(attrs) {
                    return new Radial(attrs);
                  }
                }, {
                  key: "reason",
                  value: function reason(attrs) {
                    return new Reason(attrs);
                  }
                }, {
                  key: "reasons",
                  value: function reasons(attrs) {
                    return new Reasons(attrs);
                  }
                }, {
                  key: "rectangle",
                  value: function rectangle(attrs) {
                    return new Rectangle(attrs);
                  }
                }, {
                  key: "ref",
                  value: function ref(attrs) {
                    return new RefElement(attrs);
                  }
                }, {
                  key: "script",
                  value: function script(attrs) {
                    return new Script(attrs);
                  }
                }, {
                  key: "setProperty",
                  value: function setProperty(attrs) {
                    return new SetProperty(attrs);
                  }
                }, {
                  key: "signData",
                  value: function signData(attrs) {
                    return new SignData(attrs);
                  }
                }, {
                  key: "signature",
                  value: function signature(attrs) {
                    return new Signature(attrs);
                  }
                }, {
                  key: "signing",
                  value: function signing(attrs) {
                    return new Signing(attrs);
                  }
                }, {
                  key: "solid",
                  value: function solid(attrs) {
                    return new Solid(attrs);
                  }
                }, {
                  key: "speak",
                  value: function speak(attrs) {
                    return new Speak(attrs);
                  }
                }, {
                  key: "stipple",
                  value: function stipple(attrs) {
                    return new Stipple(attrs);
                  }
                }, {
                  key: "subform",
                  value: function subform(attrs) {
                    return new Subform(attrs);
                  }
                }, {
                  key: "subformSet",
                  value: function subformSet(attrs) {
                    return new SubformSet(attrs);
                  }
                }, {
                  key: "subjectDN",
                  value: function subjectDN(attrs) {
                    return new SubjectDN(attrs);
                  }
                }, {
                  key: "subjectDNs",
                  value: function subjectDNs(attrs) {
                    return new SubjectDNs(attrs);
                  }
                }, {
                  key: "submit",
                  value: function submit(attrs) {
                    return new Submit(attrs);
                  }
                }, {
                  key: "template",
                  value: function template(attrs) {
                    return new Template(attrs);
                  }
                }, {
                  key: "text",
                  value: function text(attrs) {
                    return new Text(attrs);
                  }
                }, {
                  key: "textEdit",
                  value: function textEdit(attrs) {
                    return new TextEdit(attrs);
                  }
                }, {
                  key: "time",
                  value: function time(attrs) {
                    return new Time(attrs);
                  }
                }, {
                  key: "timeStamp",
                  value: function timeStamp(attrs) {
                    return new TimeStamp(attrs);
                  }
                }, {
                  key: "toolTip",
                  value: function toolTip(attrs) {
                    return new ToolTip(attrs);
                  }
                }, {
                  key: "traversal",
                  value: function traversal(attrs) {
                    return new Traversal(attrs);
                  }
                }, {
                  key: "traverse",
                  value: function traverse(attrs) {
                    return new Traverse(attrs);
                  }
                }, {
                  key: "ui",
                  value: function ui(attrs) {
                    return new Ui(attrs);
                  }
                }, {
                  key: "validate",
                  value: function validate(attrs) {
                    return new Validate(attrs);
                  }
                }, {
                  key: "value",
                  value: function value(attrs) {
                    return new Value(attrs);
                  }
                }, {
                  key: "variables",
                  value: function variables(attrs) {
                    return new Variables(attrs);
                  }
                }]);
                return TemplateNamespace2;
              }();
              exports2.TemplateNamespace = TemplateNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.addHTML = addHTML;
              exports2.checkDimensions = checkDimensions;
              exports2.flushHTML = flushHTML;
              exports2.getAvailableSpace = getAvailableSpace;
              var _xfa_object = __w_pdfjs_require__2(205);
              var _html_utils = __w_pdfjs_require__2(212);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function createLine(node, children) {
                return {
                  name: "div",
                  attributes: {
                    "class": [node.layout === "lr-tb" ? "xfaLr" : "xfaRl"]
                  },
                  children
                };
              }
              function flushHTML(node) {
                if (!node[_xfa_object.$extra]) {
                  return null;
                }
                var attributes = node[_xfa_object.$extra].attributes;
                var html = {
                  name: "div",
                  attributes,
                  children: node[_xfa_object.$extra].children
                };
                if (node[_xfa_object.$extra].failingNode) {
                  var htmlFromFailing = node[_xfa_object.$extra].failingNode[_xfa_object.$flushHTML]();
                  if (htmlFromFailing) {
                    if (node.layout.endsWith("-tb")) {
                      html.children.push(createLine(node, [htmlFromFailing]));
                    } else {
                      html.children.push(htmlFromFailing);
                    }
                  }
                }
                if (html.children.length === 0) {
                  return null;
                }
                return html;
              }
              function addHTML(node, html, bbox) {
                var extra = node[_xfa_object.$extra];
                var availableSpace = extra.availableSpace;
                var _bbox = _slicedToArray(bbox, 4), x = _bbox[0], y = _bbox[1], w = _bbox[2], h = _bbox[3];
                switch (node.layout) {
                  case "position": {
                    extra.width = Math.max(extra.width, x + w);
                    extra.height = Math.max(extra.height, y + h);
                    extra.children.push(html);
                    break;
                  }
                  case "lr-tb":
                  case "rl-tb":
                    if (!extra.line || extra.attempt === 1) {
                      extra.line = createLine(node, []);
                      extra.children.push(extra.line);
                      extra.numberInLine = 0;
                    }
                    extra.numberInLine += 1;
                    extra.line.children.push(html);
                    if (extra.attempt === 0) {
                      extra.currentWidth += w;
                      extra.height = Math.max(extra.height, extra.prevHeight + h);
                    } else {
                      extra.currentWidth = w;
                      extra.prevHeight = extra.height;
                      extra.height += h;
                      extra.attempt = 0;
                    }
                    extra.width = Math.max(extra.width, extra.currentWidth);
                    break;
                  case "rl-row":
                  case "row": {
                    extra.children.push(html);
                    extra.width += w;
                    extra.height = Math.max(extra.height, h);
                    var height = (0, _html_utils.measureToString)(extra.height);
                    var _iterator = _createForOfIteratorHelper(extra.children), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var child = _step.value;
                        child.attributes.style.height = height;
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    break;
                  }
                  case "table": {
                    extra.width = Math.min(availableSpace.width, Math.max(extra.width, w));
                    extra.height += h;
                    extra.children.push(html);
                    break;
                  }
                  case "tb": {
                    extra.width = Math.min(availableSpace.width, Math.max(extra.width, w));
                    extra.height += h;
                    extra.children.push(html);
                    break;
                  }
                }
              }
              function getAvailableSpace(node) {
                var availableSpace = node[_xfa_object.$extra].availableSpace;
                var marginV = node.margin ? node.margin.topInset + node.margin.bottomInset : 0;
                var marginH = node.margin ? node.margin.leftInset + node.margin.rightInset : 0;
                switch (node.layout) {
                  case "lr-tb":
                  case "rl-tb":
                    if (node[_xfa_object.$extra].attempt === 0) {
                      return {
                        width: availableSpace.width - marginH - node[_xfa_object.$extra].currentWidth,
                        height: availableSpace.height - marginV - node[_xfa_object.$extra].prevHeight
                      };
                    }
                    return {
                      width: availableSpace.width - marginH,
                      height: availableSpace.height - marginV - node[_xfa_object.$extra].height
                    };
                  case "rl-row":
                  case "row":
                    var width = node[_xfa_object.$extra].columnWidths.slice(node[_xfa_object.$extra].currentColumn).reduce(function(a, x) {
                      return a + x;
                    });
                    return {
                      width,
                      height: availableSpace.height - marginH
                    };
                  case "table":
                  case "tb":
                    return {
                      width: availableSpace.width - marginH,
                      height: availableSpace.height - marginV - node[_xfa_object.$extra].height
                    };
                  case "position":
                  default:
                    return availableSpace;
                }
              }
              function getTransformedBBox(node) {
                var w = node.w === "" ? NaN : node.w;
                var h = node.h === "" ? NaN : node.h;
                var centerX = 0, centerY = 0;
                switch (node.anchorType || "") {
                  case "bottomCenter":
                    centerX = w / 2;
                    centerY = h;
                    break;
                  case "bottomLeft":
                    centerX = 0;
                    centerY = h;
                    break;
                  case "bottomRight":
                    centerX = w;
                    centerY = h;
                    break;
                  case "middleCenter":
                    centerX = w / 2;
                    centerY = h / 2;
                    break;
                  case "middleLeft":
                    centerX = 0;
                    centerY = h / 2;
                    break;
                  case "middleRight":
                    centerX = w;
                    centerY = h / 2;
                    break;
                  case "topCenter":
                    centerX = w / 2;
                    centerY = 0;
                    break;
                  case "topRight":
                    centerX = w;
                    centerY = 0;
                    break;
                }
                var x, y;
                switch (node.rotate || 0) {
                  case 0:
                    x = -centerX;
                    y = -centerY;
                    break;
                  case 90:
                    x = -centerY;
                    y = centerX;
                    var _ref = [h, -w];
                    w = _ref[0];
                    h = _ref[1];
                    break;
                  case 180:
                    x = centerX;
                    y = centerY;
                    var _ref2 = [-w, -h];
                    w = _ref2[0];
                    h = _ref2[1];
                    break;
                  case 270:
                    x = centerY;
                    y = -centerX;
                    var _ref3 = [-h, w];
                    w = _ref3[0];
                    h = _ref3[1];
                    break;
                }
                return [node.x + x + Math.min(0, w), node.y + y + Math.min(0, h), Math.abs(w), Math.abs(h)];
              }
              function checkDimensions(node, space) {
                if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].firstUnsplittable === null) {
                  return true;
                }
                if (node.w === 0 || node.h === 0) {
                  return true;
                }
                var ERROR = 2;
                var parent = node[_xfa_object.$getSubformParent]();
                var attempt = parent[_xfa_object.$extra] && parent[_xfa_object.$extra].attempt || 0;
                var _getTransformedBBox = getTransformedBBox(node), _getTransformedBBox2 = _slicedToArray(_getTransformedBBox, 4), y = _getTransformedBBox2[1], w = _getTransformedBBox2[2], h = _getTransformedBBox2[3];
                switch (parent.layout) {
                  case "lr-tb":
                  case "rl-tb":
                    if (attempt === 0) {
                      if (!node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {
                        if (node.h !== "" && Math.round(h - space.height) > ERROR) {
                          return false;
                        }
                        if (node.w !== "") {
                          if (Math.round(w - space.width) <= ERROR) {
                            return true;
                          }
                          if (parent[_xfa_object.$extra].numberInLine === 0) {
                            return space.height > ERROR;
                          }
                          return false;
                        }
                        return space.width > ERROR;
                      }
                      if (node.w !== "") {
                        return Math.round(w - space.width) <= ERROR;
                      }
                      return space.width > ERROR;
                    }
                    if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {
                      return true;
                    }
                    if (node.h !== "" && Math.round(h - space.height) > ERROR) {
                      return false;
                    }
                    if (node.w === "" || Math.round(w - space.width) <= ERROR) {
                      return space.height > ERROR;
                    }
                    if (parent[_xfa_object.$isThereMoreWidth]()) {
                      return false;
                    }
                    return space.height > ERROR;
                  case "table":
                  case "tb":
                    if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {
                      return true;
                    }
                    if (node.h !== "" && !node[_xfa_object.$isSplittable]()) {
                      return Math.round(h - space.height) <= ERROR;
                    }
                    if (node.w === "" || Math.round(w - space.width) <= ERROR) {
                      return space.height > ERROR;
                    }
                    if (parent[_xfa_object.$isThereMoreWidth]()) {
                      return false;
                    }
                    return space.height > ERROR;
                  case "position":
                    if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {
                      return true;
                    }
                    if (node.h === "" || Math.round(h + y - space.height) <= ERROR) {
                      return true;
                    }
                    var area = node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].currentContentArea;
                    return h + y > area.h;
                  case "rl-row":
                  case "row":
                    if (node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].noLayoutFailure) {
                      return true;
                    }
                    if (node.h !== "") {
                      return Math.round(h - space.height) <= ERROR;
                    }
                    return true;
                  default:
                    return true;
                }
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.computeBbox = computeBbox;
              exports2.createWrapper = createWrapper;
              exports2.fixDimensions = fixDimensions;
              exports2.fixTextIndent = fixTextIndent;
              exports2.fixURL = fixURL;
              exports2.isPrintOnly = isPrintOnly;
              exports2.layoutClass = layoutClass;
              exports2.layoutNode = layoutNode;
              exports2.measureToString = measureToString;
              exports2.setAccess = setAccess;
              exports2.setFontFamily = setFontFamily;
              exports2.setMinMaxDimensions = setMinMaxDimensions;
              exports2.setPara = setPara;
              exports2.toStyle = toStyle;
              var _xfa_object = __w_pdfjs_require__2(205);
              var _util = __w_pdfjs_require__2(4);
              var _utils = __w_pdfjs_require__2(206);
              var _fonts = __w_pdfjs_require__2(213);
              var _text = __w_pdfjs_require__2(214);
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function measureToString(m) {
                if (typeof m === "string") {
                  return "0px";
                }
                return Number.isInteger(m) ? "".concat(m, "px") : "".concat(m.toFixed(2), "px");
              }
              var converters = {
                anchorType: function anchorType(node, style) {
                  var parent = node[_xfa_object.$getSubformParent]();
                  if (!parent || parent.layout && parent.layout !== "position") {
                    return;
                  }
                  if (!("transform" in style)) {
                    style.transform = "";
                  }
                  switch (node.anchorType) {
                    case "bottomCenter":
                      style.transform += "translate(-50%, -100%)";
                      break;
                    case "bottomLeft":
                      style.transform += "translate(0,-100%)";
                      break;
                    case "bottomRight":
                      style.transform += "translate(-100%,-100%)";
                      break;
                    case "middleCenter":
                      style.transform += "translate(-50%,-50%)";
                      break;
                    case "middleLeft":
                      style.transform += "translate(0,-50%)";
                      break;
                    case "middleRight":
                      style.transform += "translate(-100%,-50%)";
                      break;
                    case "topCenter":
                      style.transform += "translate(-50%,0)";
                      break;
                    case "topRight":
                      style.transform += "translate(-100%,0)";
                      break;
                  }
                },
                dimensions: function dimensions(node, style) {
                  var parent = node[_xfa_object.$getSubformParent]();
                  var width = node.w;
                  var height = node.h;
                  if (parent.layout && parent.layout.includes("row")) {
                    var extra = parent[_xfa_object.$extra];
                    var colSpan = node.colSpan;
                    var w;
                    if (colSpan === -1) {
                      w = extra.columnWidths.slice(extra.currentColumn).reduce(function(a, x) {
                        return a + x;
                      }, 0);
                      extra.currentColumn = 0;
                    } else {
                      w = extra.columnWidths.slice(extra.currentColumn, extra.currentColumn + colSpan).reduce(function(a, x) {
                        return a + x;
                      }, 0);
                      extra.currentColumn = (extra.currentColumn + node.colSpan) % extra.columnWidths.length;
                    }
                    if (!isNaN(w)) {
                      width = node.w = w;
                    }
                  }
                  if (width !== "") {
                    style.width = measureToString(width);
                  } else {
                    style.width = "auto";
                  }
                  if (height !== "") {
                    style.height = measureToString(height);
                  } else {
                    style.height = "auto";
                  }
                },
                position: function position(node, style) {
                  var parent = node[_xfa_object.$getSubformParent]();
                  if (parent && parent.layout && parent.layout !== "position") {
                    return;
                  }
                  style.position = "absolute";
                  style.left = measureToString(node.x);
                  style.top = measureToString(node.y);
                },
                rotate: function rotate(node, style) {
                  if (node.rotate) {
                    if (!("transform" in style)) {
                      style.transform = "";
                    }
                    style.transform += "rotate(-".concat(node.rotate, "deg)");
                    style.transformOrigin = "top left";
                  }
                },
                presence: function presence(node, style) {
                  switch (node.presence) {
                    case "invisible":
                      style.visibility = "hidden";
                      break;
                    case "hidden":
                    case "inactive":
                      style.display = "none";
                      break;
                  }
                },
                hAlign: function hAlign(node, style) {
                  if (node[_xfa_object.$nodeName] === "para") {
                    switch (node.hAlign) {
                      case "justifyAll":
                        style.textAlign = "justify-all";
                        break;
                      case "radix":
                        style.textAlign = "left";
                        break;
                      default:
                        style.textAlign = node.hAlign;
                    }
                  } else {
                    switch (node.hAlign) {
                      case "left":
                        style.alignSelf = "start";
                        break;
                      case "center":
                        style.alignSelf = "center";
                        break;
                      case "right":
                        style.alignSelf = "end";
                        break;
                    }
                  }
                },
                margin: function margin(node, style) {
                  if (node.margin) {
                    style.margin = node.margin[_xfa_object.$toStyle]().margin;
                  }
                }
              };
              function setMinMaxDimensions(node, style) {
                var parent = node[_xfa_object.$getSubformParent]();
                if (parent.layout === "position") {
                  if (node.minW > 0) {
                    style.minWidth = measureToString(node.minW);
                  }
                  if (node.maxW > 0) {
                    style.maxWidth = measureToString(node.maxW);
                  }
                  if (node.minH > 0) {
                    style.minHeight = measureToString(node.minH);
                  }
                  if (node.maxH > 0) {
                    style.maxHeight = measureToString(node.maxH);
                  }
                }
              }
              function layoutText(text, xfaFont, margin, lineHeight, fontFinder, width) {
                var measure = new _text.TextMeasure(xfaFont, margin, lineHeight, fontFinder);
                if (typeof text === "string") {
                  measure.addString(text);
                } else {
                  text[_xfa_object.$pushGlyphs](measure);
                }
                return measure.compute(width);
              }
              function layoutNode(node, availableSpace) {
                var height = null;
                var width = null;
                var isBroken = false;
                if ((!node.w || !node.h) && node.value) {
                  var marginH = 0;
                  var marginV = 0;
                  if (node.margin) {
                    marginH = node.margin.leftInset + node.margin.rightInset;
                    marginV = node.margin.topInset + node.margin.bottomInset;
                  }
                  var lineHeight = null;
                  var margin = null;
                  if (node.para) {
                    margin = /* @__PURE__ */ Object.create(null);
                    lineHeight = node.para.lineHeight === "" ? null : node.para.lineHeight;
                    margin.top = node.para.spaceAbove === "" ? 0 : node.para.spaceAbove;
                    margin.bottom = node.para.spaceBelow === "" ? 0 : node.para.spaceBelow;
                    margin.left = node.para.marginLeft === "" ? 0 : node.para.marginLeft;
                    margin.right = node.para.marginRight === "" ? 0 : node.para.marginRight;
                  }
                  var font = node.font;
                  if (!font) {
                    var root = node[_xfa_object.$getTemplateRoot]();
                    var parent = node[_xfa_object.$getParent]();
                    while (parent && parent !== root) {
                      if (parent.font) {
                        font = parent.font;
                        break;
                      }
                      parent = parent[_xfa_object.$getParent]();
                    }
                  }
                  var maxWidth = (!node.w ? availableSpace.width : node.w) - marginH;
                  var fontFinder = node[_xfa_object.$globalData].fontFinder;
                  if (node.value.exData && node.value.exData[_xfa_object.$content] && node.value.exData.contentType === "text/html") {
                    var res = layoutText(node.value.exData[_xfa_object.$content], font, margin, lineHeight, fontFinder, maxWidth);
                    width = res.width;
                    height = res.height;
                    isBroken = res.isBroken;
                  } else {
                    var text = node.value[_xfa_object.$text]();
                    if (text) {
                      var _res = layoutText(text, font, margin, lineHeight, fontFinder, maxWidth);
                      width = _res.width;
                      height = _res.height;
                      isBroken = _res.isBroken;
                    }
                  }
                  if (width !== null && !node.w) {
                    width += marginH;
                  }
                  if (height !== null && !node.h) {
                    height += marginV;
                  }
                }
                return {
                  w: width,
                  h: height,
                  isBroken
                };
              }
              function computeBbox(node, html, availableSpace) {
                var bbox;
                if (node.w !== "" && node.h !== "") {
                  bbox = [node.x, node.y, node.w, node.h];
                } else {
                  if (!availableSpace) {
                    return null;
                  }
                  var width = node.w;
                  if (width === "") {
                    if (node.maxW === 0) {
                      var parent = node[_xfa_object.$getSubformParent]();
                      if (parent.layout === "position" && parent.w !== "") {
                        width = 0;
                      } else {
                        width = node.minW;
                      }
                    } else {
                      width = Math.min(node.maxW, availableSpace.width);
                    }
                    html.attributes.style.width = measureToString(width);
                  }
                  var height = node.h;
                  if (height === "") {
                    if (node.maxH === 0) {
                      var _parent = node[_xfa_object.$getSubformParent]();
                      if (_parent.layout === "position" && _parent.h !== "") {
                        height = 0;
                      } else {
                        height = node.minH;
                      }
                    } else {
                      height = Math.min(node.maxH, availableSpace.height);
                    }
                    html.attributes.style.height = measureToString(height);
                  }
                  bbox = [node.x, node.y, width, height];
                }
                return bbox;
              }
              function fixDimensions(node) {
                var parent = node[_xfa_object.$getSubformParent]();
                if (parent.layout && parent.layout.includes("row")) {
                  var extra = parent[_xfa_object.$extra];
                  var colSpan = node.colSpan;
                  var width;
                  if (colSpan === -1) {
                    width = extra.columnWidths.slice(extra.currentColumn).reduce(function(a, w) {
                      return a + w;
                    }, 0);
                  } else {
                    width = extra.columnWidths.slice(extra.currentColumn, extra.currentColumn + colSpan).reduce(function(a, w) {
                      return a + w;
                    }, 0);
                  }
                  if (!isNaN(width)) {
                    node.w = width;
                  }
                }
                if (parent.layout && parent.layout !== "position") {
                  node.x = node.y = 0;
                }
                if (node.layout === "table") {
                  if (node.w === "" && Array.isArray(node.columnWidths)) {
                    node.w = node.columnWidths.reduce(function(a, x) {
                      return a + x;
                    }, 0);
                  }
                }
              }
              function layoutClass(node) {
                switch (node.layout) {
                  case "position":
                    return "xfaPosition";
                  case "lr-tb":
                    return "xfaLrTb";
                  case "rl-row":
                    return "xfaRlRow";
                  case "rl-tb":
                    return "xfaRlTb";
                  case "row":
                    return "xfaRow";
                  case "table":
                    return "xfaTable";
                  case "tb":
                    return "xfaTb";
                  default:
                    return "xfaPosition";
                }
              }
              function toStyle(node) {
                var style = /* @__PURE__ */ Object.create(null);
                for (var _len = arguments.length, names = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  names[_key - 1] = arguments[_key];
                }
                for (var _i = 0, _names = names; _i < _names.length; _i++) {
                  var name = _names[_i];
                  var value = node[name];
                  if (value === null) {
                    continue;
                  }
                  if (converters.hasOwnProperty(name)) {
                    converters[name](node, style);
                    continue;
                  }
                  if (value instanceof _xfa_object.XFAObject) {
                    var newStyle = value[_xfa_object.$toStyle]();
                    if (newStyle) {
                      Object.assign(style, newStyle);
                    } else {
                      (0, _util.warn)("(DEBUG) - XFA - style for ".concat(name, " not implemented yet"));
                    }
                  }
                }
                return style;
              }
              function createWrapper(node, html) {
                var attributes = html.attributes;
                var style = attributes.style;
                var wrapper = {
                  name: "div",
                  attributes: {
                    "class": ["xfaWrapper"],
                    style: /* @__PURE__ */ Object.create(null)
                  },
                  children: []
                };
                attributes["class"].push("xfaWrapped");
                if (node.border) {
                  var _node$border$$extra = node.border[_xfa_object.$extra], widths = _node$border$$extra.widths, insets = _node$border$$extra.insets;
                  var width, height;
                  var top = insets[0];
                  var left = insets[3];
                  var insetsH = insets[0] + insets[2];
                  var insetsW = insets[1] + insets[3];
                  switch (node.border.hand) {
                    case "even":
                      top -= widths[0] / 2;
                      left -= widths[3] / 2;
                      width = "calc(100% + ".concat((widths[1] + widths[3]) / 2 - insetsW, "px)");
                      height = "calc(100% + ".concat((widths[0] + widths[2]) / 2 - insetsH, "px)");
                      break;
                    case "left":
                      top -= widths[0];
                      left -= widths[3];
                      width = "calc(100% + ".concat(widths[1] + widths[3] - insetsW, "px)");
                      height = "calc(100% + ".concat(widths[0] + widths[2] - insetsH, "px)");
                      break;
                    case "right":
                      width = insetsW ? "calc(100% - ".concat(insetsW, "px)") : "100%";
                      height = insetsH ? "calc(100% - ".concat(insetsH, "px)") : "100%";
                      break;
                  }
                  var classNames = ["xfaBorder"];
                  if (isPrintOnly(node.border)) {
                    classNames.push("xfaPrintOnly");
                  }
                  var border = {
                    name: "div",
                    attributes: {
                      "class": classNames,
                      style: {
                        top: "".concat(top, "px"),
                        left: "".concat(left, "px"),
                        width,
                        height
                      }
                    },
                    children: []
                  };
                  for (var _i2 = 0, _arr = ["border", "borderWidth", "borderColor", "borderRadius", "borderStyle"]; _i2 < _arr.length; _i2++) {
                    var key = _arr[_i2];
                    if (style[key] !== void 0) {
                      border.attributes.style[key] = style[key];
                      delete style[key];
                    }
                  }
                  wrapper.children.push(border, html);
                } else {
                  wrapper.children.push(html);
                }
                for (var _i3 = 0, _arr2 = ["background", "backgroundClip", "top", "left", "width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight", "transform", "transformOrigin", "visibility"]; _i3 < _arr2.length; _i3++) {
                  var _key2 = _arr2[_i3];
                  if (style[_key2] !== void 0) {
                    wrapper.attributes.style[_key2] = style[_key2];
                    delete style[_key2];
                  }
                }
                if (style.position === "absolute") {
                  wrapper.attributes.style.position = "absolute";
                } else {
                  wrapper.attributes.style.position = "relative";
                }
                delete style.position;
                if (style.alignSelf) {
                  wrapper.attributes.style.alignSelf = style.alignSelf;
                  delete style.alignSelf;
                }
                return wrapper;
              }
              function fixTextIndent(styles) {
                var indent = (0, _utils.getMeasurement)(styles.textIndent, "0px");
                if (indent >= 0) {
                  return;
                }
                var align = styles.textAlign === "right" ? "right" : "left";
                var name = "padding" + (align === "left" ? "Left" : "Right");
                var padding = (0, _utils.getMeasurement)(styles[name], "0px");
                styles[name] = "".concat(padding - indent, "px");
              }
              function setAccess(node, classNames) {
                switch (node.access) {
                  case "nonInteractive":
                    classNames.push("xfaNonInteractive");
                    break;
                  case "readOnly":
                    classNames.push("xfaReadOnly");
                    break;
                  case "protected":
                    classNames.push("xfaDisabled");
                    break;
                }
              }
              function isPrintOnly(node) {
                return node.relevant.length > 0 && !node.relevant[0].excluded && node.relevant[0].viewname === "print";
              }
              function getCurrentPara(node) {
                var stack = node[_xfa_object.$getTemplateRoot]()[_xfa_object.$extra].paraStack;
                return stack.length ? stack[stack.length - 1] : null;
              }
              function setPara(node, nodeStyle, value) {
                if (value.attributes["class"] && value.attributes["class"].includes("xfaRich")) {
                  if (nodeStyle) {
                    if (node.h === "") {
                      nodeStyle.height = "auto";
                    }
                    if (node.w === "") {
                      nodeStyle.width = "auto";
                    }
                  }
                  var para = getCurrentPara(node);
                  if (para) {
                    var valueStyle = value.attributes.style;
                    valueStyle.display = "flex";
                    valueStyle.flexDirection = "column";
                    switch (para.vAlign) {
                      case "top":
                        valueStyle.justifyContent = "start";
                        break;
                      case "bottom":
                        valueStyle.justifyContent = "end";
                        break;
                      case "middle":
                        valueStyle.justifyContent = "center";
                        break;
                    }
                    var paraStyle = para[_xfa_object.$toStyle]();
                    for (var _i4 = 0, _Object$entries = Object.entries(paraStyle); _i4 < _Object$entries.length; _i4++) {
                      var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2), key = _Object$entries$_i[0], val = _Object$entries$_i[1];
                      if (!(key in valueStyle)) {
                        valueStyle[key] = val;
                      }
                    }
                  }
                }
              }
              function setFontFamily(xfaFont, node, fontFinder, style) {
                if (!fontFinder) {
                  delete style.fontFamily;
                  return;
                }
                var name = (0, _utils.stripQuotes)(xfaFont.typeface);
                style.fontFamily = '"'.concat(name, '"');
                var typeface = fontFinder.find(name);
                if (typeface) {
                  var fontFamily = typeface.regular.cssFontInfo.fontFamily;
                  if (fontFamily !== name) {
                    style.fontFamily = '"'.concat(fontFamily, '"');
                  }
                  var para = getCurrentPara(node);
                  if (para && para.lineHeight !== "") {
                    return;
                  }
                  if (style.lineHeight) {
                    return;
                  }
                  var pdfFont = (0, _fonts.selectFont)(xfaFont, typeface);
                  if (pdfFont) {
                    style.lineHeight = Math.max(1.2, pdfFont.lineHeight);
                  }
                }
              }
              function fixURL(str) {
                var absoluteUrl = (0, _util.createValidAbsoluteUrl)(str, null, {
                  addDefaultProtocol: true,
                  tryConvertEncoding: true
                });
                return absoluteUrl ? absoluteUrl.href : null;
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.FontFinder = void 0;
              exports2.getMetrics = getMetrics;
              exports2.selectFont = selectFont;
              var _xfa_object = __w_pdfjs_require__2(205);
              var _utils = __w_pdfjs_require__2(206);
              var _util = __w_pdfjs_require__2(4);
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var FontFinder = /* @__PURE__ */ function() {
                function FontFinder2(pdfFonts) {
                  _classCallCheck(this, FontFinder2);
                  this.fonts = /* @__PURE__ */ new Map();
                  this.cache = /* @__PURE__ */ new Map();
                  this.warned = /* @__PURE__ */ new Set();
                  this.defaultFont = null;
                  this.add(pdfFonts);
                }
                _createClass(FontFinder2, [{
                  key: "add",
                  value: function add(pdfFonts) {
                    var reallyMissingFonts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                    var _iterator = _createForOfIteratorHelper(pdfFonts), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var pdfFont = _step.value;
                        this.addPdfFont(pdfFont);
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    var _iterator2 = _createForOfIteratorHelper(this.fonts.values()), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var _pdfFont = _step2.value;
                        if (!_pdfFont.regular) {
                          _pdfFont.regular = _pdfFont.italic || _pdfFont.bold || _pdfFont.bolditalic;
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    if (!reallyMissingFonts || reallyMissingFonts.size === 0) {
                      return;
                    }
                    var myriad = this.fonts.get("PdfJS-Fallback-PdfJS-XFA");
                    var _iterator3 = _createForOfIteratorHelper(reallyMissingFonts), _step3;
                    try {
                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                        var missing = _step3.value;
                        this.fonts.set(missing, myriad);
                      }
                    } catch (err) {
                      _iterator3.e(err);
                    } finally {
                      _iterator3.f();
                    }
                  }
                }, {
                  key: "addPdfFont",
                  value: function addPdfFont(pdfFont) {
                    var cssFontInfo = pdfFont.cssFontInfo;
                    var name = cssFontInfo.fontFamily;
                    var font = this.fonts.get(name);
                    if (!font) {
                      font = /* @__PURE__ */ Object.create(null);
                      this.fonts.set(name, font);
                      if (!this.defaultFont) {
                        this.defaultFont = font;
                      }
                    }
                    var property = "";
                    var fontWeight = parseFloat(cssFontInfo.fontWeight);
                    if (parseFloat(cssFontInfo.italicAngle) !== 0) {
                      property = fontWeight >= 700 ? "bolditalic" : "italic";
                    } else if (fontWeight >= 700) {
                      property = "bold";
                    }
                    if (!property) {
                      if (pdfFont.name.includes("Bold") || pdfFont.psName && pdfFont.psName.includes("Bold")) {
                        property = "bold";
                      }
                      if (pdfFont.name.includes("Italic") || pdfFont.name.endsWith("It") || pdfFont.psName && (pdfFont.psName.includes("Italic") || pdfFont.psName.endsWith("It"))) {
                        property += "italic";
                      }
                    }
                    if (!property) {
                      property = "regular";
                    }
                    font[property] = pdfFont;
                  }
                }, {
                  key: "getDefault",
                  value: function getDefault() {
                    return this.defaultFont;
                  }
                }, {
                  key: "find",
                  value: function find(fontName) {
                    var mustWarn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
                    var font = this.fonts.get(fontName) || this.cache.get(fontName);
                    if (font) {
                      return font;
                    }
                    var pattern = /,|-|_| |bolditalic|bold|italic|regular|it/gi;
                    var name = fontName.replace(pattern, "");
                    font = this.fonts.get(name);
                    if (font) {
                      this.cache.set(fontName, font);
                      return font;
                    }
                    name = name.toLowerCase();
                    var maybe = [];
                    var _iterator4 = _createForOfIteratorHelper(this.fonts.entries()), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var _step4$value = _slicedToArray(_step4.value, 2), _family = _step4$value[0], _pdfFont4 = _step4$value[1];
                        if (_family.replace(pattern, "").toLowerCase().startsWith(name)) {
                          maybe.push(_pdfFont4);
                        }
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                    if (maybe.length === 0) {
                      var _iterator5 = _createForOfIteratorHelper(this.fonts.entries()), _step5;
                      try {
                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                          var _step5$value = _slicedToArray(_step5.value, 2), pdfFont = _step5$value[1];
                          if (pdfFont.regular.name && pdfFont.regular.name.replace(pattern, "").toLowerCase().startsWith(name)) {
                            maybe.push(pdfFont);
                          }
                        }
                      } catch (err) {
                        _iterator5.e(err);
                      } finally {
                        _iterator5.f();
                      }
                    }
                    if (maybe.length === 0) {
                      name = name.replace(/psmt|mt/gi, "");
                      var _iterator6 = _createForOfIteratorHelper(this.fonts.entries()), _step6;
                      try {
                        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                          var _step6$value = _slicedToArray(_step6.value, 2), family = _step6$value[0], _pdfFont2 = _step6$value[1];
                          if (family.replace(pattern, "").toLowerCase().startsWith(name)) {
                            maybe.push(_pdfFont2);
                          }
                        }
                      } catch (err) {
                        _iterator6.e(err);
                      } finally {
                        _iterator6.f();
                      }
                    }
                    if (maybe.length === 0) {
                      var _iterator7 = _createForOfIteratorHelper(this.fonts.values()), _step7;
                      try {
                        for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                          var _pdfFont3 = _step7.value;
                          if (_pdfFont3.regular.name && _pdfFont3.regular.name.replace(pattern, "").toLowerCase().startsWith(name)) {
                            maybe.push(_pdfFont3);
                          }
                        }
                      } catch (err) {
                        _iterator7.e(err);
                      } finally {
                        _iterator7.f();
                      }
                    }
                    if (maybe.length >= 1) {
                      if (maybe.length !== 1 && mustWarn) {
                        (0, _util.warn)("XFA - Too many choices to guess the correct font: ".concat(fontName));
                      }
                      this.cache.set(fontName, maybe[0]);
                      return maybe[0];
                    }
                    if (mustWarn && !this.warned.has(fontName)) {
                      this.warned.add(fontName);
                      (0, _util.warn)("XFA - Cannot find the font: ".concat(fontName));
                    }
                    return null;
                  }
                }]);
                return FontFinder2;
              }();
              exports2.FontFinder = FontFinder;
              function selectFont(xfaFont, typeface) {
                if (xfaFont.posture === "italic") {
                  if (xfaFont.weight === "bold") {
                    return typeface.bolditalic;
                  }
                  return typeface.italic;
                } else if (xfaFont.weight === "bold") {
                  return typeface.bold;
                }
                return typeface.regular;
              }
              function getMetrics(xfaFont) {
                var real = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                var pdfFont = null;
                if (xfaFont) {
                  var name = (0, _utils.stripQuotes)(xfaFont.typeface);
                  var typeface = xfaFont[_xfa_object.$globalData].fontFinder.find(name);
                  pdfFont = selectFont(xfaFont, typeface);
                }
                if (!pdfFont) {
                  return {
                    lineHeight: 12,
                    lineGap: 2,
                    lineNoGap: 10
                  };
                }
                var size = xfaFont.size || 10;
                var lineHeight = pdfFont.lineHeight ? Math.max(real ? 0 : 1.2, pdfFont.lineHeight) : 1.2;
                var lineGap = pdfFont.lineGap === void 0 ? 0.2 : pdfFont.lineGap;
                return {
                  lineHeight: lineHeight * size,
                  lineGap: lineGap * size,
                  lineNoGap: Math.max(1, lineHeight - lineGap) * size
                };
              }
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.TextMeasure = void 0;
              var _fonts = __w_pdfjs_require__2(213);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var WIDTH_FACTOR = 1.02;
              var FontInfo = /* @__PURE__ */ function() {
                function FontInfo2(xfaFont, margin, lineHeight, fontFinder) {
                  _classCallCheck(this, FontInfo2);
                  this.lineHeight = lineHeight;
                  this.paraMargin = margin || {
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0
                  };
                  if (!xfaFont) {
                    var _this$defaultFont = this.defaultFont(fontFinder);
                    var _this$defaultFont2 = _slicedToArray(_this$defaultFont, 2);
                    this.pdfFont = _this$defaultFont2[0];
                    this.xfaFont = _this$defaultFont2[1];
                    return;
                  }
                  this.xfaFont = {
                    typeface: xfaFont.typeface,
                    posture: xfaFont.posture,
                    weight: xfaFont.weight,
                    size: xfaFont.size,
                    letterSpacing: xfaFont.letterSpacing
                  };
                  var typeface = fontFinder.find(xfaFont.typeface);
                  if (!typeface) {
                    var _this$defaultFont3 = this.defaultFont(fontFinder);
                    var _this$defaultFont4 = _slicedToArray(_this$defaultFont3, 2);
                    this.pdfFont = _this$defaultFont4[0];
                    this.xfaFont = _this$defaultFont4[1];
                    return;
                  }
                  this.pdfFont = (0, _fonts.selectFont)(xfaFont, typeface);
                  if (!this.pdfFont) {
                    var _this$defaultFont5 = this.defaultFont(fontFinder);
                    var _this$defaultFont6 = _slicedToArray(_this$defaultFont5, 2);
                    this.pdfFont = _this$defaultFont6[0];
                    this.xfaFont = _this$defaultFont6[1];
                  }
                }
                _createClass(FontInfo2, [{
                  key: "defaultFont",
                  value: function defaultFont(fontFinder) {
                    var font = fontFinder.find("Helvetica", false) || fontFinder.find("Myriad Pro", false) || fontFinder.find("Arial", false) || fontFinder.getDefault();
                    if (font && font.regular) {
                      var pdfFont = font.regular;
                      var info = pdfFont.cssFontInfo;
                      var _xfaFont = {
                        typeface: info.fontFamily,
                        posture: "normal",
                        weight: "normal",
                        size: 10,
                        letterSpacing: 0
                      };
                      return [pdfFont, _xfaFont];
                    }
                    var xfaFont = {
                      typeface: "Courier",
                      posture: "normal",
                      weight: "normal",
                      size: 10,
                      letterSpacing: 0
                    };
                    return [null, xfaFont];
                  }
                }]);
                return FontInfo2;
              }();
              var FontSelector = /* @__PURE__ */ function() {
                function FontSelector2(defaultXfaFont, defaultParaMargin, defaultLineHeight, fontFinder) {
                  _classCallCheck(this, FontSelector2);
                  this.fontFinder = fontFinder;
                  this.stack = [new FontInfo(defaultXfaFont, defaultParaMargin, defaultLineHeight, fontFinder)];
                }
                _createClass(FontSelector2, [{
                  key: "pushData",
                  value: function pushData(xfaFont, margin, lineHeight) {
                    var lastFont = this.stack[this.stack.length - 1];
                    for (var _i2 = 0, _arr2 = ["typeface", "posture", "weight", "size", "letterSpacing"]; _i2 < _arr2.length; _i2++) {
                      var name = _arr2[_i2];
                      if (!xfaFont[name]) {
                        xfaFont[name] = lastFont.xfaFont[name];
                      }
                    }
                    for (var _i3 = 0, _arr3 = ["top", "bottom", "left", "right"]; _i3 < _arr3.length; _i3++) {
                      var _name = _arr3[_i3];
                      if (isNaN(margin[_name])) {
                        margin[_name] = lastFont.paraMargin[_name];
                      }
                    }
                    var fontInfo = new FontInfo(xfaFont, margin, lineHeight || lastFont.lineHeight, this.fontFinder);
                    if (!fontInfo.pdfFont) {
                      fontInfo.pdfFont = lastFont.pdfFont;
                    }
                    this.stack.push(fontInfo);
                  }
                }, {
                  key: "popFont",
                  value: function popFont() {
                    this.stack.pop();
                  }
                }, {
                  key: "topFont",
                  value: function topFont() {
                    return this.stack[this.stack.length - 1];
                  }
                }]);
                return FontSelector2;
              }();
              var TextMeasure = /* @__PURE__ */ function() {
                function TextMeasure2(defaultXfaFont, defaultParaMargin, defaultLineHeight, fonts) {
                  _classCallCheck(this, TextMeasure2);
                  this.glyphs = [];
                  this.fontSelector = new FontSelector(defaultXfaFont, defaultParaMargin, defaultLineHeight, fonts);
                  this.extraHeight = 0;
                }
                _createClass(TextMeasure2, [{
                  key: "pushData",
                  value: function pushData(xfaFont, margin, lineHeight) {
                    this.fontSelector.pushData(xfaFont, margin, lineHeight);
                  }
                }, {
                  key: "popFont",
                  value: function popFont(xfaFont) {
                    return this.fontSelector.popFont();
                  }
                }, {
                  key: "addPara",
                  value: function addPara() {
                    var lastFont = this.fontSelector.topFont();
                    this.extraHeight += lastFont.paraMargin.top + lastFont.paraMargin.bottom;
                  }
                }, {
                  key: "addString",
                  value: function addString(str) {
                    if (!str) {
                      return;
                    }
                    var lastFont = this.fontSelector.topFont();
                    var fontSize = lastFont.xfaFont.size;
                    if (lastFont.pdfFont) {
                      var letterSpacing = lastFont.xfaFont.letterSpacing;
                      var pdfFont = lastFont.pdfFont;
                      var fontLineHeight = pdfFont.lineHeight || 1.2;
                      var lineHeight = lastFont.lineHeight || Math.max(1.2, fontLineHeight) * fontSize;
                      var lineGap = pdfFont.lineGap === void 0 ? 0.2 : pdfFont.lineGap;
                      var noGap = fontLineHeight - lineGap;
                      var firstLineHeight = Math.max(1, noGap) * fontSize;
                      var scale = fontSize / 1e3;
                      var fallbackWidth = pdfFont.defaultWidth || pdfFont.charsToGlyphs(" ")[0].width;
                      var _iterator = _createForOfIteratorHelper(str.split(/[\u2029\n]/)), _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                          var line = _step.value;
                          var encodedLine = pdfFont.encodeString(line).join("");
                          var glyphs = pdfFont.charsToGlyphs(encodedLine);
                          var _iterator2 = _createForOfIteratorHelper(glyphs), _step2;
                          try {
                            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                              var glyph = _step2.value;
                              var width = glyph.width || fallbackWidth;
                              this.glyphs.push([width * scale + letterSpacing, lineHeight, firstLineHeight, glyph.unicode, false]);
                            }
                          } catch (err) {
                            _iterator2.e(err);
                          } finally {
                            _iterator2.f();
                          }
                          this.glyphs.push([0, 0, 0, "\n", true]);
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                      this.glyphs.pop();
                      return;
                    }
                    var _iterator3 = _createForOfIteratorHelper(str.split(/[\u2029\n]/)), _step3;
                    try {
                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                        var _line = _step3.value;
                        var _iterator4 = _createForOfIteratorHelper(_line.split("")), _step4;
                        try {
                          for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                            var _char = _step4.value;
                            this.glyphs.push([fontSize, 1.2 * fontSize, fontSize, _char, false]);
                          }
                        } catch (err) {
                          _iterator4.e(err);
                        } finally {
                          _iterator4.f();
                        }
                        this.glyphs.push([0, 0, 0, "\n", true]);
                      }
                    } catch (err) {
                      _iterator3.e(err);
                    } finally {
                      _iterator3.f();
                    }
                    this.glyphs.pop();
                  }
                }, {
                  key: "compute",
                  value: function compute(maxWidth) {
                    var lastSpacePos = -1, lastSpaceWidth = 0, width = 0, height = 0, currentLineWidth = 0, currentLineHeight = 0;
                    var isBroken = false;
                    var isFirstLine = true;
                    for (var i = 0, ii = this.glyphs.length; i < ii; i++) {
                      var _this$glyphs$i = _slicedToArray(this.glyphs[i], 5), glyphWidth = _this$glyphs$i[0], lineHeight = _this$glyphs$i[1], firstLineHeight = _this$glyphs$i[2], _char2 = _this$glyphs$i[3], isEOL = _this$glyphs$i[4];
                      var isSpace = _char2 === " ";
                      var glyphHeight = isFirstLine ? firstLineHeight : lineHeight;
                      if (isEOL) {
                        width = Math.max(width, currentLineWidth);
                        currentLineWidth = 0;
                        height += currentLineHeight;
                        currentLineHeight = glyphHeight;
                        lastSpacePos = -1;
                        lastSpaceWidth = 0;
                        isFirstLine = false;
                        continue;
                      }
                      if (isSpace) {
                        if (currentLineWidth + glyphWidth > maxWidth) {
                          width = Math.max(width, currentLineWidth);
                          currentLineWidth = 0;
                          height += currentLineHeight;
                          currentLineHeight = glyphHeight;
                          lastSpacePos = -1;
                          lastSpaceWidth = 0;
                          isBroken = true;
                          isFirstLine = false;
                        } else {
                          currentLineHeight = Math.max(glyphHeight, currentLineHeight);
                          lastSpaceWidth = currentLineWidth;
                          currentLineWidth += glyphWidth;
                          lastSpacePos = i;
                        }
                        continue;
                      }
                      if (currentLineWidth + glyphWidth > maxWidth) {
                        height += currentLineHeight;
                        currentLineHeight = glyphHeight;
                        if (lastSpacePos !== -1) {
                          i = lastSpacePos;
                          width = Math.max(width, lastSpaceWidth);
                          currentLineWidth = 0;
                          lastSpacePos = -1;
                          lastSpaceWidth = 0;
                        } else {
                          width = Math.max(width, currentLineWidth);
                          currentLineWidth = glyphWidth;
                        }
                        isBroken = true;
                        isFirstLine = false;
                        continue;
                      }
                      currentLineWidth += glyphWidth;
                      currentLineHeight = Math.max(glyphHeight, currentLineHeight);
                    }
                    width = Math.max(width, currentLineWidth);
                    height += currentLineHeight + this.extraHeight;
                    return {
                      width: WIDTH_FACTOR * width,
                      height,
                      isBroken
                    };
                  }
                }]);
                return TextMeasure2;
              }();
              exports2.TextMeasure = TextMeasure;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.DataHandler = void 0;
              var _xfa_object = __w_pdfjs_require__2(205);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var DataHandler = /* @__PURE__ */ function() {
                function DataHandler2(root, data) {
                  _classCallCheck(this, DataHandler2);
                  this.data = data;
                  this.dataset = root.datasets || null;
                }
                _createClass(DataHandler2, [{
                  key: "serialize",
                  value: function serialize(storage) {
                    var stack = [[-1, this.data[_xfa_object.$getChildren]()]];
                    while (stack.length > 0) {
                      var last = stack[stack.length - 1];
                      var _last = _slicedToArray(last, 2), i = _last[0], children = _last[1];
                      if (i + 1 === children.length) {
                        stack.pop();
                        continue;
                      }
                      var child = children[++last[0]];
                      var storageEntry = storage.get(child[_xfa_object.$uid]);
                      if (storageEntry) {
                        child[_xfa_object.$setValue](storageEntry);
                      } else {
                        var attributes = child[_xfa_object.$getAttributes]();
                        var _iterator = _createForOfIteratorHelper(attributes.values()), _step;
                        try {
                          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                            var value = _step.value;
                            var entry = storage.get(value[_xfa_object.$uid]);
                            if (entry) {
                              value[_xfa_object.$setValue](entry);
                              break;
                            }
                          }
                        } catch (err) {
                          _iterator.e(err);
                        } finally {
                          _iterator.f();
                        }
                      }
                      var nodes = child[_xfa_object.$getChildren]();
                      if (nodes.length > 0) {
                        stack.push([-1, nodes]);
                      }
                    }
                    var buf = ['<xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">'];
                    if (this.dataset) {
                      var _iterator2 = _createForOfIteratorHelper(this.dataset[_xfa_object.$getChildren]()), _step2;
                      try {
                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                          var _child = _step2.value;
                          if (_child[_xfa_object.$nodeName] !== "data") {
                            _child[_xfa_object.$toString](buf);
                          }
                        }
                      } catch (err) {
                        _iterator2.e(err);
                      } finally {
                        _iterator2.f();
                      }
                    }
                    this.data[_xfa_object.$toString](buf);
                    buf.push("</xfa:datasets>");
                    return buf.join("");
                  }
                }]);
                return DataHandler2;
              }();
              exports2.DataHandler = DataHandler;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.XFAParser = void 0;
              var _xfa_object = __w_pdfjs_require__2(205);
              var _xml_parser = __w_pdfjs_require__2(198);
              var _builder = __w_pdfjs_require__2(217);
              var _util = __w_pdfjs_require__2(4);
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var XFAParser = /* @__PURE__ */ function(_XMLParserBase) {
                _inherits(XFAParser2, _XMLParserBase);
                var _super = _createSuper(XFAParser2);
                function XFAParser2() {
                  var _this;
                  var rootNameSpace = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                  var richText = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                  _classCallCheck(this, XFAParser2);
                  _this = _super.call(this);
                  _this._builder = new _builder.Builder(rootNameSpace);
                  _this._stack = [];
                  _this._globalData = {
                    usedTypefaces: /* @__PURE__ */ new Set()
                  };
                  _this._ids = /* @__PURE__ */ new Map();
                  _this._current = _this._builder.buildRoot(_this._ids);
                  _this._errorCode = _xml_parser.XMLParserErrorCode.NoError;
                  _this._whiteRegex = /^\s+$/;
                  _this._nbsps = /\xa0+/g;
                  _this._richText = richText;
                  return _this;
                }
                _createClass(XFAParser2, [{
                  key: "parse",
                  value: function parse(data) {
                    this.parseXml(data);
                    if (this._errorCode !== _xml_parser.XMLParserErrorCode.NoError) {
                      return void 0;
                    }
                    this._current[_xfa_object.$finalize]();
                    return this._current.element;
                  }
                }, {
                  key: "onText",
                  value: function onText(text) {
                    text = text.replace(this._nbsps, function(match) {
                      return match.slice(1) + " ";
                    });
                    if (this._richText || this._current[_xfa_object.$acceptWhitespace]()) {
                      this._current[_xfa_object.$onText](text, this._richText);
                      return;
                    }
                    if (this._whiteRegex.test(text)) {
                      return;
                    }
                    this._current[_xfa_object.$onText](text.trim());
                  }
                }, {
                  key: "onCdata",
                  value: function onCdata(text) {
                    this._current[_xfa_object.$onText](text);
                  }
                }, {
                  key: "_mkAttributes",
                  value: function _mkAttributes(attributes, tagName) {
                    var namespace = null;
                    var prefixes = null;
                    var attributeObj = /* @__PURE__ */ Object.create({});
                    var _iterator = _createForOfIteratorHelper(attributes), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var _step$value = _step.value, name = _step$value.name, value = _step$value.value;
                        if (name === "xmlns") {
                          if (!namespace) {
                            namespace = value;
                          } else {
                            (0, _util.warn)("XFA - multiple namespace definition in <".concat(tagName, ">"));
                          }
                        } else if (name.startsWith("xmlns:")) {
                          var prefix = name.substring("xmlns:".length);
                          if (!prefixes) {
                            prefixes = [];
                          }
                          prefixes.push({
                            prefix,
                            value
                          });
                        } else {
                          var i = name.indexOf(":");
                          if (i === -1) {
                            attributeObj[name] = value;
                          } else {
                            var nsAttrs = attributeObj[_xfa_object.$nsAttributes];
                            if (!nsAttrs) {
                              nsAttrs = attributeObj[_xfa_object.$nsAttributes] = /* @__PURE__ */ Object.create(null);
                            }
                            var _ref = [name.slice(0, i), name.slice(i + 1)], ns = _ref[0], attrName = _ref[1];
                            var attrs = nsAttrs[ns];
                            if (!attrs) {
                              attrs = nsAttrs[ns] = /* @__PURE__ */ Object.create(null);
                            }
                            attrs[attrName] = value;
                          }
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    return [namespace, prefixes, attributeObj];
                  }
                }, {
                  key: "_getNameAndPrefix",
                  value: function _getNameAndPrefix(name, nsAgnostic) {
                    var i = name.indexOf(":");
                    if (i === -1) {
                      return [name, null];
                    }
                    return [name.substring(i + 1), nsAgnostic ? "" : name.substring(0, i)];
                  }
                }, {
                  key: "onBeginElement",
                  value: function onBeginElement(tagName, attributes, isEmpty) {
                    var _this$_mkAttributes = this._mkAttributes(attributes, tagName), _this$_mkAttributes2 = _slicedToArray(_this$_mkAttributes, 3), namespace = _this$_mkAttributes2[0], prefixes = _this$_mkAttributes2[1], attributesObj = _this$_mkAttributes2[2];
                    var _this$_getNameAndPref = this._getNameAndPrefix(tagName, this._builder.isNsAgnostic()), _this$_getNameAndPref2 = _slicedToArray(_this$_getNameAndPref, 2), name = _this$_getNameAndPref2[0], nsPrefix = _this$_getNameAndPref2[1];
                    var node = this._builder.build({
                      nsPrefix,
                      name,
                      attributes: attributesObj,
                      namespace,
                      prefixes
                    });
                    node[_xfa_object.$globalData] = this._globalData;
                    if (isEmpty) {
                      node[_xfa_object.$finalize]();
                      if (this._current[_xfa_object.$onChild](node)) {
                        node[_xfa_object.$setId](this._ids);
                      }
                      node[_xfa_object.$clean](this._builder);
                      return;
                    }
                    this._stack.push(this._current);
                    this._current = node;
                  }
                }, {
                  key: "onEndElement",
                  value: function onEndElement(name) {
                    var node = this._current;
                    if (node[_xfa_object.$isCDATAXml]() && typeof node[_xfa_object.$content] === "string") {
                      var parser = new XFAParser2();
                      parser._globalData = this._globalData;
                      var root = parser.parse(node[_xfa_object.$content]);
                      node[_xfa_object.$content] = null;
                      node[_xfa_object.$onChild](root);
                    }
                    node[_xfa_object.$finalize]();
                    this._current = this._stack.pop();
                    if (this._current[_xfa_object.$onChild](node)) {
                      node[_xfa_object.$setId](this._ids);
                    }
                    node[_xfa_object.$clean](this._builder);
                  }
                }, {
                  key: "onError",
                  value: function onError(code) {
                    this._errorCode = code;
                  }
                }]);
                return XFAParser2;
              }(_xml_parser.XMLParserBase);
              exports2.XFAParser = XFAParser;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.Builder = void 0;
              var _namespaces = __w_pdfjs_require__2(207);
              var _xfa_object = __w_pdfjs_require__2(205);
              var _setup = __w_pdfjs_require__2(218);
              var _template = __w_pdfjs_require__2(210);
              var _unknown = __w_pdfjs_require__2(227);
              var _util = __w_pdfjs_require__2(4);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
              }
              function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                  return Array.from(iter);
              }
              function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr))
                  return _arrayLikeToArray(arr);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _get(target, property, receiver) {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  _get = Reflect.get;
                } else {
                  _get = function _get2(target2, property2, receiver2) {
                    var base = _superPropBase(target2, property2);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property2);
                    if (desc.get) {
                      return desc.get.call(receiver2);
                    }
                    return desc.value;
                  };
                }
                return _get(target, property, receiver || target);
              }
              function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = _getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var Root = /* @__PURE__ */ function(_XFAObject) {
                _inherits(Root2, _XFAObject);
                var _super = _createSuper(Root2);
                function Root2(ids) {
                  var _this;
                  _classCallCheck(this, Root2);
                  _this = _super.call(this, -1, "root", /* @__PURE__ */ Object.create(null));
                  _this.element = null;
                  _this[_xfa_object.$ids] = ids;
                  return _this;
                }
                _createClass(Root2, [{
                  key: _xfa_object.$onChild,
                  value: function value(child) {
                    this.element = child;
                    return true;
                  }
                }, {
                  key: _xfa_object.$finalize,
                  value: function value() {
                    _get(_getPrototypeOf(Root2.prototype), _xfa_object.$finalize, this).call(this);
                    if (this.element.template instanceof _template.Template) {
                      this[_xfa_object.$ids].set(_xfa_object.$root, this.element);
                      this.element.template[_xfa_object.$resolvePrototypes](this[_xfa_object.$ids]);
                      this.element.template[_xfa_object.$ids] = this[_xfa_object.$ids];
                    }
                  }
                }]);
                return Root2;
              }(_xfa_object.XFAObject);
              var Empty = /* @__PURE__ */ function(_XFAObject2) {
                _inherits(Empty2, _XFAObject2);
                var _super2 = _createSuper(Empty2);
                function Empty2() {
                  _classCallCheck(this, Empty2);
                  return _super2.call(this, -1, "", /* @__PURE__ */ Object.create(null));
                }
                _createClass(Empty2, [{
                  key: _xfa_object.$onChild,
                  value: function value(_) {
                    return false;
                  }
                }]);
                return Empty2;
              }(_xfa_object.XFAObject);
              var Builder = /* @__PURE__ */ function() {
                function Builder2() {
                  var rootNameSpace = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                  _classCallCheck(this, Builder2);
                  this._namespaceStack = [];
                  this._nsAgnosticLevel = 0;
                  this._namespacePrefixes = /* @__PURE__ */ new Map();
                  this._namespaces = /* @__PURE__ */ new Map();
                  this._nextNsId = Math.max.apply(Math, _toConsumableArray(Object.values(_namespaces.NamespaceIds).map(function(_ref) {
                    var id = _ref.id;
                    return id;
                  })));
                  this._currentNamespace = rootNameSpace || new _unknown.UnknownNamespace(++this._nextNsId);
                }
                _createClass(Builder2, [{
                  key: "buildRoot",
                  value: function buildRoot(ids) {
                    return new Root(ids);
                  }
                }, {
                  key: "build",
                  value: function build(_ref2) {
                    var nsPrefix = _ref2.nsPrefix, name = _ref2.name, attributes = _ref2.attributes, namespace = _ref2.namespace, prefixes = _ref2.prefixes;
                    var hasNamespaceDef = namespace !== null;
                    if (hasNamespaceDef) {
                      this._namespaceStack.push(this._currentNamespace);
                      this._currentNamespace = this._searchNamespace(namespace);
                    }
                    if (prefixes) {
                      this._addNamespacePrefix(prefixes);
                    }
                    if (attributes.hasOwnProperty(_xfa_object.$nsAttributes)) {
                      var dataTemplate = _setup.NamespaceSetUp.datasets;
                      var nsAttrs = attributes[_xfa_object.$nsAttributes];
                      var xfaAttrs = null;
                      for (var _i = 0, _Object$entries = Object.entries(nsAttrs); _i < _Object$entries.length; _i++) {
                        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), ns = _Object$entries$_i[0], attrs = _Object$entries$_i[1];
                        var nsToUse = this._getNamespaceToUse(ns);
                        if (nsToUse === dataTemplate) {
                          xfaAttrs = {
                            xfa: attrs
                          };
                          break;
                        }
                      }
                      if (xfaAttrs) {
                        attributes[_xfa_object.$nsAttributes] = xfaAttrs;
                      } else {
                        delete attributes[_xfa_object.$nsAttributes];
                      }
                    }
                    var namespaceToUse = this._getNamespaceToUse(nsPrefix);
                    var node = namespaceToUse && namespaceToUse[_namespaces.$buildXFAObject](name, attributes) || new Empty();
                    if (node[_xfa_object.$isNsAgnostic]()) {
                      this._nsAgnosticLevel++;
                    }
                    if (hasNamespaceDef || prefixes || node[_xfa_object.$isNsAgnostic]()) {
                      node[_xfa_object.$cleanup] = {
                        hasNamespace: hasNamespaceDef,
                        prefixes,
                        nsAgnostic: node[_xfa_object.$isNsAgnostic]()
                      };
                    }
                    return node;
                  }
                }, {
                  key: "isNsAgnostic",
                  value: function isNsAgnostic() {
                    return this._nsAgnosticLevel > 0;
                  }
                }, {
                  key: "_searchNamespace",
                  value: function _searchNamespace(nsName) {
                    var ns = this._namespaces.get(nsName);
                    if (ns) {
                      return ns;
                    }
                    for (var _i2 = 0, _Object$entries2 = Object.entries(_namespaces.NamespaceIds); _i2 < _Object$entries2.length; _i2++) {
                      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2), name = _Object$entries2$_i[0], check = _Object$entries2$_i[1].check;
                      if (check(nsName)) {
                        ns = _setup.NamespaceSetUp[name];
                        if (ns) {
                          this._namespaces.set(nsName, ns);
                          return ns;
                        }
                        break;
                      }
                    }
                    ns = new _unknown.UnknownNamespace(++this._nextNsId);
                    this._namespaces.set(nsName, ns);
                    return ns;
                  }
                }, {
                  key: "_addNamespacePrefix",
                  value: function _addNamespacePrefix(prefixes) {
                    var _iterator = _createForOfIteratorHelper(prefixes), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var _step$value = _step.value, prefix = _step$value.prefix, value = _step$value.value;
                        var namespace = this._searchNamespace(value);
                        var prefixStack = this._namespacePrefixes.get(prefix);
                        if (!prefixStack) {
                          prefixStack = [];
                          this._namespacePrefixes.set(prefix, prefixStack);
                        }
                        prefixStack.push(namespace);
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                  }
                }, {
                  key: "_getNamespaceToUse",
                  value: function _getNamespaceToUse(prefix) {
                    if (!prefix) {
                      return this._currentNamespace;
                    }
                    var prefixStack = this._namespacePrefixes.get(prefix);
                    if (prefixStack && prefixStack.length > 0) {
                      return prefixStack[prefixStack.length - 1];
                    }
                    (0, _util.warn)("Unknown namespace prefix: ".concat(prefix, "."));
                    return null;
                  }
                }, {
                  key: "clean",
                  value: function clean(data) {
                    var _this2 = this;
                    var hasNamespace = data.hasNamespace, prefixes = data.prefixes, nsAgnostic = data.nsAgnostic;
                    if (hasNamespace) {
                      this._currentNamespace = this._namespaceStack.pop();
                    }
                    if (prefixes) {
                      prefixes.forEach(function(_ref3) {
                        var prefix = _ref3.prefix;
                        _this2._namespacePrefixes.get(prefix).pop();
                      });
                    }
                    if (nsAgnostic) {
                      this._nsAgnosticLevel--;
                    }
                  }
                }]);
                return Builder2;
              }();
              exports2.Builder = Builder;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.NamespaceSetUp = void 0;
              var _config = __w_pdfjs_require__2(219);
              var _connection_set = __w_pdfjs_require__2(220);
              var _datasets = __w_pdfjs_require__2(221);
              var _locale_set = __w_pdfjs_require__2(222);
              var _signature = __w_pdfjs_require__2(223);
              var _stylesheet = __w_pdfjs_require__2(224);
              var _template = __w_pdfjs_require__2(210);
              var _xdp = __w_pdfjs_require__2(225);
              var _xhtml = __w_pdfjs_require__2(226);
              var NamespaceSetUp = {
                config: _config.ConfigNamespace,
                connection: _connection_set.ConnectionSetNamespace,
                datasets: _datasets.DatasetsNamespace,
                localeSet: _locale_set.LocaleSetNamespace,
                signature: _signature.SignatureNamespace,
                stylesheet: _stylesheet.StylesheetNamespace,
                template: _template.TemplateNamespace,
                xdp: _xdp.XdpNamespace,
                xhtml: _xhtml.XhtmlNamespace
              };
              exports2.NamespaceSetUp = NamespaceSetUp;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.ConfigNamespace = void 0;
              var _namespaces = __w_pdfjs_require__2(207);
              var _xfa_object = __w_pdfjs_require__2(205);
              var _utils = __w_pdfjs_require__2(206);
              var _util = __w_pdfjs_require__2(4);
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var CONFIG_NS_ID = _namespaces.NamespaceIds.config.id;
              var Acrobat = /* @__PURE__ */ function(_XFAObject) {
                _inherits(Acrobat2, _XFAObject);
                var _super = _createSuper(Acrobat2);
                function Acrobat2(attributes) {
                  var _this;
                  _classCallCheck(this, Acrobat2);
                  _this = _super.call(this, CONFIG_NS_ID, "acrobat", true);
                  _this.acrobat7 = null;
                  _this.autoSave = null;
                  _this.common = null;
                  _this.validate = null;
                  _this.validateApprovalSignatures = null;
                  _this.submitUrl = new _xfa_object.XFAObjectArray();
                  return _this;
                }
                return Acrobat2;
              }(_xfa_object.XFAObject);
              var Acrobat7 = /* @__PURE__ */ function(_XFAObject2) {
                _inherits(Acrobat72, _XFAObject2);
                var _super2 = _createSuper(Acrobat72);
                function Acrobat72(attributes) {
                  var _this2;
                  _classCallCheck(this, Acrobat72);
                  _this2 = _super2.call(this, CONFIG_NS_ID, "acrobat7", true);
                  _this2.dynamicRender = null;
                  return _this2;
                }
                return Acrobat72;
              }(_xfa_object.XFAObject);
              var _ADBE_JSConsole = /* @__PURE__ */ function(_OptionObject) {
                _inherits(ADBE_JSConsole, _OptionObject);
                var _super3 = _createSuper(ADBE_JSConsole);
                function ADBE_JSConsole(attributes) {
                  _classCallCheck(this, ADBE_JSConsole);
                  return _super3.call(this, CONFIG_NS_ID, "ADBE_JSConsole", ["delegate", "Enable", "Disable"]);
                }
                return ADBE_JSConsole;
              }(_xfa_object.OptionObject);
              var _ADBE_JSDebugger = /* @__PURE__ */ function(_OptionObject2) {
                _inherits(ADBE_JSDebugger, _OptionObject2);
                var _super4 = _createSuper(ADBE_JSDebugger);
                function ADBE_JSDebugger(attributes) {
                  _classCallCheck(this, ADBE_JSDebugger);
                  return _super4.call(this, CONFIG_NS_ID, "ADBE_JSDebugger", ["delegate", "Enable", "Disable"]);
                }
                return ADBE_JSDebugger;
              }(_xfa_object.OptionObject);
              var AddSilentPrint = /* @__PURE__ */ function(_Option) {
                _inherits(AddSilentPrint2, _Option);
                var _super5 = _createSuper(AddSilentPrint2);
                function AddSilentPrint2(attributes) {
                  _classCallCheck(this, AddSilentPrint2);
                  return _super5.call(this, CONFIG_NS_ID, "addSilentPrint");
                }
                return AddSilentPrint2;
              }(_xfa_object.Option01);
              var AddViewerPreferences = /* @__PURE__ */ function(_Option2) {
                _inherits(AddViewerPreferences2, _Option2);
                var _super6 = _createSuper(AddViewerPreferences2);
                function AddViewerPreferences2(attributes) {
                  _classCallCheck(this, AddViewerPreferences2);
                  return _super6.call(this, CONFIG_NS_ID, "addViewerPreferences");
                }
                return AddViewerPreferences2;
              }(_xfa_object.Option01);
              var AdjustData = /* @__PURE__ */ function(_Option3) {
                _inherits(AdjustData2, _Option3);
                var _super7 = _createSuper(AdjustData2);
                function AdjustData2(attributes) {
                  _classCallCheck(this, AdjustData2);
                  return _super7.call(this, CONFIG_NS_ID, "adjustData");
                }
                return AdjustData2;
              }(_xfa_object.Option10);
              var AdobeExtensionLevel = /* @__PURE__ */ function(_IntegerObject) {
                _inherits(AdobeExtensionLevel2, _IntegerObject);
                var _super8 = _createSuper(AdobeExtensionLevel2);
                function AdobeExtensionLevel2(attributes) {
                  _classCallCheck(this, AdobeExtensionLevel2);
                  return _super8.call(this, CONFIG_NS_ID, "adobeExtensionLevel", 0, function(n) {
                    return n >= 1 && n <= 8;
                  });
                }
                return AdobeExtensionLevel2;
              }(_xfa_object.IntegerObject);
              var Agent = /* @__PURE__ */ function(_XFAObject3) {
                _inherits(Agent2, _XFAObject3);
                var _super9 = _createSuper(Agent2);
                function Agent2(attributes) {
                  var _this3;
                  _classCallCheck(this, Agent2);
                  _this3 = _super9.call(this, CONFIG_NS_ID, "agent", true);
                  _this3.name = attributes.name ? attributes.name.trim() : "";
                  _this3.common = new _xfa_object.XFAObjectArray();
                  return _this3;
                }
                return Agent2;
              }(_xfa_object.XFAObject);
              var AlwaysEmbed = /* @__PURE__ */ function(_ContentObject) {
                _inherits(AlwaysEmbed2, _ContentObject);
                var _super10 = _createSuper(AlwaysEmbed2);
                function AlwaysEmbed2(attributes) {
                  _classCallCheck(this, AlwaysEmbed2);
                  return _super10.call(this, CONFIG_NS_ID, "alwaysEmbed");
                }
                return AlwaysEmbed2;
              }(_xfa_object.ContentObject);
              var Amd = /* @__PURE__ */ function(_StringObject) {
                _inherits(Amd2, _StringObject);
                var _super11 = _createSuper(Amd2);
                function Amd2(attributes) {
                  _classCallCheck(this, Amd2);
                  return _super11.call(this, CONFIG_NS_ID, "amd");
                }
                return Amd2;
              }(_xfa_object.StringObject);
              var Area = /* @__PURE__ */ function(_XFAObject4) {
                _inherits(Area2, _XFAObject4);
                var _super12 = _createSuper(Area2);
                function Area2(attributes) {
                  var _this4;
                  _classCallCheck(this, Area2);
                  _this4 = _super12.call(this, CONFIG_NS_ID, "area");
                  _this4.level = (0, _utils.getInteger)({
                    data: attributes.level,
                    defaultValue: 0,
                    validate: function validate(n) {
                      return n >= 1 && n <= 3;
                    }
                  });
                  _this4.name = (0, _utils.getStringOption)(attributes.name, ["", "barcode", "coreinit", "deviceDriver", "font", "general", "layout", "merge", "script", "signature", "sourceSet", "templateCache"]);
                  return _this4;
                }
                return Area2;
              }(_xfa_object.XFAObject);
              var Attributes = /* @__PURE__ */ function(_OptionObject3) {
                _inherits(Attributes2, _OptionObject3);
                var _super13 = _createSuper(Attributes2);
                function Attributes2(attributes) {
                  _classCallCheck(this, Attributes2);
                  return _super13.call(this, CONFIG_NS_ID, "attributes", ["preserve", "delegate", "ignore"]);
                }
                return Attributes2;
              }(_xfa_object.OptionObject);
              var AutoSave = /* @__PURE__ */ function(_OptionObject4) {
                _inherits(AutoSave2, _OptionObject4);
                var _super14 = _createSuper(AutoSave2);
                function AutoSave2(attributes) {
                  _classCallCheck(this, AutoSave2);
                  return _super14.call(this, CONFIG_NS_ID, "autoSave", ["disabled", "enabled"]);
                }
                return AutoSave2;
              }(_xfa_object.OptionObject);
              var Base = /* @__PURE__ */ function(_StringObject2) {
                _inherits(Base2, _StringObject2);
                var _super15 = _createSuper(Base2);
                function Base2(attributes) {
                  _classCallCheck(this, Base2);
                  return _super15.call(this, CONFIG_NS_ID, "base");
                }
                return Base2;
              }(_xfa_object.StringObject);
              var BatchOutput = /* @__PURE__ */ function(_XFAObject5) {
                _inherits(BatchOutput2, _XFAObject5);
                var _super16 = _createSuper(BatchOutput2);
                function BatchOutput2(attributes) {
                  var _this5;
                  _classCallCheck(this, BatchOutput2);
                  _this5 = _super16.call(this, CONFIG_NS_ID, "batchOutput");
                  _this5.format = (0, _utils.getStringOption)(attributes.format, ["none", "concat", "zip", "zipCompress"]);
                  return _this5;
                }
                return BatchOutput2;
              }(_xfa_object.XFAObject);
              var BehaviorOverride = /* @__PURE__ */ function(_ContentObject2) {
                _inherits(BehaviorOverride2, _ContentObject2);
                var _super17 = _createSuper(BehaviorOverride2);
                function BehaviorOverride2(attributes) {
                  _classCallCheck(this, BehaviorOverride2);
                  return _super17.call(this, CONFIG_NS_ID, "behaviorOverride");
                }
                _createClass(BehaviorOverride2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    this[_xfa_object.$content] = new Map(this[_xfa_object.$content].trim().split(/\s+/).filter(function(x) {
                      return x.includes(":");
                    }).map(function(x) {
                      return x.split(":", 2);
                    }));
                  }
                }]);
                return BehaviorOverride2;
              }(_xfa_object.ContentObject);
              var Cache = /* @__PURE__ */ function(_XFAObject6) {
                _inherits(Cache2, _XFAObject6);
                var _super18 = _createSuper(Cache2);
                function Cache2(attributes) {
                  var _this6;
                  _classCallCheck(this, Cache2);
                  _this6 = _super18.call(this, CONFIG_NS_ID, "cache", true);
                  _this6.templateCache = null;
                  return _this6;
                }
                return Cache2;
              }(_xfa_object.XFAObject);
              var Change = /* @__PURE__ */ function(_Option4) {
                _inherits(Change2, _Option4);
                var _super19 = _createSuper(Change2);
                function Change2(attributes) {
                  _classCallCheck(this, Change2);
                  return _super19.call(this, CONFIG_NS_ID, "change");
                }
                return Change2;
              }(_xfa_object.Option01);
              var Common = /* @__PURE__ */ function(_XFAObject7) {
                _inherits(Common2, _XFAObject7);
                var _super20 = _createSuper(Common2);
                function Common2(attributes) {
                  var _this7;
                  _classCallCheck(this, Common2);
                  _this7 = _super20.call(this, CONFIG_NS_ID, "common", true);
                  _this7.data = null;
                  _this7.locale = null;
                  _this7.localeSet = null;
                  _this7.messaging = null;
                  _this7.suppressBanner = null;
                  _this7.template = null;
                  _this7.validationMessaging = null;
                  _this7.versionControl = null;
                  _this7.log = new _xfa_object.XFAObjectArray();
                  return _this7;
                }
                return Common2;
              }(_xfa_object.XFAObject);
              var Compress = /* @__PURE__ */ function(_XFAObject8) {
                _inherits(Compress2, _XFAObject8);
                var _super21 = _createSuper(Compress2);
                function Compress2(attributes) {
                  var _this8;
                  _classCallCheck(this, Compress2);
                  _this8 = _super21.call(this, CONFIG_NS_ID, "compress");
                  _this8.scope = (0, _utils.getStringOption)(attributes.scope, ["imageOnly", "document"]);
                  return _this8;
                }
                return Compress2;
              }(_xfa_object.XFAObject);
              var CompressLogicalStructure = /* @__PURE__ */ function(_Option5) {
                _inherits(CompressLogicalStructure2, _Option5);
                var _super22 = _createSuper(CompressLogicalStructure2);
                function CompressLogicalStructure2(attributes) {
                  _classCallCheck(this, CompressLogicalStructure2);
                  return _super22.call(this, CONFIG_NS_ID, "compressLogicalStructure");
                }
                return CompressLogicalStructure2;
              }(_xfa_object.Option01);
              var CompressObjectStream = /* @__PURE__ */ function(_Option6) {
                _inherits(CompressObjectStream2, _Option6);
                var _super23 = _createSuper(CompressObjectStream2);
                function CompressObjectStream2(attributes) {
                  _classCallCheck(this, CompressObjectStream2);
                  return _super23.call(this, CONFIG_NS_ID, "compressObjectStream");
                }
                return CompressObjectStream2;
              }(_xfa_object.Option10);
              var Compression = /* @__PURE__ */ function(_XFAObject9) {
                _inherits(Compression2, _XFAObject9);
                var _super24 = _createSuper(Compression2);
                function Compression2(attributes) {
                  var _this9;
                  _classCallCheck(this, Compression2);
                  _this9 = _super24.call(this, CONFIG_NS_ID, "compression", true);
                  _this9.compressLogicalStructure = null;
                  _this9.compressObjectStream = null;
                  _this9.level = null;
                  _this9.type = null;
                  return _this9;
                }
                return Compression2;
              }(_xfa_object.XFAObject);
              var Config = /* @__PURE__ */ function(_XFAObject10) {
                _inherits(Config2, _XFAObject10);
                var _super25 = _createSuper(Config2);
                function Config2(attributes) {
                  var _this10;
                  _classCallCheck(this, Config2);
                  _this10 = _super25.call(this, CONFIG_NS_ID, "config", true);
                  _this10.acrobat = null;
                  _this10.present = null;
                  _this10.trace = null;
                  _this10.agent = new _xfa_object.XFAObjectArray();
                  return _this10;
                }
                return Config2;
              }(_xfa_object.XFAObject);
              var Conformance = /* @__PURE__ */ function(_OptionObject5) {
                _inherits(Conformance2, _OptionObject5);
                var _super26 = _createSuper(Conformance2);
                function Conformance2(attributes) {
                  _classCallCheck(this, Conformance2);
                  return _super26.call(this, CONFIG_NS_ID, "conformance", ["A", "B"]);
                }
                return Conformance2;
              }(_xfa_object.OptionObject);
              var ContentCopy = /* @__PURE__ */ function(_Option7) {
                _inherits(ContentCopy2, _Option7);
                var _super27 = _createSuper(ContentCopy2);
                function ContentCopy2(attributes) {
                  _classCallCheck(this, ContentCopy2);
                  return _super27.call(this, CONFIG_NS_ID, "contentCopy");
                }
                return ContentCopy2;
              }(_xfa_object.Option01);
              var Copies = /* @__PURE__ */ function(_IntegerObject2) {
                _inherits(Copies2, _IntegerObject2);
                var _super28 = _createSuper(Copies2);
                function Copies2(attributes) {
                  _classCallCheck(this, Copies2);
                  return _super28.call(this, CONFIG_NS_ID, "copies", 1, function(n) {
                    return n >= 1;
                  });
                }
                return Copies2;
              }(_xfa_object.IntegerObject);
              var Creator = /* @__PURE__ */ function(_StringObject3) {
                _inherits(Creator2, _StringObject3);
                var _super29 = _createSuper(Creator2);
                function Creator2(attributes) {
                  _classCallCheck(this, Creator2);
                  return _super29.call(this, CONFIG_NS_ID, "creator");
                }
                return Creator2;
              }(_xfa_object.StringObject);
              var CurrentPage = /* @__PURE__ */ function(_IntegerObject3) {
                _inherits(CurrentPage2, _IntegerObject3);
                var _super30 = _createSuper(CurrentPage2);
                function CurrentPage2(attributes) {
                  _classCallCheck(this, CurrentPage2);
                  return _super30.call(this, CONFIG_NS_ID, "currentPage", 0, function(n) {
                    return n >= 0;
                  });
                }
                return CurrentPage2;
              }(_xfa_object.IntegerObject);
              var Data = /* @__PURE__ */ function(_XFAObject11) {
                _inherits(Data2, _XFAObject11);
                var _super31 = _createSuper(Data2);
                function Data2(attributes) {
                  var _this11;
                  _classCallCheck(this, Data2);
                  _this11 = _super31.call(this, CONFIG_NS_ID, "data", true);
                  _this11.adjustData = null;
                  _this11.attributes = null;
                  _this11.incrementalLoad = null;
                  _this11.outputXSL = null;
                  _this11.range = null;
                  _this11.record = null;
                  _this11.startNode = null;
                  _this11.uri = null;
                  _this11.window = null;
                  _this11.xsl = null;
                  _this11.excludeNS = new _xfa_object.XFAObjectArray();
                  _this11.transform = new _xfa_object.XFAObjectArray();
                  return _this11;
                }
                return Data2;
              }(_xfa_object.XFAObject);
              var Debug = /* @__PURE__ */ function(_XFAObject12) {
                _inherits(Debug2, _XFAObject12);
                var _super32 = _createSuper(Debug2);
                function Debug2(attributes) {
                  var _this12;
                  _classCallCheck(this, Debug2);
                  _this12 = _super32.call(this, CONFIG_NS_ID, "debug", true);
                  _this12.uri = null;
                  return _this12;
                }
                return Debug2;
              }(_xfa_object.XFAObject);
              var DefaultTypeface = /* @__PURE__ */ function(_ContentObject3) {
                _inherits(DefaultTypeface2, _ContentObject3);
                var _super33 = _createSuper(DefaultTypeface2);
                function DefaultTypeface2(attributes) {
                  var _this13;
                  _classCallCheck(this, DefaultTypeface2);
                  _this13 = _super33.call(this, CONFIG_NS_ID, "defaultTypeface");
                  _this13.writingScript = (0, _utils.getStringOption)(attributes.writingScript, ["*", "Arabic", "Cyrillic", "EastEuropeanRoman", "Greek", "Hebrew", "Japanese", "Korean", "Roman", "SimplifiedChinese", "Thai", "TraditionalChinese", "Vietnamese"]);
                  return _this13;
                }
                return DefaultTypeface2;
              }(_xfa_object.ContentObject);
              var Destination = /* @__PURE__ */ function(_OptionObject6) {
                _inherits(Destination2, _OptionObject6);
                var _super34 = _createSuper(Destination2);
                function Destination2(attributes) {
                  _classCallCheck(this, Destination2);
                  return _super34.call(this, CONFIG_NS_ID, "destination", ["pdf", "pcl", "ps", "webClient", "zpl"]);
                }
                return Destination2;
              }(_xfa_object.OptionObject);
              var DocumentAssembly = /* @__PURE__ */ function(_Option8) {
                _inherits(DocumentAssembly2, _Option8);
                var _super35 = _createSuper(DocumentAssembly2);
                function DocumentAssembly2(attributes) {
                  _classCallCheck(this, DocumentAssembly2);
                  return _super35.call(this, CONFIG_NS_ID, "documentAssembly");
                }
                return DocumentAssembly2;
              }(_xfa_object.Option01);
              var Driver = /* @__PURE__ */ function(_XFAObject13) {
                _inherits(Driver2, _XFAObject13);
                var _super36 = _createSuper(Driver2);
                function Driver2(attributes) {
                  var _this14;
                  _classCallCheck(this, Driver2);
                  _this14 = _super36.call(this, CONFIG_NS_ID, "driver", true);
                  _this14.name = attributes.name ? attributes.name.trim() : "";
                  _this14.fontInfo = null;
                  _this14.xdc = null;
                  return _this14;
                }
                return Driver2;
              }(_xfa_object.XFAObject);
              var DuplexOption = /* @__PURE__ */ function(_OptionObject7) {
                _inherits(DuplexOption2, _OptionObject7);
                var _super37 = _createSuper(DuplexOption2);
                function DuplexOption2(attributes) {
                  _classCallCheck(this, DuplexOption2);
                  return _super37.call(this, CONFIG_NS_ID, "duplexOption", ["simplex", "duplexFlipLongEdge", "duplexFlipShortEdge"]);
                }
                return DuplexOption2;
              }(_xfa_object.OptionObject);
              var DynamicRender = /* @__PURE__ */ function(_OptionObject8) {
                _inherits(DynamicRender2, _OptionObject8);
                var _super38 = _createSuper(DynamicRender2);
                function DynamicRender2(attributes) {
                  _classCallCheck(this, DynamicRender2);
                  return _super38.call(this, CONFIG_NS_ID, "dynamicRender", ["forbidden", "required"]);
                }
                return DynamicRender2;
              }(_xfa_object.OptionObject);
              var Embed = /* @__PURE__ */ function(_Option9) {
                _inherits(Embed2, _Option9);
                var _super39 = _createSuper(Embed2);
                function Embed2(attributes) {
                  _classCallCheck(this, Embed2);
                  return _super39.call(this, CONFIG_NS_ID, "embed");
                }
                return Embed2;
              }(_xfa_object.Option01);
              var Encrypt = /* @__PURE__ */ function(_Option10) {
                _inherits(Encrypt2, _Option10);
                var _super40 = _createSuper(Encrypt2);
                function Encrypt2(attributes) {
                  _classCallCheck(this, Encrypt2);
                  return _super40.call(this, CONFIG_NS_ID, "encrypt");
                }
                return Encrypt2;
              }(_xfa_object.Option01);
              var Encryption = /* @__PURE__ */ function(_XFAObject14) {
                _inherits(Encryption2, _XFAObject14);
                var _super41 = _createSuper(Encryption2);
                function Encryption2(attributes) {
                  var _this15;
                  _classCallCheck(this, Encryption2);
                  _this15 = _super41.call(this, CONFIG_NS_ID, "encryption", true);
                  _this15.encrypt = null;
                  _this15.encryptionLevel = null;
                  _this15.permissions = null;
                  return _this15;
                }
                return Encryption2;
              }(_xfa_object.XFAObject);
              var EncryptionLevel = /* @__PURE__ */ function(_OptionObject9) {
                _inherits(EncryptionLevel2, _OptionObject9);
                var _super42 = _createSuper(EncryptionLevel2);
                function EncryptionLevel2(attributes) {
                  _classCallCheck(this, EncryptionLevel2);
                  return _super42.call(this, CONFIG_NS_ID, "encryptionLevel", ["40bit", "128bit"]);
                }
                return EncryptionLevel2;
              }(_xfa_object.OptionObject);
              var Enforce = /* @__PURE__ */ function(_StringObject4) {
                _inherits(Enforce2, _StringObject4);
                var _super43 = _createSuper(Enforce2);
                function Enforce2(attributes) {
                  _classCallCheck(this, Enforce2);
                  return _super43.call(this, CONFIG_NS_ID, "enforce");
                }
                return Enforce2;
              }(_xfa_object.StringObject);
              var Equate = /* @__PURE__ */ function(_XFAObject15) {
                _inherits(Equate2, _XFAObject15);
                var _super44 = _createSuper(Equate2);
                function Equate2(attributes) {
                  var _this16;
                  _classCallCheck(this, Equate2);
                  _this16 = _super44.call(this, CONFIG_NS_ID, "equate");
                  _this16.force = (0, _utils.getInteger)({
                    data: attributes.force,
                    defaultValue: 1,
                    validate: function validate(n) {
                      return n === 0;
                    }
                  });
                  _this16.from = attributes.from || "";
                  _this16.to = attributes.to || "";
                  return _this16;
                }
                return Equate2;
              }(_xfa_object.XFAObject);
              var EquateRange = /* @__PURE__ */ function(_XFAObject16) {
                _inherits(EquateRange2, _XFAObject16);
                var _super45 = _createSuper(EquateRange2);
                function EquateRange2(attributes) {
                  var _this17;
                  _classCallCheck(this, EquateRange2);
                  _this17 = _super45.call(this, CONFIG_NS_ID, "equateRange");
                  _this17.from = attributes.from || "";
                  _this17.to = attributes.to || "";
                  _this17._unicodeRange = attributes.unicodeRange || "";
                  return _this17;
                }
                _createClass(EquateRange2, [{
                  key: "unicodeRange",
                  get: function get() {
                    var ranges = [];
                    var unicodeRegex = /U\+([0-9a-fA-F]+)/;
                    var unicodeRange = this._unicodeRange;
                    var _iterator = _createForOfIteratorHelper(unicodeRange.split(",").map(function(x) {
                      return x.trim();
                    }).filter(function(x) {
                      return !!x;
                    })), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var range = _step.value;
                        range = range.split("-", 2).map(function(x) {
                          var found = x.match(unicodeRegex);
                          if (!found) {
                            return 0;
                          }
                          return parseInt(found[1], 16);
                        });
                        if (range.length === 1) {
                          range.push(range[0]);
                        }
                        ranges.push(range);
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    return (0, _util.shadow)(this, "unicodeRange", ranges);
                  }
                }]);
                return EquateRange2;
              }(_xfa_object.XFAObject);
              var Exclude = /* @__PURE__ */ function(_ContentObject4) {
                _inherits(Exclude2, _ContentObject4);
                var _super46 = _createSuper(Exclude2);
                function Exclude2(attributes) {
                  _classCallCheck(this, Exclude2);
                  return _super46.call(this, CONFIG_NS_ID, "exclude");
                }
                _createClass(Exclude2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\s+/).filter(function(x) {
                      return x && ["calculate", "close", "enter", "exit", "initialize", "ready", "validate"].includes(x);
                    });
                  }
                }]);
                return Exclude2;
              }(_xfa_object.ContentObject);
              var ExcludeNS = /* @__PURE__ */ function(_StringObject5) {
                _inherits(ExcludeNS2, _StringObject5);
                var _super47 = _createSuper(ExcludeNS2);
                function ExcludeNS2(attributes) {
                  _classCallCheck(this, ExcludeNS2);
                  return _super47.call(this, CONFIG_NS_ID, "excludeNS");
                }
                return ExcludeNS2;
              }(_xfa_object.StringObject);
              var FlipLabel = /* @__PURE__ */ function(_OptionObject10) {
                _inherits(FlipLabel2, _OptionObject10);
                var _super48 = _createSuper(FlipLabel2);
                function FlipLabel2(attributes) {
                  _classCallCheck(this, FlipLabel2);
                  return _super48.call(this, CONFIG_NS_ID, "flipLabel", ["usePrinterSetting", "on", "off"]);
                }
                return FlipLabel2;
              }(_xfa_object.OptionObject);
              var FontInfo = /* @__PURE__ */ function(_XFAObject17) {
                _inherits(FontInfo2, _XFAObject17);
                var _super49 = _createSuper(FontInfo2);
                function FontInfo2(attributes) {
                  var _this18;
                  _classCallCheck(this, FontInfo2);
                  _this18 = _super49.call(this, CONFIG_NS_ID, "fontInfo", true);
                  _this18.embed = null;
                  _this18.map = null;
                  _this18.subsetBelow = null;
                  _this18.alwaysEmbed = new _xfa_object.XFAObjectArray();
                  _this18.defaultTypeface = new _xfa_object.XFAObjectArray();
                  _this18.neverEmbed = new _xfa_object.XFAObjectArray();
                  return _this18;
                }
                return FontInfo2;
              }(_xfa_object.XFAObject);
              var FormFieldFilling = /* @__PURE__ */ function(_Option11) {
                _inherits(FormFieldFilling2, _Option11);
                var _super50 = _createSuper(FormFieldFilling2);
                function FormFieldFilling2(attributes) {
                  _classCallCheck(this, FormFieldFilling2);
                  return _super50.call(this, CONFIG_NS_ID, "formFieldFilling");
                }
                return FormFieldFilling2;
              }(_xfa_object.Option01);
              var GroupParent = /* @__PURE__ */ function(_StringObject6) {
                _inherits(GroupParent2, _StringObject6);
                var _super51 = _createSuper(GroupParent2);
                function GroupParent2(attributes) {
                  _classCallCheck(this, GroupParent2);
                  return _super51.call(this, CONFIG_NS_ID, "groupParent");
                }
                return GroupParent2;
              }(_xfa_object.StringObject);
              var IfEmpty = /* @__PURE__ */ function(_OptionObject11) {
                _inherits(IfEmpty2, _OptionObject11);
                var _super52 = _createSuper(IfEmpty2);
                function IfEmpty2(attributes) {
                  _classCallCheck(this, IfEmpty2);
                  return _super52.call(this, CONFIG_NS_ID, "ifEmpty", ["dataValue", "dataGroup", "ignore", "remove"]);
                }
                return IfEmpty2;
              }(_xfa_object.OptionObject);
              var IncludeXDPContent = /* @__PURE__ */ function(_StringObject7) {
                _inherits(IncludeXDPContent2, _StringObject7);
                var _super53 = _createSuper(IncludeXDPContent2);
                function IncludeXDPContent2(attributes) {
                  _classCallCheck(this, IncludeXDPContent2);
                  return _super53.call(this, CONFIG_NS_ID, "includeXDPContent");
                }
                return IncludeXDPContent2;
              }(_xfa_object.StringObject);
              var IncrementalLoad = /* @__PURE__ */ function(_OptionObject12) {
                _inherits(IncrementalLoad2, _OptionObject12);
                var _super54 = _createSuper(IncrementalLoad2);
                function IncrementalLoad2(attributes) {
                  _classCallCheck(this, IncrementalLoad2);
                  return _super54.call(this, CONFIG_NS_ID, "incrementalLoad", ["none", "forwardOnly"]);
                }
                return IncrementalLoad2;
              }(_xfa_object.OptionObject);
              var IncrementalMerge = /* @__PURE__ */ function(_Option12) {
                _inherits(IncrementalMerge2, _Option12);
                var _super55 = _createSuper(IncrementalMerge2);
                function IncrementalMerge2(attributes) {
                  _classCallCheck(this, IncrementalMerge2);
                  return _super55.call(this, CONFIG_NS_ID, "incrementalMerge");
                }
                return IncrementalMerge2;
              }(_xfa_object.Option01);
              var Interactive = /* @__PURE__ */ function(_Option13) {
                _inherits(Interactive2, _Option13);
                var _super56 = _createSuper(Interactive2);
                function Interactive2(attributes) {
                  _classCallCheck(this, Interactive2);
                  return _super56.call(this, CONFIG_NS_ID, "interactive");
                }
                return Interactive2;
              }(_xfa_object.Option01);
              var Jog = /* @__PURE__ */ function(_OptionObject13) {
                _inherits(Jog2, _OptionObject13);
                var _super57 = _createSuper(Jog2);
                function Jog2(attributes) {
                  _classCallCheck(this, Jog2);
                  return _super57.call(this, CONFIG_NS_ID, "jog", ["usePrinterSetting", "none", "pageSet"]);
                }
                return Jog2;
              }(_xfa_object.OptionObject);
              var LabelPrinter = /* @__PURE__ */ function(_XFAObject18) {
                _inherits(LabelPrinter2, _XFAObject18);
                var _super58 = _createSuper(LabelPrinter2);
                function LabelPrinter2(attributes) {
                  var _this19;
                  _classCallCheck(this, LabelPrinter2);
                  _this19 = _super58.call(this, CONFIG_NS_ID, "labelPrinter", true);
                  _this19.name = (0, _utils.getStringOption)(attributes.name, ["zpl", "dpl", "ipl", "tcpl"]);
                  _this19.batchOutput = null;
                  _this19.flipLabel = null;
                  _this19.fontInfo = null;
                  _this19.xdc = null;
                  return _this19;
                }
                return LabelPrinter2;
              }(_xfa_object.XFAObject);
              var Layout = /* @__PURE__ */ function(_OptionObject14) {
                _inherits(Layout2, _OptionObject14);
                var _super59 = _createSuper(Layout2);
                function Layout2(attributes) {
                  _classCallCheck(this, Layout2);
                  return _super59.call(this, CONFIG_NS_ID, "layout", ["paginate", "panel"]);
                }
                return Layout2;
              }(_xfa_object.OptionObject);
              var Level = /* @__PURE__ */ function(_IntegerObject4) {
                _inherits(Level2, _IntegerObject4);
                var _super60 = _createSuper(Level2);
                function Level2(attributes) {
                  _classCallCheck(this, Level2);
                  return _super60.call(this, CONFIG_NS_ID, "level", 0, function(n) {
                    return n > 0;
                  });
                }
                return Level2;
              }(_xfa_object.IntegerObject);
              var Linearized = /* @__PURE__ */ function(_Option14) {
                _inherits(Linearized2, _Option14);
                var _super61 = _createSuper(Linearized2);
                function Linearized2(attributes) {
                  _classCallCheck(this, Linearized2);
                  return _super61.call(this, CONFIG_NS_ID, "linearized");
                }
                return Linearized2;
              }(_xfa_object.Option01);
              var Locale = /* @__PURE__ */ function(_StringObject8) {
                _inherits(Locale2, _StringObject8);
                var _super62 = _createSuper(Locale2);
                function Locale2(attributes) {
                  _classCallCheck(this, Locale2);
                  return _super62.call(this, CONFIG_NS_ID, "locale");
                }
                return Locale2;
              }(_xfa_object.StringObject);
              var LocaleSet = /* @__PURE__ */ function(_StringObject9) {
                _inherits(LocaleSet2, _StringObject9);
                var _super63 = _createSuper(LocaleSet2);
                function LocaleSet2(attributes) {
                  _classCallCheck(this, LocaleSet2);
                  return _super63.call(this, CONFIG_NS_ID, "localeSet");
                }
                return LocaleSet2;
              }(_xfa_object.StringObject);
              var Log = /* @__PURE__ */ function(_XFAObject19) {
                _inherits(Log2, _XFAObject19);
                var _super64 = _createSuper(Log2);
                function Log2(attributes) {
                  var _this20;
                  _classCallCheck(this, Log2);
                  _this20 = _super64.call(this, CONFIG_NS_ID, "log", true);
                  _this20.mode = null;
                  _this20.threshold = null;
                  _this20.to = null;
                  _this20.uri = null;
                  return _this20;
                }
                return Log2;
              }(_xfa_object.XFAObject);
              var MapElement = /* @__PURE__ */ function(_XFAObject20) {
                _inherits(MapElement2, _XFAObject20);
                var _super65 = _createSuper(MapElement2);
                function MapElement2(attributes) {
                  var _this21;
                  _classCallCheck(this, MapElement2);
                  _this21 = _super65.call(this, CONFIG_NS_ID, "map", true);
                  _this21.equate = new _xfa_object.XFAObjectArray();
                  _this21.equateRange = new _xfa_object.XFAObjectArray();
                  return _this21;
                }
                return MapElement2;
              }(_xfa_object.XFAObject);
              var MediumInfo = /* @__PURE__ */ function(_XFAObject21) {
                _inherits(MediumInfo2, _XFAObject21);
                var _super66 = _createSuper(MediumInfo2);
                function MediumInfo2(attributes) {
                  var _this22;
                  _classCallCheck(this, MediumInfo2);
                  _this22 = _super66.call(this, CONFIG_NS_ID, "mediumInfo", true);
                  _this22.map = null;
                  return _this22;
                }
                return MediumInfo2;
              }(_xfa_object.XFAObject);
              var Message = /* @__PURE__ */ function(_XFAObject22) {
                _inherits(Message2, _XFAObject22);
                var _super67 = _createSuper(Message2);
                function Message2(attributes) {
                  var _this23;
                  _classCallCheck(this, Message2);
                  _this23 = _super67.call(this, CONFIG_NS_ID, "message", true);
                  _this23.msgId = null;
                  _this23.severity = null;
                  return _this23;
                }
                return Message2;
              }(_xfa_object.XFAObject);
              var Messaging = /* @__PURE__ */ function(_XFAObject23) {
                _inherits(Messaging2, _XFAObject23);
                var _super68 = _createSuper(Messaging2);
                function Messaging2(attributes) {
                  var _this24;
                  _classCallCheck(this, Messaging2);
                  _this24 = _super68.call(this, CONFIG_NS_ID, "messaging", true);
                  _this24.message = new _xfa_object.XFAObjectArray();
                  return _this24;
                }
                return Messaging2;
              }(_xfa_object.XFAObject);
              var Mode = /* @__PURE__ */ function(_OptionObject15) {
                _inherits(Mode2, _OptionObject15);
                var _super69 = _createSuper(Mode2);
                function Mode2(attributes) {
                  _classCallCheck(this, Mode2);
                  return _super69.call(this, CONFIG_NS_ID, "mode", ["append", "overwrite"]);
                }
                return Mode2;
              }(_xfa_object.OptionObject);
              var ModifyAnnots = /* @__PURE__ */ function(_Option15) {
                _inherits(ModifyAnnots2, _Option15);
                var _super70 = _createSuper(ModifyAnnots2);
                function ModifyAnnots2(attributes) {
                  _classCallCheck(this, ModifyAnnots2);
                  return _super70.call(this, CONFIG_NS_ID, "modifyAnnots");
                }
                return ModifyAnnots2;
              }(_xfa_object.Option01);
              var MsgId = /* @__PURE__ */ function(_IntegerObject5) {
                _inherits(MsgId2, _IntegerObject5);
                var _super71 = _createSuper(MsgId2);
                function MsgId2(attributes) {
                  _classCallCheck(this, MsgId2);
                  return _super71.call(this, CONFIG_NS_ID, "msgId", 1, function(n) {
                    return n >= 1;
                  });
                }
                return MsgId2;
              }(_xfa_object.IntegerObject);
              var NameAttr = /* @__PURE__ */ function(_StringObject10) {
                _inherits(NameAttr2, _StringObject10);
                var _super72 = _createSuper(NameAttr2);
                function NameAttr2(attributes) {
                  _classCallCheck(this, NameAttr2);
                  return _super72.call(this, CONFIG_NS_ID, "nameAttr");
                }
                return NameAttr2;
              }(_xfa_object.StringObject);
              var NeverEmbed = /* @__PURE__ */ function(_ContentObject5) {
                _inherits(NeverEmbed2, _ContentObject5);
                var _super73 = _createSuper(NeverEmbed2);
                function NeverEmbed2(attributes) {
                  _classCallCheck(this, NeverEmbed2);
                  return _super73.call(this, CONFIG_NS_ID, "neverEmbed");
                }
                return NeverEmbed2;
              }(_xfa_object.ContentObject);
              var NumberOfCopies = /* @__PURE__ */ function(_IntegerObject6) {
                _inherits(NumberOfCopies2, _IntegerObject6);
                var _super74 = _createSuper(NumberOfCopies2);
                function NumberOfCopies2(attributes) {
                  _classCallCheck(this, NumberOfCopies2);
                  return _super74.call(this, CONFIG_NS_ID, "numberOfCopies", null, function(n) {
                    return n >= 2 && n <= 5;
                  });
                }
                return NumberOfCopies2;
              }(_xfa_object.IntegerObject);
              var OpenAction = /* @__PURE__ */ function(_XFAObject24) {
                _inherits(OpenAction2, _XFAObject24);
                var _super75 = _createSuper(OpenAction2);
                function OpenAction2(attributes) {
                  var _this25;
                  _classCallCheck(this, OpenAction2);
                  _this25 = _super75.call(this, CONFIG_NS_ID, "openAction", true);
                  _this25.destination = null;
                  return _this25;
                }
                return OpenAction2;
              }(_xfa_object.XFAObject);
              var Output = /* @__PURE__ */ function(_XFAObject25) {
                _inherits(Output2, _XFAObject25);
                var _super76 = _createSuper(Output2);
                function Output2(attributes) {
                  var _this26;
                  _classCallCheck(this, Output2);
                  _this26 = _super76.call(this, CONFIG_NS_ID, "output", true);
                  _this26.to = null;
                  _this26.type = null;
                  _this26.uri = null;
                  return _this26;
                }
                return Output2;
              }(_xfa_object.XFAObject);
              var OutputBin = /* @__PURE__ */ function(_StringObject11) {
                _inherits(OutputBin2, _StringObject11);
                var _super77 = _createSuper(OutputBin2);
                function OutputBin2(attributes) {
                  _classCallCheck(this, OutputBin2);
                  return _super77.call(this, CONFIG_NS_ID, "outputBin");
                }
                return OutputBin2;
              }(_xfa_object.StringObject);
              var OutputXSL = /* @__PURE__ */ function(_XFAObject26) {
                _inherits(OutputXSL2, _XFAObject26);
                var _super78 = _createSuper(OutputXSL2);
                function OutputXSL2(attributes) {
                  var _this27;
                  _classCallCheck(this, OutputXSL2);
                  _this27 = _super78.call(this, CONFIG_NS_ID, "outputXSL", true);
                  _this27.uri = null;
                  return _this27;
                }
                return OutputXSL2;
              }(_xfa_object.XFAObject);
              var Overprint = /* @__PURE__ */ function(_OptionObject16) {
                _inherits(Overprint2, _OptionObject16);
                var _super79 = _createSuper(Overprint2);
                function Overprint2(attributes) {
                  _classCallCheck(this, Overprint2);
                  return _super79.call(this, CONFIG_NS_ID, "overprint", ["none", "both", "draw", "field"]);
                }
                return Overprint2;
              }(_xfa_object.OptionObject);
              var Packets = /* @__PURE__ */ function(_StringObject12) {
                _inherits(Packets2, _StringObject12);
                var _super80 = _createSuper(Packets2);
                function Packets2(attributes) {
                  _classCallCheck(this, Packets2);
                  return _super80.call(this, CONFIG_NS_ID, "packets");
                }
                _createClass(Packets2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    if (this[_xfa_object.$content] === "*") {
                      return;
                    }
                    this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\s+/).filter(function(x) {
                      return ["config", "datasets", "template", "xfdf", "xslt"].includes(x);
                    });
                  }
                }]);
                return Packets2;
              }(_xfa_object.StringObject);
              var PageOffset = /* @__PURE__ */ function(_XFAObject27) {
                _inherits(PageOffset2, _XFAObject27);
                var _super81 = _createSuper(PageOffset2);
                function PageOffset2(attributes) {
                  var _this28;
                  _classCallCheck(this, PageOffset2);
                  _this28 = _super81.call(this, CONFIG_NS_ID, "pageOffset");
                  _this28.x = (0, _utils.getInteger)({
                    data: attributes.x,
                    defaultValue: "useXDCSetting",
                    validate: function validate(n) {
                      return true;
                    }
                  });
                  _this28.y = (0, _utils.getInteger)({
                    data: attributes.y,
                    defaultValue: "useXDCSetting",
                    validate: function validate(n) {
                      return true;
                    }
                  });
                  return _this28;
                }
                return PageOffset2;
              }(_xfa_object.XFAObject);
              var PageRange = /* @__PURE__ */ function(_StringObject13) {
                _inherits(PageRange2, _StringObject13);
                var _super82 = _createSuper(PageRange2);
                function PageRange2(attributes) {
                  _classCallCheck(this, PageRange2);
                  return _super82.call(this, CONFIG_NS_ID, "pageRange");
                }
                _createClass(PageRange2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    var numbers = this[_xfa_object.$content].trim().split(/\s+/).map(function(x) {
                      return parseInt(x, 10);
                    });
                    var ranges = [];
                    for (var i = 0, ii = numbers.length; i < ii; i += 2) {
                      ranges.push(numbers.slice(i, i + 2));
                    }
                    this[_xfa_object.$content] = ranges;
                  }
                }]);
                return PageRange2;
              }(_xfa_object.StringObject);
              var Pagination = /* @__PURE__ */ function(_OptionObject17) {
                _inherits(Pagination2, _OptionObject17);
                var _super83 = _createSuper(Pagination2);
                function Pagination2(attributes) {
                  _classCallCheck(this, Pagination2);
                  return _super83.call(this, CONFIG_NS_ID, "pagination", ["simplex", "duplexShortEdge", "duplexLongEdge"]);
                }
                return Pagination2;
              }(_xfa_object.OptionObject);
              var PaginationOverride = /* @__PURE__ */ function(_OptionObject18) {
                _inherits(PaginationOverride2, _OptionObject18);
                var _super84 = _createSuper(PaginationOverride2);
                function PaginationOverride2(attributes) {
                  _classCallCheck(this, PaginationOverride2);
                  return _super84.call(this, CONFIG_NS_ID, "paginationOverride", ["none", "forceDuplex", "forceDuplexLongEdge", "forceDuplexShortEdge", "forceSimplex"]);
                }
                return PaginationOverride2;
              }(_xfa_object.OptionObject);
              var Part = /* @__PURE__ */ function(_IntegerObject7) {
                _inherits(Part2, _IntegerObject7);
                var _super85 = _createSuper(Part2);
                function Part2(attributes) {
                  _classCallCheck(this, Part2);
                  return _super85.call(this, CONFIG_NS_ID, "part", 1, function(n) {
                    return false;
                  });
                }
                return Part2;
              }(_xfa_object.IntegerObject);
              var Pcl = /* @__PURE__ */ function(_XFAObject28) {
                _inherits(Pcl2, _XFAObject28);
                var _super86 = _createSuper(Pcl2);
                function Pcl2(attributes) {
                  var _this29;
                  _classCallCheck(this, Pcl2);
                  _this29 = _super86.call(this, CONFIG_NS_ID, "pcl", true);
                  _this29.name = attributes.name || "";
                  _this29.batchOutput = null;
                  _this29.fontInfo = null;
                  _this29.jog = null;
                  _this29.mediumInfo = null;
                  _this29.outputBin = null;
                  _this29.pageOffset = null;
                  _this29.staple = null;
                  _this29.xdc = null;
                  return _this29;
                }
                return Pcl2;
              }(_xfa_object.XFAObject);
              var Pdf = /* @__PURE__ */ function(_XFAObject29) {
                _inherits(Pdf2, _XFAObject29);
                var _super87 = _createSuper(Pdf2);
                function Pdf2(attributes) {
                  var _this30;
                  _classCallCheck(this, Pdf2);
                  _this30 = _super87.call(this, CONFIG_NS_ID, "pdf", true);
                  _this30.name = attributes.name || "";
                  _this30.adobeExtensionLevel = null;
                  _this30.batchOutput = null;
                  _this30.compression = null;
                  _this30.creator = null;
                  _this30.encryption = null;
                  _this30.fontInfo = null;
                  _this30.interactive = null;
                  _this30.linearized = null;
                  _this30.openAction = null;
                  _this30.pdfa = null;
                  _this30.producer = null;
                  _this30.renderPolicy = null;
                  _this30.scriptModel = null;
                  _this30.silentPrint = null;
                  _this30.submitFormat = null;
                  _this30.tagged = null;
                  _this30.version = null;
                  _this30.viewerPreferences = null;
                  _this30.xdc = null;
                  return _this30;
                }
                return Pdf2;
              }(_xfa_object.XFAObject);
              var Pdfa = /* @__PURE__ */ function(_XFAObject30) {
                _inherits(Pdfa2, _XFAObject30);
                var _super88 = _createSuper(Pdfa2);
                function Pdfa2(attributes) {
                  var _this31;
                  _classCallCheck(this, Pdfa2);
                  _this31 = _super88.call(this, CONFIG_NS_ID, "pdfa", true);
                  _this31.amd = null;
                  _this31.conformance = null;
                  _this31.includeXDPContent = null;
                  _this31.part = null;
                  return _this31;
                }
                return Pdfa2;
              }(_xfa_object.XFAObject);
              var Permissions = /* @__PURE__ */ function(_XFAObject31) {
                _inherits(Permissions2, _XFAObject31);
                var _super89 = _createSuper(Permissions2);
                function Permissions2(attributes) {
                  var _this32;
                  _classCallCheck(this, Permissions2);
                  _this32 = _super89.call(this, CONFIG_NS_ID, "permissions", true);
                  _this32.accessibleContent = null;
                  _this32.change = null;
                  _this32.contentCopy = null;
                  _this32.documentAssembly = null;
                  _this32.formFieldFilling = null;
                  _this32.modifyAnnots = null;
                  _this32.plaintextMetadata = null;
                  _this32.print = null;
                  _this32.printHighQuality = null;
                  return _this32;
                }
                return Permissions2;
              }(_xfa_object.XFAObject);
              var PickTrayByPDFSize = /* @__PURE__ */ function(_Option16) {
                _inherits(PickTrayByPDFSize2, _Option16);
                var _super90 = _createSuper(PickTrayByPDFSize2);
                function PickTrayByPDFSize2(attributes) {
                  _classCallCheck(this, PickTrayByPDFSize2);
                  return _super90.call(this, CONFIG_NS_ID, "pickTrayByPDFSize");
                }
                return PickTrayByPDFSize2;
              }(_xfa_object.Option01);
              var Picture = /* @__PURE__ */ function(_StringObject14) {
                _inherits(Picture2, _StringObject14);
                var _super91 = _createSuper(Picture2);
                function Picture2(attributes) {
                  _classCallCheck(this, Picture2);
                  return _super91.call(this, CONFIG_NS_ID, "picture");
                }
                return Picture2;
              }(_xfa_object.StringObject);
              var PlaintextMetadata = /* @__PURE__ */ function(_Option17) {
                _inherits(PlaintextMetadata2, _Option17);
                var _super92 = _createSuper(PlaintextMetadata2);
                function PlaintextMetadata2(attributes) {
                  _classCallCheck(this, PlaintextMetadata2);
                  return _super92.call(this, CONFIG_NS_ID, "plaintextMetadata");
                }
                return PlaintextMetadata2;
              }(_xfa_object.Option01);
              var Presence = /* @__PURE__ */ function(_OptionObject19) {
                _inherits(Presence2, _OptionObject19);
                var _super93 = _createSuper(Presence2);
                function Presence2(attributes) {
                  _classCallCheck(this, Presence2);
                  return _super93.call(this, CONFIG_NS_ID, "presence", ["preserve", "dissolve", "dissolveStructure", "ignore", "remove"]);
                }
                return Presence2;
              }(_xfa_object.OptionObject);
              var Present = /* @__PURE__ */ function(_XFAObject32) {
                _inherits(Present2, _XFAObject32);
                var _super94 = _createSuper(Present2);
                function Present2(attributes) {
                  var _this33;
                  _classCallCheck(this, Present2);
                  _this33 = _super94.call(this, CONFIG_NS_ID, "present", true);
                  _this33.behaviorOverride = null;
                  _this33.cache = null;
                  _this33.common = null;
                  _this33.copies = null;
                  _this33.destination = null;
                  _this33.incrementalMerge = null;
                  _this33.layout = null;
                  _this33.output = null;
                  _this33.overprint = null;
                  _this33.pagination = null;
                  _this33.paginationOverride = null;
                  _this33.script = null;
                  _this33.validate = null;
                  _this33.xdp = null;
                  _this33.driver = new _xfa_object.XFAObjectArray();
                  _this33.labelPrinter = new _xfa_object.XFAObjectArray();
                  _this33.pcl = new _xfa_object.XFAObjectArray();
                  _this33.pdf = new _xfa_object.XFAObjectArray();
                  _this33.ps = new _xfa_object.XFAObjectArray();
                  _this33.submitUrl = new _xfa_object.XFAObjectArray();
                  _this33.webClient = new _xfa_object.XFAObjectArray();
                  _this33.zpl = new _xfa_object.XFAObjectArray();
                  return _this33;
                }
                return Present2;
              }(_xfa_object.XFAObject);
              var Print = /* @__PURE__ */ function(_Option18) {
                _inherits(Print2, _Option18);
                var _super95 = _createSuper(Print2);
                function Print2(attributes) {
                  _classCallCheck(this, Print2);
                  return _super95.call(this, CONFIG_NS_ID, "print");
                }
                return Print2;
              }(_xfa_object.Option01);
              var PrintHighQuality = /* @__PURE__ */ function(_Option19) {
                _inherits(PrintHighQuality2, _Option19);
                var _super96 = _createSuper(PrintHighQuality2);
                function PrintHighQuality2(attributes) {
                  _classCallCheck(this, PrintHighQuality2);
                  return _super96.call(this, CONFIG_NS_ID, "printHighQuality");
                }
                return PrintHighQuality2;
              }(_xfa_object.Option01);
              var PrintScaling = /* @__PURE__ */ function(_OptionObject20) {
                _inherits(PrintScaling2, _OptionObject20);
                var _super97 = _createSuper(PrintScaling2);
                function PrintScaling2(attributes) {
                  _classCallCheck(this, PrintScaling2);
                  return _super97.call(this, CONFIG_NS_ID, "printScaling", ["appdefault", "noScaling"]);
                }
                return PrintScaling2;
              }(_xfa_object.OptionObject);
              var PrinterName = /* @__PURE__ */ function(_StringObject15) {
                _inherits(PrinterName2, _StringObject15);
                var _super98 = _createSuper(PrinterName2);
                function PrinterName2(attributes) {
                  _classCallCheck(this, PrinterName2);
                  return _super98.call(this, CONFIG_NS_ID, "printerName");
                }
                return PrinterName2;
              }(_xfa_object.StringObject);
              var Producer = /* @__PURE__ */ function(_StringObject16) {
                _inherits(Producer2, _StringObject16);
                var _super99 = _createSuper(Producer2);
                function Producer2(attributes) {
                  _classCallCheck(this, Producer2);
                  return _super99.call(this, CONFIG_NS_ID, "producer");
                }
                return Producer2;
              }(_xfa_object.StringObject);
              var Ps = /* @__PURE__ */ function(_XFAObject33) {
                _inherits(Ps2, _XFAObject33);
                var _super100 = _createSuper(Ps2);
                function Ps2(attributes) {
                  var _this34;
                  _classCallCheck(this, Ps2);
                  _this34 = _super100.call(this, CONFIG_NS_ID, "ps", true);
                  _this34.name = attributes.name || "";
                  _this34.batchOutput = null;
                  _this34.fontInfo = null;
                  _this34.jog = null;
                  _this34.mediumInfo = null;
                  _this34.outputBin = null;
                  _this34.staple = null;
                  _this34.xdc = null;
                  return _this34;
                }
                return Ps2;
              }(_xfa_object.XFAObject);
              var Range = /* @__PURE__ */ function(_ContentObject6) {
                _inherits(Range2, _ContentObject6);
                var _super101 = _createSuper(Range2);
                function Range2(attributes) {
                  _classCallCheck(this, Range2);
                  return _super101.call(this, CONFIG_NS_ID, "range");
                }
                _createClass(Range2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\s*,\s*/, 2).map(function(range) {
                      return range.split("-").map(function(x) {
                        return parseInt(x.trim(), 10);
                      });
                    }).filter(function(range) {
                      return range.every(function(x) {
                        return !isNaN(x);
                      });
                    }).map(function(range) {
                      if (range.length === 1) {
                        range.push(range[0]);
                      }
                      return range;
                    });
                  }
                }]);
                return Range2;
              }(_xfa_object.ContentObject);
              var Record = /* @__PURE__ */ function(_ContentObject7) {
                _inherits(Record2, _ContentObject7);
                var _super102 = _createSuper(Record2);
                function Record2(attributes) {
                  _classCallCheck(this, Record2);
                  return _super102.call(this, CONFIG_NS_ID, "record");
                }
                _createClass(Record2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    this[_xfa_object.$content] = this[_xfa_object.$content].trim();
                    var n = parseInt(this[_xfa_object.$content], 10);
                    if (!isNaN(n) && n >= 0) {
                      this[_xfa_object.$content] = n;
                    }
                  }
                }]);
                return Record2;
              }(_xfa_object.ContentObject);
              var Relevant = /* @__PURE__ */ function(_ContentObject8) {
                _inherits(Relevant2, _ContentObject8);
                var _super103 = _createSuper(Relevant2);
                function Relevant2(attributes) {
                  _classCallCheck(this, Relevant2);
                  return _super103.call(this, CONFIG_NS_ID, "relevant");
                }
                _createClass(Relevant2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\s+/);
                  }
                }]);
                return Relevant2;
              }(_xfa_object.ContentObject);
              var Rename = /* @__PURE__ */ function(_ContentObject9) {
                _inherits(Rename2, _ContentObject9);
                var _super104 = _createSuper(Rename2);
                function Rename2(attributes) {
                  _classCallCheck(this, Rename2);
                  return _super104.call(this, CONFIG_NS_ID, "rename");
                }
                _createClass(Rename2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    this[_xfa_object.$content] = this[_xfa_object.$content].trim();
                    if (this[_xfa_object.$content].toLowerCase().startsWith("xml") || this[_xfa_object.$content].match(new RegExp("[\\p{L}_][\\p{L}\\d._\\p{M}-]*", "u"))) {
                      (0, _util.warn)("XFA - Rename: invalid XFA name");
                    }
                  }
                }]);
                return Rename2;
              }(_xfa_object.ContentObject);
              var RenderPolicy = /* @__PURE__ */ function(_OptionObject21) {
                _inherits(RenderPolicy2, _OptionObject21);
                var _super105 = _createSuper(RenderPolicy2);
                function RenderPolicy2(attributes) {
                  _classCallCheck(this, RenderPolicy2);
                  return _super105.call(this, CONFIG_NS_ID, "renderPolicy", ["server", "client"]);
                }
                return RenderPolicy2;
              }(_xfa_object.OptionObject);
              var RunScripts = /* @__PURE__ */ function(_OptionObject22) {
                _inherits(RunScripts2, _OptionObject22);
                var _super106 = _createSuper(RunScripts2);
                function RunScripts2(attributes) {
                  _classCallCheck(this, RunScripts2);
                  return _super106.call(this, CONFIG_NS_ID, "runScripts", ["both", "client", "none", "server"]);
                }
                return RunScripts2;
              }(_xfa_object.OptionObject);
              var Script = /* @__PURE__ */ function(_XFAObject34) {
                _inherits(Script2, _XFAObject34);
                var _super107 = _createSuper(Script2);
                function Script2(attributes) {
                  var _this35;
                  _classCallCheck(this, Script2);
                  _this35 = _super107.call(this, CONFIG_NS_ID, "script", true);
                  _this35.currentPage = null;
                  _this35.exclude = null;
                  _this35.runScripts = null;
                  return _this35;
                }
                return Script2;
              }(_xfa_object.XFAObject);
              var ScriptModel = /* @__PURE__ */ function(_OptionObject23) {
                _inherits(ScriptModel2, _OptionObject23);
                var _super108 = _createSuper(ScriptModel2);
                function ScriptModel2(attributes) {
                  _classCallCheck(this, ScriptModel2);
                  return _super108.call(this, CONFIG_NS_ID, "scriptModel", ["XFA", "none"]);
                }
                return ScriptModel2;
              }(_xfa_object.OptionObject);
              var Severity = /* @__PURE__ */ function(_OptionObject24) {
                _inherits(Severity2, _OptionObject24);
                var _super109 = _createSuper(Severity2);
                function Severity2(attributes) {
                  _classCallCheck(this, Severity2);
                  return _super109.call(this, CONFIG_NS_ID, "severity", ["ignore", "error", "information", "trace", "warning"]);
                }
                return Severity2;
              }(_xfa_object.OptionObject);
              var SilentPrint = /* @__PURE__ */ function(_XFAObject35) {
                _inherits(SilentPrint2, _XFAObject35);
                var _super110 = _createSuper(SilentPrint2);
                function SilentPrint2(attributes) {
                  var _this36;
                  _classCallCheck(this, SilentPrint2);
                  _this36 = _super110.call(this, CONFIG_NS_ID, "silentPrint", true);
                  _this36.addSilentPrint = null;
                  _this36.printerName = null;
                  return _this36;
                }
                return SilentPrint2;
              }(_xfa_object.XFAObject);
              var Staple = /* @__PURE__ */ function(_XFAObject36) {
                _inherits(Staple2, _XFAObject36);
                var _super111 = _createSuper(Staple2);
                function Staple2(attributes) {
                  var _this37;
                  _classCallCheck(this, Staple2);
                  _this37 = _super111.call(this, CONFIG_NS_ID, "staple");
                  _this37.mode = (0, _utils.getStringOption)(attributes.mode, ["usePrinterSetting", "on", "off"]);
                  return _this37;
                }
                return Staple2;
              }(_xfa_object.XFAObject);
              var StartNode = /* @__PURE__ */ function(_StringObject17) {
                _inherits(StartNode2, _StringObject17);
                var _super112 = _createSuper(StartNode2);
                function StartNode2(attributes) {
                  _classCallCheck(this, StartNode2);
                  return _super112.call(this, CONFIG_NS_ID, "startNode");
                }
                return StartNode2;
              }(_xfa_object.StringObject);
              var StartPage = /* @__PURE__ */ function(_IntegerObject8) {
                _inherits(StartPage2, _IntegerObject8);
                var _super113 = _createSuper(StartPage2);
                function StartPage2(attributes) {
                  _classCallCheck(this, StartPage2);
                  return _super113.call(this, CONFIG_NS_ID, "startPage", 0, function(n) {
                    return true;
                  });
                }
                return StartPage2;
              }(_xfa_object.IntegerObject);
              var SubmitFormat = /* @__PURE__ */ function(_OptionObject25) {
                _inherits(SubmitFormat2, _OptionObject25);
                var _super114 = _createSuper(SubmitFormat2);
                function SubmitFormat2(attributes) {
                  _classCallCheck(this, SubmitFormat2);
                  return _super114.call(this, CONFIG_NS_ID, "submitFormat", ["html", "delegate", "fdf", "xml", "pdf"]);
                }
                return SubmitFormat2;
              }(_xfa_object.OptionObject);
              var SubmitUrl = /* @__PURE__ */ function(_StringObject18) {
                _inherits(SubmitUrl2, _StringObject18);
                var _super115 = _createSuper(SubmitUrl2);
                function SubmitUrl2(attributes) {
                  _classCallCheck(this, SubmitUrl2);
                  return _super115.call(this, CONFIG_NS_ID, "submitUrl");
                }
                return SubmitUrl2;
              }(_xfa_object.StringObject);
              var SubsetBelow = /* @__PURE__ */ function(_IntegerObject9) {
                _inherits(SubsetBelow2, _IntegerObject9);
                var _super116 = _createSuper(SubsetBelow2);
                function SubsetBelow2(attributes) {
                  _classCallCheck(this, SubsetBelow2);
                  return _super116.call(this, CONFIG_NS_ID, "subsetBelow", 100, function(n) {
                    return n >= 0 && n <= 100;
                  });
                }
                return SubsetBelow2;
              }(_xfa_object.IntegerObject);
              var SuppressBanner = /* @__PURE__ */ function(_Option20) {
                _inherits(SuppressBanner2, _Option20);
                var _super117 = _createSuper(SuppressBanner2);
                function SuppressBanner2(attributes) {
                  _classCallCheck(this, SuppressBanner2);
                  return _super117.call(this, CONFIG_NS_ID, "suppressBanner");
                }
                return SuppressBanner2;
              }(_xfa_object.Option01);
              var Tagged = /* @__PURE__ */ function(_Option21) {
                _inherits(Tagged2, _Option21);
                var _super118 = _createSuper(Tagged2);
                function Tagged2(attributes) {
                  _classCallCheck(this, Tagged2);
                  return _super118.call(this, CONFIG_NS_ID, "tagged");
                }
                return Tagged2;
              }(_xfa_object.Option01);
              var Template = /* @__PURE__ */ function(_XFAObject37) {
                _inherits(Template2, _XFAObject37);
                var _super119 = _createSuper(Template2);
                function Template2(attributes) {
                  var _this38;
                  _classCallCheck(this, Template2);
                  _this38 = _super119.call(this, CONFIG_NS_ID, "template", true);
                  _this38.base = null;
                  _this38.relevant = null;
                  _this38.startPage = null;
                  _this38.uri = null;
                  _this38.xsl = null;
                  return _this38;
                }
                return Template2;
              }(_xfa_object.XFAObject);
              var Threshold = /* @__PURE__ */ function(_OptionObject26) {
                _inherits(Threshold2, _OptionObject26);
                var _super120 = _createSuper(Threshold2);
                function Threshold2(attributes) {
                  _classCallCheck(this, Threshold2);
                  return _super120.call(this, CONFIG_NS_ID, "threshold", ["trace", "error", "information", "warning"]);
                }
                return Threshold2;
              }(_xfa_object.OptionObject);
              var To = /* @__PURE__ */ function(_OptionObject27) {
                _inherits(To2, _OptionObject27);
                var _super121 = _createSuper(To2);
                function To2(attributes) {
                  _classCallCheck(this, To2);
                  return _super121.call(this, CONFIG_NS_ID, "to", ["null", "memory", "stderr", "stdout", "system", "uri"]);
                }
                return To2;
              }(_xfa_object.OptionObject);
              var TemplateCache = /* @__PURE__ */ function(_XFAObject38) {
                _inherits(TemplateCache2, _XFAObject38);
                var _super122 = _createSuper(TemplateCache2);
                function TemplateCache2(attributes) {
                  var _this39;
                  _classCallCheck(this, TemplateCache2);
                  _this39 = _super122.call(this, CONFIG_NS_ID, "templateCache");
                  _this39.maxEntries = (0, _utils.getInteger)({
                    data: attributes.maxEntries,
                    defaultValue: 5,
                    validate: function validate(n) {
                      return n >= 0;
                    }
                  });
                  return _this39;
                }
                return TemplateCache2;
              }(_xfa_object.XFAObject);
              var Trace = /* @__PURE__ */ function(_XFAObject39) {
                _inherits(Trace2, _XFAObject39);
                var _super123 = _createSuper(Trace2);
                function Trace2(attributes) {
                  var _this40;
                  _classCallCheck(this, Trace2);
                  _this40 = _super123.call(this, CONFIG_NS_ID, "trace", true);
                  _this40.area = new _xfa_object.XFAObjectArray();
                  return _this40;
                }
                return Trace2;
              }(_xfa_object.XFAObject);
              var Transform = /* @__PURE__ */ function(_XFAObject40) {
                _inherits(Transform2, _XFAObject40);
                var _super124 = _createSuper(Transform2);
                function Transform2(attributes) {
                  var _this41;
                  _classCallCheck(this, Transform2);
                  _this41 = _super124.call(this, CONFIG_NS_ID, "transform", true);
                  _this41.groupParent = null;
                  _this41.ifEmpty = null;
                  _this41.nameAttr = null;
                  _this41.picture = null;
                  _this41.presence = null;
                  _this41.rename = null;
                  _this41.whitespace = null;
                  return _this41;
                }
                return Transform2;
              }(_xfa_object.XFAObject);
              var Type = /* @__PURE__ */ function(_OptionObject28) {
                _inherits(Type2, _OptionObject28);
                var _super125 = _createSuper(Type2);
                function Type2(attributes) {
                  _classCallCheck(this, Type2);
                  return _super125.call(this, CONFIG_NS_ID, "type", ["none", "ascii85", "asciiHex", "ccittfax", "flate", "lzw", "runLength", "native", "xdp", "mergedXDP"]);
                }
                return Type2;
              }(_xfa_object.OptionObject);
              var Uri = /* @__PURE__ */ function(_StringObject19) {
                _inherits(Uri2, _StringObject19);
                var _super126 = _createSuper(Uri2);
                function Uri2(attributes) {
                  _classCallCheck(this, Uri2);
                  return _super126.call(this, CONFIG_NS_ID, "uri");
                }
                return Uri2;
              }(_xfa_object.StringObject);
              var Validate = /* @__PURE__ */ function(_OptionObject29) {
                _inherits(Validate2, _OptionObject29);
                var _super127 = _createSuper(Validate2);
                function Validate2(attributes) {
                  _classCallCheck(this, Validate2);
                  return _super127.call(this, CONFIG_NS_ID, "validate", ["preSubmit", "prePrint", "preExecute", "preSave"]);
                }
                return Validate2;
              }(_xfa_object.OptionObject);
              var ValidateApprovalSignatures = /* @__PURE__ */ function(_ContentObject10) {
                _inherits(ValidateApprovalSignatures2, _ContentObject10);
                var _super128 = _createSuper(ValidateApprovalSignatures2);
                function ValidateApprovalSignatures2(attributes) {
                  _classCallCheck(this, ValidateApprovalSignatures2);
                  return _super128.call(this, CONFIG_NS_ID, "validateApprovalSignatures");
                }
                _createClass(ValidateApprovalSignatures2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    this[_xfa_object.$content] = this[_xfa_object.$content].trim().split(/\s+/).filter(function(x) {
                      return ["docReady", "postSign"].includes(x);
                    });
                  }
                }]);
                return ValidateApprovalSignatures2;
              }(_xfa_object.ContentObject);
              var ValidationMessaging = /* @__PURE__ */ function(_OptionObject30) {
                _inherits(ValidationMessaging2, _OptionObject30);
                var _super129 = _createSuper(ValidationMessaging2);
                function ValidationMessaging2(attributes) {
                  _classCallCheck(this, ValidationMessaging2);
                  return _super129.call(this, CONFIG_NS_ID, "validationMessaging", ["allMessagesIndividually", "allMessagesTogether", "firstMessageOnly", "noMessages"]);
                }
                return ValidationMessaging2;
              }(_xfa_object.OptionObject);
              var Version = /* @__PURE__ */ function(_OptionObject31) {
                _inherits(Version2, _OptionObject31);
                var _super130 = _createSuper(Version2);
                function Version2(attributes) {
                  _classCallCheck(this, Version2);
                  return _super130.call(this, CONFIG_NS_ID, "version", ["1.7", "1.6", "1.5", "1.4", "1.3", "1.2"]);
                }
                return Version2;
              }(_xfa_object.OptionObject);
              var VersionControl = /* @__PURE__ */ function(_XFAObject41) {
                _inherits(VersionControl2, _XFAObject41);
                var _super131 = _createSuper(VersionControl2);
                function VersionControl2(attributes) {
                  var _this42;
                  _classCallCheck(this, VersionControl2);
                  _this42 = _super131.call(this, CONFIG_NS_ID, "VersionControl");
                  _this42.outputBelow = (0, _utils.getStringOption)(attributes.outputBelow, ["warn", "error", "update"]);
                  _this42.sourceAbove = (0, _utils.getStringOption)(attributes.sourceAbove, ["warn", "error"]);
                  _this42.sourceBelow = (0, _utils.getStringOption)(attributes.sourceBelow, ["update", "maintain"]);
                  return _this42;
                }
                return VersionControl2;
              }(_xfa_object.XFAObject);
              var ViewerPreferences = /* @__PURE__ */ function(_XFAObject42) {
                _inherits(ViewerPreferences2, _XFAObject42);
                var _super132 = _createSuper(ViewerPreferences2);
                function ViewerPreferences2(attributes) {
                  var _this43;
                  _classCallCheck(this, ViewerPreferences2);
                  _this43 = _super132.call(this, CONFIG_NS_ID, "viewerPreferences", true);
                  _this43.ADBE_JSConsole = null;
                  _this43.ADBE_JSDebugger = null;
                  _this43.addViewerPreferences = null;
                  _this43.duplexOption = null;
                  _this43.enforce = null;
                  _this43.numberOfCopies = null;
                  _this43.pageRange = null;
                  _this43.pickTrayByPDFSize = null;
                  _this43.printScaling = null;
                  return _this43;
                }
                return ViewerPreferences2;
              }(_xfa_object.XFAObject);
              var WebClient = /* @__PURE__ */ function(_XFAObject43) {
                _inherits(WebClient2, _XFAObject43);
                var _super133 = _createSuper(WebClient2);
                function WebClient2(attributes) {
                  var _this44;
                  _classCallCheck(this, WebClient2);
                  _this44 = _super133.call(this, CONFIG_NS_ID, "webClient", true);
                  _this44.name = attributes.name ? attributes.name.trim() : "";
                  _this44.fontInfo = null;
                  _this44.xdc = null;
                  return _this44;
                }
                return WebClient2;
              }(_xfa_object.XFAObject);
              var Whitespace = /* @__PURE__ */ function(_OptionObject32) {
                _inherits(Whitespace2, _OptionObject32);
                var _super134 = _createSuper(Whitespace2);
                function Whitespace2(attributes) {
                  _classCallCheck(this, Whitespace2);
                  return _super134.call(this, CONFIG_NS_ID, "whitespace", ["preserve", "ltrim", "normalize", "rtrim", "trim"]);
                }
                return Whitespace2;
              }(_xfa_object.OptionObject);
              var Window = /* @__PURE__ */ function(_ContentObject11) {
                _inherits(Window2, _ContentObject11);
                var _super135 = _createSuper(Window2);
                function Window2(attributes) {
                  _classCallCheck(this, Window2);
                  return _super135.call(this, CONFIG_NS_ID, "window");
                }
                _createClass(Window2, [{
                  key: _xfa_object.$finalize,
                  value: function value() {
                    var pair = this[_xfa_object.$content].trim().split(/\s*,\s*/, 2).map(function(x) {
                      return parseInt(x, 10);
                    });
                    if (pair.some(function(x) {
                      return isNaN(x);
                    })) {
                      this[_xfa_object.$content] = [0, 0];
                      return;
                    }
                    if (pair.length === 1) {
                      pair.push(pair[0]);
                    }
                    this[_xfa_object.$content] = pair;
                  }
                }]);
                return Window2;
              }(_xfa_object.ContentObject);
              var Xdc = /* @__PURE__ */ function(_XFAObject44) {
                _inherits(Xdc2, _XFAObject44);
                var _super136 = _createSuper(Xdc2);
                function Xdc2(attributes) {
                  var _this45;
                  _classCallCheck(this, Xdc2);
                  _this45 = _super136.call(this, CONFIG_NS_ID, "xdc", true);
                  _this45.uri = new _xfa_object.XFAObjectArray();
                  _this45.xsl = new _xfa_object.XFAObjectArray();
                  return _this45;
                }
                return Xdc2;
              }(_xfa_object.XFAObject);
              var Xdp = /* @__PURE__ */ function(_XFAObject45) {
                _inherits(Xdp2, _XFAObject45);
                var _super137 = _createSuper(Xdp2);
                function Xdp2(attributes) {
                  var _this46;
                  _classCallCheck(this, Xdp2);
                  _this46 = _super137.call(this, CONFIG_NS_ID, "xdp", true);
                  _this46.packets = null;
                  return _this46;
                }
                return Xdp2;
              }(_xfa_object.XFAObject);
              var Xsl = /* @__PURE__ */ function(_XFAObject46) {
                _inherits(Xsl2, _XFAObject46);
                var _super138 = _createSuper(Xsl2);
                function Xsl2(attributes) {
                  var _this47;
                  _classCallCheck(this, Xsl2);
                  _this47 = _super138.call(this, CONFIG_NS_ID, "xsl", true);
                  _this47.debug = null;
                  _this47.uri = null;
                  return _this47;
                }
                return Xsl2;
              }(_xfa_object.XFAObject);
              var Zpl = /* @__PURE__ */ function(_XFAObject47) {
                _inherits(Zpl2, _XFAObject47);
                var _super139 = _createSuper(Zpl2);
                function Zpl2(attributes) {
                  var _this48;
                  _classCallCheck(this, Zpl2);
                  _this48 = _super139.call(this, CONFIG_NS_ID, "zpl", true);
                  _this48.name = attributes.name ? attributes.name.trim() : "";
                  _this48.batchOutput = null;
                  _this48.flipLabel = null;
                  _this48.fontInfo = null;
                  _this48.xdc = null;
                  return _this48;
                }
                return Zpl2;
              }(_xfa_object.XFAObject);
              var ConfigNamespace = /* @__PURE__ */ function() {
                function ConfigNamespace2() {
                  _classCallCheck(this, ConfigNamespace2);
                }
                _createClass(ConfigNamespace2, null, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    if (ConfigNamespace2.hasOwnProperty(name)) {
                      return ConfigNamespace2[name](attributes);
                    }
                    return void 0;
                  }
                }, {
                  key: "acrobat",
                  value: function acrobat(attrs) {
                    return new Acrobat(attrs);
                  }
                }, {
                  key: "acrobat7",
                  value: function acrobat7(attrs) {
                    return new Acrobat7(attrs);
                  }
                }, {
                  key: "ADBE_JSConsole",
                  value: function ADBE_JSConsole(attrs) {
                    return new _ADBE_JSConsole(attrs);
                  }
                }, {
                  key: "ADBE_JSDebugger",
                  value: function ADBE_JSDebugger(attrs) {
                    return new _ADBE_JSDebugger(attrs);
                  }
                }, {
                  key: "addSilentPrint",
                  value: function addSilentPrint(attrs) {
                    return new AddSilentPrint(attrs);
                  }
                }, {
                  key: "addViewerPreferences",
                  value: function addViewerPreferences(attrs) {
                    return new AddViewerPreferences(attrs);
                  }
                }, {
                  key: "adjustData",
                  value: function adjustData(attrs) {
                    return new AdjustData(attrs);
                  }
                }, {
                  key: "adobeExtensionLevel",
                  value: function adobeExtensionLevel(attrs) {
                    return new AdobeExtensionLevel(attrs);
                  }
                }, {
                  key: "agent",
                  value: function agent(attrs) {
                    return new Agent(attrs);
                  }
                }, {
                  key: "alwaysEmbed",
                  value: function alwaysEmbed(attrs) {
                    return new AlwaysEmbed(attrs);
                  }
                }, {
                  key: "amd",
                  value: function amd(attrs) {
                    return new Amd(attrs);
                  }
                }, {
                  key: "area",
                  value: function area(attrs) {
                    return new Area(attrs);
                  }
                }, {
                  key: "attributes",
                  value: function attributes(attrs) {
                    return new Attributes(attrs);
                  }
                }, {
                  key: "autoSave",
                  value: function autoSave(attrs) {
                    return new AutoSave(attrs);
                  }
                }, {
                  key: "base",
                  value: function base(attrs) {
                    return new Base(attrs);
                  }
                }, {
                  key: "batchOutput",
                  value: function batchOutput(attrs) {
                    return new BatchOutput(attrs);
                  }
                }, {
                  key: "behaviorOverride",
                  value: function behaviorOverride(attrs) {
                    return new BehaviorOverride(attrs);
                  }
                }, {
                  key: "cache",
                  value: function cache(attrs) {
                    return new Cache(attrs);
                  }
                }, {
                  key: "change",
                  value: function change(attrs) {
                    return new Change(attrs);
                  }
                }, {
                  key: "common",
                  value: function common(attrs) {
                    return new Common(attrs);
                  }
                }, {
                  key: "compress",
                  value: function compress(attrs) {
                    return new Compress(attrs);
                  }
                }, {
                  key: "compressLogicalStructure",
                  value: function compressLogicalStructure(attrs) {
                    return new CompressLogicalStructure(attrs);
                  }
                }, {
                  key: "compressObjectStream",
                  value: function compressObjectStream(attrs) {
                    return new CompressObjectStream(attrs);
                  }
                }, {
                  key: "compression",
                  value: function compression(attrs) {
                    return new Compression(attrs);
                  }
                }, {
                  key: "config",
                  value: function config(attrs) {
                    return new Config(attrs);
                  }
                }, {
                  key: "conformance",
                  value: function conformance(attrs) {
                    return new Conformance(attrs);
                  }
                }, {
                  key: "contentCopy",
                  value: function contentCopy(attrs) {
                    return new ContentCopy(attrs);
                  }
                }, {
                  key: "copies",
                  value: function copies(attrs) {
                    return new Copies(attrs);
                  }
                }, {
                  key: "creator",
                  value: function creator(attrs) {
                    return new Creator(attrs);
                  }
                }, {
                  key: "currentPage",
                  value: function currentPage(attrs) {
                    return new CurrentPage(attrs);
                  }
                }, {
                  key: "data",
                  value: function data(attrs) {
                    return new Data(attrs);
                  }
                }, {
                  key: "debug",
                  value: function debug(attrs) {
                    return new Debug(attrs);
                  }
                }, {
                  key: "defaultTypeface",
                  value: function defaultTypeface(attrs) {
                    return new DefaultTypeface(attrs);
                  }
                }, {
                  key: "destination",
                  value: function destination(attrs) {
                    return new Destination(attrs);
                  }
                }, {
                  key: "documentAssembly",
                  value: function documentAssembly(attrs) {
                    return new DocumentAssembly(attrs);
                  }
                }, {
                  key: "driver",
                  value: function driver(attrs) {
                    return new Driver(attrs);
                  }
                }, {
                  key: "duplexOption",
                  value: function duplexOption(attrs) {
                    return new DuplexOption(attrs);
                  }
                }, {
                  key: "dynamicRender",
                  value: function dynamicRender(attrs) {
                    return new DynamicRender(attrs);
                  }
                }, {
                  key: "embed",
                  value: function embed(attrs) {
                    return new Embed(attrs);
                  }
                }, {
                  key: "encrypt",
                  value: function encrypt(attrs) {
                    return new Encrypt(attrs);
                  }
                }, {
                  key: "encryption",
                  value: function encryption(attrs) {
                    return new Encryption(attrs);
                  }
                }, {
                  key: "encryptionLevel",
                  value: function encryptionLevel(attrs) {
                    return new EncryptionLevel(attrs);
                  }
                }, {
                  key: "enforce",
                  value: function enforce(attrs) {
                    return new Enforce(attrs);
                  }
                }, {
                  key: "equate",
                  value: function equate(attrs) {
                    return new Equate(attrs);
                  }
                }, {
                  key: "equateRange",
                  value: function equateRange(attrs) {
                    return new EquateRange(attrs);
                  }
                }, {
                  key: "exclude",
                  value: function exclude(attrs) {
                    return new Exclude(attrs);
                  }
                }, {
                  key: "excludeNS",
                  value: function excludeNS(attrs) {
                    return new ExcludeNS(attrs);
                  }
                }, {
                  key: "flipLabel",
                  value: function flipLabel(attrs) {
                    return new FlipLabel(attrs);
                  }
                }, {
                  key: "fontInfo",
                  value: function fontInfo(attrs) {
                    return new FontInfo(attrs);
                  }
                }, {
                  key: "formFieldFilling",
                  value: function formFieldFilling(attrs) {
                    return new FormFieldFilling(attrs);
                  }
                }, {
                  key: "groupParent",
                  value: function groupParent(attrs) {
                    return new GroupParent(attrs);
                  }
                }, {
                  key: "ifEmpty",
                  value: function ifEmpty(attrs) {
                    return new IfEmpty(attrs);
                  }
                }, {
                  key: "includeXDPContent",
                  value: function includeXDPContent(attrs) {
                    return new IncludeXDPContent(attrs);
                  }
                }, {
                  key: "incrementalLoad",
                  value: function incrementalLoad(attrs) {
                    return new IncrementalLoad(attrs);
                  }
                }, {
                  key: "incrementalMerge",
                  value: function incrementalMerge(attrs) {
                    return new IncrementalMerge(attrs);
                  }
                }, {
                  key: "interactive",
                  value: function interactive(attrs) {
                    return new Interactive(attrs);
                  }
                }, {
                  key: "jog",
                  value: function jog(attrs) {
                    return new Jog(attrs);
                  }
                }, {
                  key: "labelPrinter",
                  value: function labelPrinter(attrs) {
                    return new LabelPrinter(attrs);
                  }
                }, {
                  key: "layout",
                  value: function layout(attrs) {
                    return new Layout(attrs);
                  }
                }, {
                  key: "level",
                  value: function level(attrs) {
                    return new Level(attrs);
                  }
                }, {
                  key: "linearized",
                  value: function linearized(attrs) {
                    return new Linearized(attrs);
                  }
                }, {
                  key: "locale",
                  value: function locale(attrs) {
                    return new Locale(attrs);
                  }
                }, {
                  key: "localeSet",
                  value: function localeSet(attrs) {
                    return new LocaleSet(attrs);
                  }
                }, {
                  key: "log",
                  value: function log(attrs) {
                    return new Log(attrs);
                  }
                }, {
                  key: "map",
                  value: function map(attrs) {
                    return new MapElement(attrs);
                  }
                }, {
                  key: "mediumInfo",
                  value: function mediumInfo(attrs) {
                    return new MediumInfo(attrs);
                  }
                }, {
                  key: "message",
                  value: function message(attrs) {
                    return new Message(attrs);
                  }
                }, {
                  key: "messaging",
                  value: function messaging(attrs) {
                    return new Messaging(attrs);
                  }
                }, {
                  key: "mode",
                  value: function mode(attrs) {
                    return new Mode(attrs);
                  }
                }, {
                  key: "modifyAnnots",
                  value: function modifyAnnots(attrs) {
                    return new ModifyAnnots(attrs);
                  }
                }, {
                  key: "msgId",
                  value: function msgId(attrs) {
                    return new MsgId(attrs);
                  }
                }, {
                  key: "nameAttr",
                  value: function nameAttr(attrs) {
                    return new NameAttr(attrs);
                  }
                }, {
                  key: "neverEmbed",
                  value: function neverEmbed(attrs) {
                    return new NeverEmbed(attrs);
                  }
                }, {
                  key: "numberOfCopies",
                  value: function numberOfCopies(attrs) {
                    return new NumberOfCopies(attrs);
                  }
                }, {
                  key: "openAction",
                  value: function openAction(attrs) {
                    return new OpenAction(attrs);
                  }
                }, {
                  key: "output",
                  value: function output(attrs) {
                    return new Output(attrs);
                  }
                }, {
                  key: "outputBin",
                  value: function outputBin(attrs) {
                    return new OutputBin(attrs);
                  }
                }, {
                  key: "outputXSL",
                  value: function outputXSL(attrs) {
                    return new OutputXSL(attrs);
                  }
                }, {
                  key: "overprint",
                  value: function overprint(attrs) {
                    return new Overprint(attrs);
                  }
                }, {
                  key: "packets",
                  value: function packets(attrs) {
                    return new Packets(attrs);
                  }
                }, {
                  key: "pageOffset",
                  value: function pageOffset(attrs) {
                    return new PageOffset(attrs);
                  }
                }, {
                  key: "pageRange",
                  value: function pageRange(attrs) {
                    return new PageRange(attrs);
                  }
                }, {
                  key: "pagination",
                  value: function pagination(attrs) {
                    return new Pagination(attrs);
                  }
                }, {
                  key: "paginationOverride",
                  value: function paginationOverride(attrs) {
                    return new PaginationOverride(attrs);
                  }
                }, {
                  key: "part",
                  value: function part(attrs) {
                    return new Part(attrs);
                  }
                }, {
                  key: "pcl",
                  value: function pcl(attrs) {
                    return new Pcl(attrs);
                  }
                }, {
                  key: "pdf",
                  value: function pdf(attrs) {
                    return new Pdf(attrs);
                  }
                }, {
                  key: "pdfa",
                  value: function pdfa(attrs) {
                    return new Pdfa(attrs);
                  }
                }, {
                  key: "permissions",
                  value: function permissions(attrs) {
                    return new Permissions(attrs);
                  }
                }, {
                  key: "pickTrayByPDFSize",
                  value: function pickTrayByPDFSize(attrs) {
                    return new PickTrayByPDFSize(attrs);
                  }
                }, {
                  key: "picture",
                  value: function picture(attrs) {
                    return new Picture(attrs);
                  }
                }, {
                  key: "plaintextMetadata",
                  value: function plaintextMetadata(attrs) {
                    return new PlaintextMetadata(attrs);
                  }
                }, {
                  key: "presence",
                  value: function presence(attrs) {
                    return new Presence(attrs);
                  }
                }, {
                  key: "present",
                  value: function present(attrs) {
                    return new Present(attrs);
                  }
                }, {
                  key: "print",
                  value: function print(attrs) {
                    return new Print(attrs);
                  }
                }, {
                  key: "printHighQuality",
                  value: function printHighQuality(attrs) {
                    return new PrintHighQuality(attrs);
                  }
                }, {
                  key: "printScaling",
                  value: function printScaling(attrs) {
                    return new PrintScaling(attrs);
                  }
                }, {
                  key: "printerName",
                  value: function printerName(attrs) {
                    return new PrinterName(attrs);
                  }
                }, {
                  key: "producer",
                  value: function producer(attrs) {
                    return new Producer(attrs);
                  }
                }, {
                  key: "ps",
                  value: function ps(attrs) {
                    return new Ps(attrs);
                  }
                }, {
                  key: "range",
                  value: function range(attrs) {
                    return new Range(attrs);
                  }
                }, {
                  key: "record",
                  value: function record(attrs) {
                    return new Record(attrs);
                  }
                }, {
                  key: "relevant",
                  value: function relevant(attrs) {
                    return new Relevant(attrs);
                  }
                }, {
                  key: "rename",
                  value: function rename(attrs) {
                    return new Rename(attrs);
                  }
                }, {
                  key: "renderPolicy",
                  value: function renderPolicy(attrs) {
                    return new RenderPolicy(attrs);
                  }
                }, {
                  key: "runScripts",
                  value: function runScripts(attrs) {
                    return new RunScripts(attrs);
                  }
                }, {
                  key: "script",
                  value: function script(attrs) {
                    return new Script(attrs);
                  }
                }, {
                  key: "scriptModel",
                  value: function scriptModel(attrs) {
                    return new ScriptModel(attrs);
                  }
                }, {
                  key: "severity",
                  value: function severity(attrs) {
                    return new Severity(attrs);
                  }
                }, {
                  key: "silentPrint",
                  value: function silentPrint(attrs) {
                    return new SilentPrint(attrs);
                  }
                }, {
                  key: "staple",
                  value: function staple(attrs) {
                    return new Staple(attrs);
                  }
                }, {
                  key: "startNode",
                  value: function startNode(attrs) {
                    return new StartNode(attrs);
                  }
                }, {
                  key: "startPage",
                  value: function startPage(attrs) {
                    return new StartPage(attrs);
                  }
                }, {
                  key: "submitFormat",
                  value: function submitFormat(attrs) {
                    return new SubmitFormat(attrs);
                  }
                }, {
                  key: "submitUrl",
                  value: function submitUrl(attrs) {
                    return new SubmitUrl(attrs);
                  }
                }, {
                  key: "subsetBelow",
                  value: function subsetBelow(attrs) {
                    return new SubsetBelow(attrs);
                  }
                }, {
                  key: "suppressBanner",
                  value: function suppressBanner(attrs) {
                    return new SuppressBanner(attrs);
                  }
                }, {
                  key: "tagged",
                  value: function tagged(attrs) {
                    return new Tagged(attrs);
                  }
                }, {
                  key: "template",
                  value: function template(attrs) {
                    return new Template(attrs);
                  }
                }, {
                  key: "templateCache",
                  value: function templateCache(attrs) {
                    return new TemplateCache(attrs);
                  }
                }, {
                  key: "threshold",
                  value: function threshold(attrs) {
                    return new Threshold(attrs);
                  }
                }, {
                  key: "to",
                  value: function to(attrs) {
                    return new To(attrs);
                  }
                }, {
                  key: "trace",
                  value: function trace(attrs) {
                    return new Trace(attrs);
                  }
                }, {
                  key: "transform",
                  value: function transform(attrs) {
                    return new Transform(attrs);
                  }
                }, {
                  key: "type",
                  value: function type(attrs) {
                    return new Type(attrs);
                  }
                }, {
                  key: "uri",
                  value: function uri(attrs) {
                    return new Uri(attrs);
                  }
                }, {
                  key: "validate",
                  value: function validate(attrs) {
                    return new Validate(attrs);
                  }
                }, {
                  key: "validateApprovalSignatures",
                  value: function validateApprovalSignatures(attrs) {
                    return new ValidateApprovalSignatures(attrs);
                  }
                }, {
                  key: "validationMessaging",
                  value: function validationMessaging(attrs) {
                    return new ValidationMessaging(attrs);
                  }
                }, {
                  key: "version",
                  value: function version(attrs) {
                    return new Version(attrs);
                  }
                }, {
                  key: "versionControl",
                  value: function versionControl(attrs) {
                    return new VersionControl(attrs);
                  }
                }, {
                  key: "viewerPreferences",
                  value: function viewerPreferences(attrs) {
                    return new ViewerPreferences(attrs);
                  }
                }, {
                  key: "webClient",
                  value: function webClient(attrs) {
                    return new WebClient(attrs);
                  }
                }, {
                  key: "whitespace",
                  value: function whitespace(attrs) {
                    return new Whitespace(attrs);
                  }
                }, {
                  key: "window",
                  value: function window2(attrs) {
                    return new Window(attrs);
                  }
                }, {
                  key: "xdc",
                  value: function xdc(attrs) {
                    return new Xdc(attrs);
                  }
                }, {
                  key: "xdp",
                  value: function xdp(attrs) {
                    return new Xdp(attrs);
                  }
                }, {
                  key: "xsl",
                  value: function xsl(attrs) {
                    return new Xsl(attrs);
                  }
                }, {
                  key: "zpl",
                  value: function zpl(attrs) {
                    return new Zpl(attrs);
                  }
                }]);
                return ConfigNamespace2;
              }();
              exports2.ConfigNamespace = ConfigNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.ConnectionSetNamespace = void 0;
              var _namespaces = __w_pdfjs_require__2(207);
              var _xfa_object = __w_pdfjs_require__2(205);
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var CONNECTION_SET_NS_ID = _namespaces.NamespaceIds.connectionSet.id;
              var ConnectionSet = /* @__PURE__ */ function(_XFAObject) {
                _inherits(ConnectionSet2, _XFAObject);
                var _super = _createSuper(ConnectionSet2);
                function ConnectionSet2(attributes) {
                  var _this;
                  _classCallCheck(this, ConnectionSet2);
                  _this = _super.call(this, CONNECTION_SET_NS_ID, "connectionSet", true);
                  _this.wsdlConnection = new _xfa_object.XFAObjectArray();
                  _this.xmlConnection = new _xfa_object.XFAObjectArray();
                  _this.xsdConnection = new _xfa_object.XFAObjectArray();
                  return _this;
                }
                return ConnectionSet2;
              }(_xfa_object.XFAObject);
              var EffectiveInputPolicy = /* @__PURE__ */ function(_XFAObject2) {
                _inherits(EffectiveInputPolicy2, _XFAObject2);
                var _super2 = _createSuper(EffectiveInputPolicy2);
                function EffectiveInputPolicy2(attributes) {
                  var _this2;
                  _classCallCheck(this, EffectiveInputPolicy2);
                  _this2 = _super2.call(this, CONNECTION_SET_NS_ID, "effectiveInputPolicy");
                  _this2.id = attributes.id || "";
                  _this2.name = attributes.name || "";
                  _this2.use = attributes.use || "";
                  _this2.usehref = attributes.usehref || "";
                  return _this2;
                }
                return EffectiveInputPolicy2;
              }(_xfa_object.XFAObject);
              var EffectiveOutputPolicy = /* @__PURE__ */ function(_XFAObject3) {
                _inherits(EffectiveOutputPolicy2, _XFAObject3);
                var _super3 = _createSuper(EffectiveOutputPolicy2);
                function EffectiveOutputPolicy2(attributes) {
                  var _this3;
                  _classCallCheck(this, EffectiveOutputPolicy2);
                  _this3 = _super3.call(this, CONNECTION_SET_NS_ID, "effectiveOutputPolicy");
                  _this3.id = attributes.id || "";
                  _this3.name = attributes.name || "";
                  _this3.use = attributes.use || "";
                  _this3.usehref = attributes.usehref || "";
                  return _this3;
                }
                return EffectiveOutputPolicy2;
              }(_xfa_object.XFAObject);
              var Operation = /* @__PURE__ */ function(_StringObject) {
                _inherits(Operation2, _StringObject);
                var _super4 = _createSuper(Operation2);
                function Operation2(attributes) {
                  var _this4;
                  _classCallCheck(this, Operation2);
                  _this4 = _super4.call(this, CONNECTION_SET_NS_ID, "operation");
                  _this4.id = attributes.id || "";
                  _this4.input = attributes.input || "";
                  _this4.name = attributes.name || "";
                  _this4.output = attributes.output || "";
                  _this4.use = attributes.use || "";
                  _this4.usehref = attributes.usehref || "";
                  return _this4;
                }
                return Operation2;
              }(_xfa_object.StringObject);
              var RootElement = /* @__PURE__ */ function(_StringObject2) {
                _inherits(RootElement2, _StringObject2);
                var _super5 = _createSuper(RootElement2);
                function RootElement2(attributes) {
                  var _this5;
                  _classCallCheck(this, RootElement2);
                  _this5 = _super5.call(this, CONNECTION_SET_NS_ID, "rootElement");
                  _this5.id = attributes.id || "";
                  _this5.name = attributes.name || "";
                  _this5.use = attributes.use || "";
                  _this5.usehref = attributes.usehref || "";
                  return _this5;
                }
                return RootElement2;
              }(_xfa_object.StringObject);
              var SoapAction = /* @__PURE__ */ function(_StringObject3) {
                _inherits(SoapAction2, _StringObject3);
                var _super6 = _createSuper(SoapAction2);
                function SoapAction2(attributes) {
                  var _this6;
                  _classCallCheck(this, SoapAction2);
                  _this6 = _super6.call(this, CONNECTION_SET_NS_ID, "soapAction");
                  _this6.id = attributes.id || "";
                  _this6.name = attributes.name || "";
                  _this6.use = attributes.use || "";
                  _this6.usehref = attributes.usehref || "";
                  return _this6;
                }
                return SoapAction2;
              }(_xfa_object.StringObject);
              var SoapAddress = /* @__PURE__ */ function(_StringObject4) {
                _inherits(SoapAddress2, _StringObject4);
                var _super7 = _createSuper(SoapAddress2);
                function SoapAddress2(attributes) {
                  var _this7;
                  _classCallCheck(this, SoapAddress2);
                  _this7 = _super7.call(this, CONNECTION_SET_NS_ID, "soapAddress");
                  _this7.id = attributes.id || "";
                  _this7.name = attributes.name || "";
                  _this7.use = attributes.use || "";
                  _this7.usehref = attributes.usehref || "";
                  return _this7;
                }
                return SoapAddress2;
              }(_xfa_object.StringObject);
              var Uri = /* @__PURE__ */ function(_StringObject5) {
                _inherits(Uri2, _StringObject5);
                var _super8 = _createSuper(Uri2);
                function Uri2(attributes) {
                  var _this8;
                  _classCallCheck(this, Uri2);
                  _this8 = _super8.call(this, CONNECTION_SET_NS_ID, "uri");
                  _this8.id = attributes.id || "";
                  _this8.name = attributes.name || "";
                  _this8.use = attributes.use || "";
                  _this8.usehref = attributes.usehref || "";
                  return _this8;
                }
                return Uri2;
              }(_xfa_object.StringObject);
              var WsdlAddress = /* @__PURE__ */ function(_StringObject6) {
                _inherits(WsdlAddress2, _StringObject6);
                var _super9 = _createSuper(WsdlAddress2);
                function WsdlAddress2(attributes) {
                  var _this9;
                  _classCallCheck(this, WsdlAddress2);
                  _this9 = _super9.call(this, CONNECTION_SET_NS_ID, "wsdlAddress");
                  _this9.id = attributes.id || "";
                  _this9.name = attributes.name || "";
                  _this9.use = attributes.use || "";
                  _this9.usehref = attributes.usehref || "";
                  return _this9;
                }
                return WsdlAddress2;
              }(_xfa_object.StringObject);
              var WsdlConnection = /* @__PURE__ */ function(_XFAObject4) {
                _inherits(WsdlConnection2, _XFAObject4);
                var _super10 = _createSuper(WsdlConnection2);
                function WsdlConnection2(attributes) {
                  var _this10;
                  _classCallCheck(this, WsdlConnection2);
                  _this10 = _super10.call(this, CONNECTION_SET_NS_ID, "wsdlConnection", true);
                  _this10.dataDescription = attributes.dataDescription || "";
                  _this10.name = attributes.name || "";
                  _this10.effectiveInputPolicy = null;
                  _this10.effectiveOutputPolicy = null;
                  _this10.operation = null;
                  _this10.soapAction = null;
                  _this10.soapAddress = null;
                  _this10.wsdlAddress = null;
                  return _this10;
                }
                return WsdlConnection2;
              }(_xfa_object.XFAObject);
              var XmlConnection = /* @__PURE__ */ function(_XFAObject5) {
                _inherits(XmlConnection2, _XFAObject5);
                var _super11 = _createSuper(XmlConnection2);
                function XmlConnection2(attributes) {
                  var _this11;
                  _classCallCheck(this, XmlConnection2);
                  _this11 = _super11.call(this, CONNECTION_SET_NS_ID, "xmlConnection", true);
                  _this11.dataDescription = attributes.dataDescription || "";
                  _this11.name = attributes.name || "";
                  _this11.uri = null;
                  return _this11;
                }
                return XmlConnection2;
              }(_xfa_object.XFAObject);
              var XsdConnection = /* @__PURE__ */ function(_XFAObject6) {
                _inherits(XsdConnection2, _XFAObject6);
                var _super12 = _createSuper(XsdConnection2);
                function XsdConnection2(attributes) {
                  var _this12;
                  _classCallCheck(this, XsdConnection2);
                  _this12 = _super12.call(this, CONNECTION_SET_NS_ID, "xsdConnection", true);
                  _this12.dataDescription = attributes.dataDescription || "";
                  _this12.name = attributes.name || "";
                  _this12.rootElement = null;
                  _this12.uri = null;
                  return _this12;
                }
                return XsdConnection2;
              }(_xfa_object.XFAObject);
              var ConnectionSetNamespace = /* @__PURE__ */ function() {
                function ConnectionSetNamespace2() {
                  _classCallCheck(this, ConnectionSetNamespace2);
                }
                _createClass(ConnectionSetNamespace2, null, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    if (ConnectionSetNamespace2.hasOwnProperty(name)) {
                      return ConnectionSetNamespace2[name](attributes);
                    }
                    return void 0;
                  }
                }, {
                  key: "connectionSet",
                  value: function connectionSet(attrs) {
                    return new ConnectionSet(attrs);
                  }
                }, {
                  key: "effectiveInputPolicy",
                  value: function effectiveInputPolicy(attrs) {
                    return new EffectiveInputPolicy(attrs);
                  }
                }, {
                  key: "effectiveOutputPolicy",
                  value: function effectiveOutputPolicy(attrs) {
                    return new EffectiveOutputPolicy(attrs);
                  }
                }, {
                  key: "operation",
                  value: function operation(attrs) {
                    return new Operation(attrs);
                  }
                }, {
                  key: "rootElement",
                  value: function rootElement(attrs) {
                    return new RootElement(attrs);
                  }
                }, {
                  key: "soapAction",
                  value: function soapAction(attrs) {
                    return new SoapAction(attrs);
                  }
                }, {
                  key: "soapAddress",
                  value: function soapAddress(attrs) {
                    return new SoapAddress(attrs);
                  }
                }, {
                  key: "uri",
                  value: function uri(attrs) {
                    return new Uri(attrs);
                  }
                }, {
                  key: "wsdlAddress",
                  value: function wsdlAddress(attrs) {
                    return new WsdlAddress(attrs);
                  }
                }, {
                  key: "wsdlConnection",
                  value: function wsdlConnection(attrs) {
                    return new WsdlConnection(attrs);
                  }
                }, {
                  key: "xmlConnection",
                  value: function xmlConnection(attrs) {
                    return new XmlConnection(attrs);
                  }
                }, {
                  key: "xsdConnection",
                  value: function xsdConnection(attrs) {
                    return new XsdConnection(attrs);
                  }
                }]);
                return ConnectionSetNamespace2;
              }();
              exports2.ConnectionSetNamespace = ConnectionSetNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.DatasetsNamespace = void 0;
              var _xfa_object = __w_pdfjs_require__2(205);
              var _namespaces = __w_pdfjs_require__2(207);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var DATASETS_NS_ID = _namespaces.NamespaceIds.datasets.id;
              var Data = /* @__PURE__ */ function(_XmlObject) {
                _inherits(Data2, _XmlObject);
                var _super = _createSuper(Data2);
                function Data2(attributes) {
                  _classCallCheck(this, Data2);
                  return _super.call(this, DATASETS_NS_ID, "data", attributes);
                }
                _createClass(Data2, [{
                  key: _xfa_object.$isNsAgnostic,
                  value: function value() {
                    return true;
                  }
                }]);
                return Data2;
              }(_xfa_object.XmlObject);
              var Datasets = /* @__PURE__ */ function(_XFAObject) {
                _inherits(Datasets2, _XFAObject);
                var _super2 = _createSuper(Datasets2);
                function Datasets2(attributes) {
                  var _this;
                  _classCallCheck(this, Datasets2);
                  _this = _super2.call(this, DATASETS_NS_ID, "datasets", true);
                  _this.data = null;
                  _this.Signature = null;
                  return _this;
                }
                _createClass(Datasets2, [{
                  key: _xfa_object.$onChild,
                  value: function value(child) {
                    var name = child[_xfa_object.$nodeName];
                    if (name === "data" && child[_xfa_object.$namespaceId] === DATASETS_NS_ID || name === "Signature" && child[_xfa_object.$namespaceId] === _namespaces.NamespaceIds.signature.id) {
                      this[name] = child;
                    }
                    this[_xfa_object.$appendChild](child);
                  }
                }]);
                return Datasets2;
              }(_xfa_object.XFAObject);
              var DatasetsNamespace = /* @__PURE__ */ function() {
                function DatasetsNamespace2() {
                  _classCallCheck(this, DatasetsNamespace2);
                }
                _createClass(DatasetsNamespace2, null, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    if (DatasetsNamespace2.hasOwnProperty(name)) {
                      return DatasetsNamespace2[name](attributes);
                    }
                    return void 0;
                  }
                }, {
                  key: "datasets",
                  value: function datasets(attributes) {
                    return new Datasets(attributes);
                  }
                }, {
                  key: "data",
                  value: function data(attributes) {
                    return new Data(attributes);
                  }
                }]);
                return DatasetsNamespace2;
              }();
              exports2.DatasetsNamespace = DatasetsNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.LocaleSetNamespace = void 0;
              var _namespaces = __w_pdfjs_require__2(207);
              var _xfa_object = __w_pdfjs_require__2(205);
              var _utils = __w_pdfjs_require__2(206);
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var LOCALE_SET_NS_ID = _namespaces.NamespaceIds.localeSet.id;
              var CalendarSymbols = /* @__PURE__ */ function(_XFAObject) {
                _inherits(CalendarSymbols2, _XFAObject);
                var _super = _createSuper(CalendarSymbols2);
                function CalendarSymbols2(attributes) {
                  var _this;
                  _classCallCheck(this, CalendarSymbols2);
                  _this = _super.call(this, LOCALE_SET_NS_ID, "calendarSymbols", true);
                  _this.name = "gregorian";
                  _this.dayNames = new _xfa_object.XFAObjectArray(2);
                  _this.eraNames = null;
                  _this.meridiemNames = null;
                  _this.monthNames = new _xfa_object.XFAObjectArray(2);
                  return _this;
                }
                return CalendarSymbols2;
              }(_xfa_object.XFAObject);
              var CurrencySymbol = /* @__PURE__ */ function(_StringObject) {
                _inherits(CurrencySymbol2, _StringObject);
                var _super2 = _createSuper(CurrencySymbol2);
                function CurrencySymbol2(attributes) {
                  var _this2;
                  _classCallCheck(this, CurrencySymbol2);
                  _this2 = _super2.call(this, LOCALE_SET_NS_ID, "currencySymbol");
                  _this2.name = (0, _utils.getStringOption)(attributes.name, ["symbol", "isoname", "decimal"]);
                  return _this2;
                }
                return CurrencySymbol2;
              }(_xfa_object.StringObject);
              var CurrencySymbols = /* @__PURE__ */ function(_XFAObject2) {
                _inherits(CurrencySymbols2, _XFAObject2);
                var _super3 = _createSuper(CurrencySymbols2);
                function CurrencySymbols2(attributes) {
                  var _this3;
                  _classCallCheck(this, CurrencySymbols2);
                  _this3 = _super3.call(this, LOCALE_SET_NS_ID, "currencySymbols", true);
                  _this3.currencySymbol = new _xfa_object.XFAObjectArray(3);
                  return _this3;
                }
                return CurrencySymbols2;
              }(_xfa_object.XFAObject);
              var DatePattern = /* @__PURE__ */ function(_StringObject2) {
                _inherits(DatePattern2, _StringObject2);
                var _super4 = _createSuper(DatePattern2);
                function DatePattern2(attributes) {
                  var _this4;
                  _classCallCheck(this, DatePattern2);
                  _this4 = _super4.call(this, LOCALE_SET_NS_ID, "datePattern");
                  _this4.name = (0, _utils.getStringOption)(attributes.name, ["full", "long", "med", "short"]);
                  return _this4;
                }
                return DatePattern2;
              }(_xfa_object.StringObject);
              var DatePatterns = /* @__PURE__ */ function(_XFAObject3) {
                _inherits(DatePatterns2, _XFAObject3);
                var _super5 = _createSuper(DatePatterns2);
                function DatePatterns2(attributes) {
                  var _this5;
                  _classCallCheck(this, DatePatterns2);
                  _this5 = _super5.call(this, LOCALE_SET_NS_ID, "datePatterns", true);
                  _this5.datePattern = new _xfa_object.XFAObjectArray(4);
                  return _this5;
                }
                return DatePatterns2;
              }(_xfa_object.XFAObject);
              var DateTimeSymbols = /* @__PURE__ */ function(_ContentObject) {
                _inherits(DateTimeSymbols2, _ContentObject);
                var _super6 = _createSuper(DateTimeSymbols2);
                function DateTimeSymbols2(attributes) {
                  _classCallCheck(this, DateTimeSymbols2);
                  return _super6.call(this, LOCALE_SET_NS_ID, "dateTimeSymbols");
                }
                return DateTimeSymbols2;
              }(_xfa_object.ContentObject);
              var Day = /* @__PURE__ */ function(_StringObject3) {
                _inherits(Day2, _StringObject3);
                var _super7 = _createSuper(Day2);
                function Day2(attributes) {
                  _classCallCheck(this, Day2);
                  return _super7.call(this, LOCALE_SET_NS_ID, "day");
                }
                return Day2;
              }(_xfa_object.StringObject);
              var DayNames = /* @__PURE__ */ function(_XFAObject4) {
                _inherits(DayNames2, _XFAObject4);
                var _super8 = _createSuper(DayNames2);
                function DayNames2(attributes) {
                  var _this6;
                  _classCallCheck(this, DayNames2);
                  _this6 = _super8.call(this, LOCALE_SET_NS_ID, "dayNames", true);
                  _this6.abbr = (0, _utils.getInteger)({
                    data: attributes.abbr,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this6.day = new _xfa_object.XFAObjectArray(7);
                  return _this6;
                }
                return DayNames2;
              }(_xfa_object.XFAObject);
              var Era = /* @__PURE__ */ function(_StringObject4) {
                _inherits(Era2, _StringObject4);
                var _super9 = _createSuper(Era2);
                function Era2(attributes) {
                  _classCallCheck(this, Era2);
                  return _super9.call(this, LOCALE_SET_NS_ID, "era");
                }
                return Era2;
              }(_xfa_object.StringObject);
              var EraNames = /* @__PURE__ */ function(_XFAObject5) {
                _inherits(EraNames2, _XFAObject5);
                var _super10 = _createSuper(EraNames2);
                function EraNames2(attributes) {
                  var _this7;
                  _classCallCheck(this, EraNames2);
                  _this7 = _super10.call(this, LOCALE_SET_NS_ID, "eraNames", true);
                  _this7.era = new _xfa_object.XFAObjectArray(2);
                  return _this7;
                }
                return EraNames2;
              }(_xfa_object.XFAObject);
              var Locale = /* @__PURE__ */ function(_XFAObject6) {
                _inherits(Locale2, _XFAObject6);
                var _super11 = _createSuper(Locale2);
                function Locale2(attributes) {
                  var _this8;
                  _classCallCheck(this, Locale2);
                  _this8 = _super11.call(this, LOCALE_SET_NS_ID, "locale", true);
                  _this8.desc = attributes.desc || "";
                  _this8.name = "isoname";
                  _this8.calendarSymbols = null;
                  _this8.currencySymbols = null;
                  _this8.datePatterns = null;
                  _this8.dateTimeSymbols = null;
                  _this8.numberPatterns = null;
                  _this8.numberSymbols = null;
                  _this8.timePatterns = null;
                  _this8.typeFaces = null;
                  return _this8;
                }
                return Locale2;
              }(_xfa_object.XFAObject);
              var LocaleSet = /* @__PURE__ */ function(_XFAObject7) {
                _inherits(LocaleSet2, _XFAObject7);
                var _super12 = _createSuper(LocaleSet2);
                function LocaleSet2(attributes) {
                  var _this9;
                  _classCallCheck(this, LocaleSet2);
                  _this9 = _super12.call(this, LOCALE_SET_NS_ID, "localeSet", true);
                  _this9.locale = new _xfa_object.XFAObjectArray();
                  return _this9;
                }
                return LocaleSet2;
              }(_xfa_object.XFAObject);
              var Meridiem = /* @__PURE__ */ function(_StringObject5) {
                _inherits(Meridiem2, _StringObject5);
                var _super13 = _createSuper(Meridiem2);
                function Meridiem2(attributes) {
                  _classCallCheck(this, Meridiem2);
                  return _super13.call(this, LOCALE_SET_NS_ID, "meridiem");
                }
                return Meridiem2;
              }(_xfa_object.StringObject);
              var MeridiemNames = /* @__PURE__ */ function(_XFAObject8) {
                _inherits(MeridiemNames2, _XFAObject8);
                var _super14 = _createSuper(MeridiemNames2);
                function MeridiemNames2(attributes) {
                  var _this10;
                  _classCallCheck(this, MeridiemNames2);
                  _this10 = _super14.call(this, LOCALE_SET_NS_ID, "meridiemNames", true);
                  _this10.meridiem = new _xfa_object.XFAObjectArray(2);
                  return _this10;
                }
                return MeridiemNames2;
              }(_xfa_object.XFAObject);
              var Month = /* @__PURE__ */ function(_StringObject6) {
                _inherits(Month2, _StringObject6);
                var _super15 = _createSuper(Month2);
                function Month2(attributes) {
                  _classCallCheck(this, Month2);
                  return _super15.call(this, LOCALE_SET_NS_ID, "month");
                }
                return Month2;
              }(_xfa_object.StringObject);
              var MonthNames = /* @__PURE__ */ function(_XFAObject9) {
                _inherits(MonthNames2, _XFAObject9);
                var _super16 = _createSuper(MonthNames2);
                function MonthNames2(attributes) {
                  var _this11;
                  _classCallCheck(this, MonthNames2);
                  _this11 = _super16.call(this, LOCALE_SET_NS_ID, "monthNames", true);
                  _this11.abbr = (0, _utils.getInteger)({
                    data: attributes.abbr,
                    defaultValue: 0,
                    validate: function validate(x) {
                      return x === 1;
                    }
                  });
                  _this11.month = new _xfa_object.XFAObjectArray(12);
                  return _this11;
                }
                return MonthNames2;
              }(_xfa_object.XFAObject);
              var NumberPattern = /* @__PURE__ */ function(_StringObject7) {
                _inherits(NumberPattern2, _StringObject7);
                var _super17 = _createSuper(NumberPattern2);
                function NumberPattern2(attributes) {
                  var _this12;
                  _classCallCheck(this, NumberPattern2);
                  _this12 = _super17.call(this, LOCALE_SET_NS_ID, "numberPattern");
                  _this12.name = (0, _utils.getStringOption)(attributes.name, ["full", "long", "med", "short"]);
                  return _this12;
                }
                return NumberPattern2;
              }(_xfa_object.StringObject);
              var NumberPatterns = /* @__PURE__ */ function(_XFAObject10) {
                _inherits(NumberPatterns2, _XFAObject10);
                var _super18 = _createSuper(NumberPatterns2);
                function NumberPatterns2(attributes) {
                  var _this13;
                  _classCallCheck(this, NumberPatterns2);
                  _this13 = _super18.call(this, LOCALE_SET_NS_ID, "numberPatterns", true);
                  _this13.numberPattern = new _xfa_object.XFAObjectArray(4);
                  return _this13;
                }
                return NumberPatterns2;
              }(_xfa_object.XFAObject);
              var NumberSymbol = /* @__PURE__ */ function(_StringObject8) {
                _inherits(NumberSymbol2, _StringObject8);
                var _super19 = _createSuper(NumberSymbol2);
                function NumberSymbol2(attributes) {
                  var _this14;
                  _classCallCheck(this, NumberSymbol2);
                  _this14 = _super19.call(this, LOCALE_SET_NS_ID, "numberSymbol");
                  _this14.name = (0, _utils.getStringOption)(attributes.name, ["decimal", "grouping", "percent", "minus", "zero"]);
                  return _this14;
                }
                return NumberSymbol2;
              }(_xfa_object.StringObject);
              var NumberSymbols = /* @__PURE__ */ function(_XFAObject11) {
                _inherits(NumberSymbols2, _XFAObject11);
                var _super20 = _createSuper(NumberSymbols2);
                function NumberSymbols2(attributes) {
                  var _this15;
                  _classCallCheck(this, NumberSymbols2);
                  _this15 = _super20.call(this, LOCALE_SET_NS_ID, "numberSymbols", true);
                  _this15.numberSymbol = new _xfa_object.XFAObjectArray(5);
                  return _this15;
                }
                return NumberSymbols2;
              }(_xfa_object.XFAObject);
              var TimePattern = /* @__PURE__ */ function(_StringObject9) {
                _inherits(TimePattern2, _StringObject9);
                var _super21 = _createSuper(TimePattern2);
                function TimePattern2(attributes) {
                  var _this16;
                  _classCallCheck(this, TimePattern2);
                  _this16 = _super21.call(this, LOCALE_SET_NS_ID, "timePattern");
                  _this16.name = (0, _utils.getStringOption)(attributes.name, ["full", "long", "med", "short"]);
                  return _this16;
                }
                return TimePattern2;
              }(_xfa_object.StringObject);
              var TimePatterns = /* @__PURE__ */ function(_XFAObject12) {
                _inherits(TimePatterns2, _XFAObject12);
                var _super22 = _createSuper(TimePatterns2);
                function TimePatterns2(attributes) {
                  var _this17;
                  _classCallCheck(this, TimePatterns2);
                  _this17 = _super22.call(this, LOCALE_SET_NS_ID, "timePatterns", true);
                  _this17.timePattern = new _xfa_object.XFAObjectArray(4);
                  return _this17;
                }
                return TimePatterns2;
              }(_xfa_object.XFAObject);
              var TypeFace = /* @__PURE__ */ function(_XFAObject13) {
                _inherits(TypeFace2, _XFAObject13);
                var _super23 = _createSuper(TypeFace2);
                function TypeFace2(attributes) {
                  var _this18;
                  _classCallCheck(this, TypeFace2);
                  _this18 = _super23.call(this, LOCALE_SET_NS_ID, "typeFace", true);
                  _this18.name = attributes.name | "";
                  return _this18;
                }
                return TypeFace2;
              }(_xfa_object.XFAObject);
              var TypeFaces = /* @__PURE__ */ function(_XFAObject14) {
                _inherits(TypeFaces2, _XFAObject14);
                var _super24 = _createSuper(TypeFaces2);
                function TypeFaces2(attributes) {
                  var _this19;
                  _classCallCheck(this, TypeFaces2);
                  _this19 = _super24.call(this, LOCALE_SET_NS_ID, "typeFaces", true);
                  _this19.typeFace = new _xfa_object.XFAObjectArray();
                  return _this19;
                }
                return TypeFaces2;
              }(_xfa_object.XFAObject);
              var LocaleSetNamespace = /* @__PURE__ */ function() {
                function LocaleSetNamespace2() {
                  _classCallCheck(this, LocaleSetNamespace2);
                }
                _createClass(LocaleSetNamespace2, null, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    if (LocaleSetNamespace2.hasOwnProperty(name)) {
                      return LocaleSetNamespace2[name](attributes);
                    }
                    return void 0;
                  }
                }, {
                  key: "calendarSymbols",
                  value: function calendarSymbols(attrs) {
                    return new CalendarSymbols(attrs);
                  }
                }, {
                  key: "currencySymbol",
                  value: function currencySymbol(attrs) {
                    return new CurrencySymbol(attrs);
                  }
                }, {
                  key: "currencySymbols",
                  value: function currencySymbols(attrs) {
                    return new CurrencySymbols(attrs);
                  }
                }, {
                  key: "datePattern",
                  value: function datePattern(attrs) {
                    return new DatePattern(attrs);
                  }
                }, {
                  key: "datePatterns",
                  value: function datePatterns(attrs) {
                    return new DatePatterns(attrs);
                  }
                }, {
                  key: "dateTimeSymbols",
                  value: function dateTimeSymbols(attrs) {
                    return new DateTimeSymbols(attrs);
                  }
                }, {
                  key: "day",
                  value: function day(attrs) {
                    return new Day(attrs);
                  }
                }, {
                  key: "dayNames",
                  value: function dayNames(attrs) {
                    return new DayNames(attrs);
                  }
                }, {
                  key: "era",
                  value: function era(attrs) {
                    return new Era(attrs);
                  }
                }, {
                  key: "eraNames",
                  value: function eraNames(attrs) {
                    return new EraNames(attrs);
                  }
                }, {
                  key: "locale",
                  value: function locale(attrs) {
                    return new Locale(attrs);
                  }
                }, {
                  key: "localeSet",
                  value: function localeSet(attrs) {
                    return new LocaleSet(attrs);
                  }
                }, {
                  key: "meridiem",
                  value: function meridiem(attrs) {
                    return new Meridiem(attrs);
                  }
                }, {
                  key: "meridiemNames",
                  value: function meridiemNames(attrs) {
                    return new MeridiemNames(attrs);
                  }
                }, {
                  key: "month",
                  value: function month(attrs) {
                    return new Month(attrs);
                  }
                }, {
                  key: "monthNames",
                  value: function monthNames(attrs) {
                    return new MonthNames(attrs);
                  }
                }, {
                  key: "numberPattern",
                  value: function numberPattern(attrs) {
                    return new NumberPattern(attrs);
                  }
                }, {
                  key: "numberPatterns",
                  value: function numberPatterns(attrs) {
                    return new NumberPatterns(attrs);
                  }
                }, {
                  key: "numberSymbol",
                  value: function numberSymbol(attrs) {
                    return new NumberSymbol(attrs);
                  }
                }, {
                  key: "numberSymbols",
                  value: function numberSymbols(attrs) {
                    return new NumberSymbols(attrs);
                  }
                }, {
                  key: "timePattern",
                  value: function timePattern(attrs) {
                    return new TimePattern(attrs);
                  }
                }, {
                  key: "timePatterns",
                  value: function timePatterns(attrs) {
                    return new TimePatterns(attrs);
                  }
                }, {
                  key: "typeFace",
                  value: function typeFace(attrs) {
                    return new TypeFace(attrs);
                  }
                }, {
                  key: "typeFaces",
                  value: function typeFaces(attrs) {
                    return new TypeFaces(attrs);
                  }
                }]);
                return LocaleSetNamespace2;
              }();
              exports2.LocaleSetNamespace = LocaleSetNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.SignatureNamespace = void 0;
              var _namespaces = __w_pdfjs_require__2(207);
              var _xfa_object = __w_pdfjs_require__2(205);
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var SIGNATURE_NS_ID = _namespaces.NamespaceIds.signature.id;
              var Signature = /* @__PURE__ */ function(_XFAObject) {
                _inherits(Signature2, _XFAObject);
                var _super = _createSuper(Signature2);
                function Signature2(attributes) {
                  _classCallCheck(this, Signature2);
                  return _super.call(this, SIGNATURE_NS_ID, "signature", true);
                }
                return Signature2;
              }(_xfa_object.XFAObject);
              var SignatureNamespace = /* @__PURE__ */ function() {
                function SignatureNamespace2() {
                  _classCallCheck(this, SignatureNamespace2);
                }
                _createClass(SignatureNamespace2, null, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    if (SignatureNamespace2.hasOwnProperty(name)) {
                      return SignatureNamespace2[name](attributes);
                    }
                    return void 0;
                  }
                }, {
                  key: "signature",
                  value: function signature(attributes) {
                    return new Signature(attributes);
                  }
                }]);
                return SignatureNamespace2;
              }();
              exports2.SignatureNamespace = SignatureNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.StylesheetNamespace = void 0;
              var _namespaces = __w_pdfjs_require__2(207);
              var _xfa_object = __w_pdfjs_require__2(205);
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var STYLESHEET_NS_ID = _namespaces.NamespaceIds.stylesheet.id;
              var Stylesheet = /* @__PURE__ */ function(_XFAObject) {
                _inherits(Stylesheet2, _XFAObject);
                var _super = _createSuper(Stylesheet2);
                function Stylesheet2(attributes) {
                  _classCallCheck(this, Stylesheet2);
                  return _super.call(this, STYLESHEET_NS_ID, "stylesheet", true);
                }
                return Stylesheet2;
              }(_xfa_object.XFAObject);
              var StylesheetNamespace = /* @__PURE__ */ function() {
                function StylesheetNamespace2() {
                  _classCallCheck(this, StylesheetNamespace2);
                }
                _createClass(StylesheetNamespace2, null, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    if (StylesheetNamespace2.hasOwnProperty(name)) {
                      return StylesheetNamespace2[name](attributes);
                    }
                    return void 0;
                  }
                }, {
                  key: "stylesheet",
                  value: function stylesheet(attributes) {
                    return new Stylesheet(attributes);
                  }
                }]);
                return StylesheetNamespace2;
              }();
              exports2.StylesheetNamespace = StylesheetNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.XdpNamespace = void 0;
              var _namespaces = __w_pdfjs_require__2(207);
              var _xfa_object = __w_pdfjs_require__2(205);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var XDP_NS_ID = _namespaces.NamespaceIds.xdp.id;
              var Xdp = /* @__PURE__ */ function(_XFAObject) {
                _inherits(Xdp2, _XFAObject);
                var _super = _createSuper(Xdp2);
                function Xdp2(attributes) {
                  var _this;
                  _classCallCheck(this, Xdp2);
                  _this = _super.call(this, XDP_NS_ID, "xdp", true);
                  _this.uuid = attributes.uuid || "";
                  _this.timeStamp = attributes.timeStamp || "";
                  _this.config = null;
                  _this.connectionSet = null;
                  _this.datasets = null;
                  _this.localeSet = null;
                  _this.stylesheet = new _xfa_object.XFAObjectArray();
                  _this.template = null;
                  return _this;
                }
                _createClass(Xdp2, [{
                  key: _xfa_object.$onChildCheck,
                  value: function value(child) {
                    var ns = _namespaces.NamespaceIds[child[_xfa_object.$nodeName]];
                    return ns && child[_xfa_object.$namespaceId] === ns.id;
                  }
                }]);
                return Xdp2;
              }(_xfa_object.XFAObject);
              var XdpNamespace = /* @__PURE__ */ function() {
                function XdpNamespace2() {
                  _classCallCheck(this, XdpNamespace2);
                }
                _createClass(XdpNamespace2, null, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    if (XdpNamespace2.hasOwnProperty(name)) {
                      return XdpNamespace2[name](attributes);
                    }
                    return void 0;
                  }
                }, {
                  key: "xdp",
                  value: function xdp(attributes) {
                    return new Xdp(attributes);
                  }
                }]);
                return XdpNamespace2;
              }();
              exports2.XdpNamespace = XdpNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.XhtmlNamespace = void 0;
              var _xfa_object = __w_pdfjs_require__2(205);
              var _namespaces = __w_pdfjs_require__2(207);
              var _html_utils = __w_pdfjs_require__2(212);
              var _utils = __w_pdfjs_require__2(206);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _get(target, property, receiver) {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  _get = Reflect.get;
                } else {
                  _get = function _get2(target2, property2, receiver2) {
                    var base = _superPropBase(target2, property2);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property2);
                    if (desc.get) {
                      return desc.get.call(receiver2);
                    }
                    return desc.value;
                  };
                }
                return _get(target, property, receiver || target);
              }
              function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = _getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e2) {
                      throw _e2;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e3) {
                  didErr = true;
                  err = _e3;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              var XHTML_NS_ID = _namespaces.NamespaceIds.xhtml.id;
              var $richText = Symbol();
              var VALID_STYLES = /* @__PURE__ */ new Set(["color", "font", "font-family", "font-size", "font-stretch", "font-style", "font-weight", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "letter-spacing", "line-height", "orphans", "page-break-after", "page-break-before", "page-break-inside", "tab-interval", "tab-stop", "text-align", "text-decoration", "text-indent", "vertical-align", "widows", "kerning-mode", "xfa-font-horizontal-scale", "xfa-font-vertical-scale", "xfa-spacerun", "xfa-tab-stops"]);
              var StyleMapping = /* @__PURE__ */ new Map([["page-break-after", "breakAfter"], ["page-break-before", "breakBefore"], ["page-break-inside", "breakInside"], ["kerning-mode", function(value) {
                return value === "none" ? "none" : "normal";
              }], ["xfa-font-horizontal-scale", function(value) {
                return "scaleX(".concat(Math.max(0, Math.min(parseInt(value) / 100)).toFixed(2), ")");
              }], ["xfa-font-vertical-scale", function(value) {
                return "scaleY(".concat(Math.max(0, Math.min(parseInt(value) / 100)).toFixed(2), ")");
              }], ["xfa-spacerun", ""], ["xfa-tab-stops", ""], ["font-size", function(value, original) {
                value = original.fontSize = (0, _utils.getMeasurement)(value);
                return (0, _html_utils.measureToString)(0.99 * value);
              }], ["letter-spacing", function(value) {
                return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));
              }], ["line-height", function(value) {
                return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));
              }], ["margin", function(value) {
                return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));
              }], ["margin-bottom", function(value) {
                return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));
              }], ["margin-left", function(value) {
                return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));
              }], ["margin-right", function(value) {
                return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));
              }], ["margin-top", function(value) {
                return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));
              }], ["text-indent", function(value) {
                return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));
              }], ["font-family", function(value) {
                return value;
              }], ["vertical-align", function(value) {
                return (0, _html_utils.measureToString)((0, _utils.getMeasurement)(value));
              }]]);
              var spacesRegExp = /\s+/g;
              var crlfRegExp = /[\r\n]+/g;
              var crlfForRichTextRegExp = /\r\n?/g;
              function mapStyle(styleStr, node, richText) {
                var style = /* @__PURE__ */ Object.create(null);
                if (!styleStr) {
                  return style;
                }
                var original = /* @__PURE__ */ Object.create(null);
                var _iterator = _createForOfIteratorHelper(styleStr.split(";").map(function(s) {
                  return s.split(":", 2);
                })), _step;
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], value = _step$value[1];
                    var mapping = StyleMapping.get(key);
                    if (mapping === "") {
                      continue;
                    }
                    var newValue = value;
                    if (mapping) {
                      if (typeof mapping === "string") {
                        newValue = mapping;
                      } else {
                        newValue = mapping(value, original);
                      }
                    }
                    if (key.endsWith("scale")) {
                      if (style.transform) {
                        style.transform = "".concat(style[key], " ").concat(newValue);
                      } else {
                        style.transform = newValue;
                      }
                    } else {
                      style[key.replaceAll(/-([a-zA-Z])/g, function(_, x) {
                        return x.toUpperCase();
                      })] = newValue;
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
                if (style.fontFamily) {
                  (0, _html_utils.setFontFamily)({
                    typeface: style.fontFamily,
                    weight: style.fontWeight || "normal",
                    posture: style.fontStyle || "normal",
                    size: original.fontSize || 0
                  }, node, node[_xfa_object.$globalData].fontFinder, style);
                }
                if (richText && style.verticalAlign && style.verticalAlign !== "0px" && style.fontSize) {
                  var SUB_SUPER_SCRIPT_FACTOR = 0.583;
                  var VERTICAL_FACTOR = 0.333;
                  var fontSize = (0, _utils.getMeasurement)(style.fontSize);
                  style.fontSize = (0, _html_utils.measureToString)(fontSize * SUB_SUPER_SCRIPT_FACTOR);
                  style.verticalAlign = (0, _html_utils.measureToString)(Math.sign((0, _utils.getMeasurement)(style.verticalAlign)) * fontSize * VERTICAL_FACTOR);
                }
                (0, _html_utils.fixTextIndent)(style);
                return style;
              }
              function checkStyle(node) {
                if (!node.style) {
                  return "";
                }
                return node.style.trim().split(/\s*;\s*/).filter(function(s) {
                  return !!s;
                }).map(function(s) {
                  return s.split(/\s*:\s*/, 2);
                }).filter(function(_ref) {
                  var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
                  if (key === "font-family") {
                    node[_xfa_object.$globalData].usedTypefaces.add(value);
                  }
                  return VALID_STYLES.has(key);
                }).map(function(kv) {
                  return kv.join(":");
                }).join(";");
              }
              var NoWhites = /* @__PURE__ */ new Set(["body", "html"]);
              var XhtmlObject = /* @__PURE__ */ function(_XmlObject) {
                _inherits(XhtmlObject2, _XmlObject);
                var _super = _createSuper(XhtmlObject2);
                function XhtmlObject2(attributes, name) {
                  var _this;
                  _classCallCheck(this, XhtmlObject2);
                  _this = _super.call(this, XHTML_NS_ID, name);
                  _this[$richText] = false;
                  _this.style = attributes.style || "";
                  return _this;
                }
                _createClass(XhtmlObject2, [{
                  key: _xfa_object.$clean,
                  value: function value(builder) {
                    _get(_getPrototypeOf(XhtmlObject2.prototype), _xfa_object.$clean, this).call(this, builder);
                    this.style = checkStyle(this);
                  }
                }, {
                  key: _xfa_object.$acceptWhitespace,
                  value: function value() {
                    return !NoWhites.has(this[_xfa_object.$nodeName]);
                  }
                }, {
                  key: _xfa_object.$onText,
                  value: function value(str) {
                    var richText = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    if (!richText) {
                      str = str.replace(crlfRegExp, "");
                      if (!this.style.includes("xfa-spacerun:yes")) {
                        str = str.replace(spacesRegExp, " ");
                      }
                    } else {
                      this[$richText] = true;
                    }
                    if (str) {
                      this[_xfa_object.$content] += str;
                    }
                  }
                }, {
                  key: _xfa_object.$pushGlyphs,
                  value: function value(measure) {
                    var mustPop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
                    var xfaFont = /* @__PURE__ */ Object.create(null);
                    var margin = {
                      top: NaN,
                      bottom: NaN,
                      left: NaN,
                      right: NaN
                    };
                    var lineHeight = null;
                    var _iterator2 = _createForOfIteratorHelper(this.style.split(";").map(function(s) {
                      return s.split(":", 2);
                    })), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var _step2$value = _slicedToArray(_step2.value, 2), key = _step2$value[0], value2 = _step2$value[1];
                        switch (key) {
                          case "font-family":
                            xfaFont.typeface = (0, _utils.stripQuotes)(value2);
                            break;
                          case "font-size":
                            xfaFont.size = (0, _utils.getMeasurement)(value2);
                            break;
                          case "font-weight":
                            xfaFont.weight = value2;
                            break;
                          case "font-style":
                            xfaFont.posture = value2;
                            break;
                          case "letter-spacing":
                            xfaFont.letterSpacing = (0, _utils.getMeasurement)(value2);
                            break;
                          case "margin":
                            var values = value2.split(/ \t/).map(function(x) {
                              return (0, _utils.getMeasurement)(x);
                            });
                            switch (values.length) {
                              case 1:
                                margin.top = margin.bottom = margin.left = margin.right = values[0];
                                break;
                              case 2:
                                margin.top = margin.bottom = values[0];
                                margin.left = margin.right = values[1];
                                break;
                              case 3:
                                margin.top = values[0];
                                margin.bottom = values[2];
                                margin.left = margin.right = values[1];
                                break;
                              case 4:
                                margin.top = values[0];
                                margin.left = values[1];
                                margin.bottom = values[2];
                                margin.right = values[3];
                                break;
                            }
                            break;
                          case "margin-top":
                            margin.top = (0, _utils.getMeasurement)(value2);
                            break;
                          case "margin-bottom":
                            margin.bottom = (0, _utils.getMeasurement)(value2);
                            break;
                          case "margin-left":
                            margin.left = (0, _utils.getMeasurement)(value2);
                            break;
                          case "margin-right":
                            margin.right = (0, _utils.getMeasurement)(value2);
                            break;
                          case "line-height":
                            lineHeight = (0, _utils.getMeasurement)(value2);
                            break;
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    measure.pushData(xfaFont, margin, lineHeight);
                    if (this[_xfa_object.$content]) {
                      measure.addString(this[_xfa_object.$content]);
                    } else {
                      var _iterator3 = _createForOfIteratorHelper(this[_xfa_object.$getChildren]()), _step3;
                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                          var child = _step3.value;
                          if (child[_xfa_object.$nodeName] === "#text") {
                            measure.addString(child[_xfa_object.$content]);
                            continue;
                          }
                          child[_xfa_object.$pushGlyphs](measure);
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                    }
                    if (mustPop) {
                      measure.popFont();
                    }
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var children = [];
                    this[_xfa_object.$extra] = {
                      children
                    };
                    this[_xfa_object.$childrenToHTML]({});
                    if (children.length === 0 && !this[_xfa_object.$content]) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    var value2;
                    if (this[$richText]) {
                      value2 = this[_xfa_object.$content] ? this[_xfa_object.$content].replace(crlfForRichTextRegExp, "\n") : void 0;
                    } else {
                      value2 = this[_xfa_object.$content] || void 0;
                    }
                    return _utils.HTMLResult.success({
                      name: this[_xfa_object.$nodeName],
                      attributes: {
                        href: this.href,
                        style: mapStyle(this.style, this, this[$richText])
                      },
                      children,
                      value: value2
                    });
                  }
                }]);
                return XhtmlObject2;
              }(_xfa_object.XmlObject);
              var A = /* @__PURE__ */ function(_XhtmlObject) {
                _inherits(A2, _XhtmlObject);
                var _super2 = _createSuper(A2);
                function A2(attributes) {
                  var _this2;
                  _classCallCheck(this, A2);
                  _this2 = _super2.call(this, attributes, "a");
                  _this2.href = (0, _html_utils.fixURL)(attributes.href) || "";
                  return _this2;
                }
                return A2;
              }(XhtmlObject);
              var B = /* @__PURE__ */ function(_XhtmlObject2) {
                _inherits(B2, _XhtmlObject2);
                var _super3 = _createSuper(B2);
                function B2(attributes) {
                  _classCallCheck(this, B2);
                  return _super3.call(this, attributes, "b");
                }
                _createClass(B2, [{
                  key: _xfa_object.$pushGlyphs,
                  value: function value(measure) {
                    measure.pushFont({
                      weight: "bold"
                    });
                    _get(_getPrototypeOf(B2.prototype), _xfa_object.$pushGlyphs, this).call(this, measure);
                    measure.popFont();
                  }
                }]);
                return B2;
              }(XhtmlObject);
              var Body = /* @__PURE__ */ function(_XhtmlObject3) {
                _inherits(Body2, _XhtmlObject3);
                var _super4 = _createSuper(Body2);
                function Body2(attributes) {
                  _classCallCheck(this, Body2);
                  return _super4.call(this, attributes, "body");
                }
                _createClass(Body2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var res = _get(_getPrototypeOf(Body2.prototype), _xfa_object.$toHTML, this).call(this, availableSpace);
                    var html = res.html;
                    if (!html) {
                      return _utils.HTMLResult.EMPTY;
                    }
                    html.name = "div";
                    html.attributes["class"] = ["xfaRich"];
                    return res;
                  }
                }]);
                return Body2;
              }(XhtmlObject);
              var Br = /* @__PURE__ */ function(_XhtmlObject4) {
                _inherits(Br2, _XhtmlObject4);
                var _super5 = _createSuper(Br2);
                function Br2(attributes) {
                  _classCallCheck(this, Br2);
                  return _super5.call(this, attributes, "br");
                }
                _createClass(Br2, [{
                  key: _xfa_object.$text,
                  value: function value() {
                    return "\n";
                  }
                }, {
                  key: _xfa_object.$pushGlyphs,
                  value: function value(measure) {
                    measure.addString("\n");
                  }
                }, {
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    return _utils.HTMLResult.success({
                      name: "br"
                    });
                  }
                }]);
                return Br2;
              }(XhtmlObject);
              var Html = /* @__PURE__ */ function(_XhtmlObject5) {
                _inherits(Html2, _XhtmlObject5);
                var _super6 = _createSuper(Html2);
                function Html2(attributes) {
                  _classCallCheck(this, Html2);
                  return _super6.call(this, attributes, "html");
                }
                _createClass(Html2, [{
                  key: _xfa_object.$toHTML,
                  value: function value(availableSpace) {
                    var children = [];
                    this[_xfa_object.$extra] = {
                      children
                    };
                    this[_xfa_object.$childrenToHTML]({});
                    if (children.length === 0) {
                      return _utils.HTMLResult.success({
                        name: "div",
                        attributes: {
                          "class": ["xfaRich"],
                          style: {}
                        },
                        value: this[_xfa_object.$content] || ""
                      });
                    }
                    if (children.length === 1) {
                      var child = children[0];
                      if (child.attributes && child.attributes["class"].includes("xfaRich")) {
                        return _utils.HTMLResult.success(child);
                      }
                    }
                    return _utils.HTMLResult.success({
                      name: "div",
                      attributes: {
                        "class": ["xfaRich"],
                        style: {}
                      },
                      children
                    });
                  }
                }]);
                return Html2;
              }(XhtmlObject);
              var I = /* @__PURE__ */ function(_XhtmlObject6) {
                _inherits(I2, _XhtmlObject6);
                var _super7 = _createSuper(I2);
                function I2(attributes) {
                  _classCallCheck(this, I2);
                  return _super7.call(this, attributes, "i");
                }
                _createClass(I2, [{
                  key: _xfa_object.$pushGlyphs,
                  value: function value(measure) {
                    measure.pushFont({
                      posture: "italic"
                    });
                    _get(_getPrototypeOf(I2.prototype), _xfa_object.$pushGlyphs, this).call(this, measure);
                    measure.popFont();
                  }
                }]);
                return I2;
              }(XhtmlObject);
              var Li = /* @__PURE__ */ function(_XhtmlObject7) {
                _inherits(Li2, _XhtmlObject7);
                var _super8 = _createSuper(Li2);
                function Li2(attributes) {
                  _classCallCheck(this, Li2);
                  return _super8.call(this, attributes, "li");
                }
                return Li2;
              }(XhtmlObject);
              var Ol = /* @__PURE__ */ function(_XhtmlObject8) {
                _inherits(Ol2, _XhtmlObject8);
                var _super9 = _createSuper(Ol2);
                function Ol2(attributes) {
                  _classCallCheck(this, Ol2);
                  return _super9.call(this, attributes, "ol");
                }
                return Ol2;
              }(XhtmlObject);
              var P = /* @__PURE__ */ function(_XhtmlObject9) {
                _inherits(P2, _XhtmlObject9);
                var _super10 = _createSuper(P2);
                function P2(attributes) {
                  _classCallCheck(this, P2);
                  return _super10.call(this, attributes, "p");
                }
                _createClass(P2, [{
                  key: _xfa_object.$pushGlyphs,
                  value: function value(measure) {
                    _get(_getPrototypeOf(P2.prototype), _xfa_object.$pushGlyphs, this).call(this, measure, false);
                    measure.addString("\n");
                    measure.addPara();
                    measure.popFont();
                  }
                }, {
                  key: _xfa_object.$text,
                  value: function value() {
                    var siblings = this[_xfa_object.$getParent]()[_xfa_object.$getChildren]();
                    if (siblings[siblings.length - 1] === this) {
                      return _get(_getPrototypeOf(P2.prototype), _xfa_object.$text, this).call(this);
                    }
                    return _get(_getPrototypeOf(P2.prototype), _xfa_object.$text, this).call(this) + "\n";
                  }
                }]);
                return P2;
              }(XhtmlObject);
              var Span = /* @__PURE__ */ function(_XhtmlObject10) {
                _inherits(Span2, _XhtmlObject10);
                var _super11 = _createSuper(Span2);
                function Span2(attributes) {
                  _classCallCheck(this, Span2);
                  return _super11.call(this, attributes, "span");
                }
                return Span2;
              }(XhtmlObject);
              var Sub = /* @__PURE__ */ function(_XhtmlObject11) {
                _inherits(Sub2, _XhtmlObject11);
                var _super12 = _createSuper(Sub2);
                function Sub2(attributes) {
                  _classCallCheck(this, Sub2);
                  return _super12.call(this, attributes, "sub");
                }
                return Sub2;
              }(XhtmlObject);
              var Sup = /* @__PURE__ */ function(_XhtmlObject12) {
                _inherits(Sup2, _XhtmlObject12);
                var _super13 = _createSuper(Sup2);
                function Sup2(attributes) {
                  _classCallCheck(this, Sup2);
                  return _super13.call(this, attributes, "sup");
                }
                return Sup2;
              }(XhtmlObject);
              var Ul = /* @__PURE__ */ function(_XhtmlObject13) {
                _inherits(Ul2, _XhtmlObject13);
                var _super14 = _createSuper(Ul2);
                function Ul2(attributes) {
                  _classCallCheck(this, Ul2);
                  return _super14.call(this, attributes, "ul");
                }
                return Ul2;
              }(XhtmlObject);
              var XhtmlNamespace = /* @__PURE__ */ function() {
                function XhtmlNamespace2() {
                  _classCallCheck(this, XhtmlNamespace2);
                }
                _createClass(XhtmlNamespace2, null, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    if (XhtmlNamespace2.hasOwnProperty(name)) {
                      return XhtmlNamespace2[name](attributes);
                    }
                    return void 0;
                  }
                }, {
                  key: "a",
                  value: function a(attributes) {
                    return new A(attributes);
                  }
                }, {
                  key: "b",
                  value: function b(attributes) {
                    return new B(attributes);
                  }
                }, {
                  key: "body",
                  value: function body(attributes) {
                    return new Body(attributes);
                  }
                }, {
                  key: "br",
                  value: function br(attributes) {
                    return new Br(attributes);
                  }
                }, {
                  key: "html",
                  value: function html(attributes) {
                    return new Html(attributes);
                  }
                }, {
                  key: "i",
                  value: function i(attributes) {
                    return new I(attributes);
                  }
                }, {
                  key: "li",
                  value: function li(attributes) {
                    return new Li(attributes);
                  }
                }, {
                  key: "ol",
                  value: function ol(attributes) {
                    return new Ol(attributes);
                  }
                }, {
                  key: "p",
                  value: function p(attributes) {
                    return new P(attributes);
                  }
                }, {
                  key: "span",
                  value: function span(attributes) {
                    return new Span(attributes);
                  }
                }, {
                  key: "sub",
                  value: function sub(attributes) {
                    return new Sub(attributes);
                  }
                }, {
                  key: "sup",
                  value: function sup(attributes) {
                    return new Sup(attributes);
                  }
                }, {
                  key: "ul",
                  value: function ul(attributes) {
                    return new Ul(attributes);
                  }
                }]);
                return XhtmlNamespace2;
              }();
              exports2.XhtmlNamespace = XhtmlNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.UnknownNamespace = void 0;
              var _namespaces = __w_pdfjs_require__2(207);
              var _xfa_object = __w_pdfjs_require__2(205);
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var UnknownNamespace = /* @__PURE__ */ function() {
                function UnknownNamespace2(nsId) {
                  _classCallCheck(this, UnknownNamespace2);
                  this.namespaceId = nsId;
                }
                _createClass(UnknownNamespace2, [{
                  key: _namespaces.$buildXFAObject,
                  value: function value(name, attributes) {
                    return new _xfa_object.XmlObject(this.namespaceId, name, attributes);
                  }
                }]);
                return UnknownNamespace2;
              }();
              exports2.UnknownNamespace = UnknownNamespace;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.XRef = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              var _primitives = __w_pdfjs_require__2(135);
              var _core_utils = __w_pdfjs_require__2(139);
              var _parser2 = __w_pdfjs_require__2(157);
              var _base_stream = __w_pdfjs_require__2(136);
              var _crypto = __w_pdfjs_require__2(202);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var XRef = /* @__PURE__ */ function() {
                function XRef2(stream, pdfManager) {
                  _classCallCheck(this, XRef2);
                  this.stream = stream;
                  this.pdfManager = pdfManager;
                  this.entries = [];
                  this.xrefstms = /* @__PURE__ */ Object.create(null);
                  this._cacheMap = /* @__PURE__ */ new Map();
                  this._pendingRefs = new _primitives.RefSet();
                  this.stats = new _core_utils.DocStats(pdfManager.msgHandler);
                  this._newRefNum = null;
                }
                _createClass(XRef2, [{
                  key: "getNewRef",
                  value: function getNewRef() {
                    if (this._newRefNum === null) {
                      this._newRefNum = this.entries.length;
                    }
                    return _primitives.Ref.get(this._newRefNum++, 0);
                  }
                }, {
                  key: "resetNewRef",
                  value: function resetNewRef() {
                    this._newRefNum = null;
                  }
                }, {
                  key: "setStartXRef",
                  value: function setStartXRef(startXRef) {
                    this.startXRefQueue = [startXRef];
                  }
                }, {
                  key: "parse",
                  value: function parse() {
                    var recoveryMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    var trailerDict;
                    if (!recoveryMode) {
                      trailerDict = this.readXRef();
                    } else {
                      (0, _util.warn)("Indexing all PDF objects");
                      trailerDict = this.indexObjects();
                    }
                    trailerDict.assignXref(this);
                    this.trailer = trailerDict;
                    var encrypt;
                    try {
                      encrypt = trailerDict.get("Encrypt");
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)('XRef.parse - Invalid "Encrypt" reference: "'.concat(ex, '".'));
                    }
                    if (encrypt instanceof _primitives.Dict) {
                      var ids = trailerDict.get("ID");
                      var fileId = ids && ids.length ? ids[0] : "";
                      encrypt.suppressEncryption = true;
                      this.encrypt = new _crypto.CipherTransformFactory(encrypt, fileId, this.pdfManager.password);
                    }
                    var root;
                    try {
                      root = trailerDict.get("Root");
                    } catch (ex) {
                      if (ex instanceof _core_utils.MissingDataException) {
                        throw ex;
                      }
                      (0, _util.warn)('XRef.parse - Invalid "Root" reference: "'.concat(ex, '".'));
                    }
                    if (root instanceof _primitives.Dict) {
                      try {
                        var pages = root.get("Pages");
                        if (pages instanceof _primitives.Dict) {
                          this.root = root;
                          return;
                        }
                      } catch (ex) {
                        if (ex instanceof _core_utils.MissingDataException) {
                          throw ex;
                        }
                        (0, _util.warn)('XRef.parse - Invalid "Pages" reference: "'.concat(ex, '".'));
                      }
                    }
                    if (!recoveryMode) {
                      throw new _core_utils.XRefParseException();
                    }
                    throw new _util.InvalidPDFException("Invalid Root reference.");
                  }
                }, {
                  key: "processXRefTable",
                  value: function processXRefTable(parser) {
                    if (!("tableState" in this)) {
                      this.tableState = {
                        entryNum: 0,
                        streamPos: parser.lexer.stream.pos,
                        parserBuf1: parser.buf1,
                        parserBuf2: parser.buf2
                      };
                    }
                    var obj = this.readXRefTable(parser);
                    if (!(0, _primitives.isCmd)(obj, "trailer")) {
                      throw new _util.FormatError("Invalid XRef table: could not find trailer dictionary");
                    }
                    var dict = parser.getObj();
                    if (!(dict instanceof _primitives.Dict) && dict.dict) {
                      dict = dict.dict;
                    }
                    if (!(dict instanceof _primitives.Dict)) {
                      throw new _util.FormatError("Invalid XRef table: could not parse trailer dictionary");
                    }
                    delete this.tableState;
                    return dict;
                  }
                }, {
                  key: "readXRefTable",
                  value: function readXRefTable(parser) {
                    var stream = parser.lexer.stream;
                    var tableState = this.tableState;
                    stream.pos = tableState.streamPos;
                    parser.buf1 = tableState.parserBuf1;
                    parser.buf2 = tableState.parserBuf2;
                    var obj;
                    while (true) {
                      if (!("firstEntryNum" in tableState) || !("entryCount" in tableState)) {
                        if ((0, _primitives.isCmd)(obj = parser.getObj(), "trailer")) {
                          break;
                        }
                        tableState.firstEntryNum = obj;
                        tableState.entryCount = parser.getObj();
                      }
                      var first = tableState.firstEntryNum;
                      var count = tableState.entryCount;
                      if (!Number.isInteger(first) || !Number.isInteger(count)) {
                        throw new _util.FormatError("Invalid XRef table: wrong types in subsection header");
                      }
                      for (var i = tableState.entryNum; i < count; i++) {
                        tableState.streamPos = stream.pos;
                        tableState.entryNum = i;
                        tableState.parserBuf1 = parser.buf1;
                        tableState.parserBuf2 = parser.buf2;
                        var entry = {};
                        entry.offset = parser.getObj();
                        entry.gen = parser.getObj();
                        var type = parser.getObj();
                        if (type instanceof _primitives.Cmd) {
                          switch (type.cmd) {
                            case "f":
                              entry.free = true;
                              break;
                            case "n":
                              entry.uncompressed = true;
                              break;
                          }
                        }
                        if (!Number.isInteger(entry.offset) || !Number.isInteger(entry.gen) || !(entry.free || entry.uncompressed)) {
                          throw new _util.FormatError("Invalid entry in XRef subsection: ".concat(first, ", ").concat(count));
                        }
                        if (i === 0 && entry.free && first === 1) {
                          first = 0;
                        }
                        if (!this.entries[i + first]) {
                          this.entries[i + first] = entry;
                        }
                      }
                      tableState.entryNum = 0;
                      tableState.streamPos = stream.pos;
                      tableState.parserBuf1 = parser.buf1;
                      tableState.parserBuf2 = parser.buf2;
                      delete tableState.firstEntryNum;
                      delete tableState.entryCount;
                    }
                    if (this.entries[0] && !this.entries[0].free) {
                      throw new _util.FormatError("Invalid XRef table: unexpected first object");
                    }
                    return obj;
                  }
                }, {
                  key: "processXRefStream",
                  value: function processXRefStream(stream) {
                    if (!("streamState" in this)) {
                      var streamParameters = stream.dict;
                      var byteWidths = streamParameters.get("W");
                      var range = streamParameters.get("Index");
                      if (!range) {
                        range = [0, streamParameters.get("Size")];
                      }
                      this.streamState = {
                        entryRanges: range,
                        byteWidths,
                        entryNum: 0,
                        streamPos: stream.pos
                      };
                    }
                    this.readXRefStream(stream);
                    delete this.streamState;
                    return stream.dict;
                  }
                }, {
                  key: "readXRefStream",
                  value: function readXRefStream(stream) {
                    var streamState = this.streamState;
                    stream.pos = streamState.streamPos;
                    var _streamState$byteWidt = _slicedToArray(streamState.byteWidths, 3), typeFieldWidth = _streamState$byteWidt[0], offsetFieldWidth = _streamState$byteWidt[1], generationFieldWidth = _streamState$byteWidt[2];
                    var entryRanges = streamState.entryRanges;
                    while (entryRanges.length > 0) {
                      var _entryRanges = _slicedToArray(entryRanges, 2), first = _entryRanges[0], n = _entryRanges[1];
                      if (!Number.isInteger(first) || !Number.isInteger(n)) {
                        throw new _util.FormatError("Invalid XRef range fields: ".concat(first, ", ").concat(n));
                      }
                      if (!Number.isInteger(typeFieldWidth) || !Number.isInteger(offsetFieldWidth) || !Number.isInteger(generationFieldWidth)) {
                        throw new _util.FormatError("Invalid XRef entry fields length: ".concat(first, ", ").concat(n));
                      }
                      for (var i = streamState.entryNum; i < n; ++i) {
                        streamState.entryNum = i;
                        streamState.streamPos = stream.pos;
                        var type = 0, offset = 0, generation = 0;
                        for (var j = 0; j < typeFieldWidth; ++j) {
                          var typeByte = stream.getByte();
                          if (typeByte === -1) {
                            throw new _util.FormatError("Invalid XRef byteWidths 'type'.");
                          }
                          type = type << 8 | typeByte;
                        }
                        if (typeFieldWidth === 0) {
                          type = 1;
                        }
                        for (var _j = 0; _j < offsetFieldWidth; ++_j) {
                          var offsetByte = stream.getByte();
                          if (offsetByte === -1) {
                            throw new _util.FormatError("Invalid XRef byteWidths 'offset'.");
                          }
                          offset = offset << 8 | offsetByte;
                        }
                        for (var _j2 = 0; _j2 < generationFieldWidth; ++_j2) {
                          var generationByte = stream.getByte();
                          if (generationByte === -1) {
                            throw new _util.FormatError("Invalid XRef byteWidths 'generation'.");
                          }
                          generation = generation << 8 | generationByte;
                        }
                        var entry = {};
                        entry.offset = offset;
                        entry.gen = generation;
                        switch (type) {
                          case 0:
                            entry.free = true;
                            break;
                          case 1:
                            entry.uncompressed = true;
                            break;
                          case 2:
                            break;
                          default:
                            throw new _util.FormatError("Invalid XRef entry type: ".concat(type));
                        }
                        if (!this.entries[first + i]) {
                          this.entries[first + i] = entry;
                        }
                      }
                      streamState.entryNum = 0;
                      streamState.streamPos = stream.pos;
                      entryRanges.splice(0, 2);
                    }
                  }
                }, {
                  key: "indexObjects",
                  value: function indexObjects() {
                    var TAB = 9, LF = 10, CR = 13, SPACE = 32;
                    var PERCENT = 37, LT = 60;
                    function readToken(data, offset) {
                      var token2 = "", ch2 = data[offset];
                      while (ch2 !== LF && ch2 !== CR && ch2 !== LT) {
                        if (++offset >= data.length) {
                          break;
                        }
                        token2 += String.fromCharCode(ch2);
                        ch2 = data[offset];
                      }
                      return token2;
                    }
                    function skipUntil(data, offset, what) {
                      var length2 = what.length, dataLength = data.length;
                      var skipped = 0;
                      while (offset < dataLength) {
                        var i2 = 0;
                        while (i2 < length2 && data[offset + i2] === what[i2]) {
                          ++i2;
                        }
                        if (i2 >= length2) {
                          break;
                        }
                        offset++;
                        skipped++;
                      }
                      return skipped;
                    }
                    var objRegExp = /^(\d+)\s+(\d+)\s+obj\b/;
                    var endobjRegExp = /\bendobj[\b\s]$/;
                    var nestedObjRegExp = /\s+(\d+\s+\d+\s+obj[\b\s<])$/;
                    var CHECK_CONTENT_LENGTH = 25;
                    var trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);
                    var startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);
                    var objBytes = new Uint8Array([111, 98, 106]);
                    var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);
                    this.entries.length = 0;
                    this._cacheMap.clear();
                    var stream = this.stream;
                    stream.pos = 0;
                    var buffer = stream.getBytes(), length = buffer.length;
                    var position = stream.start;
                    var trailers = [], xrefStms = [];
                    while (position < length) {
                      var ch = buffer[position];
                      if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {
                        ++position;
                        continue;
                      }
                      if (ch === PERCENT) {
                        do {
                          ++position;
                          if (position >= length) {
                            break;
                          }
                          ch = buffer[position];
                        } while (ch !== LF && ch !== CR);
                        continue;
                      }
                      var token = readToken(buffer, position);
                      var m = void 0;
                      if (token.startsWith("xref") && (token.length === 4 || /\s/.test(token[4]))) {
                        position += skipUntil(buffer, position, trailerBytes);
                        trailers.push(position);
                        position += skipUntil(buffer, position, startxrefBytes);
                      } else if (m = objRegExp.exec(token)) {
                        var num = m[1] | 0, gen = m[2] | 0;
                        var contentLength = void 0, startPos = position + token.length, updateEntries = false;
                        if (!this.entries[num]) {
                          updateEntries = true;
                        } else if (this.entries[num].gen === gen) {
                          try {
                            var parser = new _parser2.Parser({
                              lexer: new _parser2.Lexer(stream.makeSubStream(startPos))
                            });
                            parser.getObj();
                            updateEntries = true;
                          } catch (ex) {
                            if (ex instanceof _core_utils.ParserEOFException) {
                              (0, _util.warn)("indexObjects -- checking object (".concat(token, '): "').concat(ex, '".'));
                            } else {
                              updateEntries = true;
                            }
                          }
                        }
                        if (updateEntries) {
                          this.entries[num] = {
                            offset: position - stream.start,
                            gen,
                            uncompressed: true
                          };
                        }
                        while (startPos < buffer.length) {
                          var endPos = startPos + skipUntil(buffer, startPos, objBytes) + 4;
                          contentLength = endPos - position;
                          var checkPos = Math.max(endPos - CHECK_CONTENT_LENGTH, startPos);
                          var tokenStr = (0, _util.bytesToString)(buffer.subarray(checkPos, endPos));
                          if (endobjRegExp.test(tokenStr)) {
                            break;
                          } else {
                            var objToken = nestedObjRegExp.exec(tokenStr);
                            if (objToken && objToken[1]) {
                              (0, _util.warn)('indexObjects: Found new "obj" inside of another "obj", caused by missing "endobj" -- trying to recover.');
                              contentLength -= objToken[1].length;
                              break;
                            }
                          }
                          startPos = endPos;
                        }
                        var content = buffer.subarray(position, position + contentLength);
                        var xrefTagOffset = skipUntil(content, 0, xrefBytes);
                        if (xrefTagOffset < contentLength && content[xrefTagOffset + 5] < 64) {
                          xrefStms.push(position - stream.start);
                          this.xrefstms[position - stream.start] = 1;
                        }
                        position += contentLength;
                      } else if (token.startsWith("trailer") && (token.length === 7 || /\s/.test(token[7]))) {
                        trailers.push(position);
                        position += skipUntil(buffer, position, startxrefBytes);
                      } else {
                        position += token.length + 1;
                      }
                    }
                    for (var i = 0, ii = xrefStms.length; i < ii; ++i) {
                      this.startXRefQueue.push(xrefStms[i]);
                      this.readXRef(true);
                    }
                    var trailerDict;
                    for (var _i2 = 0, _ii = trailers.length; _i2 < _ii; ++_i2) {
                      stream.pos = trailers[_i2];
                      var _parser = new _parser2.Parser({
                        lexer: new _parser2.Lexer(stream),
                        xref: this,
                        allowStreams: true,
                        recoveryMode: true
                      });
                      var obj = _parser.getObj();
                      if (!(0, _primitives.isCmd)(obj, "trailer")) {
                        continue;
                      }
                      var dict = _parser.getObj();
                      if (!(dict instanceof _primitives.Dict)) {
                        continue;
                      }
                      try {
                        var rootDict = dict.get("Root");
                        if (!(rootDict instanceof _primitives.Dict)) {
                          continue;
                        }
                        var pagesDict = rootDict.get("Pages");
                        if (!(pagesDict instanceof _primitives.Dict)) {
                          continue;
                        }
                        var pagesCount = pagesDict.get("Count");
                        if (!Number.isInteger(pagesCount)) {
                          continue;
                        }
                      } catch (ex) {
                        continue;
                      }
                      if (dict.has("ID")) {
                        return dict;
                      }
                      trailerDict = dict;
                    }
                    if (trailerDict) {
                      return trailerDict;
                    }
                    if (this.topDict) {
                      return this.topDict;
                    }
                    throw new _util.InvalidPDFException("Invalid PDF structure.");
                  }
                }, {
                  key: "readXRef",
                  value: function readXRef() {
                    var recoveryMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                    var stream = this.stream;
                    var startXRefParsedCache = /* @__PURE__ */ new Set();
                    try {
                      while (this.startXRefQueue.length) {
                        var startXRef = this.startXRefQueue[0];
                        if (startXRefParsedCache.has(startXRef)) {
                          (0, _util.warn)("readXRef - skipping XRef table since it was already parsed.");
                          this.startXRefQueue.shift();
                          continue;
                        }
                        startXRefParsedCache.add(startXRef);
                        stream.pos = startXRef + stream.start;
                        var parser = new _parser2.Parser({
                          lexer: new _parser2.Lexer(stream),
                          xref: this,
                          allowStreams: true
                        });
                        var obj = parser.getObj();
                        var dict = void 0;
                        if ((0, _primitives.isCmd)(obj, "xref")) {
                          dict = this.processXRefTable(parser);
                          if (!this.topDict) {
                            this.topDict = dict;
                          }
                          obj = dict.get("XRefStm");
                          if (Number.isInteger(obj)) {
                            var pos = obj;
                            if (!(pos in this.xrefstms)) {
                              this.xrefstms[pos] = 1;
                              this.startXRefQueue.push(pos);
                            }
                          }
                        } else if (Number.isInteger(obj)) {
                          if (!Number.isInteger(parser.getObj()) || !(0, _primitives.isCmd)(parser.getObj(), "obj") || !((obj = parser.getObj()) instanceof _base_stream.BaseStream)) {
                            throw new _util.FormatError("Invalid XRef stream");
                          }
                          dict = this.processXRefStream(obj);
                          if (!this.topDict) {
                            this.topDict = dict;
                          }
                          if (!dict) {
                            throw new _util.FormatError("Failed to read XRef stream");
                          }
                        } else {
                          throw new _util.FormatError("Invalid XRef stream header");
                        }
                        obj = dict.get("Prev");
                        if (Number.isInteger(obj)) {
                          this.startXRefQueue.push(obj);
                        } else if (obj instanceof _primitives.Ref) {
                          this.startXRefQueue.push(obj.num);
                        }
                        this.startXRefQueue.shift();
                      }
                      return this.topDict;
                    } catch (e) {
                      if (e instanceof _core_utils.MissingDataException) {
                        throw e;
                      }
                      (0, _util.info)("(while reading XRef): " + e);
                      this.startXRefQueue.shift();
                    }
                    if (recoveryMode) {
                      return void 0;
                    }
                    throw new _core_utils.XRefParseException();
                  }
                }, {
                  key: "getEntry",
                  value: function getEntry(i) {
                    var xrefEntry = this.entries[i];
                    if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {
                      return xrefEntry;
                    }
                    return null;
                  }
                }, {
                  key: "fetchIfRef",
                  value: function fetchIfRef(obj) {
                    var suppressEncryption = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    if (obj instanceof _primitives.Ref) {
                      return this.fetch(obj, suppressEncryption);
                    }
                    return obj;
                  }
                }, {
                  key: "fetch",
                  value: function fetch2(ref) {
                    var suppressEncryption = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                    if (!(ref instanceof _primitives.Ref)) {
                      throw new Error("ref object is not a reference");
                    }
                    var num = ref.num;
                    var cacheEntry = this._cacheMap.get(num);
                    if (cacheEntry !== void 0) {
                      if (cacheEntry instanceof _primitives.Dict && !cacheEntry.objId) {
                        cacheEntry.objId = ref.toString();
                      }
                      return cacheEntry;
                    }
                    var xrefEntry = this.getEntry(num);
                    if (xrefEntry === null) {
                      this._cacheMap.set(num, xrefEntry);
                      return xrefEntry;
                    }
                    if (this._pendingRefs.has(ref)) {
                      this._pendingRefs.remove(ref);
                      (0, _util.warn)("Ignoring circular reference: ".concat(ref, "."));
                      return _primitives.CIRCULAR_REF;
                    }
                    this._pendingRefs.put(ref);
                    try {
                      if (xrefEntry.uncompressed) {
                        xrefEntry = this.fetchUncompressed(ref, xrefEntry, suppressEncryption);
                      } else {
                        xrefEntry = this.fetchCompressed(ref, xrefEntry, suppressEncryption);
                      }
                      this._pendingRefs.remove(ref);
                    } catch (ex) {
                      this._pendingRefs.remove(ref);
                      throw ex;
                    }
                    if (xrefEntry instanceof _primitives.Dict) {
                      xrefEntry.objId = ref.toString();
                    } else if (xrefEntry instanceof _base_stream.BaseStream) {
                      xrefEntry.dict.objId = ref.toString();
                    }
                    return xrefEntry;
                  }
                }, {
                  key: "fetchUncompressed",
                  value: function fetchUncompressed(ref, xrefEntry) {
                    var suppressEncryption = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                    var gen = ref.gen;
                    var num = ref.num;
                    if (xrefEntry.gen !== gen) {
                      throw new _core_utils.XRefEntryException("Inconsistent generation in XRef: ".concat(ref));
                    }
                    var stream = this.stream.makeSubStream(xrefEntry.offset + this.stream.start);
                    var parser = new _parser2.Parser({
                      lexer: new _parser2.Lexer(stream),
                      xref: this,
                      allowStreams: true
                    });
                    var obj1 = parser.getObj();
                    var obj2 = parser.getObj();
                    var obj3 = parser.getObj();
                    if (obj1 !== num || obj2 !== gen || !(obj3 instanceof _primitives.Cmd)) {
                      throw new _core_utils.XRefEntryException("Bad (uncompressed) XRef entry: ".concat(ref));
                    }
                    if (obj3.cmd !== "obj") {
                      if (obj3.cmd.startsWith("obj")) {
                        num = parseInt(obj3.cmd.substring(3), 10);
                        if (!Number.isNaN(num)) {
                          return num;
                        }
                      }
                      throw new _core_utils.XRefEntryException("Bad (uncompressed) XRef entry: ".concat(ref));
                    }
                    if (this.encrypt && !suppressEncryption) {
                      xrefEntry = parser.getObj(this.encrypt.createCipherTransform(num, gen));
                    } else {
                      xrefEntry = parser.getObj();
                    }
                    if (!(xrefEntry instanceof _base_stream.BaseStream)) {
                      this._cacheMap.set(num, xrefEntry);
                    }
                    return xrefEntry;
                  }
                }, {
                  key: "fetchCompressed",
                  value: function fetchCompressed(ref, xrefEntry) {
                    var suppressEncryption = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                    var tableOffset = xrefEntry.offset;
                    var stream = this.fetch(_primitives.Ref.get(tableOffset, 0));
                    if (!(stream instanceof _base_stream.BaseStream)) {
                      throw new _util.FormatError("bad ObjStm stream");
                    }
                    var first = stream.dict.get("First");
                    var n = stream.dict.get("N");
                    if (!Number.isInteger(first) || !Number.isInteger(n)) {
                      throw new _util.FormatError("invalid first and n parameters for ObjStm stream");
                    }
                    var parser = new _parser2.Parser({
                      lexer: new _parser2.Lexer(stream),
                      xref: this,
                      allowStreams: true
                    });
                    var nums = new Array(n);
                    var offsets = new Array(n);
                    for (var i = 0; i < n; ++i) {
                      var num = parser.getObj();
                      if (!Number.isInteger(num)) {
                        throw new _util.FormatError("invalid object number in the ObjStm stream: ".concat(num));
                      }
                      var offset = parser.getObj();
                      if (!Number.isInteger(offset)) {
                        throw new _util.FormatError("invalid object offset in the ObjStm stream: ".concat(offset));
                      }
                      nums[i] = num;
                      offsets[i] = offset;
                    }
                    var start = (stream.start || 0) + first;
                    var entries = new Array(n);
                    for (var _i3 = 0; _i3 < n; ++_i3) {
                      var length = _i3 < n - 1 ? offsets[_i3 + 1] - offsets[_i3] : void 0;
                      if (length < 0) {
                        throw new _util.FormatError("Invalid offset in the ObjStm stream.");
                      }
                      parser = new _parser2.Parser({
                        lexer: new _parser2.Lexer(stream.makeSubStream(start + offsets[_i3], length, stream.dict)),
                        xref: this,
                        allowStreams: true
                      });
                      var obj = parser.getObj();
                      entries[_i3] = obj;
                      if (obj instanceof _base_stream.BaseStream) {
                        continue;
                      }
                      var _num = nums[_i3], entry = this.entries[_num];
                      if (entry && entry.offset === tableOffset && entry.gen === _i3) {
                        this._cacheMap.set(_num, obj);
                      }
                    }
                    xrefEntry = entries[xrefEntry.gen];
                    if (xrefEntry === void 0) {
                      throw new _core_utils.XRefEntryException("Bad (compressed) XRef entry: ".concat(ref));
                    }
                    return xrefEntry;
                  }
                }, {
                  key: "fetchIfRefAsync",
                  value: function() {
                    var _fetchIfRefAsync = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(obj, suppressEncryption) {
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              if (!(obj instanceof _primitives.Ref)) {
                                _context.next = 2;
                                break;
                              }
                              return _context.abrupt("return", this.fetchAsync(obj, suppressEncryption));
                            case 2:
                              return _context.abrupt("return", obj);
                            case 3:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));
                    function fetchIfRefAsync(_x, _x2) {
                      return _fetchIfRefAsync.apply(this, arguments);
                    }
                    return fetchIfRefAsync;
                  }()
                }, {
                  key: "fetchAsync",
                  value: function() {
                    var _fetchAsync = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee2(ref, suppressEncryption) {
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.prev = 0;
                              return _context2.abrupt("return", this.fetch(ref, suppressEncryption));
                            case 4:
                              _context2.prev = 4;
                              _context2.t0 = _context2["catch"](0);
                              if (_context2.t0 instanceof _core_utils.MissingDataException) {
                                _context2.next = 8;
                                break;
                              }
                              throw _context2.t0;
                            case 8:
                              _context2.next = 10;
                              return this.pdfManager.requestRange(_context2.t0.begin, _context2.t0.end);
                            case 10:
                              return _context2.abrupt("return", this.fetchAsync(ref, suppressEncryption));
                            case 11:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2, this, [[0, 4]]);
                    }));
                    function fetchAsync(_x3, _x4) {
                      return _fetchAsync.apply(this, arguments);
                    }
                    return fetchAsync;
                  }()
                }, {
                  key: "getCatalogObj",
                  value: function getCatalogObj() {
                    return this.root;
                  }
                }]);
                return XRef2;
              }();
              exports2.XRef = XRef;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.MessageHandler = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              var CallbackKind = {
                UNKNOWN: 0,
                DATA: 1,
                ERROR: 2
              };
              var StreamKind = {
                UNKNOWN: 0,
                CANCEL: 1,
                CANCEL_COMPLETE: 2,
                CLOSE: 3,
                ENQUEUE: 4,
                ERROR: 5,
                PULL: 6,
                PULL_COMPLETE: 7,
                START_COMPLETE: 8
              };
              function wrapReason(reason) {
                if (!(reason instanceof Error || _typeof(reason) === "object" && reason !== null)) {
                  (0, _util.warn)('wrapReason: Expected "reason" to be a (possibly cloned) Error.');
                  return reason;
                }
                switch (reason.name) {
                  case "AbortException":
                    return new _util.AbortException(reason.message);
                  case "MissingPDFException":
                    return new _util.MissingPDFException(reason.message);
                  case "PasswordException":
                    return new _util.PasswordException(reason.message, reason.code);
                  case "UnexpectedResponseException":
                    return new _util.UnexpectedResponseException(reason.message, reason.status);
                  case "UnknownErrorException":
                    return new _util.UnknownErrorException(reason.message, reason.details);
                  default:
                    return new _util.UnknownErrorException(reason.message, reason.toString());
                }
              }
              var MessageHandler = /* @__PURE__ */ function() {
                function MessageHandler2(sourceName, targetName, comObj) {
                  var _this = this;
                  _classCallCheck(this, MessageHandler2);
                  this.sourceName = sourceName;
                  this.targetName = targetName;
                  this.comObj = comObj;
                  this.callbackId = 1;
                  this.streamId = 1;
                  this.streamSinks = /* @__PURE__ */ Object.create(null);
                  this.streamControllers = /* @__PURE__ */ Object.create(null);
                  this.callbackCapabilities = /* @__PURE__ */ Object.create(null);
                  this.actionHandler = /* @__PURE__ */ Object.create(null);
                  this._onComObjOnMessage = function(event) {
                    var data = event.data;
                    if (data.targetName !== _this.sourceName) {
                      return;
                    }
                    if (data.stream) {
                      _this._processStreamMessage(data);
                      return;
                    }
                    if (data.callback) {
                      var callbackId = data.callbackId;
                      var capability = _this.callbackCapabilities[callbackId];
                      if (!capability) {
                        throw new Error("Cannot resolve callback ".concat(callbackId));
                      }
                      delete _this.callbackCapabilities[callbackId];
                      if (data.callback === CallbackKind.DATA) {
                        capability.resolve(data.data);
                      } else if (data.callback === CallbackKind.ERROR) {
                        capability.reject(wrapReason(data.reason));
                      } else {
                        throw new Error("Unexpected callback case");
                      }
                      return;
                    }
                    var action = _this.actionHandler[data.action];
                    if (!action) {
                      throw new Error("Unknown action from worker: ".concat(data.action));
                    }
                    if (data.callbackId) {
                      var cbSourceName = _this.sourceName;
                      var cbTargetName = data.sourceName;
                      new Promise(function(resolve) {
                        resolve(action(data.data));
                      }).then(function(result) {
                        comObj.postMessage({
                          sourceName: cbSourceName,
                          targetName: cbTargetName,
                          callback: CallbackKind.DATA,
                          callbackId: data.callbackId,
                          data: result
                        });
                      }, function(reason) {
                        comObj.postMessage({
                          sourceName: cbSourceName,
                          targetName: cbTargetName,
                          callback: CallbackKind.ERROR,
                          callbackId: data.callbackId,
                          reason: wrapReason(reason)
                        });
                      });
                      return;
                    }
                    if (data.streamId) {
                      _this._createStreamSink(data);
                      return;
                    }
                    action(data.data);
                  };
                  comObj.addEventListener("message", this._onComObjOnMessage);
                }
                _createClass(MessageHandler2, [{
                  key: "on",
                  value: function on(actionName, handler) {
                    var ah = this.actionHandler;
                    if (ah[actionName]) {
                      throw new Error('There is already an actionName called "'.concat(actionName, '"'));
                    }
                    ah[actionName] = handler;
                  }
                }, {
                  key: "send",
                  value: function send(actionName, data, transfers) {
                    this.comObj.postMessage({
                      sourceName: this.sourceName,
                      targetName: this.targetName,
                      action: actionName,
                      data
                    }, transfers);
                  }
                }, {
                  key: "sendWithPromise",
                  value: function sendWithPromise(actionName, data, transfers) {
                    var callbackId = this.callbackId++;
                    var capability = (0, _util.createPromiseCapability)();
                    this.callbackCapabilities[callbackId] = capability;
                    try {
                      this.comObj.postMessage({
                        sourceName: this.sourceName,
                        targetName: this.targetName,
                        action: actionName,
                        callbackId,
                        data
                      }, transfers);
                    } catch (ex) {
                      capability.reject(ex);
                    }
                    return capability.promise;
                  }
                }, {
                  key: "sendWithStream",
                  value: function sendWithStream(actionName, data, queueingStrategy, transfers) {
                    var _this2 = this;
                    var streamId = this.streamId++, sourceName = this.sourceName, targetName = this.targetName, comObj = this.comObj;
                    return new ReadableStream({
                      start: function start(controller) {
                        var startCapability = (0, _util.createPromiseCapability)();
                        _this2.streamControllers[streamId] = {
                          controller,
                          startCall: startCapability,
                          pullCall: null,
                          cancelCall: null,
                          isClosed: false
                        };
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          action: actionName,
                          streamId,
                          data,
                          desiredSize: controller.desiredSize
                        }, transfers);
                        return startCapability.promise;
                      },
                      pull: function pull(controller) {
                        var pullCapability = (0, _util.createPromiseCapability)();
                        _this2.streamControllers[streamId].pullCall = pullCapability;
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.PULL,
                          streamId,
                          desiredSize: controller.desiredSize
                        });
                        return pullCapability.promise;
                      },
                      cancel: function cancel(reason) {
                        (0, _util.assert)(reason instanceof Error, "cancel must have a valid reason");
                        var cancelCapability = (0, _util.createPromiseCapability)();
                        _this2.streamControllers[streamId].cancelCall = cancelCapability;
                        _this2.streamControllers[streamId].isClosed = true;
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.CANCEL,
                          streamId,
                          reason: wrapReason(reason)
                        });
                        return cancelCapability.promise;
                      }
                    }, queueingStrategy);
                  }
                }, {
                  key: "_createStreamSink",
                  value: function _createStreamSink(data) {
                    var streamId = data.streamId, sourceName = this.sourceName, targetName = data.sourceName, comObj = this.comObj;
                    var self2 = this, action = this.actionHandler[data.action];
                    var streamSink = {
                      enqueue: function enqueue(chunk) {
                        var size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
                        var transfers = arguments.length > 2 ? arguments[2] : void 0;
                        if (this.isCancelled) {
                          return;
                        }
                        var lastDesiredSize = this.desiredSize;
                        this.desiredSize -= size;
                        if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                          this.sinkCapability = (0, _util.createPromiseCapability)();
                          this.ready = this.sinkCapability.promise;
                        }
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.ENQUEUE,
                          streamId,
                          chunk
                        }, transfers);
                      },
                      close: function close() {
                        if (this.isCancelled) {
                          return;
                        }
                        this.isCancelled = true;
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.CLOSE,
                          streamId
                        });
                        delete self2.streamSinks[streamId];
                      },
                      error: function error(reason) {
                        (0, _util.assert)(reason instanceof Error, "error must have a valid reason");
                        if (this.isCancelled) {
                          return;
                        }
                        this.isCancelled = true;
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.ERROR,
                          streamId,
                          reason: wrapReason(reason)
                        });
                      },
                      sinkCapability: (0, _util.createPromiseCapability)(),
                      onPull: null,
                      onCancel: null,
                      isCancelled: false,
                      desiredSize: data.desiredSize,
                      ready: null
                    };
                    streamSink.sinkCapability.resolve();
                    streamSink.ready = streamSink.sinkCapability.promise;
                    this.streamSinks[streamId] = streamSink;
                    new Promise(function(resolve) {
                      resolve(action(data.data, streamSink));
                    }).then(function() {
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        stream: StreamKind.START_COMPLETE,
                        streamId,
                        success: true
                      });
                    }, function(reason) {
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        stream: StreamKind.START_COMPLETE,
                        streamId,
                        reason: wrapReason(reason)
                      });
                    });
                  }
                }, {
                  key: "_processStreamMessage",
                  value: function _processStreamMessage(data) {
                    var streamId = data.streamId, sourceName = this.sourceName, targetName = data.sourceName, comObj = this.comObj;
                    var streamController = this.streamControllers[streamId], streamSink = this.streamSinks[streamId];
                    switch (data.stream) {
                      case StreamKind.START_COMPLETE:
                        if (data.success) {
                          streamController.startCall.resolve();
                        } else {
                          streamController.startCall.reject(wrapReason(data.reason));
                        }
                        break;
                      case StreamKind.PULL_COMPLETE:
                        if (data.success) {
                          streamController.pullCall.resolve();
                        } else {
                          streamController.pullCall.reject(wrapReason(data.reason));
                        }
                        break;
                      case StreamKind.PULL:
                        if (!streamSink) {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.PULL_COMPLETE,
                            streamId,
                            success: true
                          });
                          break;
                        }
                        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {
                          streamSink.sinkCapability.resolve();
                        }
                        streamSink.desiredSize = data.desiredSize;
                        new Promise(function(resolve) {
                          resolve(streamSink.onPull && streamSink.onPull());
                        }).then(function() {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.PULL_COMPLETE,
                            streamId,
                            success: true
                          });
                        }, function(reason) {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.PULL_COMPLETE,
                            streamId,
                            reason: wrapReason(reason)
                          });
                        });
                        break;
                      case StreamKind.ENQUEUE:
                        (0, _util.assert)(streamController, "enqueue should have stream controller");
                        if (streamController.isClosed) {
                          break;
                        }
                        streamController.controller.enqueue(data.chunk);
                        break;
                      case StreamKind.CLOSE:
                        (0, _util.assert)(streamController, "close should have stream controller");
                        if (streamController.isClosed) {
                          break;
                        }
                        streamController.isClosed = true;
                        streamController.controller.close();
                        this._deleteStreamController(streamController, streamId);
                        break;
                      case StreamKind.ERROR:
                        (0, _util.assert)(streamController, "error should have stream controller");
                        streamController.controller.error(wrapReason(data.reason));
                        this._deleteStreamController(streamController, streamId);
                        break;
                      case StreamKind.CANCEL_COMPLETE:
                        if (data.success) {
                          streamController.cancelCall.resolve();
                        } else {
                          streamController.cancelCall.reject(wrapReason(data.reason));
                        }
                        this._deleteStreamController(streamController, streamId);
                        break;
                      case StreamKind.CANCEL:
                        if (!streamSink) {
                          break;
                        }
                        new Promise(function(resolve) {
                          resolve(streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason)));
                        }).then(function() {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.CANCEL_COMPLETE,
                            streamId,
                            success: true
                          });
                        }, function(reason) {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.CANCEL_COMPLETE,
                            streamId,
                            reason: wrapReason(reason)
                          });
                        });
                        streamSink.sinkCapability.reject(wrapReason(data.reason));
                        streamSink.isCancelled = true;
                        delete this.streamSinks[streamId];
                        break;
                      default:
                        throw new Error("Unexpected stream case");
                    }
                  }
                }, {
                  key: "_deleteStreamController",
                  value: function() {
                    var _deleteStreamController2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee(streamController, streamId) {
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.next = 2;
                              return Promise.allSettled([streamController.startCall && streamController.startCall.promise, streamController.pullCall && streamController.pullCall.promise, streamController.cancelCall && streamController.cancelCall.promise]);
                            case 2:
                              delete this.streamControllers[streamId];
                            case 3:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));
                    function _deleteStreamController(_x, _x2) {
                      return _deleteStreamController2.apply(this, arguments);
                    }
                    return _deleteStreamController;
                  }()
                }, {
                  key: "destroy",
                  value: function destroy() {
                    this.comObj.removeEventListener("message", this._onComObjOnMessage);
                  }
                }]);
                return MessageHandler2;
              }();
              exports2.MessageHandler = MessageHandler;
            },
            (__unused_webpack_module, exports2, __w_pdfjs_require__2) => {
              "use strict";
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              exports2.PDFWorkerStream = void 0;
              var _regenerator = _interopRequireDefault(__w_pdfjs_require__2(2));
              var _util = __w_pdfjs_require__2(4);
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { "default": obj };
              }
              function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                  var info = gen[key](arg);
                  var value = info.value;
                } catch (error) {
                  reject(error);
                  return;
                }
                if (info.done) {
                  resolve(value);
                } else {
                  Promise.resolve(value).then(_next, _throw);
                }
              }
              function _asyncToGenerator(fn) {
                return function() {
                  var self2 = this, args = arguments;
                  return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                      asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(void 0);
                  });
                };
              }
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (!it) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = it.call(o);
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it["return"] != null)
                      it["return"]();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var PDFWorkerStream = /* @__PURE__ */ function() {
                function PDFWorkerStream2(msgHandler) {
                  _classCallCheck(this, PDFWorkerStream2);
                  this._msgHandler = msgHandler;
                  this._contentLength = null;
                  this._fullRequestReader = null;
                  this._rangeRequestReaders = [];
                }
                _createClass(PDFWorkerStream2, [{
                  key: "getFullReader",
                  value: function getFullReader() {
                    (0, _util.assert)(!this._fullRequestReader, "PDFWorkerStream.getFullReader can only be called once.");
                    this._fullRequestReader = new PDFWorkerStreamReader(this._msgHandler);
                    return this._fullRequestReader;
                  }
                }, {
                  key: "getRangeReader",
                  value: function getRangeReader(begin, end) {
                    var reader = new PDFWorkerStreamRangeReader(begin, end, this._msgHandler);
                    this._rangeRequestReaders.push(reader);
                    return reader;
                  }
                }, {
                  key: "cancelAllRequests",
                  value: function cancelAllRequests(reason) {
                    if (this._fullRequestReader) {
                      this._fullRequestReader.cancel(reason);
                    }
                    var _iterator = _createForOfIteratorHelper(this._rangeRequestReaders.slice(0)), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var reader = _step.value;
                        reader.cancel(reason);
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                  }
                }]);
                return PDFWorkerStream2;
              }();
              exports2.PDFWorkerStream = PDFWorkerStream;
              var PDFWorkerStreamReader = /* @__PURE__ */ function() {
                function PDFWorkerStreamReader2(msgHandler) {
                  var _this = this;
                  _classCallCheck(this, PDFWorkerStreamReader2);
                  this._msgHandler = msgHandler;
                  this.onProgress = null;
                  this._contentLength = null;
                  this._isRangeSupported = false;
                  this._isStreamingSupported = false;
                  var readableStream = this._msgHandler.sendWithStream("GetReader");
                  this._reader = readableStream.getReader();
                  this._headersReady = this._msgHandler.sendWithPromise("ReaderHeadersReady").then(function(data) {
                    _this._isStreamingSupported = data.isStreamingSupported;
                    _this._isRangeSupported = data.isRangeSupported;
                    _this._contentLength = data.contentLength;
                  });
                }
                _createClass(PDFWorkerStreamReader2, [{
                  key: "headersReady",
                  get: function get() {
                    return this._headersReady;
                  }
                }, {
                  key: "contentLength",
                  get: function get() {
                    return this._contentLength;
                  }
                }, {
                  key: "isStreamingSupported",
                  get: function get() {
                    return this._isStreamingSupported;
                  }
                }, {
                  key: "isRangeSupported",
                  get: function get() {
                    return this._isRangeSupported;
                  }
                }, {
                  key: "read",
                  value: function() {
                    var _read = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee() {
                      var _yield$this$_reader$r, value, done;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.next = 2;
                              return this._reader.read();
                            case 2:
                              _yield$this$_reader$r = _context.sent;
                              value = _yield$this$_reader$r.value;
                              done = _yield$this$_reader$r.done;
                              if (!done) {
                                _context.next = 7;
                                break;
                              }
                              return _context.abrupt("return", {
                                value: void 0,
                                done: true
                              });
                            case 7:
                              return _context.abrupt("return", {
                                value: value.buffer,
                                done: false
                              });
                            case 8:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this);
                    }));
                    function read() {
                      return _read.apply(this, arguments);
                    }
                    return read;
                  }()
                }, {
                  key: "cancel",
                  value: function cancel(reason) {
                    this._reader.cancel(reason);
                  }
                }]);
                return PDFWorkerStreamReader2;
              }();
              var PDFWorkerStreamRangeReader = /* @__PURE__ */ function() {
                function PDFWorkerStreamRangeReader2(begin, end, msgHandler) {
                  _classCallCheck(this, PDFWorkerStreamRangeReader2);
                  this._msgHandler = msgHandler;
                  this.onProgress = null;
                  var readableStream = this._msgHandler.sendWithStream("GetRangeReader", {
                    begin,
                    end
                  });
                  this._reader = readableStream.getReader();
                }
                _createClass(PDFWorkerStreamRangeReader2, [{
                  key: "isStreamingSupported",
                  get: function get() {
                    return false;
                  }
                }, {
                  key: "read",
                  value: function() {
                    var _read2 = _asyncToGenerator(/* @__PURE__ */ _regenerator["default"].mark(function _callee2() {
                      var _yield$this$_reader$r2, value, done;
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return this._reader.read();
                            case 2:
                              _yield$this$_reader$r2 = _context2.sent;
                              value = _yield$this$_reader$r2.value;
                              done = _yield$this$_reader$r2.done;
                              if (!done) {
                                _context2.next = 7;
                                break;
                              }
                              return _context2.abrupt("return", {
                                value: void 0,
                                done: true
                              });
                            case 7:
                              return _context2.abrupt("return", {
                                value: value.buffer,
                                done: false
                              });
                            case 8:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2, this);
                    }));
                    function read() {
                      return _read2.apply(this, arguments);
                    }
                    return read;
                  }()
                }, {
                  key: "cancel",
                  value: function cancel(reason) {
                    this._reader.cancel(reason);
                  }
                }]);
                return PDFWorkerStreamRangeReader2;
              }();
            }
          ];
          var __webpack_module_cache__ = {};
          function __w_pdfjs_require__(moduleId) {
            var cachedModule = __webpack_module_cache__[moduleId];
            if (cachedModule !== void 0) {
              return cachedModule.exports;
            }
            var module2 = __webpack_module_cache__[moduleId] = {
              id: moduleId,
              loaded: false,
              exports: {}
            };
            __webpack_modules__[moduleId].call(module2.exports, module2, module2.exports, __w_pdfjs_require__);
            module2.loaded = true;
            return module2.exports;
          }
          (() => {
            __w_pdfjs_require__.d = (exports2, definition) => {
              for (var key in definition) {
                if (__w_pdfjs_require__.o(definition, key) && !__w_pdfjs_require__.o(exports2, key)) {
                  Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                }
              }
            };
          })();
          (() => {
            __w_pdfjs_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
          })();
          (() => {
            __w_pdfjs_require__.r = (exports2) => {
              if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
              }
              Object.defineProperty(exports2, "__esModule", { value: true });
            };
          })();
          (() => {
            __w_pdfjs_require__.nmd = (module2) => {
              module2.paths = [];
              if (!module2.children)
                module2.children = [];
              return module2;
            };
          })();
          var __webpack_exports__ = {};
          (() => {
            "use strict";
            var exports2 = __webpack_exports__;
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            Object.defineProperty(exports2, "WorkerMessageHandler", {
              enumerable: true,
              get: function get() {
                return _worker.WorkerMessageHandler;
              }
            });
            var _worker = __w_pdfjs_require__(1);
            var pdfjsVersion = "2.12.313";
            var pdfjsBuild = "a2ae56f39";
          })();
          return __webpack_exports__;
        })();
      });
    }
  });

  // <stdin>
  var import_pdf_worker = __toESM(require_pdf_worker());
})();
