<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Phelipe Teles</title><link>https://phelipetls.github.io/posts/</link><description>Recent content in Posts on Phelipe Teles</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://phelipetls.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Git worktrees are great for code reviews</title><link>https://phelipetls.github.io/posts/git-worktrees-are-great-for-code-reviews/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/git-worktrees-are-great-for-code-reviews/</guid><description>&lt;p>At first, I didn&amp;rsquo;t understand how to use
&lt;a
href="https://git-scm.com/docs/git-worktree"
rel="external"
>git
worktrees&lt;span
class="ml-1 [&amp;_svg]:inline-block [&amp;_svg]:h-[1em] [&amp;_svg]:w-[1em] [&amp;_svg]:align-text-top"
>&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link">&lt;path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6">&lt;/path>&lt;polyline points="15 3 21 3 21 9">&lt;/polyline>&lt;line x1="10" y1="14" x2="21" y2="3">&lt;/line>&lt;/svg>&lt;/span>&lt;/a>, but now I find myself using
it more and more for code reviews.&lt;/p></description></item><item><title>Template String Converter in Neovim with Treesitter</title><link>https://phelipetls.github.io/posts/template-string-converter-with-neovim-treesitter/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/template-string-converter-with-neovim-treesitter/</guid><description>&lt;p>In this blog post, we&amp;rsquo;ll see how to use treesitter in neovim to automatically
convert a JavaScript string into a template string if it contains &lt;code>${&lt;/code>.&lt;/p></description></item><item><title>Ergonomic mappings for code formatting in Vim</title><link>https://phelipetls.github.io/posts/code-formatting-vim/</link><pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/code-formatting-vim/</guid><description>&lt;p>Vim allows you to format text with an arbitrary external program with the &lt;code>:h gq&lt;/code> operator. For example, say you want to format with &lt;code>prettier&lt;/code>, you just
need to set &lt;code>:h 'formatprg'&lt;/code> option to &lt;code>npx prettier --stdin-filepath %&lt;/code>, and
&lt;code>gqip&lt;/code> will format the paragraph with it (it also works if you select the text
first and then use &lt;code>gq&lt;/code> &amp;ndash; &lt;code>vipgq&lt;/code>).&lt;/p></description></item><item><title>An apparent React bug</title><link>https://phelipetls.github.io/posts/surprising-react-bug/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/surprising-react-bug/</guid><description>&lt;p>The &lt;code>details&lt;/code> HTML element doesn&amp;rsquo;t seem to work well when used as a controlled
component in React, as pointed out in
&lt;a
href="https://github.com/facebook/react/issues/15486"
rel="external"
>this open GitHub
issue&lt;span
class="ml-1 [&amp;_svg]:inline-block [&amp;_svg]:h-[1em] [&amp;_svg]:w-[1em] [&amp;_svg]:align-text-top"
>&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link">&lt;path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6">&lt;/path>&lt;polyline points="15 3 21 3 21 9">&lt;/polyline>&lt;line x1="10" y1="14" x2="21" y2="3">&lt;/line>&lt;/svg>&lt;/span>&lt;/a>. At first, I thought it
was a React bug, but at the end of my investigation while writing this, I
concluded it&amp;rsquo;s simply a mistake &amp;ndash; not having a single source of truth for
state.&lt;/p></description></item><item><title>How not to write forms with React</title><link>https://phelipetls.github.io/posts/how-not-to-write-forms-in-react/</link><pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/how-not-to-write-forms-in-react/</guid><description>Forms are easy to get wrong with React because we can achieve their goal, which is to make a network request when on submission, with any arbitrary HTML and JavaScript.</description></item><item><title>Coping with a work-issued Windows laptop</title><link>https://phelipetls.github.io/posts/windows-laptop/</link><pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/windows-laptop/</guid><description>I recently switched job and was given a Windows laptop, which is fine but not ideal to me, since I&amp;rsquo;ve prefer to work with Unix-like environment and have invested a lot more time into perfecting those.</description></item><item><title>My favorite custom git commands</title><link>https://phelipetls.github.io/posts/favorite-custom-git-commands/</link><pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/favorite-custom-git-commands/</guid><description>&lt;p>In this post I want to share my favorite custom git commands &amp;ndash; from aliases to
shell scripts.&lt;/p></description></item><item><title>Bash for JavaScript developers</title><link>https://phelipetls.github.io/posts/bash-for-javascript-developers/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/bash-for-javascript-developers/</guid><description>If there is one technology every developer has to deal with, no matter the stack, is the shell. But most do not bother learning it, so in this post we&amp;rsquo;ll dive deep into one of the most common shells, Bash, by comparing it with a more familiar programming language to most developers, JavaScript.</description></item><item><title>Ansible for dotfiles: the introduction I wish I've had</title><link>https://phelipetls.github.io/posts/introduction-to-ansible/</link><pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/introduction-to-ansible/</guid><description>A dotfiles repo will help you manage configuration over time and synchronize them across machines, but it won&amp;rsquo;t help you with your dependencies &amp;ndash; you still have to install git, tmux, vim, etc.</description></item><item><title>Discovering Tailscale</title><link>https://phelipetls.github.io/posts/discovering-tailscale/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/discovering-tailscale/</guid><description>I have recently started playing with Tailscale, and after a rough start I think I got the hang of it and wanna share how it improved some of my workflows like testing my blog on my Android device or connecting to it with adb without a USB cable.</description></item><item><title>Moving away from tiling window managers</title><link>https://phelipetls.github.io/posts/moving-away-from-tiling-window-managers/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/moving-away-from-tiling-window-managers/</guid><description>This is the story about how I&amp;rsquo;m moving away from a tiling window manager, dwm, to a full-blown desktop environment, GNOME.</description></item><item><title>Demystifying git rebase</title><link>https://phelipetls.github.io/posts/demystifying-git-rebase/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/demystifying-git-rebase/</guid><description>git rebase is a command for rewriting history, which sure seems scary at first but you&amp;rsquo;ll learn to love it.</description></item><item><title>Using Storybook and MSW in React Native</title><link>https://phelipetls.github.io/posts/using-storybook-and-msw-in-react-native/</link><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/using-storybook-and-msw-in-react-native/</guid><description>The integration between Storybook and Mock Service Worker enables you to develop components isolated from your app and your back-end server.</description></item><item><title>adb: a must-know CLI tool for Android development</title><link>https://phelipetls.github.io/posts/adb-a-must-know-cli-tool-for-android-development/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/adb-a-must-know-cli-tool-for-android-development/</guid><description>adb is a CLI that lets you control your Android device from your computer. In this post I want to share its features that made me enjoy more mobile development.</description></item><item><title>Node.js one-liner to read JSON files</title><link>https://phelipetls.github.io/posts/nodejs-one-liner-to-read-json-files/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/nodejs-one-liner-to-read-json-files/</guid><description>How to use Node instead of jq for trivial property accessors.</description></item><item><title>Improving the Android Studio experience in dwm</title><link>https://phelipetls.github.io/posts/improving-the-android-studio-experience-in-dwm/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/improving-the-android-studio-experience-in-dwm/</guid><description>In this post, I want to share how I started to change dwm source code in order to improve my experience with Android Emulator.</description></item><item><title>Making Vim understand TypeScript path mapping</title><link>https://phelipetls.github.io/posts/making-vim-understand-typescript-path-mapping/</link><pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/making-vim-understand-typescript-path-mapping/</guid><description>&lt;p>Vim has this well-known feature of opening the path under cursor with
&lt;a
href="http://vimdoc.sourceforge.net/htmldoc/editing.html#gf"
rel="external"
>&lt;code>:h gf&lt;/code>&lt;span
class="ml-1 [&amp;_svg]:inline-block [&amp;_svg]:h-[1em] [&amp;_svg]:w-[1em] [&amp;_svg]:align-text-top"
>&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link">&lt;path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6">&lt;/path>&lt;polyline points="15 3 21 3 21 9">&lt;/polyline>&lt;line x1="10" y1="14" x2="21" y2="3">&lt;/line>&lt;/svg>&lt;/span>&lt;/a>.
&lt;a
href="https://vim.fandom.com/wiki/Open_file_under_cursor"
rel="external"
>This article
explains well how this
works&lt;span
class="ml-1 [&amp;_svg]:inline-block [&amp;_svg]:h-[1em] [&amp;_svg]:w-[1em] [&amp;_svg]:align-text-top"
>&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link">&lt;path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6">&lt;/path>&lt;polyline points="15 3 21 3 21 9">&lt;/polyline>&lt;line x1="10" y1="14" x2="21" y2="3">&lt;/line>&lt;/svg>&lt;/span>&lt;/a>.&lt;/p></description></item><item><title>Automating SVG to JSX conversion with svgr</title><link>https://phelipetls.github.io/posts/automating-svg-to-jsx-conversion-with-svgr/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/automating-svg-to-jsx-conversion-with-svgr/</guid><description>Transforming SVG files into JSX is boring and prone to error. We can handle it better with svgr. Its defaults are good enough, but you&amp;rsquo;ll likely need to customize it for your needs, which is made possible by writing a template.</description></item><item><title>Extending Vim with ripgrep</title><link>https://phelipetls.github.io/posts/extending-vim-with-ripgrep/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/extending-vim-with-ripgrep/</guid><description>Take full advantage of Vim&amp;rsquo;s shel integration and the quick fix list.</description></item><item><title>Implementing dark mode for static websites</title><link>https://phelipetls.github.io/posts/implementing-dark-mode-for-static-websites/</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/implementing-dark-mode-for-static-websites/</guid><description>From the basic to the hacky stuff you should do to deliver the best experience.</description></item><item><title>My experience testing React applications</title><link>https://phelipetls.github.io/posts/my-experience-testing-react-applications/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/my-experience-testing-react-applications/</guid><description>Thoughts about writing integration tests for React apps, from
react-testing-library to Cypress.</description></item><item><title>Migrating from create-react-app to Vite</title><link>https://phelipetls.github.io/posts/migrating-from-cra-to-vite/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/migrating-from-cra-to-vite/</guid><description>How and why to migrate a CRA project to Vite.</description></item><item><title>Configuring eslint to work with Neovim LSP</title><link>https://phelipetls.github.io/posts/configuring-eslint-to-work-with-neovim-lsp/</link><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/configuring-eslint-to-work-with-neovim-lsp/</guid><description>The way we&amp;rsquo;ll get this to work is by using a generic Language Server called efm-langserver, which is written in Go.</description></item><item><title>Python f-strings syntax highlighting in Vim</title><link>https://phelipetls.github.io/posts/f-strings-syntax-highlighting-in-vim/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/f-strings-syntax-highlighting-in-vim/</guid><description>&lt;p>Getting Python syntax highlighting to work in Vim requires very little code, to
my surprise.&lt;/p></description></item><item><title>Deploying a Flask app on a Heroku free dyno</title><link>https://phelipetls.github.io/posts/deploying-flask-app-on-heroku/</link><pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/deploying-flask-app-on-heroku/</guid><description>The typical production-grade server used to deploy Python web apps, gunicorn, did not quite work for me. This post is the story of how I got it working.</description></item><item><title>A Vim errorformat for pytest</title><link>https://phelipetls.github.io/posts/vim-errorformat-for-pytest/</link><pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/vim-errorformat-for-pytest/</guid><description>&lt;blockquote>
&lt;p>Ah, errorformat, the feature everybody loves to hate. :) &amp;ndash; lcd047, on
&lt;a
href="https://stackoverflow.com/a/29102995"
rel="external"
>Stack Overflow&lt;span
class="ml-1 [&amp;_svg]:inline-block [&amp;_svg]:h-[1em] [&amp;_svg]:w-[1em] [&amp;_svg]:align-text-top"
>&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link">&lt;path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6">&lt;/path>&lt;polyline points="15 3 21 3 21 9">&lt;/polyline>&lt;line x1="10" y1="14" x2="21" y2="3">&lt;/line>&lt;/svg>&lt;/span>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>I really like Vim&amp;rsquo;s &lt;code>:h errorformat&lt;/code> feature, but only when I manage to get it
right. Until then, I&amp;rsquo;m sure it will frustrate me more than once. It&amp;rsquo;s very
awkward to write one if the program&amp;rsquo;s output you&amp;rsquo;re trying to capture is not
trivial (e.g., &lt;code>LaTeX&lt;/code>).&lt;/p></description></item><item><title>Asynchronous :make in Neovim with Lua</title><link>https://phelipetls.github.io/posts/async-make-in-nvim-with-lua/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/async-make-in-nvim-with-lua/</guid><description>The :make command in Vim is quite useful, it runs whatever program is under the makeprg option and returns its output in the quickfix list, where you&amp;rsquo;ll be able to hop through the errors if they were parsed correctly by the errorformat option.</description></item><item><title>Getting Salesforce reports with VBA</title><link>https://phelipetls.github.io/posts/getting-salesforce-reports-with-vba/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://phelipetls.github.io/posts/getting-salesforce-reports-with-vba/</guid><description>For those who find themselves in an environment which heavily relies on Excel and Salesforce, you may be interested in a way to automate the process of downloading reports from inside Excel with VBA only.</description></item></channel></rss>